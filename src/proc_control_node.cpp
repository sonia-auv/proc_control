//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: proc_control_node.cpp
//
// Code generated for Simulink model 'proc_control_node'.
//
// Model version                  : 2.49
// Simulink Coder version         : 9.6 (R2021b) 14-May-2021
// C/C++ source code generated on : Tue Feb  8 23:25:43 2022
//
// Target selection: ert.tlc
// Embedded hardware selection: ARM Compatible->ARM 64-bit (LLP64)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "proc_control_node.h"
#include "proc_control_node_private.h"

// Named constants for MATLAB Function: '<S230>/FixedHorizonOptimizer'
const int32_T proc_control_node_nu{ 8 };

static void rate_scheduler(proc_control_nodeModelClass::
  RT_MODEL_proc_control_node_T *const proc_control_node_M);
uint32_T plook_u32d_binckpang(real_T u, const real_T bp[], uint32_T maxIndex,
  uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'on'

  if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32d_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (bp[bpIndex + 1U] - u <= u - bp[bpIndex])) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T plook_u32u16_binckpan(uint16_T u, const uint16_T bp[], uint32_T
  maxIndex, uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Extrapolation method: 'Clip'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u <= bp[0U]) {
    bpIndex = 0U;
  } else if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32u16_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (static_cast<uint16_T>(static_cast<uint32_T>
          (bp[bpIndex + 1U]) - u) <= static_cast<uint16_T>(static_cast<uint32_T>
          (u) - bp[bpIndex]))) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T binsearch_u32d_prevIdx(real_T u, const real_T bp[], uint32_T startIndex,
  uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T found;
  uint32_T iLeft;
  uint32_T iRght;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = ((bpIndex + iLeft) - 1U) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = ((bpIndex + iRght) + 1U) >> 1U;
    }
  }

  return bpIndex;
}

uint32_T binsearch_u32u16_prevIdx(uint16_T u, const uint16_T bp[], uint32_T
  startIndex, uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T found;
  uint32_T iLeft;
  uint32_T iRght;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = ((bpIndex + iLeft) - 1U) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = ((bpIndex + iRght) + 1U) >> 1U;
    }
  }

  return bpIndex;
}

//
//         This function updates active task flag for each subrate.
//         The function is called at model base rate, hence the
//         generated code self-manages all its subrates.
//
static void rate_scheduler(proc_control_nodeModelClass::
  RT_MODEL_proc_control_node_T *const proc_control_node_M)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (proc_control_node_M->Timing.TaskCounters.TID[2])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[2]) > 1) {// Sample time: [0.04s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[2] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[3])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[3]) > 4) {// Sample time: [0.1s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[3] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[4])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[4]) > 9) {// Sample time: [0.2s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[4] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[5])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[5]) > 49) {// Sample time: [1.0s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[5] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[6])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[6]) > 99) {// Sample time: [2.0s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[6] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[7])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[7]) > 249) {// Sample time: [5.0s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[7] = 0;
  }
}

//
// This function updates continuous states using the ODE3 fixed-step
// solver algorithm
//
void proc_control_nodeModelClass::rt_ertODEUpdateContinuousStates(RTWSolverInfo *
  si )
{
  // Solver Matrices
  static const real_T rt_ODE3_A[3]{
    1.0/2.0, 3.0/4.0, 1.0
  };

  static const real_T rt_ODE3_B[3][3]{
    { 1.0/2.0, 0.0, 0.0 },

    { 0.0, 3.0/4.0, 0.0 },

    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }
  };

  time_T t { rtsiGetT(si) };

  time_T tnew { rtsiGetSolverStopTime(si) };

  time_T h { rtsiGetStepSize(si) };

  real_T *x { rtsiGetContStates(si) };

  ODE3_IntgData *id { static_cast<ODE3_IntgData *>(rtsiGetSolverData(si)) };

  real_T *y { id->y };

  real_T *f0 { id->f[0] };

  real_T *f1 { id->f[1] };

  real_T *f2 { id->f[2] };

  real_T hB[3];
  int_T i;
  int_T nXc { 21 };

  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);

  // Save the state values at time t in y, we'll use x as ynew.
  (void) std::memcpy(y, x,
                     static_cast<uint_T>(nXc)*sizeof(real_T));

  // Assumes that rtsiSetT and ModelOutputs are up-to-date
  // f0 = f(t,y)
  rtsiSetdX(si, f0);
  proc_control_node_derivatives();

  // f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*));
  hB[0] = h * rt_ODE3_B[0][0];
  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0]);
  }

  rtsiSetT(si, t + h*rt_ODE3_A[0]);
  rtsiSetdX(si, f1);
  this->step();
  proc_control_node_derivatives();

  // f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*));
  for (i = 0; i <= 1; i++) {
    hB[i] = h * rt_ODE3_B[1][i];
  }

  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);
  }

  rtsiSetT(si, t + h*rt_ODE3_A[1]);
  rtsiSetdX(si, f2);
  this->step();
  proc_control_node_derivatives();

  // tnew = t + hA(3);
  // ynew = y + f*hB(:,3);
  for (i = 0; i <= 2; i++) {
    hB[i] = h * rt_ODE3_B[2][i];
  }

  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);
  }

  rtsiSetT(si, tnew);
  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);
}

// Function for MATLAB Function: '<S350>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_e(int32_T n, const
  real_T x[198], int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_node_B.scale_k = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_k) {
          real_T t;
          t = proc_control_node_B.scale_k / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_k = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_node_B.scale_k;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_k * std::sqrt(y);
    }
  }

  return y;
}

real_T rt_hypotd_snf(real_T u0, real_T u1)
{
  real_T a;
  real_T y;
  a = std::abs(u0);
  y = std::abs(u1);
  if (a < y) {
    a /= y;
    y *= std::sqrt(a * a + 1.0);
  } else if (a > y) {
    y /= a;
    y = std::sqrt(y * y + 1.0) * a;
  } else if (!std::isnan(y)) {
    y = a * 1.4142135623730951;
  }

  return y;
}

// Function for MATLAB Function: '<S350>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_k(int32_T m, int32_T n,
  const real_T A[198], int32_T ia0, const real_T x[198], int32_T ix0, real_T y[9])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 22 + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 22) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_node_B.c_d0 = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_d0 += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_d0;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S350>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_k(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[9], real_T A[198], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_node_B.temp_ly = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_ly;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 22;
    }
  }
}

// Function for MATLAB Function: '<S350>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor(const real_T A[117],
  const real_T S[169], const real_T Ns[81], real_T b_S[81])
{
  int32_T coltop;
  int32_T knt;
  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g < 9;
       proc_control_node_B.j_g++) {
    proc_control_node_B.coffset_h = proc_control_node_B.j_g * 13;
    for (knt = 0; knt < 13; knt++) {
      proc_control_node_B.aoffset_p = knt * 13;
      proc_control_node_B.s_ph = 0.0;
      for (coltop = 0; coltop < 13; coltop++) {
        proc_control_node_B.s_ph += A[coltop * 9 + proc_control_node_B.j_g] *
          S[proc_control_node_B.aoffset_p + coltop];
      }

      proc_control_node_B.y_a5[proc_control_node_B.coffset_h + knt] =
        proc_control_node_B.s_ph;
      proc_control_node_B.b_A_p4[knt + 22 * proc_control_node_B.j_g] =
        proc_control_node_B.y_a5[13 * proc_control_node_B.j_g + knt];
    }
  }

  knt = 0;
  for (coltop = 0; coltop < 9; coltop++) {
    proc_control_node_B.j_g = 0;
    for (proc_control_node_B.coffset_h = 0; proc_control_node_B.coffset_h < 9;
         proc_control_node_B.coffset_h++) {
      proc_control_node_B.b_A_p4[(proc_control_node_B.coffset_h + knt) + 13] =
        Ns[proc_control_node_B.j_g + coltop];
      proc_control_node_B.j_g += 9;
    }

    proc_control_node_B.work_l[coltop] = 0.0;
    knt += 22;
  }

  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g < 9;
       proc_control_node_B.j_g++) {
    proc_control_node_B.coffset_h = proc_control_node_B.j_g * 22 +
      proc_control_node_B.j_g;
    proc_control_node_B.atmp_p =
      proc_control_node_B.b_A_p4[proc_control_node_B.coffset_h];
    proc_control_node_B.tau_l[proc_control_node_B.j_g] = 0.0;
    proc_control_node_B.s_ph = proc_control_node_xnrm2_e(21 -
      proc_control_node_B.j_g, proc_control_node_B.b_A_p4,
      proc_control_node_B.coffset_h + 2);
    if (proc_control_node_B.s_ph != 0.0) {
      proc_control_node_B.s_ph = rt_hypotd_snf
        (proc_control_node_B.b_A_p4[proc_control_node_B.coffset_h],
         proc_control_node_B.s_ph);
      if (proc_control_node_B.b_A_p4[proc_control_node_B.coffset_h] >= 0.0) {
        proc_control_node_B.s_ph = -proc_control_node_B.s_ph;
      }

      if (std::abs(proc_control_node_B.s_ph) < 1.0020841800044864E-292) {
        knt = -1;
        proc_control_node_B.aoffset_p = (proc_control_node_B.coffset_h -
          proc_control_node_B.j_g) + 22;
        do {
          knt++;
          for (coltop = proc_control_node_B.coffset_h + 1; coltop <
               proc_control_node_B.aoffset_p; coltop++) {
            proc_control_node_B.b_A_p4[coltop] *= 9.9792015476736E+291;
          }

          proc_control_node_B.s_ph *= 9.9792015476736E+291;
          proc_control_node_B.atmp_p *= 9.9792015476736E+291;
        } while (!(std::abs(proc_control_node_B.s_ph) >= 1.0020841800044864E-292));

        proc_control_node_B.s_ph = rt_hypotd_snf(proc_control_node_B.atmp_p,
          proc_control_node_xnrm2_e(21 - proc_control_node_B.j_g,
          proc_control_node_B.b_A_p4, proc_control_node_B.coffset_h + 2));
        if (proc_control_node_B.atmp_p >= 0.0) {
          proc_control_node_B.s_ph = -proc_control_node_B.s_ph;
        }

        proc_control_node_B.tau_l[proc_control_node_B.j_g] =
          (proc_control_node_B.s_ph - proc_control_node_B.atmp_p) /
          proc_control_node_B.s_ph;
        proc_control_node_B.atmp_p = 1.0 / (proc_control_node_B.atmp_p -
          proc_control_node_B.s_ph);
        for (coltop = proc_control_node_B.coffset_h + 1; coltop <
             proc_control_node_B.aoffset_p; coltop++) {
          proc_control_node_B.b_A_p4[coltop] *= proc_control_node_B.atmp_p;
        }

        proc_control_node_B.aoffset_p = 0;
        while (proc_control_node_B.aoffset_p <= knt) {
          proc_control_node_B.s_ph *= 1.0020841800044864E-292;
          proc_control_node_B.aoffset_p++;
        }

        proc_control_node_B.atmp_p = proc_control_node_B.s_ph;
      } else {
        proc_control_node_B.tau_l[proc_control_node_B.j_g] =
          (proc_control_node_B.s_ph -
           proc_control_node_B.b_A_p4[proc_control_node_B.coffset_h]) /
          proc_control_node_B.s_ph;
        proc_control_node_B.atmp_p = 1.0 /
          (proc_control_node_B.b_A_p4[proc_control_node_B.coffset_h] -
           proc_control_node_B.s_ph);
        knt = (proc_control_node_B.coffset_h - proc_control_node_B.j_g) + 22;
        proc_control_node_B.aoffset_p = proc_control_node_B.coffset_h + 1;
        while (proc_control_node_B.aoffset_p + 1 <= knt) {
          proc_control_node_B.b_A_p4[proc_control_node_B.aoffset_p] *=
            proc_control_node_B.atmp_p;
          proc_control_node_B.aoffset_p++;
        }

        proc_control_node_B.atmp_p = proc_control_node_B.s_ph;
      }
    }

    proc_control_node_B.b_A_p4[proc_control_node_B.coffset_h] =
      proc_control_node_B.atmp_p;
    if (proc_control_node_B.j_g + 1 < 9) {
      proc_control_node_B.s_ph =
        proc_control_node_B.b_A_p4[proc_control_node_B.coffset_h];
      proc_control_node_B.b_A_p4[proc_control_node_B.coffset_h] = 1.0;
      if (proc_control_node_B.tau_l[proc_control_node_B.j_g] != 0.0) {
        boolean_T exitg2;
        knt = 22 - proc_control_node_B.j_g;
        proc_control_node_B.aoffset_p = (proc_control_node_B.coffset_h -
          proc_control_node_B.j_g) + 21;
        while ((knt > 0) &&
               (proc_control_node_B.b_A_p4[proc_control_node_B.aoffset_p] == 0.0))
        {
          knt--;
          proc_control_node_B.aoffset_p--;
        }

        proc_control_node_B.aoffset_p = 8 - proc_control_node_B.j_g;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.aoffset_p > 0)) {
          int32_T exitg1;
          int32_T ia;
          coltop = ((proc_control_node_B.aoffset_p - 1) * 22 +
                    proc_control_node_B.coffset_h) + 22;
          ia = coltop;
          do {
            exitg1 = 0;
            if (ia + 1 <= coltop + knt) {
              if (proc_control_node_B.b_A_p4[ia] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              proc_control_node_B.aoffset_p--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = 0;
        proc_control_node_B.aoffset_p = 0;
      }

      if (knt > 0) {
        proc_control_node_xgemv_k(knt, proc_control_node_B.aoffset_p,
          proc_control_node_B.b_A_p4, proc_control_node_B.coffset_h + 23,
          proc_control_node_B.b_A_p4, proc_control_node_B.coffset_h + 1,
          proc_control_node_B.work_l);
        proc_control_node_xgerc_k(knt, proc_control_node_B.aoffset_p,
          -proc_control_node_B.tau_l[proc_control_node_B.j_g],
          proc_control_node_B.coffset_h + 1, proc_control_node_B.work_l,
          proc_control_node_B.b_A_p4, proc_control_node_B.coffset_h + 23);
      }

      proc_control_node_B.b_A_p4[proc_control_node_B.coffset_h] =
        proc_control_node_B.s_ph;
    }
  }

  for (proc_control_node_B.j_g = 0; proc_control_node_B.j_g < 9;
       proc_control_node_B.j_g++) {
    proc_control_node_B.coffset_h = 0;
    while (proc_control_node_B.coffset_h <= proc_control_node_B.j_g) {
      proc_control_node_B.R[proc_control_node_B.coffset_h + 9 *
        proc_control_node_B.j_g] = proc_control_node_B.b_A_p4[22 *
        proc_control_node_B.j_g + proc_control_node_B.coffset_h];
      proc_control_node_B.coffset_h++;
    }

    proc_control_node_B.coffset_h = proc_control_node_B.j_g + 1;
    while (proc_control_node_B.coffset_h + 1 < 10) {
      proc_control_node_B.R[proc_control_node_B.coffset_h + 9 *
        proc_control_node_B.j_g] = 0.0;
      proc_control_node_B.coffset_h++;
    }
  }

  proc_control_node_B.j_g = 0;
  for (proc_control_node_B.coffset_h = 0; proc_control_node_B.coffset_h < 9;
       proc_control_node_B.coffset_h++) {
    knt = 0;
    for (coltop = 0; coltop < 9; coltop++) {
      b_S[coltop + proc_control_node_B.j_g] = proc_control_node_B.R[knt +
        proc_control_node_B.coffset_h];
      knt += 9;
    }

    proc_control_node_B.j_g += 9;
  }
}

// Function for MATLAB Function: '<S350>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_g(const real_T A[81],
  real_T B[117])
{
  for (int32_T j{0}; j < 13; j++) {
    int32_T jBcol;
    jBcol = 9 * j;
    for (int32_T k{0}; k < 9; k++) {
      real_T tmp_0;
      int32_T kAcol;
      int32_T tmp;
      kAcol = 9 * k;
      tmp = k + jBcol;
      tmp_0 = B[tmp];
      if (tmp_0 != 0.0) {
        B[tmp] = tmp_0 / A[k + kAcol];
        for (int32_T i{k + 2}; i < 10; i++) {
          int32_T tmp_1;
          tmp_1 = (i + jBcol) - 1;
          B[tmp_1] -= A[(i + kAcol) - 1] * B[tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S350>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_ga(const real_T A
  [81], real_T B[117])
{
  for (int32_T j{0}; j < 13; j++) {
    int32_T jBcol;
    jBcol = 9 * j;
    for (int32_T k{8}; k >= 0; k--) {
      real_T tmp_0;
      int32_T kAcol;
      int32_T tmp;
      kAcol = 9 * k;
      tmp = k + jBcol;
      tmp_0 = B[tmp];
      if (tmp_0 != 0.0) {
        B[tmp] = tmp_0 / A[k + kAcol];
        for (int32_T i{0}; i < k; i++) {
          int32_T tmp_1;
          tmp_1 = i + jBcol;
          B[tmp_1] -= A[i + kAcol] * B[tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S350>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_en(int32_T n, const
  real_T x[286], int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_node_B.scale_pk = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_pk) {
          real_T t;
          t = proc_control_node_B.scale_pk / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_pk = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_node_B.scale_pk;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_pk * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S350>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_kv(int32_T m, int32_T
  n, const real_T A[286], int32_T ia0, const real_T x[286], int32_T ix0, real_T
  y[13])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 22 + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 22) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_node_B.c_jo = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_jo += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_jo;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S350>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_kg(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[13], real_T A[286], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_node_B.temp_l = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_l;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 22;
    }
  }
}

// Function for MATLAB Function: '<S350>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor_a(const real_T A
  [169], real_T S[169], const real_T Ns[117])
{
  int32_T ii;
  int32_T knt;
  for (proc_control_node_B.j_o = 0; proc_control_node_B.j_o < 13;
       proc_control_node_B.j_o++) {
    proc_control_node_B.coffset_n = proc_control_node_B.j_o * 13;
    for (ii = 0; ii < 13; ii++) {
      proc_control_node_B.aoffset_i = ii * 13;
      proc_control_node_B.s_n = 0.0;
      for (knt = 0; knt < 13; knt++) {
        proc_control_node_B.s_n += A[knt * 13 + proc_control_node_B.j_o] *
          S[proc_control_node_B.aoffset_i + knt];
      }

      proc_control_node_B.y_d[proc_control_node_B.coffset_n + ii] =
        proc_control_node_B.s_n;
      proc_control_node_B.b_A_l[ii + 22 * proc_control_node_B.j_o] =
        proc_control_node_B.y_d[13 * proc_control_node_B.j_o + ii];
    }
  }

  proc_control_node_B.aoffset_i = 0;
  for (knt = 0; knt < 13; knt++) {
    ii = 0;
    for (proc_control_node_B.j_o = 0; proc_control_node_B.j_o < 9;
         proc_control_node_B.j_o++) {
      proc_control_node_B.b_A_l[(proc_control_node_B.j_o +
        proc_control_node_B.aoffset_i) + 13] = Ns[ii + knt];
      ii += 13;
    }

    proc_control_node_B.work_b[knt] = 0.0;
    proc_control_node_B.aoffset_i += 22;
  }

  for (proc_control_node_B.j_o = 0; proc_control_node_B.j_o < 13;
       proc_control_node_B.j_o++) {
    ii = proc_control_node_B.j_o * 22 + proc_control_node_B.j_o;
    proc_control_node_B.atmp_j = proc_control_node_B.b_A_l[ii];
    proc_control_node_B.tau_e[proc_control_node_B.j_o] = 0.0;
    proc_control_node_B.s_n = proc_control_node_xnrm2_en(21 -
      proc_control_node_B.j_o, proc_control_node_B.b_A_l, ii + 2);
    if (proc_control_node_B.s_n != 0.0) {
      proc_control_node_B.s_n = rt_hypotd_snf(proc_control_node_B.b_A_l[ii],
        proc_control_node_B.s_n);
      if (proc_control_node_B.b_A_l[ii] >= 0.0) {
        proc_control_node_B.s_n = -proc_control_node_B.s_n;
      }

      if (std::abs(proc_control_node_B.s_n) < 1.0020841800044864E-292) {
        knt = -1;
        proc_control_node_B.coffset_n = (ii - proc_control_node_B.j_o) + 22;
        do {
          knt++;
          proc_control_node_B.aoffset_i = ii + 1;
          while (proc_control_node_B.aoffset_i + 1 <=
                 proc_control_node_B.coffset_n) {
            proc_control_node_B.b_A_l[proc_control_node_B.aoffset_i] *=
              9.9792015476736E+291;
            proc_control_node_B.aoffset_i++;
          }

          proc_control_node_B.s_n *= 9.9792015476736E+291;
          proc_control_node_B.atmp_j *= 9.9792015476736E+291;
        } while (!(std::abs(proc_control_node_B.s_n) >= 1.0020841800044864E-292));

        proc_control_node_B.s_n = rt_hypotd_snf(proc_control_node_B.atmp_j,
          proc_control_node_xnrm2_en(21 - proc_control_node_B.j_o,
          proc_control_node_B.b_A_l, ii + 2));
        if (proc_control_node_B.atmp_j >= 0.0) {
          proc_control_node_B.s_n = -proc_control_node_B.s_n;
        }

        proc_control_node_B.tau_e[proc_control_node_B.j_o] =
          (proc_control_node_B.s_n - proc_control_node_B.atmp_j) /
          proc_control_node_B.s_n;
        proc_control_node_B.atmp_j = 1.0 / (proc_control_node_B.atmp_j -
          proc_control_node_B.s_n);
        proc_control_node_B.aoffset_i = ii + 1;
        while (proc_control_node_B.aoffset_i + 1 <=
               proc_control_node_B.coffset_n) {
          proc_control_node_B.b_A_l[proc_control_node_B.aoffset_i] *=
            proc_control_node_B.atmp_j;
          proc_control_node_B.aoffset_i++;
        }

        proc_control_node_B.coffset_n = 0;
        while (proc_control_node_B.coffset_n <= knt) {
          proc_control_node_B.s_n *= 1.0020841800044864E-292;
          proc_control_node_B.coffset_n++;
        }

        proc_control_node_B.atmp_j = proc_control_node_B.s_n;
      } else {
        proc_control_node_B.tau_e[proc_control_node_B.j_o] =
          (proc_control_node_B.s_n - proc_control_node_B.b_A_l[ii]) /
          proc_control_node_B.s_n;
        proc_control_node_B.atmp_j = 1.0 / (proc_control_node_B.b_A_l[ii] -
          proc_control_node_B.s_n);
        knt = (ii - proc_control_node_B.j_o) + 22;
        proc_control_node_B.coffset_n = ii + 1;
        while (proc_control_node_B.coffset_n + 1 <= knt) {
          proc_control_node_B.b_A_l[proc_control_node_B.coffset_n] *=
            proc_control_node_B.atmp_j;
          proc_control_node_B.coffset_n++;
        }

        proc_control_node_B.atmp_j = proc_control_node_B.s_n;
      }
    }

    proc_control_node_B.b_A_l[ii] = proc_control_node_B.atmp_j;
    if (proc_control_node_B.j_o + 1 < 13) {
      proc_control_node_B.s_n = proc_control_node_B.b_A_l[ii];
      proc_control_node_B.b_A_l[ii] = 1.0;
      if (proc_control_node_B.tau_e[proc_control_node_B.j_o] != 0.0) {
        boolean_T exitg2;
        knt = 22 - proc_control_node_B.j_o;
        proc_control_node_B.coffset_n = (ii - proc_control_node_B.j_o) + 21;
        while ((knt > 0) &&
               (proc_control_node_B.b_A_l[proc_control_node_B.coffset_n] == 0.0))
        {
          knt--;
          proc_control_node_B.coffset_n--;
        }

        proc_control_node_B.coffset_n = 12 - proc_control_node_B.j_o;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.coffset_n > 0)) {
          int32_T exitg1;
          int32_T ia;
          proc_control_node_B.aoffset_i = ((proc_control_node_B.coffset_n - 1) *
            22 + ii) + 22;
          ia = proc_control_node_B.aoffset_i;
          do {
            exitg1 = 0;
            if (ia + 1 <= proc_control_node_B.aoffset_i + knt) {
              if (proc_control_node_B.b_A_l[ia] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              proc_control_node_B.coffset_n--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = 0;
        proc_control_node_B.coffset_n = 0;
      }

      if (knt > 0) {
        proc_control_node_xgemv_kv(knt, proc_control_node_B.coffset_n,
          proc_control_node_B.b_A_l, ii + 23, proc_control_node_B.b_A_l, ii + 1,
          proc_control_node_B.work_b);
        proc_control_node_xgerc_kg(knt, proc_control_node_B.coffset_n,
          -proc_control_node_B.tau_e[proc_control_node_B.j_o], ii + 1,
          proc_control_node_B.work_b, proc_control_node_B.b_A_l, ii + 23);
      }

      proc_control_node_B.b_A_l[ii] = proc_control_node_B.s_n;
    }
  }

  for (proc_control_node_B.j_o = 0; proc_control_node_B.j_o < 13;
       proc_control_node_B.j_o++) {
    for (ii = 0; ii <= proc_control_node_B.j_o; ii++) {
      proc_control_node_B.y_d[ii + 13 * proc_control_node_B.j_o] =
        proc_control_node_B.b_A_l[22 * proc_control_node_B.j_o + ii];
    }

    for (ii = proc_control_node_B.j_o + 1; ii + 1 < 14; ii++) {
      proc_control_node_B.y_d[ii + 13 * proc_control_node_B.j_o] = 0.0;
    }
  }

  ii = 0;
  for (proc_control_node_B.j_o = 0; proc_control_node_B.j_o < 13;
       proc_control_node_B.j_o++) {
    proc_control_node_B.aoffset_i = 0;
    for (knt = 0; knt < 13; knt++) {
      S[knt + ii] = proc_control_node_B.y_d[proc_control_node_B.aoffset_i +
        proc_control_node_B.j_o];
      proc_control_node_B.aoffset_i += 13;
    }

    ii += 13;
  }
}

// Function for MATLAB Function: '<S351>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_k(int32_T n, const
  real_T x[48], int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_node_B.scale_b = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_node_B.absxk_o = std::abs(x[k - 1]);
        if (proc_control_node_B.absxk_o > proc_control_node_B.scale_b) {
          real_T t;
          t = proc_control_node_B.scale_b / proc_control_node_B.absxk_o;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_b = proc_control_node_B.absxk_o;
        } else {
          real_T t;
          t = proc_control_node_B.absxk_o / proc_control_node_B.scale_b;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_b * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S351>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_bs(int32_T m, int32_T
  n, const real_T A[48], int32_T ia0, const real_T x[48], int32_T ix0, real_T y
  [3])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = ((n - 1) << 4) + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 16) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_node_B.c_le = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_le += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_le;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S351>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_o(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[3], real_T A[48], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_node_B.temp_e = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_e;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 16;
    }
  }
}

// Function for MATLAB Function: '<S351>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor_l(const real_T A[39],
  const real_T S[169], const real_T Ns[9], real_T b_S[9])
{
  int32_T coltop;
  int32_T exitg1;
  int32_T j;
  int32_T knt;
  for (j = 0; j < 3; j++) {
    proc_control_node_B.coffset_f = j * 13;
    for (knt = 0; knt < 13; knt++) {
      proc_control_node_B.aoffset_k = knt * 13;
      proc_control_node_B.s_m = 0.0;
      for (coltop = 0; coltop < 13; coltop++) {
        proc_control_node_B.s_m += A[coltop * 3 + j] *
          S[proc_control_node_B.aoffset_k + coltop];
      }

      proc_control_node_B.y_dz[proc_control_node_B.coffset_f + knt] =
        proc_control_node_B.s_m;
      proc_control_node_B.b_A_j[knt + (j << 4)] = proc_control_node_B.y_dz[13 *
        j + knt];
    }

    knt = j << 4;
    proc_control_node_B.b_A_j[knt + 13] = Ns[j];
    proc_control_node_B.b_A_j[knt + 14] = Ns[j + 3];
    proc_control_node_B.b_A_j[knt + 15] = Ns[j + 6];
    proc_control_node_B.work_m[j] = 0.0;
  }

  proc_control_node_B.atmp_i = proc_control_node_B.b_A_j[0];
  proc_control_node_B.tau_idx_0 = 0.0;
  proc_control_node_B.s_m = proc_control_node_xnrm2_k(15,
    proc_control_node_B.b_A_j, 2);
  if (proc_control_node_B.s_m != 0.0) {
    proc_control_node_B.s_m = rt_hypotd_snf(proc_control_node_B.b_A_j[0],
      proc_control_node_B.s_m);
    if (proc_control_node_B.b_A_j[0] >= 0.0) {
      proc_control_node_B.s_m = -proc_control_node_B.s_m;
    }

    if (std::abs(proc_control_node_B.s_m) < 1.0020841800044864E-292) {
      knt = -1;
      do {
        knt++;
        for (coltop = 1; coltop < 16; coltop++) {
          proc_control_node_B.b_A_j[coltop] *= 9.9792015476736E+291;
        }

        proc_control_node_B.s_m *= 9.9792015476736E+291;
        proc_control_node_B.atmp_i *= 9.9792015476736E+291;
      } while (!(std::abs(proc_control_node_B.s_m) >= 1.0020841800044864E-292));

      proc_control_node_B.s_m = rt_hypotd_snf(proc_control_node_B.atmp_i,
        proc_control_node_xnrm2_k(15, proc_control_node_B.b_A_j, 2));
      if (proc_control_node_B.atmp_i >= 0.0) {
        proc_control_node_B.s_m = -proc_control_node_B.s_m;
      }

      proc_control_node_B.tau_idx_0 = (proc_control_node_B.s_m -
        proc_control_node_B.atmp_i) / proc_control_node_B.s_m;
      proc_control_node_B.atmp_i = 1.0 / (proc_control_node_B.atmp_i -
        proc_control_node_B.s_m);
      for (coltop = 1; coltop < 16; coltop++) {
        proc_control_node_B.b_A_j[coltop] *= proc_control_node_B.atmp_i;
      }

      proc_control_node_B.aoffset_k = 0;
      while (proc_control_node_B.aoffset_k <= knt) {
        proc_control_node_B.s_m *= 1.0020841800044864E-292;
        proc_control_node_B.aoffset_k++;
      }

      proc_control_node_B.atmp_i = proc_control_node_B.s_m;
    } else {
      proc_control_node_B.tau_idx_0 = (proc_control_node_B.s_m -
        proc_control_node_B.b_A_j[0]) / proc_control_node_B.s_m;
      proc_control_node_B.atmp_i = 1.0 / (proc_control_node_B.b_A_j[0] -
        proc_control_node_B.s_m);
      proc_control_node_B.aoffset_k = 1;
      while (proc_control_node_B.aoffset_k + 1 <= 16) {
        proc_control_node_B.b_A_j[proc_control_node_B.aoffset_k] *=
          proc_control_node_B.atmp_i;
        proc_control_node_B.aoffset_k++;
      }

      proc_control_node_B.atmp_i = proc_control_node_B.s_m;
    }
  }

  proc_control_node_B.b_A_j[0] = 1.0;
  if (proc_control_node_B.tau_idx_0 != 0.0) {
    boolean_T exitg2;
    knt = 16;
    proc_control_node_B.aoffset_k = 15;
    while ((knt > 0) && (proc_control_node_B.b_A_j[proc_control_node_B.aoffset_k]
                         == 0.0)) {
      knt--;
      proc_control_node_B.aoffset_k--;
    }

    proc_control_node_B.aoffset_k = 2;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.aoffset_k > 0)) {
      coltop = ((proc_control_node_B.aoffset_k - 1) << 4) + 16;
      j = coltop;
      do {
        exitg1 = 0;
        if (j + 1 <= coltop + knt) {
          if (proc_control_node_B.b_A_j[j] != 0.0) {
            exitg1 = 1;
          } else {
            j++;
          }
        } else {
          proc_control_node_B.aoffset_k--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    knt = 0;
    proc_control_node_B.aoffset_k = 0;
  }

  if (knt > 0) {
    proc_control_node_xgemv_bs(knt, proc_control_node_B.aoffset_k,
      proc_control_node_B.b_A_j, 17, proc_control_node_B.b_A_j, 1,
      proc_control_node_B.work_m);
    proc_control_node_xgerc_o(knt, proc_control_node_B.aoffset_k,
      -proc_control_node_B.tau_idx_0, 1, proc_control_node_B.work_m,
      proc_control_node_B.b_A_j, 17);
  }

  proc_control_node_B.b_A_j[0] = proc_control_node_B.atmp_i;
  proc_control_node_B.atmp_i = proc_control_node_B.b_A_j[17];
  proc_control_node_B.tau_idx_0 = 0.0;
  proc_control_node_B.s_m = proc_control_node_xnrm2_k(14,
    proc_control_node_B.b_A_j, 19);
  if (proc_control_node_B.s_m != 0.0) {
    proc_control_node_B.s_m = rt_hypotd_snf(proc_control_node_B.b_A_j[17],
      proc_control_node_B.s_m);
    if (proc_control_node_B.b_A_j[17] >= 0.0) {
      proc_control_node_B.s_m = -proc_control_node_B.s_m;
    }

    if (std::abs(proc_control_node_B.s_m) < 1.0020841800044864E-292) {
      knt = -1;
      do {
        knt++;
        for (coltop = 18; coltop < 32; coltop++) {
          proc_control_node_B.b_A_j[coltop] *= 9.9792015476736E+291;
        }

        proc_control_node_B.s_m *= 9.9792015476736E+291;
        proc_control_node_B.atmp_i *= 9.9792015476736E+291;
      } while (!(std::abs(proc_control_node_B.s_m) >= 1.0020841800044864E-292));

      proc_control_node_B.s_m = rt_hypotd_snf(proc_control_node_B.atmp_i,
        proc_control_node_xnrm2_k(14, proc_control_node_B.b_A_j, 19));
      if (proc_control_node_B.atmp_i >= 0.0) {
        proc_control_node_B.s_m = -proc_control_node_B.s_m;
      }

      proc_control_node_B.tau_idx_0 = (proc_control_node_B.s_m -
        proc_control_node_B.atmp_i) / proc_control_node_B.s_m;
      proc_control_node_B.atmp_i = 1.0 / (proc_control_node_B.atmp_i -
        proc_control_node_B.s_m);
      for (coltop = 18; coltop < 32; coltop++) {
        proc_control_node_B.b_A_j[coltop] *= proc_control_node_B.atmp_i;
      }

      proc_control_node_B.aoffset_k = 0;
      while (proc_control_node_B.aoffset_k <= knt) {
        proc_control_node_B.s_m *= 1.0020841800044864E-292;
        proc_control_node_B.aoffset_k++;
      }

      proc_control_node_B.atmp_i = proc_control_node_B.s_m;
    } else {
      proc_control_node_B.tau_idx_0 = (proc_control_node_B.s_m -
        proc_control_node_B.b_A_j[17]) / proc_control_node_B.s_m;
      proc_control_node_B.atmp_i = 1.0 / (proc_control_node_B.b_A_j[17] -
        proc_control_node_B.s_m);
      proc_control_node_B.aoffset_k = 18;
      while (proc_control_node_B.aoffset_k + 1 <= 32) {
        proc_control_node_B.b_A_j[proc_control_node_B.aoffset_k] *=
          proc_control_node_B.atmp_i;
        proc_control_node_B.aoffset_k++;
      }

      proc_control_node_B.atmp_i = proc_control_node_B.s_m;
    }
  }

  proc_control_node_B.b_A_j[17] = 1.0;
  if (proc_control_node_B.tau_idx_0 != 0.0) {
    knt = 15;
    proc_control_node_B.aoffset_k = 31;
    while ((knt > 0) && (proc_control_node_B.b_A_j[proc_control_node_B.aoffset_k]
                         == 0.0)) {
      knt--;
      proc_control_node_B.aoffset_k--;
    }

    proc_control_node_B.aoffset_k = 1;
    j = 33;
    do {
      exitg1 = 0;
      if (j + 1 <= 33 + knt) {
        if (proc_control_node_B.b_A_j[j] != 0.0) {
          exitg1 = 1;
        } else {
          j++;
        }
      } else {
        proc_control_node_B.aoffset_k = 0;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    knt = 0;
    proc_control_node_B.aoffset_k = 0;
  }

  if (knt > 0) {
    proc_control_node_xgemv_bs(knt, proc_control_node_B.aoffset_k,
      proc_control_node_B.b_A_j, 34, proc_control_node_B.b_A_j, 18,
      proc_control_node_B.work_m);
    proc_control_node_xgerc_o(knt, proc_control_node_B.aoffset_k,
      -proc_control_node_B.tau_idx_0, 18, proc_control_node_B.work_m,
      proc_control_node_B.b_A_j, 34);
  }

  proc_control_node_B.b_A_j[17] = proc_control_node_B.atmp_i;
  proc_control_node_B.atmp_i = proc_control_node_B.b_A_j[34];
  proc_control_node_B.s_m = proc_control_node_xnrm2_k(13,
    proc_control_node_B.b_A_j, 36);
  if (proc_control_node_B.s_m != 0.0) {
    proc_control_node_B.s_m = rt_hypotd_snf(proc_control_node_B.b_A_j[34],
      proc_control_node_B.s_m);
    if (proc_control_node_B.b_A_j[34] >= 0.0) {
      proc_control_node_B.s_m = -proc_control_node_B.s_m;
    }

    if (std::abs(proc_control_node_B.s_m) < 1.0020841800044864E-292) {
      knt = -1;
      do {
        knt++;
        for (coltop = 35; coltop < 48; coltop++) {
          proc_control_node_B.b_A_j[coltop] *= 9.9792015476736E+291;
        }

        proc_control_node_B.s_m *= 9.9792015476736E+291;
        proc_control_node_B.atmp_i *= 9.9792015476736E+291;
      } while (!(std::abs(proc_control_node_B.s_m) >= 1.0020841800044864E-292));

      proc_control_node_B.s_m = rt_hypotd_snf(proc_control_node_B.atmp_i,
        proc_control_node_xnrm2_k(13, proc_control_node_B.b_A_j, 36));
      if (proc_control_node_B.atmp_i >= 0.0) {
        proc_control_node_B.s_m = -proc_control_node_B.s_m;
      }

      proc_control_node_B.atmp_i = 1.0 / (proc_control_node_B.atmp_i -
        proc_control_node_B.s_m);
      for (coltop = 35; coltop < 48; coltop++) {
        proc_control_node_B.b_A_j[coltop] *= proc_control_node_B.atmp_i;
      }

      proc_control_node_B.aoffset_k = 0;
      while (proc_control_node_B.aoffset_k <= knt) {
        proc_control_node_B.s_m *= 1.0020841800044864E-292;
        proc_control_node_B.aoffset_k++;
      }

      proc_control_node_B.atmp_i = proc_control_node_B.s_m;
    } else {
      proc_control_node_B.atmp_i = 1.0 / (proc_control_node_B.b_A_j[34] -
        proc_control_node_B.s_m);
      proc_control_node_B.aoffset_k = 35;
      while (proc_control_node_B.aoffset_k + 1 <= 48) {
        proc_control_node_B.b_A_j[proc_control_node_B.aoffset_k] *=
          proc_control_node_B.atmp_i;
        proc_control_node_B.aoffset_k++;
      }

      proc_control_node_B.atmp_i = proc_control_node_B.s_m;
    }
  }

  proc_control_node_B.b_A_j[34] = proc_control_node_B.atmp_i;
  proc_control_node_B.R_g[0] = proc_control_node_B.b_A_j[0];
  proc_control_node_B.coffset_f = 1;
  while (proc_control_node_B.coffset_f + 1 < 4) {
    proc_control_node_B.R_g[proc_control_node_B.coffset_f] = 0.0;
    proc_control_node_B.coffset_f++;
  }

  proc_control_node_B.coffset_f = 0;
  while (proc_control_node_B.coffset_f <= 1) {
    proc_control_node_B.R_g[proc_control_node_B.coffset_f + 3] =
      proc_control_node_B.b_A_j[proc_control_node_B.coffset_f + 16];
    proc_control_node_B.coffset_f++;
  }

  while (proc_control_node_B.coffset_f + 1 < 4) {
    proc_control_node_B.R_g[proc_control_node_B.coffset_f + 3] = 0.0;
    proc_control_node_B.coffset_f++;
  }

  proc_control_node_B.coffset_f = 0;
  while (proc_control_node_B.coffset_f <= 2) {
    proc_control_node_B.R_g[proc_control_node_B.coffset_f + 6] =
      proc_control_node_B.b_A_j[proc_control_node_B.coffset_f + 32];
    proc_control_node_B.coffset_f++;
  }

  j = 0;
  for (knt = 0; knt < 3; knt++) {
    b_S[j] = proc_control_node_B.R_g[knt];
    b_S[j + 1] = proc_control_node_B.R_g[knt + 3];
    b_S[j + 2] = proc_control_node_B.R_g[knt + 6];
    j += 3;
  }
}

// Function for MATLAB Function: '<S351>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_i(const real_T A[9],
  real_T B[39])
{
  for (int32_T j{0}; j < 13; j++) {
    real_T tmp;
    int32_T jBcol;
    jBcol = 3 * j;
    if (B[jBcol] != 0.0) {
      B[jBcol] /= A[0];
      for (int32_T i{2}; i < 4; i++) {
        int32_T tmp_0;
        tmp_0 = (i + jBcol) - 1;
        B[tmp_0] -= A[i - 1] * B[jBcol];
      }
    }

    tmp = B[jBcol + 1];
    if (tmp != 0.0) {
      B[jBcol + 1] = tmp / A[4];
      B[jBcol + 2] -= B[jBcol + 1] * A[5];
    }

    if (B[jBcol + 2] != 0.0) {
      B[jBcol + 2] /= A[8];
    }
  }
}

// Function for MATLAB Function: '<S351>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_iq(const real_T A[9],
  real_T B[39])
{
  for (int32_T j{0}; j < 13; j++) {
    real_T tmp;
    int32_T jBcol;
    jBcol = 3 * j;
    tmp = B[jBcol + 2];
    if (tmp != 0.0) {
      B[jBcol + 2] = tmp / A[8];
      for (int32_T i{0}; i < 2; i++) {
        int32_T tmp_0;
        tmp_0 = i + jBcol;
        B[tmp_0] -= B[jBcol + 2] * A[i + 6];
      }
    }

    tmp = B[jBcol + 1];
    if (tmp != 0.0) {
      B[jBcol + 1] = tmp / A[4];
      B[jBcol] -= B[jBcol + 1] * A[3];
    }

    if (B[jBcol] != 0.0) {
      B[jBcol] /= A[0];
    }
  }
}

// Function for MATLAB Function: '<S351>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_kt(int32_T n, const
  real_T x[208], int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_node_B.scale_g = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_g) {
          real_T t;
          t = proc_control_node_B.scale_g / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_g = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_node_B.scale_g;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_g * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S351>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_bsn(int32_T m, int32_T
  n, const real_T A[208], int32_T ia0, const real_T x[208], int32_T ix0, real_T
  y[13])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = ((n - 1) << 4) + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 16) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_node_B.c_jg = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_jg += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_jg;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S351>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_og(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[13], real_T A[208], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_node_B.temp_c = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_c;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 16;
    }
  }
}

// Function for MATLAB Function: '<S351>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor_lm(const real_T A
  [169], real_T S[169], const real_T Ns[39])
{
  int32_T ii;
  int32_T knt;
  for (proc_control_node_B.j_b = 0; proc_control_node_B.j_b < 13;
       proc_control_node_B.j_b++) {
    proc_control_node_B.coffset_c = proc_control_node_B.j_b * 13;
    for (ii = 0; ii < 13; ii++) {
      proc_control_node_B.aoffset_g = ii * 13;
      proc_control_node_B.s_l = 0.0;
      for (knt = 0; knt < 13; knt++) {
        proc_control_node_B.s_l += A[knt * 13 + proc_control_node_B.j_b] *
          S[proc_control_node_B.aoffset_g + knt];
      }

      proc_control_node_B.y_af[proc_control_node_B.coffset_c + ii] =
        proc_control_node_B.s_l;
      proc_control_node_B.b_A_p[ii + (proc_control_node_B.j_b << 4)] =
        proc_control_node_B.y_af[13 * proc_control_node_B.j_b + ii];
    }

    ii = proc_control_node_B.j_b << 4;
    proc_control_node_B.b_A_p[ii + 13] = Ns[proc_control_node_B.j_b];
    proc_control_node_B.b_A_p[ii + 14] = Ns[proc_control_node_B.j_b + 13];
    proc_control_node_B.b_A_p[ii + 15] = Ns[proc_control_node_B.j_b + 26];
    proc_control_node_B.work_i[proc_control_node_B.j_b] = 0.0;
  }

  for (proc_control_node_B.j_b = 0; proc_control_node_B.j_b < 13;
       proc_control_node_B.j_b++) {
    ii = (proc_control_node_B.j_b << 4) + proc_control_node_B.j_b;
    proc_control_node_B.atmp_hb = proc_control_node_B.b_A_p[ii];
    proc_control_node_B.tau_a[proc_control_node_B.j_b] = 0.0;
    proc_control_node_B.s_l = proc_control_node_xnrm2_kt(15 -
      proc_control_node_B.j_b, proc_control_node_B.b_A_p, ii + 2);
    if (proc_control_node_B.s_l != 0.0) {
      proc_control_node_B.s_l = rt_hypotd_snf(proc_control_node_B.b_A_p[ii],
        proc_control_node_B.s_l);
      if (proc_control_node_B.b_A_p[ii] >= 0.0) {
        proc_control_node_B.s_l = -proc_control_node_B.s_l;
      }

      if (std::abs(proc_control_node_B.s_l) < 1.0020841800044864E-292) {
        knt = -1;
        proc_control_node_B.coffset_c = (ii - proc_control_node_B.j_b) + 16;
        do {
          knt++;
          proc_control_node_B.aoffset_g = ii + 1;
          while (proc_control_node_B.aoffset_g + 1 <=
                 proc_control_node_B.coffset_c) {
            proc_control_node_B.b_A_p[proc_control_node_B.aoffset_g] *=
              9.9792015476736E+291;
            proc_control_node_B.aoffset_g++;
          }

          proc_control_node_B.s_l *= 9.9792015476736E+291;
          proc_control_node_B.atmp_hb *= 9.9792015476736E+291;
        } while (!(std::abs(proc_control_node_B.s_l) >= 1.0020841800044864E-292));

        proc_control_node_B.s_l = rt_hypotd_snf(proc_control_node_B.atmp_hb,
          proc_control_node_xnrm2_kt(15 - proc_control_node_B.j_b,
          proc_control_node_B.b_A_p, ii + 2));
        if (proc_control_node_B.atmp_hb >= 0.0) {
          proc_control_node_B.s_l = -proc_control_node_B.s_l;
        }

        proc_control_node_B.tau_a[proc_control_node_B.j_b] =
          (proc_control_node_B.s_l - proc_control_node_B.atmp_hb) /
          proc_control_node_B.s_l;
        proc_control_node_B.atmp_hb = 1.0 / (proc_control_node_B.atmp_hb -
          proc_control_node_B.s_l);
        proc_control_node_B.aoffset_g = ii + 1;
        while (proc_control_node_B.aoffset_g + 1 <=
               proc_control_node_B.coffset_c) {
          proc_control_node_B.b_A_p[proc_control_node_B.aoffset_g] *=
            proc_control_node_B.atmp_hb;
          proc_control_node_B.aoffset_g++;
        }

        proc_control_node_B.coffset_c = 0;
        while (proc_control_node_B.coffset_c <= knt) {
          proc_control_node_B.s_l *= 1.0020841800044864E-292;
          proc_control_node_B.coffset_c++;
        }

        proc_control_node_B.atmp_hb = proc_control_node_B.s_l;
      } else {
        proc_control_node_B.tau_a[proc_control_node_B.j_b] =
          (proc_control_node_B.s_l - proc_control_node_B.b_A_p[ii]) /
          proc_control_node_B.s_l;
        proc_control_node_B.atmp_hb = 1.0 / (proc_control_node_B.b_A_p[ii] -
          proc_control_node_B.s_l);
        knt = (ii - proc_control_node_B.j_b) + 16;
        proc_control_node_B.coffset_c = ii + 1;
        while (proc_control_node_B.coffset_c + 1 <= knt) {
          proc_control_node_B.b_A_p[proc_control_node_B.coffset_c] *=
            proc_control_node_B.atmp_hb;
          proc_control_node_B.coffset_c++;
        }

        proc_control_node_B.atmp_hb = proc_control_node_B.s_l;
      }
    }

    proc_control_node_B.b_A_p[ii] = proc_control_node_B.atmp_hb;
    if (proc_control_node_B.j_b + 1 < 13) {
      proc_control_node_B.s_l = proc_control_node_B.b_A_p[ii];
      proc_control_node_B.b_A_p[ii] = 1.0;
      if (proc_control_node_B.tau_a[proc_control_node_B.j_b] != 0.0) {
        boolean_T exitg2;
        knt = 16 - proc_control_node_B.j_b;
        proc_control_node_B.coffset_c = (ii - proc_control_node_B.j_b) + 15;
        while ((knt > 0) &&
               (proc_control_node_B.b_A_p[proc_control_node_B.coffset_c] == 0.0))
        {
          knt--;
          proc_control_node_B.coffset_c--;
        }

        proc_control_node_B.coffset_c = 12 - proc_control_node_B.j_b;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.coffset_c > 0)) {
          int32_T exitg1;
          int32_T ia;
          proc_control_node_B.aoffset_g = (((proc_control_node_B.coffset_c - 1) <<
            4) + ii) + 16;
          ia = proc_control_node_B.aoffset_g;
          do {
            exitg1 = 0;
            if (ia + 1 <= proc_control_node_B.aoffset_g + knt) {
              if (proc_control_node_B.b_A_p[ia] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              proc_control_node_B.coffset_c--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = 0;
        proc_control_node_B.coffset_c = 0;
      }

      if (knt > 0) {
        proc_control_node_xgemv_bsn(knt, proc_control_node_B.coffset_c,
          proc_control_node_B.b_A_p, ii + 17, proc_control_node_B.b_A_p, ii + 1,
          proc_control_node_B.work_i);
        proc_control_node_xgerc_og(knt, proc_control_node_B.coffset_c,
          -proc_control_node_B.tau_a[proc_control_node_B.j_b], ii + 1,
          proc_control_node_B.work_i, proc_control_node_B.b_A_p, ii + 17);
      }

      proc_control_node_B.b_A_p[ii] = proc_control_node_B.s_l;
    }
  }

  for (proc_control_node_B.j_b = 0; proc_control_node_B.j_b < 13;
       proc_control_node_B.j_b++) {
    for (ii = 0; ii <= proc_control_node_B.j_b; ii++) {
      proc_control_node_B.y_af[ii + 13 * proc_control_node_B.j_b] =
        proc_control_node_B.b_A_p[(proc_control_node_B.j_b << 4) + ii];
    }

    for (ii = proc_control_node_B.j_b + 1; ii + 1 < 14; ii++) {
      proc_control_node_B.y_af[ii + 13 * proc_control_node_B.j_b] = 0.0;
    }
  }

  knt = 0;
  for (proc_control_node_B.j_b = 0; proc_control_node_B.j_b < 13;
       proc_control_node_B.j_b++) {
    proc_control_node_B.aoffset_g = 0;
    for (ii = 0; ii < 13; ii++) {
      S[ii + knt] = proc_control_node_B.y_af[proc_control_node_B.aoffset_g +
        proc_control_node_B.j_b];
      proc_control_node_B.aoffset_g += 13;
    }

    knt += 13;
  }
}

real_T rt_powd_snf(real_T u0, real_T u1)
{
  real_T y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = (rtNaN);
  } else {
    real_T tmp;
    real_T tmp_0;
    tmp = std::abs(u0);
    tmp_0 = std::abs(u1);
    if (std::isinf(u1)) {
      if (tmp == 1.0) {
        y = 1.0;
      } else if (tmp > 1.0) {
        if (u1 > 0.0) {
          y = (rtInf);
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = (rtInf);
      }
    } else if (tmp_0 == 0.0) {
      y = 1.0;
    } else if (tmp_0 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = (rtNaN);
    } else {
      y = std::pow(u0, u1);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S1>/AUV State Equation'
real_T proc_control_nodeModelClass::proc_control_node_erf(real_T x)
{
  real_T y;
  int32_T b;

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  proc_control_node_B.absx = std::abs(x);
  if (std::isnan(x)) {
    y = x;
  } else if (std::isinf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (proc_control_node_B.absx < 0.84375) {
    if (proc_control_node_B.absx < 3.7252902984619141E-9) {
      if (proc_control_node_B.absx < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      proc_control_node_B.z_p3 = x * x;
      y = ((((proc_control_node_B.z_p3 * -2.3763016656650163E-5 +
              -0.0057702702964894416) * proc_control_node_B.z_p3 +
             -0.02848174957559851) * proc_control_node_B.z_p3 +
            -0.3250421072470015) * proc_control_node_B.z_p3 +
           0.12837916709551256) / (((((proc_control_node_B.z_p3 *
        -3.9602282787753681E-6 + 0.00013249473800432164) *
        proc_control_node_B.z_p3 + 0.0050813062818757656) *
        proc_control_node_B.z_p3 + 0.0650222499887673) *
        proc_control_node_B.z_p3 + 0.39791722395915535) *
        proc_control_node_B.z_p3 + 1.0) * x + x;
    }
  } else if (proc_control_node_B.absx < 1.25) {
    if (x >= 0.0) {
      y = (((((((proc_control_node_B.absx - 1.0) * -0.0021663755948687908 +
                0.035478304325618236) * (proc_control_node_B.absx - 1.0) +
               -0.11089469428239668) * (proc_control_node_B.absx - 1.0) +
              0.31834661990116175) * (proc_control_node_B.absx - 1.0) +
             -0.37220787603570132) * (proc_control_node_B.absx - 1.0) +
            0.41485611868374833) * (proc_control_node_B.absx - 1.0) +
           -0.0023621185607526594) / (((((((proc_control_node_B.absx - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_node_B.absx
        - 1.0) + 0.12617121980876164) * (proc_control_node_B.absx - 1.0) +
        0.071828654414196266) * (proc_control_node_B.absx - 1.0) +
        0.540397917702171) * (proc_control_node_B.absx - 1.0) +
        0.10642088040084423) * (proc_control_node_B.absx - 1.0) + 1.0) +
        0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((proc_control_node_B.absx - 1.0) *
        -0.0021663755948687908 + 0.035478304325618236) *
        (proc_control_node_B.absx - 1.0) + -0.11089469428239668) *
        (proc_control_node_B.absx - 1.0) + 0.31834661990116175) *
        (proc_control_node_B.absx - 1.0) + -0.37220787603570132) *
        (proc_control_node_B.absx - 1.0) + 0.41485611868374833) *
        (proc_control_node_B.absx - 1.0) + -0.0023621185607526594) /
        (((((((proc_control_node_B.absx - 1.0) * 0.011984499846799107 +
              0.013637083912029051) * (proc_control_node_B.absx - 1.0) +
             0.12617121980876164) * (proc_control_node_B.absx - 1.0) +
            0.071828654414196266) * (proc_control_node_B.absx - 1.0) +
           0.540397917702171) * (proc_control_node_B.absx - 1.0) +
          0.10642088040084423) * (proc_control_node_B.absx - 1.0) + 1.0);
    }
  } else if (proc_control_node_B.absx > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    real_T R;
    real_T s;
    s = 1.0 / (proc_control_node_B.absx * proc_control_node_B.absx);
    if (proc_control_node_B.absx < 2.8571434020996094) {
      R = ((((((s * -9.8143293441691455 + -81.2874355063066) * s +
               -184.60509290671104) * s + -162.39666946257347) * s +
             -62.375332450326006) * s + -10.558626225323291) * s +
           -0.69385857270718176) * s + -0.0098649440348471482;
      s = (((((((s * -0.0604244152148581 + 6.5702497703192817) * s +
                108.63500554177944) * s + 429.00814002756783) * s +
              645.38727173326788) * s + 434.56587747522923) * s +
            137.65775414351904) * s + 19.651271667439257) * s + 1.0;
    } else {
      R = (((((s * -483.5191916086514 + -1025.0951316110772) * s +
              -637.56644336838963) * s + -160.63638485582192) * s +
            -17.757954917754752) * s + -0.799283237680523) * s +
        -0.0098649429247001;
      s = ((((((s * -22.440952446585818 + 474.52854120695537) * s +
               2553.0504064331644) * s + 3199.8582195085955) * s +
             1536.729586084437) * s + 325.79251299657392) * s +
           30.338060743482458) * s + 1.0;
    }

    if (!std::isnan(proc_control_node_B.absx)) {
      proc_control_node_B.z_p3 = frexp(proc_control_node_B.absx, &b);
    } else {
      proc_control_node_B.z_p3 = proc_control_node_B.absx;
      b = 0;
    }

    proc_control_node_B.z_p3 = std::floor(proc_control_node_B.z_p3 * 2.097152E+6)
      / 2.097152E+6 * rt_powd_snf(2.0, static_cast<real_T>(b));
    if (x < 0.0) {
      y = std::exp((proc_control_node_B.z_p3 - proc_control_node_B.absx) *
                   (proc_control_node_B.z_p3 + proc_control_node_B.absx) + R / s)
        * std::exp(-proc_control_node_B.z_p3 * proc_control_node_B.z_p3 - 0.5625)
        / proc_control_node_B.absx - 1.0;
    } else {
      y = 1.0 - std::exp((proc_control_node_B.z_p3 - proc_control_node_B.absx) *
                         (proc_control_node_B.z_p3 + proc_control_node_B.absx) +
                         R / s) * std::exp(-proc_control_node_B.z_p3 *
        proc_control_node_B.z_p3 - 0.5625) / proc_control_node_B.absx;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S1>/AUV State Equation'
void proc_control_nodeModelClass::proc_con_AUVQuatPerturbedSimFcn(const real_T
  in1[13], const real_T in2[6], const real_T in3[8], real_T out1[13])
{
  proc_control_node_B.t8_n = in1[4] * in1[6];
  proc_control_node_B.t9_gt = in1[5] * in1[6];
  proc_control_node_B.t10_d = in1[3] * in1[4];
  proc_control_node_B.t11_cj = in1[3] * in1[5];
  proc_control_node_B.t12_m = in1[4] * in1[4];
  proc_control_node_B.t13_d = in1[5] * in1[5];
  proc_control_node_B.t15_n = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t20_b = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t33_p = in1[11] / 500.0;
  proc_control_node_B.t37_k = in1[10] / 1000.0;
  proc_control_node_B.t39_c = in1[12] * 0.018;
  proc_control_node_B.t63 = in1[7] * 32.4648;
  proc_control_node_B.t67 = in1[8] * 43.6156;
  proc_control_node_B.t68_n = in1[9] * 46.7695;
  proc_control_node_B.t16_n = proc_control_node_B.t8_n * 2.0;
  proc_control_node_B.t17_cd = proc_control_node_B.t9_gt * 2.0;
  proc_control_node_B.t18_dk = proc_control_node_B.t10_d * 2.0;
  proc_control_node_B.t19_n = proc_control_node_B.t11_cj * 2.0;
  proc_control_node_B.t21_g = proc_control_node_B.t12_m * 2.0;
  proc_control_node_B.t22_l = proc_control_node_B.t13_d * 2.0;
  proc_control_node_B.t23_g = in1[6] * in1[6] * 2.0;
  proc_control_node_B.t71 = proc_control_node_B.t33_p +
    proc_control_node_B.t39_c;
  proc_control_node_B.t33_p += proc_control_node_B.t37_k;
  proc_control_node_B.t37_k += proc_control_node_B.t39_c;
  proc_control_node_B.t39_c = in1[11] * 0.558 + proc_control_node_B.t63;
  proc_control_node_B.t80 = in1[10] * 0.062 + proc_control_node_B.t68_n;
  proc_control_node_B.t81 = in1[12] * 0.031 + proc_control_node_B.t67;
  proc_control_node_B.t84 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] *
    0.592;
  proc_control_node_B.t45_p = proc_control_node_B.t17_cd +
    proc_control_node_B.t18_dk;
  proc_control_node_B.t55_ko = proc_control_node_erf(in1[2] * 13.333333333333334
    - 2.0);
  proc_control_node_B.t65_l = (proc_control_node_B.t21_g +
    proc_control_node_B.t22_l) - 1.0;
  proc_control_node_B.t63 = in1[12] * 0.062 + -proc_control_node_B.t63;
  proc_control_node_B.t67 = in1[10] * 0.558 + -proc_control_node_B.t67;
  proc_control_node_B.t68_n = in1[11] * 0.031 + -proc_control_node_B.t68_n;
  proc_control_node_B.t86 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_node_B.t87 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  proc_control_node_B.t56_b = proc_control_node_B.t16_n +
    -proc_control_node_B.t19_n;
  proc_control_node_B.t85 = proc_control_node_B.t55_ko * 0.01575 + 0.01575;
  proc_control_node_B.t55_ko = proc_control_node_B.t55_ko * 15.7185 - 15.2815;
  out1[0] = (((proc_control_node_B.t22_l + proc_control_node_B.t23_g) - 1.0) *
             -in1[7] + (proc_control_node_B.t16_n + proc_control_node_B.t19_n) *
             in1[9]) + (proc_control_node_B.t15_n - proc_control_node_B.t20_b) *
    in1[8];
  out1[1] = ((proc_control_node_B.t15_n + proc_control_node_B.t20_b) * in1[7] -
             ((proc_control_node_B.t21_g + proc_control_node_B.t23_g) - 1.0) *
             in1[8]) + (proc_control_node_B.t17_cd - proc_control_node_B.t18_dk)
    * in1[9];
  out1[2] = (proc_control_node_B.t56_b * in1[7] + proc_control_node_B.t45_p *
             in1[8]) - proc_control_node_B.t65_l * in1[9];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_node_B.t15_n = in1[10] * proc_control_node_B.t71;
  proc_control_node_B.t20_b = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) *
    in1[10];
  proc_control_node_B.t16_n = in1[10] * proc_control_node_B.t80;
  proc_control_node_B.t17_cd = in1[10] * proc_control_node_B.t67;
  proc_control_node_B.t18_dk = in1[10] * proc_control_node_B.t86;
  proc_control_node_B.t19_n = in1[10] * proc_control_node_B.t87;
  proc_control_node_B.t21_g = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) *
    in1[11];
  proc_control_node_B.t22_l = in1[11] * proc_control_node_B.t37_k;
  proc_control_node_B.t23_g = in1[11] * proc_control_node_B.t39_c;
  proc_control_node_B.out1_tmp_cx = in1[11] * proc_control_node_B.t68_n;
  proc_control_node_B.out1_tmp_f = in1[11] * proc_control_node_B.t84;
  proc_control_node_B.t86 *= in1[11];
  proc_control_node_B.out1_tmp_o = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_node_B.out1_tmp_dd = in1[12] * proc_control_node_B.t33_p;
  proc_control_node_B.out1_tmp_l = in1[12] * proc_control_node_B.t63;
  proc_control_node_B.out1_tmp_ls = in1[12] * proc_control_node_B.t81;
  proc_control_node_B.t84 *= in1[12];
  proc_control_node_B.t87 *= in1[12];
  proc_control_node_B.out1_tmp_dr = (proc_control_node_B.t9_gt +
    proc_control_node_B.t10_d) * proc_control_node_B.t55_ko;
  proc_control_node_B.t45_p *= proc_control_node_B.t85;
  proc_control_node_B.out1_tmp_ku = (proc_control_node_B.t8_n +
    -proc_control_node_B.t11_cj) * proc_control_node_B.t55_ko;
  proc_control_node_B.t56_b *= proc_control_node_B.t85;
  proc_control_node_B.t55_ko *= proc_control_node_B.t65_l;
  proc_control_node_B.t65_l = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_node_B.t71 *= in1[7];
  proc_control_node_B.t81 *= in1[7];
  proc_control_node_B.t68_n *= in1[7];
  proc_control_node_B.t85 = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_node_B.t37_k *= in1[8];
  proc_control_node_B.t63 *= in1[8];
  proc_control_node_B.t80 *= in1[8];
  proc_control_node_B.out1_tmp_fo = (std::abs(in1[9]) * 0.756 +
    23.333333333333332) * in1[9];
  proc_control_node_B.t33_p *= in1[9];
  proc_control_node_B.t39_c *= in1[9];
  proc_control_node_B.t67 *= in1[9];
  out1[7] = (((((((((((((((((((((in2[0] * 0.030976977065388711 + in2[1] *
    9.4803055144857715E-7) - in2[2] * 6.8231348244175949E-6) + in2[3] *
    0.0001303522588356414) + (in2[4] * -0.010033314971702871 + in2[5] *
    0.0010125044874363649)) + (in3[0] * -0.00033076834054020519 + in3[1] *
    1.8595780444550231E-21)) + in3[2] * 0.00033506403327449372) + (in3[3] *
    0.00033363213569639753 - in3[4] * 0.001819638864719295)) + (in3[5] *
    -0.0018124211550371481 + in3[6] * 0.0018538731733468781)) + (in3[7] *
    0.001778186846409557 - proc_control_node_B.t8_n * 0.11107598193630119)) +
                        ((proc_control_node_B.t9_gt * -0.00081126583629370218 -
    proc_control_node_B.t10_d * 0.00081126583629370218) +
    proc_control_node_B.t11_cj * 0.11107598193630119)) +
                       ((proc_control_node_B.t12_m * -0.0062610285338271466 -
    proc_control_node_B.t13_d * 0.0062610285338271466) + in3[0] *
                        1.4142135623730951 * 0.015171119710606879)) + ((in3[1] *
    1.4142135623730951 * 0.014928824155507611 + in3[2] * 1.4142135623730951 *
    0.015171119710606879) + in3[3] * 1.4142135623730951 * 0.01516372519659284))
                     + (((proc_control_node_B.t15_n * -0.96028628902704993 -
    proc_control_node_B.t20_b * 0.0001303522588356414) +
    proc_control_node_B.t16_n * 9.4803055144857715E-7) -
                        proc_control_node_B.t17_cd * 6.8231348244175949E-6)) +
                    (((proc_control_node_B.t18_dk * -0.010033314971702871 -
                       proc_control_node_B.t19_n * 0.0010125044874363649) +
                      proc_control_node_B.t21_g * 0.010033314971702871) -
                     proc_control_node_B.t22_l * 2.9388947094905889E-5)) +
                   (((proc_control_node_B.t23_g * -6.8231348244175949E-6 +
                      proc_control_node_B.out1_tmp_cx * 0.030976977065388711) +
                     proc_control_node_B.out1_tmp_f * 0.0010125044874363649) -
                    proc_control_node_B.t86 * 0.0001303522588356414)) +
                  (((proc_control_node_B.out1_tmp_o * -0.0010125044874363649 +
                     proc_control_node_B.out1_tmp_dd * 0.0002115171795569455) +
                    proc_control_node_B.out1_tmp_l * 9.4803055144857715E-7) +
                   proc_control_node_B.out1_tmp_ls * 0.030976977065388711)) +
                 ((proc_control_node_B.t84 * 0.010033314971702871 +
                   proc_control_node_B.t87 * 0.0001303522588356414) -
                  proc_control_node_B.out1_tmp_dr * 1.860035941942108E-5)) +
                ((proc_control_node_B.t45_p * -0.0076571888871557192 -
                  proc_control_node_B.out1_tmp_ku * 0.60776829002292643) -
                 proc_control_node_B.t56_b * 0.589379797395962)) +
               ((proc_control_node_B.t55_ko * -6.6934952627536608E-5 -
                 proc_control_node_B.t65_l * 0.030976977065388711) +
                proc_control_node_B.t71 * 0.0040409200239048832)) +
              (((proc_control_node_B.t81 * -0.0010125044874363649 +
                 proc_control_node_B.t68_n * 0.010033314971702871) -
                proc_control_node_B.t85 * 9.4803055144857715E-7) -
               proc_control_node_B.t37_k * 0.311032764122789)) +
             (((proc_control_node_B.t63 * -0.0010125044874363649 -
                proc_control_node_B.t80 * 0.0001303522588356414) +
               proc_control_node_B.out1_tmp_fo * 6.8231348244175949E-6) +
              proc_control_node_B.t33_p * 0.031387639110527318)) +
    ((proc_control_node_B.t39_c * 0.010033314971702871 - proc_control_node_B.t67
      * 0.0001303522588356414) + 0.0031305142669135729);
  out1[8] = (((((((((((((((((((((in2[0] * 9.4803055144857715E-7 + in2[1] *
    0.02320783323245932) - in2[2] * 2.9076309096921531E-5) + in2[3] *
    0.021882274381510681) + (in2[4] * -0.0001026911824132076 - in2[5] *
    0.00042780737967584029)) + (in3[0] * 0.00013975754063522079 + in3[1] *
    7.9244610288113972E-21)) + in3[2] * -0.00014157257363048341) + (in3[3] *
    -0.0001409675626320625 - in3[4] * 0.0034249251816346319)) + (in3[5] *
    0.003387750973601051 + in3[6] * 0.0035708122797193441)) + (in3[7] *
    -0.0035336380716857632 - proc_control_node_B.t8_n * 0.00060385694847962161))
                        + ((proc_control_node_B.t9_gt * -0.23982646564227009 -
    proc_control_node_B.t10_d * 0.23982646564227009) +
    proc_control_node_B.t11_cj * 0.00060385694847962161)) +
                       ((proc_control_node_B.t12_m * -0.026680932679612211 -
    proc_control_node_B.t13_d * 0.026680932679612211) - in3[0] *
                        1.4142135623730951 * 0.01090649593858282)) + ((in3[1] *
    1.4142135623730951 * 0.011000123045544621 - in3[2] * 1.4142135623730951 *
    0.01090649593858282) + in3[3] * 1.4142135623730951 * 0.01090087173345982)) +
                     (((proc_control_node_B.t15_n * -2.9388947094905889E-5 -
                        proc_control_node_B.t20_b * 0.021882274381510681) +
                       proc_control_node_B.t16_n * 0.02320783323245932) -
                      proc_control_node_B.t17_cd * 2.9076309096921531E-5)) +
                    (((proc_control_node_B.t18_dk * -0.0001026911824132076 +
                       proc_control_node_B.t19_n * 0.00042780737967584029) +
                      proc_control_node_B.t21_g * 0.0001026911824132076) -
                     proc_control_node_B.t22_l * 0.71944283020623911)) +
                   (((proc_control_node_B.t23_g * -2.9076309096921531E-5 +
                      proc_control_node_B.out1_tmp_cx * 9.4803055144857715E-7) -
                     proc_control_node_B.out1_tmp_f * 0.00042780737967584029) -
                    proc_control_node_B.t86 * 0.021882274381510681)) +
                  (((proc_control_node_B.out1_tmp_o * 0.00042780737967584029 +
                     proc_control_node_B.out1_tmp_dd * 0.00090136558200456737) +
                    proc_control_node_B.out1_tmp_l * 0.02320783323245932) +
                   proc_control_node_B.out1_tmp_ls * 9.4803055144857715E-7)) +
                 ((proc_control_node_B.t84 * 0.0001026911824132076 +
                   proc_control_node_B.t87 * 0.021882274381510681) -
                  proc_control_node_B.out1_tmp_dr * 0.45533768802085189)) +
                ((proc_control_node_B.t45_p * -1.2854146887555269 -
                  proc_control_node_B.out1_tmp_ku * 1.860035941942108E-5) -
                 proc_control_node_B.t56_b * 0.0060323141908477191)) +
               (((proc_control_node_B.t55_ko * -0.00028523859224080018 -
                  proc_control_node_B.t65_l * 9.4803055144857715E-7) +
                 proc_control_node_B.t71 * 0.678350505826831) +
                proc_control_node_B.t81 * 0.00042780737967584029)) +
              (((proc_control_node_B.t68_n * 0.0001026911824132076 -
                 proc_control_node_B.t85 * 0.02320783323245932) -
                proc_control_node_B.t37_k * 0.0031834266548094372) +
               proc_control_node_B.t63 * 0.00042780737967584029)) +
             (((proc_control_node_B.t80 * -0.021882274381510681 +
                proc_control_node_B.out1_tmp_fo * 2.9076309096921531E-5) -
               proc_control_node_B.t33_p * 0.013262028769951049) +
              proc_control_node_B.t39_c * 0.0001026911824132076)) +
    (proc_control_node_B.t67 * -0.021882274381510681 + 0.0133404663398061);
  out1[9] = ((((((((((((((((((((((in2[0] * -6.8231348244175949E-6 - in2[1] *
    2.9076309096921531E-5) + in2[2] * 0.021384731826702759) - in2[3] *
    0.002272431716587712) + (in2[4] * 0.00039756137245743289 + in2[5] *
    5.2828771531483014E-6)) + in3[0] * -1.725827915740819E-6) + in3[1] *
    -5.8281975682474322E-18) + in3[2] * 1.748241265284163E-6) + (in3[3] *
    1.740770148765829E-6 - in3[4] * 0.02095639900015615)) + (in3[5] *
    0.021100316216985739 - in3[6] * 0.021822949502860629)) + (in3[7] *
    0.02167903228603104 + proc_control_node_B.t8_n * 0.004346059700124901)) +
                        ((proc_control_node_B.t9_gt * 0.024881704687475689 +
    proc_control_node_B.t10_d * 0.024881704687475689) -
    proc_control_node_B.t11_cj * 0.004346059700124901)) +
                       ((proc_control_node_B.t12_m * 0.0030060816152820162 +
    proc_control_node_B.t13_d * 0.0030060816152820162) - in3[0] *
                        1.4142135623730951 * 4.8869263875916949E-5)) + ((in3[1] *
    1.4142135623730951 * 6.6264429389244648E-5 - in3[2] * 1.4142135623730951 *
    4.8869263875916949E-5) + in3[3] * 1.4142135623730951 * 6.7490056888775055E-5))
                     + (((proc_control_node_B.t15_n * 0.0002115171795569455 +
    proc_control_node_B.t20_b * 0.002272431716587712) -
    proc_control_node_B.t16_n * 2.9076309096921531E-5) +
                        proc_control_node_B.t17_cd * 0.021384731826702759)) +
                    (((proc_control_node_B.t18_dk * 0.00039756137245743289 -
                       proc_control_node_B.t19_n * 5.2828771531483014E-6) -
                      proc_control_node_B.t21_g * 0.00039756137245743289) +
                     proc_control_node_B.t22_l * 0.00090136558200456737)) +
                   (((proc_control_node_B.t23_g * 0.021384731826702759 -
                      proc_control_node_B.out1_tmp_cx * 6.8231348244175949E-6) +
                     proc_control_node_B.out1_tmp_f * 5.2828771531483014E-6) +
                    proc_control_node_B.t86 * 0.002272431716587712)) +
                  (((proc_control_node_B.out1_tmp_o * -5.2828771531483014E-6 -
                     proc_control_node_B.out1_tmp_dd * 0.66292668662778553) -
                    proc_control_node_B.out1_tmp_l * 2.9076309096921531E-5) -
                   proc_control_node_B.out1_tmp_ls * 6.8231348244175949E-6)) +
                 ((proc_control_node_B.t84 * -0.00039756137245743289 -
                   proc_control_node_B.t87 * 0.002272431716587712) +
                  proc_control_node_B.out1_tmp_dr * 0.00057047718448160036)) +
                ((proc_control_node_B.t45_p * 0.133487820176676 +
                  proc_control_node_B.out1_tmp_ku * 0.00013386990525507319) +
                 proc_control_node_B.t56_b * 0.023353661458078809)) +
               (((proc_control_node_B.t55_ko * 0.2097842192199541 +
                  proc_control_node_B.t65_l * 6.8231348244175949E-6) -
                 proc_control_node_B.t71 * 0.070445383214219059) -
                proc_control_node_B.t81 * 5.2828771531483014E-6)) +
              (((proc_control_node_B.t68_n * -0.00039756137245743289 +
                 proc_control_node_B.t85 * 2.9076309096921531E-5) +
                proc_control_node_B.t37_k * 0.01232440254618042) -
               proc_control_node_B.t63 * 5.2828771531483014E-6)) +
             (((proc_control_node_B.t80 * 0.002272431716587712 -
                proc_control_node_B.out1_tmp_fo * 0.021384731826702759) +
               proc_control_node_B.t33_p * 0.00016376919174759729) -
              proc_control_node_B.t39_c * 0.00039756137245743289)) +
    (proc_control_node_B.t67 * 0.002272431716587712 - 0.0015030408076410081);
  out1[10] = ((((((((((((((((((((((((in2[0] * 0.0001303522588356414 + in2[1] *
    0.021882274381510681) - in2[2] * 0.002272431716587712) + in2[3] *
    1.71018810547529) + (in2[4] * -0.0080268590155159435 - in2[5] *
    0.0039859244840414)) + in3[0] * 0.0013021350951669831) + in3[1] *
    6.1932883292401409E-19) + in3[2] * -0.00131904594055876) + (in3[3] *
    -0.0013134089920948341 - in3[4] * 0.26767193546582568)) + (in3[5] *
    0.26476621250220889 + in3[6] * 0.2790736050389333)) + (in3[7] *
    -0.27616788207531651 - proc_control_node_B.t8_n * 0.0830290934481406)) +
    ((proc_control_node_B.t9_gt * -18.72549529020894 - proc_control_node_B.t10_d
      * 18.72549529020894) + proc_control_node_B.t11_cj * 0.0830290934481406)) +
    ((proc_control_node_B.t12_m * -2.0852233152147792 -
      proc_control_node_B.t13_d * 2.0852233152147792) + in3[0] *
     1.4142135623730951 * 0.043593198825375247)) + ((in3[1] * 1.4142135623730951
    * -0.043051831063235027 + in3[2] * 1.4142135623730951 * 0.043593198825375247)
    - in3[3] * 1.4142135623730951 * 0.043976565543532631)) +
                        ((proc_control_node_B.t15_n * -0.0040409200239048832 -
    proc_control_node_B.t20_b * 1.71018810547529) + proc_control_node_B.t16_n *
    0.021882274381510681)) + ((proc_control_node_B.t17_cd *
    -0.002272431716587712 - proc_control_node_B.t18_dk * 0.0080268590155159435)
    + proc_control_node_B.t19_n * 0.0039859244840414)) +
                      ((proc_control_node_B.t21_g * 0.0080268590155159435 -
                        proc_control_node_B.t22_l * 0.678350505826831) -
                       proc_control_node_B.t23_g * 0.002272431716587712)) +
                     ((proc_control_node_B.out1_tmp_cx * 0.0001303522588356414 -
                       proc_control_node_B.out1_tmp_f * 0.0039859244840414) -
                      proc_control_node_B.t86 * 1.71018810547529)) +
                    (((proc_control_node_B.out1_tmp_o * 0.0039859244840414 +
                       proc_control_node_B.out1_tmp_dd * 0.070445383214219059) +
                      proc_control_node_B.out1_tmp_l * 0.021882274381510681) +
                     proc_control_node_B.out1_tmp_ls * 0.0001303522588356414)) +
                   ((proc_control_node_B.t84 * 0.0080268590155159435 +
                     proc_control_node_B.t87 * 1.71018810547529) -
                    proc_control_node_B.out1_tmp_dr * 0.42933022336523952)) +
                  ((proc_control_node_B.t45_p * -100.460348544499 -
                    proc_control_node_B.out1_tmp_ku * 0.0025575113183552841) -
                   proc_control_node_B.t56_b * 0.47151599980996189)) +
                 ((proc_control_node_B.t55_ko * -0.022292555139725449 -
                   proc_control_node_B.t65_l * 0.0001303522588356414) +
                  proc_control_node_B.t71 * 53.015831269733987)) +
                ((proc_control_node_B.t81 * 0.0039859244840414 +
                  proc_control_node_B.t68_n * 0.0080268590155159435) -
                 proc_control_node_B.t85 * 0.021882274381510681)) +
               ((proc_control_node_B.t37_k * -0.2488326294809943 +
                 proc_control_node_B.t63 * 0.0039859244840414) -
                proc_control_node_B.t80 * 1.71018810547529)) +
              ((proc_control_node_B.out1_tmp_fo * 0.002272431716587712 -
                proc_control_node_B.t33_p * 0.1235636590052834) +
               proc_control_node_B.t39_c * 0.0080268590155159435)) +
    (proc_control_node_B.t67 * -1.71018810547529 + 1.0426116576073889);
  out1[11] = ((((((((((((((((((((((in2[0] * -0.010033314971702871 - in2[1] *
    0.0001026911824132076) + in2[2] * 0.00039756137245743289) - in2[3] *
    0.0080268590155159435) + (in2[4] * 0.58374455968341665 - in2[5] *
    1.606290206365557E-6)) + (in3[0] * 5.24748238233168E-7 - in3[1] *
    1.083514276897426E-19)) + in3[2] * -5.3156315041823265E-7) + (in3[3] *
    -5.2929151302328333E-7 + in3[4] * 0.10593667623599359)) + (in3[5] *
    0.10537885436940329 - in3[6] * 0.10793139553633729)) + (in3[7] *
    -0.1033841350690595 + proc_control_node_B.t8_n * 6.3908140435873166)) +
    ((proc_control_node_B.t9_gt * 0.087876754449678615 +
      proc_control_node_B.t10_d * 0.087876754449678615) -
     proc_control_node_B.t11_cj * 6.3908140435873166)) +
    ((proc_control_node_B.t12_m * 0.36480930847148191 +
      proc_control_node_B.t13_d * 0.36480930847148191) + in3[0] *
     1.4142135623730951 * 0.013457654526727991)) + ((in3[1] * 1.4142135623730951
    * 0.013869054980635681 + in3[2] * 1.4142135623730951 * 0.013457654526727991)
    + in3[3] * 1.4142135623730951 * 0.01386868232130781)) +
                       (((proc_control_node_B.t15_n * 0.311032764122789 +
    proc_control_node_B.t20_b * 0.0080268590155159435) -
    proc_control_node_B.t16_n * 0.0001026911824132076) +
                        proc_control_node_B.t17_cd * 0.00039756137245743289)) +
                      ((proc_control_node_B.t18_dk * 0.58374455968341665 +
                        proc_control_node_B.t19_n * 1.606290206365557E-6) -
                       proc_control_node_B.t21_g * 0.58374455968341665)) +
                     (((proc_control_node_B.t22_l * 0.0031834266548094372 +
                        proc_control_node_B.t23_g * 0.00039756137245743289) -
                       proc_control_node_B.out1_tmp_cx * 0.010033314971702871) -
                      proc_control_node_B.out1_tmp_f * 1.606290206365557E-6)) +
                    (((proc_control_node_B.t86 * 0.0080268590155159435 +
                       proc_control_node_B.out1_tmp_o * 1.606290206365557E-6) -
                      proc_control_node_B.out1_tmp_dd * 0.01232440254618042) -
                     proc_control_node_B.out1_tmp_l * 0.0001026911824132076)) +
                   ((proc_control_node_B.out1_tmp_ls * -0.010033314971702871 -
                     proc_control_node_B.t84 * 0.58374455968341665) -
                    proc_control_node_B.t87 * 0.0080268590155159435)) +
                  ((proc_control_node_B.out1_tmp_dr * 0.002014800998947134 +
                    proc_control_node_B.t45_p * 0.47151599980996189) +
                   proc_control_node_B.out1_tmp_ku * 0.19685363974481029)) +
                 ((proc_control_node_B.t56_b * 34.290486373399979 +
                   proc_control_node_B.t55_ko * 0.003900077063807416) +
                  proc_control_node_B.t65_l * 0.010033314971702871)) +
                ((proc_control_node_B.t71 * -0.2488326294809943 +
                  proc_control_node_B.t81 * 1.606290206365557E-6) -
                 proc_control_node_B.t68_n * 0.58374455968341665)) +
               (((proc_control_node_B.t85 * 0.0001026911824132076 +
                  proc_control_node_B.t37_k * 18.096081350185919) +
                 proc_control_node_B.t63 * 1.606290206365557E-6) +
                proc_control_node_B.t80 * 0.0080268590155159435)) +
              ((proc_control_node_B.out1_tmp_fo * -0.00039756137245743289 -
                proc_control_node_B.t33_p * 4.9794996397332282E-5) -
               proc_control_node_B.t39_c * 0.58374455968341665)) +
    (proc_control_node_B.t67 * 0.0080268590155159435 - 0.182404654235741);
  out1[12] = (((((((((((((((((((((((in2[0] * 0.0010125044874363649 - in2[1] *
    0.00042780737967584029) + in2[2] * 5.2828771531483014E-6) - in2[3] *
    0.0039859244840414) + (in2[4] * -1.606290206365557E-6 + in2[5] *
    0.53015902215788635)) + in3[0] * -0.1731941163298826) + in3[1] *
    -1.4397960202092559E-21) + in3[2] * 0.175443390567933) + (in3[3] *
    0.17469363248858291 + in3[4] * 0.00062021813460420567)) + (in3[5] *
    -0.0006207996116589 - in3[6] * 0.00064672437426625525)) + (in3[7] *
    0.00064730585132094889 - proc_control_node_B.t8_n * 0.64492422651466708)) +
    ((proc_control_node_B.t9_gt * 0.3660910622711756 + proc_control_node_B.t10_d
      * 0.3660910622711756) + proc_control_node_B.t11_cj * 0.64492422651466708))
    + ((proc_control_node_B.t12_m * 0.0048476610015380046 +
        proc_control_node_B.t13_d * 0.0048476610015380046) + in3[0] *
       1.4142135623730951 * 0.00059255494878017434)) + ((in3[1] *
    1.4142135623730951 * -0.1225770464045467 + in3[2] * 1.4142135623730951 *
    0.00059255494878017434) + in3[3] * 1.4142135623730951 *
    0.00041984673608298361)) + (((proc_control_node_B.t15_n *
    -0.031387639110527318 + proc_control_node_B.t20_b * 0.0039859244840414) -
    proc_control_node_B.t16_n * 0.00042780737967584029) +
    proc_control_node_B.t17_cd * 5.2828771531483014E-6)) +
                      (((proc_control_node_B.t18_dk * -1.606290206365557E-6 -
    proc_control_node_B.t19_n * 0.53015902215788635) + proc_control_node_B.t21_g
                        * 1.606290206365557E-6) + proc_control_node_B.t22_l *
                       0.013262028769951049)) + (((proc_control_node_B.t23_g *
    5.2828771531483014E-6 + proc_control_node_B.out1_tmp_cx *
    0.0010125044874363649) + proc_control_node_B.out1_tmp_f *
    0.53015902215788635) + proc_control_node_B.t86 * 0.0039859244840414)) +
                    ((proc_control_node_B.out1_tmp_o * -0.53015902215788635 -
                      proc_control_node_B.out1_tmp_dd * 0.00016376919174759729)
                     - proc_control_node_B.out1_tmp_l * 0.00042780737967584029))
                   + (((proc_control_node_B.out1_tmp_ls * 0.0010125044874363649
                        + proc_control_node_B.t84 * 1.606290206365557E-6) -
                       proc_control_node_B.t87 * 0.0039859244840414) +
                      proc_control_node_B.out1_tmp_dr * 0.008393580789239987)) +
                  ((proc_control_node_B.t45_p * 0.23414229210041551 -
                    proc_control_node_B.out1_tmp_ku * 0.01986533804350149) -
                   proc_control_node_B.t56_b * 9.4357149063583354E-5)) +
                 ((proc_control_node_B.t55_ko * 5.1825024872384838E-5 -
                   proc_control_node_B.t65_l * 0.0010125044874363649) -
                  proc_control_node_B.t71 * 0.1235636590052834)) +
                (((proc_control_node_B.t81 * -0.53015902215788635 +
                   proc_control_node_B.t68_n * 1.606290206365557E-6) +
                  proc_control_node_B.t85 * 0.00042780737967584029) -
                 proc_control_node_B.t37_k * 4.9794996397332282E-5)) +
               ((proc_control_node_B.t63 * -0.53015902215788635 +
                 proc_control_node_B.t80 * 0.0039859244840414) -
                proc_control_node_B.out1_tmp_fo * 5.2828771531483014E-6)) +
              ((proc_control_node_B.t33_p * 16.434929686894481 +
                proc_control_node_B.t39_c * 1.606290206365557E-6) +
               proc_control_node_B.t67 * 0.0039859244840414)) +
    -0.0024238305007690032;
}

// Function for MATLAB Function: '<S353>/Predict'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_cf(int32_T n, const
  real_T x[338], int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_node_B.scale_p = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_p) {
          real_T t;
          t = proc_control_node_B.scale_p / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_p = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_node_B.scale_p;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_p * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S353>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgemv_l(int32_T m, int32_T n,
  const real_T A[338], int32_T ia0, const real_T x[338], int32_T ix0, real_T y
  [13])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 26 + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 26) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_node_B.c_es = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_es += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_es;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S353>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgerc_eo(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[13], real_T A[338], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_node_B.temp_d = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_d;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 26;
    }
  }
}

// Function for MATLAB Function: '<S353>/Predict'
void proc_control_nodeModelClass::proc_control_node_qrFactor_d(const real_T A
  [169], real_T S[169], const real_T Ns[169])
{
  int32_T ii;
  int32_T knt;
  for (proc_control_node_B.j = 0; proc_control_node_B.j < 13;
       proc_control_node_B.j++) {
    proc_control_node_B.coffset = proc_control_node_B.j * 13;
    for (ii = 0; ii < 13; ii++) {
      proc_control_node_B.aoffset = ii * 13;
      proc_control_node_B.s_k = 0.0;
      for (knt = 0; knt < 13; knt++) {
        proc_control_node_B.s_k += A[knt * 13 + proc_control_node_B.j] *
          S[proc_control_node_B.aoffset + knt];
      }

      proc_control_node_B.y_a[proc_control_node_B.coffset + ii] =
        proc_control_node_B.s_k;
      knt = 26 * proc_control_node_B.j + ii;
      proc_control_node_B.b_A_m[knt] = proc_control_node_B.y_a[13 *
        proc_control_node_B.j + ii];
      proc_control_node_B.b_A_m[knt + 13] = Ns[13 * ii + proc_control_node_B.j];
    }

    proc_control_node_B.work_e[proc_control_node_B.j] = 0.0;
  }

  for (proc_control_node_B.j = 0; proc_control_node_B.j < 13;
       proc_control_node_B.j++) {
    ii = proc_control_node_B.j * 26 + proc_control_node_B.j;
    proc_control_node_B.atmp_h = proc_control_node_B.b_A_m[ii];
    proc_control_node_B.tau_d[proc_control_node_B.j] = 0.0;
    proc_control_node_B.s_k = proc_control_node_xnrm2_cf(25 -
      proc_control_node_B.j, proc_control_node_B.b_A_m, ii + 2);
    if (proc_control_node_B.s_k != 0.0) {
      proc_control_node_B.s_k = rt_hypotd_snf(proc_control_node_B.b_A_m[ii],
        proc_control_node_B.s_k);
      if (proc_control_node_B.b_A_m[ii] >= 0.0) {
        proc_control_node_B.s_k = -proc_control_node_B.s_k;
      }

      if (std::abs(proc_control_node_B.s_k) < 1.0020841800044864E-292) {
        knt = -1;
        proc_control_node_B.coffset = (ii - proc_control_node_B.j) + 26;
        do {
          knt++;
          proc_control_node_B.aoffset = ii + 1;
          while (proc_control_node_B.aoffset + 1 <= proc_control_node_B.coffset)
          {
            proc_control_node_B.b_A_m[proc_control_node_B.aoffset] *=
              9.9792015476736E+291;
            proc_control_node_B.aoffset++;
          }

          proc_control_node_B.s_k *= 9.9792015476736E+291;
          proc_control_node_B.atmp_h *= 9.9792015476736E+291;
        } while (!(std::abs(proc_control_node_B.s_k) >= 1.0020841800044864E-292));

        proc_control_node_B.s_k = rt_hypotd_snf(proc_control_node_B.atmp_h,
          proc_control_node_xnrm2_cf(25 - proc_control_node_B.j,
          proc_control_node_B.b_A_m, ii + 2));
        if (proc_control_node_B.atmp_h >= 0.0) {
          proc_control_node_B.s_k = -proc_control_node_B.s_k;
        }

        proc_control_node_B.tau_d[proc_control_node_B.j] =
          (proc_control_node_B.s_k - proc_control_node_B.atmp_h) /
          proc_control_node_B.s_k;
        proc_control_node_B.atmp_h = 1.0 / (proc_control_node_B.atmp_h -
          proc_control_node_B.s_k);
        proc_control_node_B.aoffset = ii + 1;
        while (proc_control_node_B.aoffset + 1 <= proc_control_node_B.coffset) {
          proc_control_node_B.b_A_m[proc_control_node_B.aoffset] *=
            proc_control_node_B.atmp_h;
          proc_control_node_B.aoffset++;
        }

        proc_control_node_B.coffset = 0;
        while (proc_control_node_B.coffset <= knt) {
          proc_control_node_B.s_k *= 1.0020841800044864E-292;
          proc_control_node_B.coffset++;
        }

        proc_control_node_B.atmp_h = proc_control_node_B.s_k;
      } else {
        proc_control_node_B.tau_d[proc_control_node_B.j] =
          (proc_control_node_B.s_k - proc_control_node_B.b_A_m[ii]) /
          proc_control_node_B.s_k;
        proc_control_node_B.atmp_h = 1.0 / (proc_control_node_B.b_A_m[ii] -
          proc_control_node_B.s_k);
        knt = (ii - proc_control_node_B.j) + 26;
        proc_control_node_B.coffset = ii + 1;
        while (proc_control_node_B.coffset + 1 <= knt) {
          proc_control_node_B.b_A_m[proc_control_node_B.coffset] *=
            proc_control_node_B.atmp_h;
          proc_control_node_B.coffset++;
        }

        proc_control_node_B.atmp_h = proc_control_node_B.s_k;
      }
    }

    proc_control_node_B.b_A_m[ii] = proc_control_node_B.atmp_h;
    if (proc_control_node_B.j + 1 < 13) {
      proc_control_node_B.s_k = proc_control_node_B.b_A_m[ii];
      proc_control_node_B.b_A_m[ii] = 1.0;
      if (proc_control_node_B.tau_d[proc_control_node_B.j] != 0.0) {
        boolean_T exitg2;
        knt = 26 - proc_control_node_B.j;
        proc_control_node_B.coffset = (ii - proc_control_node_B.j) + 25;
        while ((knt > 0) &&
               (proc_control_node_B.b_A_m[proc_control_node_B.coffset] == 0.0))
        {
          knt--;
          proc_control_node_B.coffset--;
        }

        proc_control_node_B.coffset = 12 - proc_control_node_B.j;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.coffset > 0)) {
          int32_T exitg1;
          int32_T ia;
          proc_control_node_B.aoffset = ((proc_control_node_B.coffset - 1) * 26
            + ii) + 26;
          ia = proc_control_node_B.aoffset;
          do {
            exitg1 = 0;
            if (ia + 1 <= proc_control_node_B.aoffset + knt) {
              if (proc_control_node_B.b_A_m[ia] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              proc_control_node_B.coffset--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = 0;
        proc_control_node_B.coffset = 0;
      }

      if (knt > 0) {
        proc_control_node_xgemv_l(knt, proc_control_node_B.coffset,
          proc_control_node_B.b_A_m, ii + 27, proc_control_node_B.b_A_m, ii + 1,
          proc_control_node_B.work_e);
        proc_control_node_xgerc_eo(knt, proc_control_node_B.coffset,
          -proc_control_node_B.tau_d[proc_control_node_B.j], ii + 1,
          proc_control_node_B.work_e, proc_control_node_B.b_A_m, ii + 27);
      }

      proc_control_node_B.b_A_m[ii] = proc_control_node_B.s_k;
    }
  }

  for (proc_control_node_B.j = 0; proc_control_node_B.j < 13;
       proc_control_node_B.j++) {
    for (ii = 0; ii <= proc_control_node_B.j; ii++) {
      proc_control_node_B.y_a[ii + 13 * proc_control_node_B.j] =
        proc_control_node_B.b_A_m[26 * proc_control_node_B.j + ii];
    }

    for (ii = proc_control_node_B.j + 1; ii + 1 < 14; ii++) {
      proc_control_node_B.y_a[ii + 13 * proc_control_node_B.j] = 0.0;
    }
  }

  knt = 0;
  for (proc_control_node_B.j = 0; proc_control_node_B.j < 13;
       proc_control_node_B.j++) {
    proc_control_node_B.coffset = 0;
    for (ii = 0; ii < 13; ii++) {
      S[ii + knt] = proc_control_node_B.y_a[proc_control_node_B.coffset +
        proc_control_node_B.j];
      proc_control_node_B.coffset += 13;
    }

    knt += 13;
  }
}

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
  real_T y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = (rtNaN);
  } else if (std::isinf(u0) && std::isinf(u1)) {
    int32_T u0_0;
    int32_T u1_0;
    if (u0 > 0.0) {
      u0_0 = 1;
    } else {
      u0_0 = -1;
    }

    if (u1 > 0.0) {
      u1_0 = 1;
    } else {
      u1_0 = -1;
    }

    y = std::atan2(static_cast<real_T>(u0_0), static_cast<real_T>(u1_0));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = std::atan2(u0, u1);
  }

  return y;
}

void proc_control_nodeModelClass::MultiTrajectoryManager_resetImp
  (MultiTrajectoryManager_proc_c_T *b_this)
{
  int32_T i;

  //  Perform one-time calculations, such as computing constants
  b_this->dummy = 999.0;

  //  Chiffre NULL
  for (i = 0; i < 13; i++) {
    b_this->emptyArray[i] = b_this->dummy;
  }

  //  Vecteur pose NULL
  b_this->targetReachedCount = 0.0;
  for (i = 0; i < 7; i++) {
    b_this->initialPose[i] = 0.0;
  }

  //  Buffer trajectoire
  i = 0;
  for (int32_T i_1{0}; i_1 < 13; i_1++) {
    for (int32_T i_0{0}; i_0 < 6000; i_0++) {
      b_this->poseBuffer[i_0 + i] = b_this->dummy;
    }

    i += 6000;
  }

  b_this->bufferCount = 0.0;
  b_this->done = false;
  b_this->init = false;
}

real_T proc_control_nodeModelClass::proc_control_node_norm_b4(const real_T x[3])
{
  real_T absxk;
  real_T t;
  real_T y;
  proc_control_node_B.scale_jd = 3.3121686421112381E-170;
  absxk = std::abs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    proc_control_node_B.scale_jd = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  absxk = std::abs(x[1]);
  if (absxk > proc_control_node_B.scale_jd) {
    t = proc_control_node_B.scale_jd / absxk;
    y = y * t * t + 1.0;
    proc_control_node_B.scale_jd = absxk;
  } else {
    t = absxk / proc_control_node_B.scale_jd;
    y += t * t;
  }

  absxk = std::abs(x[2]);
  if (absxk > proc_control_node_B.scale_jd) {
    t = proc_control_node_B.scale_jd / absxk;
    y = y * t * t + 1.0;
    proc_control_node_B.scale_jd = absxk;
  } else {
    t = absxk / proc_control_node_B.scale_jd;
    y += t * t;
  }

  return proc_control_node_B.scale_jd * std::sqrt(y);
}

void proc_control_nodeModelClass::MultiTrajectoryManager_stepImpl
  (MultiTrajectoryManager_proc_c_T *b_this, boolean_T isNew, const
   SL_Bus_proc_control_node_geometry_msgs_Transform trajMsg_Transforms[2000],
   uint32_T trajMsg_Transforms_SL_Info_Rece, const
   SL_Bus_proc_control_node_geometry_msgs_Twist trajMsg_Velocities[2000], real_T
   reset, const real_T mesuredPose[13], real_T currentPose[130], boolean_T
   *isReached, boolean_T *isTrajDone, real_T initWpt[7])
{
  int32_T b_this_0;
  int32_T h_size_idx_1;
  int32_T k;
  int32_T nx;
  int32_T trueCount;
  boolean_T exitg1;
  boolean_T mask1;
  boolean_T mask2;

  //         %% ================================================================ 
  //  Main execute a chaque iteration.
  if ((reset != 0.0) || (!b_this->init)) {
    MultiTrajectoryManager_resetImp(b_this);
    std::memcpy(&proc_control_node_B.tamp[0], &mesuredPose[0], 13U * sizeof
                (real_T));

    // =================================================================
    //  Fonction qui reset la trajectoire
    //  remove roll and pitch from initial condition
    proc_control_node_B.aSinInput = 1.0 / std::sqrt(((mesuredPose[3] *
      mesuredPose[3] + mesuredPose[4] * mesuredPose[4]) + mesuredPose[5] *
      mesuredPose[5]) + mesuredPose[6] * mesuredPose[6]);
    proc_control_node_B.s_idx_0 = mesuredPose[3] * proc_control_node_B.aSinInput;
    proc_control_node_B.s_idx_2 = mesuredPose[4] * proc_control_node_B.aSinInput;
    proc_control_node_B.y_idx_2 = mesuredPose[5] * proc_control_node_B.aSinInput;
    proc_control_node_B.y_idx_3 = mesuredPose[6] * proc_control_node_B.aSinInput;
    proc_control_node_B.aSinInput = (proc_control_node_B.s_idx_2 *
      proc_control_node_B.y_idx_3 + proc_control_node_B.s_idx_0 *
      proc_control_node_B.y_idx_2) * 2.0;
    mask1 = (proc_control_node_B.aSinInput >= 0.99999999999999778);
    mask2 = (proc_control_node_B.aSinInput <= -0.99999999999999778);
    if (proc_control_node_B.aSinInput >= 0.99999999999999778) {
      proc_control_node_B.aSinInput = 1.0;
    }

    proc_control_node_B.c_idx_0 = proc_control_node_B.aSinInput;
    if (mask2) {
      proc_control_node_B.c_idx_0 = -1.0;
    }

    proc_control_node_B.aSinInput = proc_control_node_B.s_idx_0 *
      proc_control_node_B.s_idx_0;
    proc_control_node_B.c_tmp = proc_control_node_B.s_idx_2 *
      proc_control_node_B.s_idx_2;
    proc_control_node_B.c_tmp_d = proc_control_node_B.y_idx_2 *
      proc_control_node_B.y_idx_2;
    proc_control_node_B.c_tmp_j = proc_control_node_B.y_idx_3 *
      proc_control_node_B.y_idx_3;
    proc_control_node_B.c_g[0] = rt_atan2d_snf((proc_control_node_B.y_idx_2 *
      proc_control_node_B.y_idx_3 - proc_control_node_B.s_idx_0 *
      proc_control_node_B.s_idx_2) * -2.0, ((proc_control_node_B.aSinInput -
      proc_control_node_B.c_tmp) - proc_control_node_B.c_tmp_d) +
      proc_control_node_B.c_tmp_j);
    proc_control_node_B.c_g[2] = rt_atan2d_snf((proc_control_node_B.s_idx_2 *
      proc_control_node_B.y_idx_2 - proc_control_node_B.s_idx_0 *
      proc_control_node_B.y_idx_3) * -2.0, ((proc_control_node_B.aSinInput +
      proc_control_node_B.c_tmp) - proc_control_node_B.c_tmp_d) -
      proc_control_node_B.c_tmp_j);
    trueCount = 0;
    if (mask1 || mask2) {
      for (nx = 0; nx < 1; nx++) {
        trueCount++;
      }
    }

    if (0 <= trueCount - 1) {
      proc_control_node_B.c_g[0] = 0.0;
    }

    trueCount = 0;
    if (mask1 || mask2) {
      for (nx = 0; nx < 1; nx++) {
        trueCount++;
      }
    }

    h_size_idx_1 = trueCount;
    if (0 <= trueCount - 1) {
      proc_control_node_B.b_x_data_idx_0 = proc_control_node_B.c_idx_0;
    }

    nx = trueCount - 1;
    for (k = 0; k <= nx; k++) {
      if (proc_control_node_B.b_x_data_idx_0 < 0.0) {
        proc_control_node_B.y_idx_2 = -1.0;
      } else if (proc_control_node_B.b_x_data_idx_0 > 0.0) {
        proc_control_node_B.y_idx_2 = 1.0;
      } else if (proc_control_node_B.b_x_data_idx_0 == 0.0) {
        proc_control_node_B.y_idx_2 = 0.0;
      } else {
        proc_control_node_B.y_idx_2 = (rtNaN);
      }

      proc_control_node_B.b_x_data_idx_0 = proc_control_node_B.y_idx_2;
    }

    trueCount = 0;
    if (mask1 || mask2) {
      for (nx = 0; nx < 1; nx++) {
        trueCount++;
      }
    }

    if (0 <= trueCount - 1) {
      proc_control_node_B.e_data_idx_0 = rt_atan2d_snf
        (proc_control_node_B.s_idx_2, proc_control_node_B.s_idx_0);
    }

    if (0 <= h_size_idx_1 - 1) {
      proc_control_node_B.c_g[2] = proc_control_node_B.b_x_data_idx_0 * 2.0 *
        proc_control_node_B.e_data_idx_0;
    }

    //  Retransformer en quaternion
    proc_control_node_B.s_idx_0 = proc_control_node_B.c_g[0] * 0.0 / 2.0;
    proc_control_node_B.aSinInput = std::asin(proc_control_node_B.c_idx_0) * 0.0
      / 2.0;
    proc_control_node_B.s_idx_2 = proc_control_node_B.c_g[2] / 2.0;
    proc_control_node_B.c_g[0] = std::cos(proc_control_node_B.s_idx_0);
    proc_control_node_B.c_g[1] = std::cos(proc_control_node_B.aSinInput);
    proc_control_node_B.c_g[2] = std::cos(proc_control_node_B.s_idx_2);
    proc_control_node_B.s_idx_0 = std::sin(proc_control_node_B.s_idx_0);
    proc_control_node_B.aSinInput = std::sin(proc_control_node_B.aSinInput);
    proc_control_node_B.s_idx_2 = std::sin(proc_control_node_B.s_idx_2);
    proc_control_node_B.y_idx_2 = proc_control_node_B.c_g[0] *
      proc_control_node_B.c_g[1];
    proc_control_node_B.y_idx_3 = proc_control_node_B.s_idx_0 *
      proc_control_node_B.aSinInput;
    proc_control_node_B.tamp[3] = proc_control_node_B.y_idx_2 *
      proc_control_node_B.c_g[2] - proc_control_node_B.y_idx_3 *
      proc_control_node_B.s_idx_2;
    proc_control_node_B.aSinInput *= proc_control_node_B.c_g[0];
    proc_control_node_B.tamp[4] = proc_control_node_B.s_idx_0 *
      proc_control_node_B.c_g[1] * proc_control_node_B.c_g[2] +
      proc_control_node_B.aSinInput * proc_control_node_B.s_idx_2;
    proc_control_node_B.tamp[5] = -proc_control_node_B.s_idx_0 *
      proc_control_node_B.c_g[1] * proc_control_node_B.s_idx_2 +
      proc_control_node_B.aSinInput * proc_control_node_B.c_g[2];
    proc_control_node_B.tamp[6] = proc_control_node_B.y_idx_2 *
      proc_control_node_B.s_idx_2 + proc_control_node_B.y_idx_3 *
      proc_control_node_B.c_g[2];

    //  Mettre les vitesse à 0;
    for (trueCount = 0; trueCount < 6; trueCount++) {
      proc_control_node_B.tamp[trueCount + 7] = 0.0;
    }

    //  definir les conditions initiaux
    trueCount = 0;
    for (nx = 0; nx < 13; nx++) {
      b_this->poseBuffer[trueCount] = proc_control_node_B.tamp[nx];
      trueCount += 6000;
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    for (trueCount = 0; trueCount < 7; trueCount++) {
      b_this->initialPose[trueCount] = proc_control_node_B.tamp[trueCount];
    }

    b_this->init = true;
    isNew = false;
  }

  //  Add new pose if new arrive
  //         %% ================================================================ 
  //  Fonction qui traites les nouveau poses.
  //  Si il y a des noiveau points
  if (isNew) {
    //  nombre de points recu.
    //  si il y a asser de place dans le buffer.
    if (static_cast<real_T>(trajMsg_Transforms_SL_Info_Rece) +
        b_this->bufferCount < 6000.0) {
      std::memset(&proc_control_node_B.tamp[0], 0, 13U * sizeof(real_T));

      //  Remplire le tampon
      nx = static_cast<int32_T>(trajMsg_Transforms_SL_Info_Rece) - 1;
      for (k = 0; k <= nx; k++) {
        proc_control_node_B.tamp[0] = trajMsg_Transforms[k].Translation.X;
        proc_control_node_B.tamp[1] = trajMsg_Transforms[k].Translation.Y;
        proc_control_node_B.tamp[2] = trajMsg_Transforms[k].Translation.Z;
        proc_control_node_B.tamp[3] = trajMsg_Transforms[k].Rotation.W;
        proc_control_node_B.tamp[4] = trajMsg_Transforms[k].Rotation.X;
        proc_control_node_B.tamp[5] = trajMsg_Transforms[k].Rotation.Y;
        proc_control_node_B.tamp[6] = trajMsg_Transforms[k].Rotation.Z;
        proc_control_node_B.tamp[7] = trajMsg_Velocities[k].Linear.X;
        proc_control_node_B.tamp[8] = trajMsg_Velocities[k].Linear.Y;
        proc_control_node_B.tamp[9] = trajMsg_Velocities[k].Linear.Z;
        proc_control_node_B.tamp[10] = trajMsg_Velocities[k].Angular.X;
        proc_control_node_B.tamp[11] = trajMsg_Velocities[k].Angular.Y;
        proc_control_node_B.tamp[12] = trajMsg_Velocities[k].Angular.Z;
        b_this->bufferCount++;
        b_this_0 = static_cast<int32_T>(b_this->bufferCount);
        for (trueCount = 0; trueCount < 13; trueCount++) {
          b_this->poseBuffer[(b_this_0 + 6000 * trueCount) - 1] =
            proc_control_node_B.tamp[trueCount];
        }
      }

      //  Definir le pose initial pour la prochaine trajectoire
      for (trueCount = 0; trueCount < 7; trueCount++) {
        b_this->initialPose[trueCount] = proc_control_node_B.tamp[trueCount];
      }
    } else {
      printf("WARNING : proc control : trajectory buffer overflow.");
      fflush(stdout);
    }
  }

  //         %% ================================================================ 
  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  proc_control_node_B.aSinInput = 2.0;
  mask1 = false;

  //  Vérifier s'il reste au moins mpc.p points dans les buffers
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k < 9)) {
    boolean_T exitg2;
    proc_control_node_B.aSinInput = static_cast<real_T>(k) + 2.0;
    for (trueCount = 0; trueCount < 13; trueCount++) {
      proc_control_node_B.x_m[trueCount] = (b_this->poseBuffer[(6000 * trueCount
        + k) + 1] == b_this->emptyArray[trueCount]);
    }

    mask2 = true;
    nx = 0;
    exitg2 = false;
    while ((!exitg2) && (nx < 13)) {
      if (!proc_control_node_B.x_m[nx]) {
        mask2 = false;
        exitg2 = true;
      } else {
        nx++;
      }
    }

    if (mask2) {
      mask1 = true;
      exitg1 = true;
    } else {
      k++;
    }
  }

  std::memset(&currentPose[0], 0, 130U * sizeof(real_T));
  b_this_0 = static_cast<int32_T>(proc_control_node_B.aSinInput);
  trueCount = 0;
  nx = 0;
  for (k = 0; k < 13; k++) {
    for (h_size_idx_1 = 0; h_size_idx_1 < b_this_0; h_size_idx_1++) {
      currentPose[h_size_idx_1 + trueCount] = b_this->poseBuffer[h_size_idx_1 +
        nx];
    }

    trueCount += 10;
    nx += 6000;
  }

  //  S'il ya moins de mpc.p points, padder avec le dernier points
  if (mask1) {
    nx = 10 - b_this_0;
    for (k = 0; k <= nx; k++) {
      h_size_idx_1 = b_this_0 + k;
      for (trueCount = 0; trueCount < 13; trueCount++) {
        proc_control_node_B.tamp[trueCount] = currentPose[(10 * trueCount +
          b_this_0) - 2];
      }

      for (trueCount = 0; trueCount < 13; trueCount++) {
        currentPose[(h_size_idx_1 + 10 * trueCount) - 1] =
          proc_control_node_B.tamp[trueCount];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  trueCount = 0;
  for (nx = 0; nx < 13; nx++) {
    proc_control_node_B.x_m[nx] = !(b_this->poseBuffer[trueCount + 1] ==
      b_this->emptyArray[nx]);
    trueCount += 6000;
  }

  mask2 = true;
  nx = 0;
  exitg1 = false;
  while ((!exitg1) && (nx < 13)) {
    if (!proc_control_node_B.x_m[nx]) {
      mask2 = false;
      exitg1 = true;
    } else {
      nx++;
    }
  }

  if (mask2) {
    // this.prediction+1
    trueCount = 0;
    for (nx = 0; nx < 13; nx++) {
      std::memcpy(&proc_control_node_B.b_this_m[trueCount], &b_this->
                  poseBuffer[trueCount + 1], 5999U * sizeof(real_T));
      trueCount += 6000;
    }

    trueCount = 0;
    for (nx = 0; nx < 13; nx++) {
      proc_control_node_B.b_this_m[trueCount + 5999] = b_this->emptyArray[nx];
      trueCount += 6000;
    }

    std::memcpy(&b_this->poseBuffer[0], &proc_control_node_B.b_this_m[0], 78000U
                * sizeof(real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    b_this->done = true;
  }

  //         %% ================================================================ 
  //  Fonction qui verifie le target reached
  *isReached = false;

  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  calcule de l'angle entre les 2 quaternions
    proc_control_node_B.qRel_o[0] = ((mesuredPose[3] * b_this->poseBuffer[18000]
      - -b_this->poseBuffer[24000] * mesuredPose[4]) - -b_this->poseBuffer[30000]
      * mesuredPose[5]) - -b_this->poseBuffer[36000] * mesuredPose[6];
    proc_control_node_B.qRel_o[1] = (mesuredPose[4] * b_this->poseBuffer[18000]
      + mesuredPose[3] * -b_this->poseBuffer[24000]) + (-b_this->poseBuffer
      [30000] * mesuredPose[6] - -b_this->poseBuffer[36000] * mesuredPose[5]);
    proc_control_node_B.qRel_o[2] = (mesuredPose[5] * b_this->poseBuffer[18000]
      + mesuredPose[3] * -b_this->poseBuffer[30000]) + (-b_this->poseBuffer
      [36000] * mesuredPose[4] - -b_this->poseBuffer[24000] * mesuredPose[6]);
    proc_control_node_B.qRel_o[3] = (mesuredPose[6] * b_this->poseBuffer[18000]
      + mesuredPose[3] * -b_this->poseBuffer[36000]) + (-b_this->poseBuffer
      [24000] * mesuredPose[5] - -b_this->poseBuffer[30000] * mesuredPose[4]);

    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    proc_control_node_B.c_g[0] = b_this->poseBuffer[0] - mesuredPose[0];
    proc_control_node_B.c_g[1] = b_this->poseBuffer[6000] - mesuredPose[1];
    proc_control_node_B.c_g[2] = b_this->poseBuffer[12000] - mesuredPose[2];
    if ((proc_control_node_norm_b4(proc_control_node_B.c_g) < 0.2) && (2.0 *
         rt_atan2d_snf(proc_control_node_norm_b4(&proc_control_node_B.qRel_o[1]),
                       proc_control_node_B.qRel_o[0]) < 0.1)) {
      b_this->targetReachedCount++;

      //  si le sub est dans la zone de convergence depuis le temps demander
      *isReached = (b_this->targetReachedCount * 0.1 >= 3.0);
    } else {
      //  Remettre le compteur a 0 si le sub n'est pas dans la zone
      b_this->targetReachedCount = 0.0;
    }
  } else {
    b_this->targetReachedCount = 0.0;
  }

  *isTrajDone = b_this->done;
  for (trueCount = 0; trueCount < 7; trueCount++) {
    initWpt[trueCount] = b_this->initialPose[trueCount];
  }
}

void proc_control_nodeModelClass::proc_contr_quaternionBase_slerp(real_T q1_a,
  real_T q1_b, real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c,
  real_T q2_d, real_T t, real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d)
{
  real_T b_x;
  real_T dp;
  real_T n;
  real_T theta0;
  n = std::sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) + q1_d * q1_d);
  proc_control_node_B.q1n_a = q1_a / n;
  proc_control_node_B.q1n_b = q1_b / n;
  proc_control_node_B.q1n_c = q1_c / n;
  proc_control_node_B.q1n_d = q1_d / n;
  n = std::sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) + q2_d * q2_d);
  proc_control_node_B.q2n_a_n = q2_a / n;
  proc_control_node_B.q2n_b = q2_b / n;
  proc_control_node_B.q2n_c_m = q2_c / n;
  n = q2_d / n;
  dp = ((proc_control_node_B.q1n_a * proc_control_node_B.q2n_a_n +
         proc_control_node_B.q1n_b * proc_control_node_B.q2n_b) +
        proc_control_node_B.q1n_c * proc_control_node_B.q2n_c_m) +
    proc_control_node_B.q1n_d * n;
  if (dp < 0.0) {
    proc_control_node_B.q2n_a_n = -proc_control_node_B.q2n_a_n;
    proc_control_node_B.q2n_b = -proc_control_node_B.q2n_b;
    proc_control_node_B.q2n_c_m = -proc_control_node_B.q2n_c_m;
    n = -n;
    dp = -dp;
  }

  if (dp > 1.0) {
    dp = 1.0;
  }

  theta0 = std::acos(dp);
  dp = 1.0 / std::sin(theta0);
  b_x = std::sin((1.0 - t) * theta0);
  theta0 = std::sin(t * theta0);
  *qo_a = (b_x * proc_control_node_B.q1n_a + theta0 *
           proc_control_node_B.q2n_a_n) * dp;
  *qo_b = (b_x * proc_control_node_B.q1n_b + theta0 * proc_control_node_B.q2n_b)
    * dp;
  *qo_c = (b_x * proc_control_node_B.q1n_c + theta0 *
           proc_control_node_B.q2n_c_m) * dp;
  *qo_d = (b_x * proc_control_node_B.q1n_d + theta0 * n) * dp;
  if (std::isinf(dp)) {
    *qo_a = proc_control_node_B.q1n_a;
    *qo_b = proc_control_node_B.q1n_b;
    *qo_c = proc_control_node_B.q1n_c;
    *qo_d = proc_control_node_B.q1n_d;
  }

  n = std::sqrt(((*qo_a * *qo_a + *qo_b * *qo_b) + *qo_c * *qo_c) + *qo_d *
                *qo_d);
  *qo_a /= n;
  *qo_b /= n;
  *qo_c /= n;
  *qo_d /= n;
}

void proc_control_nodeModelClass::proc_control_quaternionBase_log(real_T q_a,
  real_T q_b, real_T q_c, real_T q_d, real_T *b_q_a, real_T *b_q_b, real_T
  *b_q_c, real_T *b_q_d)
{
  real_T vscale_data;
  real_T x_data;
  int32_T b_i;
  int32_T nx;
  int32_T vscale_size_idx_1;
  proc_control_node_B.vnorm = std::sqrt((q_b * q_b + q_c * q_c) + q_d * q_d);
  proc_control_node_B.qnorm = std::sqrt(q_a * q_a + proc_control_node_B.vnorm *
    proc_control_node_B.vnorm);
  b_i = 0;
  if (proc_control_node_B.vnorm != 0.0) {
    for (nx = 0; nx < 1; nx++) {
      b_i++;
    }
  }

  vscale_size_idx_1 = b_i;
  b_i--;
  for (nx = 0; nx <= b_i; nx++) {
    vscale_data = q_a / proc_control_node_B.qnorm;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    x_data = vscale_data;
  }

  nx = vscale_size_idx_1 - 1;
  for (b_i = 0; b_i <= nx; b_i++) {
    x_data = std::acos(x_data);
  }

  if (0 <= vscale_size_idx_1 - 1) {
    vscale_data = x_data / proc_control_node_B.vnorm;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    x_data = q_b * vscale_data;
  }

  *b_q_d = q_b;
  if (proc_control_node_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = x_data;
    }
  }

  *b_q_b = *b_q_d;
  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_b = 0.0;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    x_data = q_c * vscale_data;
  }

  *b_q_d = q_c;
  if (proc_control_node_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = x_data;
    }
  }

  *b_q_c = *b_q_d;
  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_c = 0.0;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    x_data = q_d * vscale_data;
  }

  *b_q_d = q_d;
  if (proc_control_node_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = x_data;
    }
  }

  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_d = 0.0;
  }

  *b_q_a = std::log(proc_control_node_B.qnorm);
}

quaternion_proc_control_node_T proc_control_nodeModelClass::
  proc_computeFirstQuatDerivative(real_T pn_a, real_T pn_b, real_T pn_c, real_T
  pn_d, real_T qn_a, real_T qn_b, real_T qn_c, real_T qn_d, real_T sd, real_T
  qinterp_a, real_T qinterp_b, real_T qinterp_c, real_T qinterp_d)
{
  quaternion_proc_control_node_T qdot;
  proc_control_quaternionBase_log(((pn_a * qn_a - -pn_b * qn_b) - -pn_c * qn_c)
    - -pn_d * qn_d, ((pn_a * qn_b + -pn_b * qn_a) + -pn_c * qn_d) - -pn_d * qn_c,
    ((pn_a * qn_c - -pn_b * qn_d) + -pn_c * qn_a) + -pn_d * qn_b, ((pn_a * qn_d
    + -pn_b * qn_c) - -pn_c * qn_b) + -pn_d * qn_a, &proc_control_node_B.y_a_l,
    &proc_control_node_B.y_b, &proc_control_node_B.y_c_f,
    &proc_control_node_B.y_d_j);
  qdot.a = (((qinterp_a * proc_control_node_B.y_a_l - qinterp_b *
              proc_control_node_B.y_b) - qinterp_c * proc_control_node_B.y_c_f)
            - qinterp_d * proc_control_node_B.y_d_j) * sd;
  qdot.b = (((qinterp_a * proc_control_node_B.y_b + qinterp_b *
              proc_control_node_B.y_a_l) + qinterp_c * proc_control_node_B.y_d_j)
            - qinterp_d * proc_control_node_B.y_c_f) * sd;
  qdot.c = (((qinterp_a * proc_control_node_B.y_c_f - qinterp_b *
              proc_control_node_B.y_d_j) + qinterp_c * proc_control_node_B.y_a_l)
            + qinterp_d * proc_control_node_B.y_b) * sd;
  qdot.d = (((qinterp_a * proc_control_node_B.y_d_j + qinterp_b *
              proc_control_node_B.y_c_f) - qinterp_c * proc_control_node_B.y_b)
            + qinterp_d * proc_control_node_B.y_a_l) * sd;
  return qdot;
}

void proc_control_nodeModelClass::proc_control_node_rottraj(const real_T R0[4],
  const real_T RF[4], const real_T timeInterval[2], real_T t, real_T R[4],
  real_T omega[3], real_T alpha[3])
{
  proc_control_node_B.linearScaling = 1.0 / (timeInterval[1] - timeInterval[0]);
  proc_control_node_B.b_idx_0 = (t - timeInterval[0]) *
    proc_control_node_B.linearScaling;
  if (t < timeInterval[0]) {
    proc_control_node_B.b_idx_0 = 0.0;
  }

  if (t > timeInterval[1]) {
    proc_control_node_B.b_idx_0 = 1.0;
  }

  if (t < timeInterval[0]) {
    proc_control_node_B.linearScaling = 0.0;
  }

  proc_control_node_B.e_idx_0 = proc_control_node_B.linearScaling;
  if (t > timeInterval[1]) {
    proc_control_node_B.e_idx_0 = 0.0;
  }

  proc_control_node_B.n_i = std::sqrt(((R0[0] * R0[0] + R0[1] * R0[1]) + R0[2] *
    R0[2]) + R0[3] * R0[3]);
  proc_control_node_B.oa = R0[0] / proc_control_node_B.n_i;
  proc_control_node_B.ob = R0[1] / proc_control_node_B.n_i;
  proc_control_node_B.oc = R0[2] / proc_control_node_B.n_i;
  proc_control_node_B.od = R0[3] / proc_control_node_B.n_i;
  proc_control_node_B.n_i = std::sqrt(((RF[0] * RF[0] + RF[1] * RF[1]) + RF[2] *
    RF[2]) + RF[3] * RF[3]);
  proc_control_node_B.qn_a = RF[0] / proc_control_node_B.n_i;
  proc_control_node_B.qn_b = RF[1] / proc_control_node_B.n_i;
  proc_control_node_B.qn_c = RF[2] / proc_control_node_B.n_i;
  proc_control_node_B.qn_d = RF[3] / proc_control_node_B.n_i;
  proc_control_node_B.n_tmp = std::sqrt(((proc_control_node_B.oa *
    proc_control_node_B.oa + proc_control_node_B.ob * proc_control_node_B.ob) +
    proc_control_node_B.oc * proc_control_node_B.oc) + proc_control_node_B.od *
    proc_control_node_B.od);
  proc_control_node_B.n_tmp_h = proc_control_node_B.oa /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_b_tmp = proc_control_node_B.ob /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_c_tmp = proc_control_node_B.oc /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_d_tmp = proc_control_node_B.od /
    proc_control_node_B.n_tmp;
  proc_control_node_B.n_tmp_n = std::sqrt(((proc_control_node_B.qn_a *
    proc_control_node_B.qn_a + proc_control_node_B.qn_b *
    proc_control_node_B.qn_b) + proc_control_node_B.qn_c *
    proc_control_node_B.qn_c) + proc_control_node_B.qn_d *
    proc_control_node_B.qn_d);
  proc_control_node_B.n_tmp = proc_control_node_B.qn_a /
    proc_control_node_B.n_tmp_n;
  proc_control_node_B.q2n_a = proc_control_node_B.n_tmp;
  proc_control_node_B.q2n_b_tmp = proc_control_node_B.qn_b /
    proc_control_node_B.n_tmp_n;
  proc_control_node_B.n_i = proc_control_node_B.q2n_b_tmp;
  proc_control_node_B.q2n_c_tmp = proc_control_node_B.qn_c /
    proc_control_node_B.n_tmp_n;
  proc_control_node_B.q2n_c = proc_control_node_B.q2n_c_tmp;
  proc_control_node_B.n_tmp_n = proc_control_node_B.qn_d /
    proc_control_node_B.n_tmp_n;
  proc_control_node_B.q2n_d = proc_control_node_B.n_tmp_n;
  proc_control_node_B.dp_tmp = ((proc_control_node_B.n_tmp_h *
    proc_control_node_B.n_tmp + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.q2n_b_tmp) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.q2n_c_tmp) + proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.n_tmp_n;
  proc_control_node_B.dp = proc_control_node_B.dp_tmp;
  if (proc_control_node_B.dp_tmp < 0.0) {
    proc_control_node_B.q2n_a = -proc_control_node_B.n_tmp;
    proc_control_node_B.n_i = -proc_control_node_B.q2n_b_tmp;
    proc_control_node_B.q2n_c = -proc_control_node_B.q2n_c_tmp;
    proc_control_node_B.q2n_d = -proc_control_node_B.n_tmp_n;
    proc_control_node_B.dp = -proc_control_node_B.dp_tmp;
  }

  if (proc_control_node_B.dp > 1.0) {
    proc_control_node_B.dp = 1.0;
  }

  proc_control_node_B.theta0 = std::acos(proc_control_node_B.dp);
  proc_control_node_B.sinv_tmp = std::sin(proc_control_node_B.theta0);
  proc_control_node_B.dp = 1.0 / proc_control_node_B.sinv_tmp;
  proc_control_node_B.theta0 = std::sin(0.0 * proc_control_node_B.theta0);
  proc_control_node_B.linearScaling = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.n_tmp_h + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_a) * proc_control_node_B.dp;
  proc_control_node_B.pnCorrected_b = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_b_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.n_i) * proc_control_node_B.dp;
  proc_control_node_B.pnCorrected_c = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_c_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_c) * proc_control_node_B.dp;
  proc_control_node_B.pnCorrected_d = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_d_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_d) * proc_control_node_B.dp;
  if (std::isinf(proc_control_node_B.dp)) {
    proc_control_node_B.linearScaling = proc_control_node_B.n_tmp_h;
    proc_control_node_B.pnCorrected_b = proc_control_node_B.q1n_b_tmp;
    proc_control_node_B.pnCorrected_c = proc_control_node_B.q1n_c_tmp;
    proc_control_node_B.pnCorrected_d = proc_control_node_B.q1n_d_tmp;
  }

  proc_control_node_B.n_i = std::sqrt(((proc_control_node_B.linearScaling *
    proc_control_node_B.linearScaling + proc_control_node_B.pnCorrected_b *
    proc_control_node_B.pnCorrected_b) + proc_control_node_B.pnCorrected_c *
    proc_control_node_B.pnCorrected_c) + proc_control_node_B.pnCorrected_d *
    proc_control_node_B.pnCorrected_d);
  proc_control_node_B.linearScaling /= proc_control_node_B.n_i;
  proc_control_node_B.pnCorrected_b /= proc_control_node_B.n_i;
  proc_control_node_B.pnCorrected_c /= proc_control_node_B.n_i;
  proc_control_node_B.pnCorrected_d /= proc_control_node_B.n_i;
  proc_control_node_B.q2n_a = proc_control_node_B.n_tmp;
  proc_control_node_B.n_i = proc_control_node_B.q2n_b_tmp;
  proc_control_node_B.q2n_c = proc_control_node_B.q2n_c_tmp;
  proc_control_node_B.q2n_d = proc_control_node_B.n_tmp_n;
  proc_control_node_B.dp = proc_control_node_B.dp_tmp;
  if (proc_control_node_B.dp_tmp < 0.0) {
    proc_control_node_B.q2n_a = -proc_control_node_B.n_tmp;
    proc_control_node_B.n_i = -proc_control_node_B.q2n_b_tmp;
    proc_control_node_B.q2n_c = -proc_control_node_B.q2n_c_tmp;
    proc_control_node_B.q2n_d = -proc_control_node_B.n_tmp_n;
    proc_control_node_B.dp = -proc_control_node_B.dp_tmp;
  }

  if (proc_control_node_B.dp > 1.0) {
    proc_control_node_B.dp = 1.0;
  }

  proc_control_node_B.theta0 = std::acos(proc_control_node_B.dp);
  proc_control_node_B.sinv_tmp = std::sin(proc_control_node_B.theta0);
  proc_control_node_B.dp = 1.0 / proc_control_node_B.sinv_tmp;
  proc_control_node_B.theta0 = std::sin(0.0 * proc_control_node_B.theta0);
  proc_control_node_B.n_tmp = (proc_control_node_B.theta0 *
    proc_control_node_B.n_tmp_h + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_a) * proc_control_node_B.dp;
  proc_control_node_B.n_tmp_n = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_b_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.n_i) * proc_control_node_B.dp;
  proc_control_node_B.q2n_c = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_c_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_c) * proc_control_node_B.dp;
  proc_control_node_B.q2n_d = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_d_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_d) * proc_control_node_B.dp;
  if (std::isinf(proc_control_node_B.dp)) {
    proc_control_node_B.n_tmp = proc_control_node_B.n_tmp_h;
    proc_control_node_B.n_tmp_n = proc_control_node_B.q1n_b_tmp;
    proc_control_node_B.q2n_c = proc_control_node_B.q1n_c_tmp;
    proc_control_node_B.q2n_d = proc_control_node_B.q1n_d_tmp;
  }

  proc_control_node_B.n_i = std::sqrt(((proc_control_node_B.n_tmp *
    proc_control_node_B.n_tmp + proc_control_node_B.n_tmp_n *
    proc_control_node_B.n_tmp_n) + proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_c) + proc_control_node_B.q2n_d *
    proc_control_node_B.q2n_d);
  proc_control_node_B.n_tmp /= proc_control_node_B.n_i;
  proc_control_node_B.n_tmp_n /= proc_control_node_B.n_i;
  proc_control_node_B.q2n_c /= proc_control_node_B.n_i;
  proc_control_node_B.q2n_d /= proc_control_node_B.n_i;
  proc_contr_quaternionBase_slerp(proc_control_node_B.oa, proc_control_node_B.ob,
    proc_control_node_B.oc, proc_control_node_B.od, proc_control_node_B.qn_a,
    proc_control_node_B.qn_b, proc_control_node_B.qn_c, proc_control_node_B.qn_d,
    proc_control_node_B.b_idx_0, &proc_control_node_B.n_i,
    &proc_control_node_B.n_tmp_h, &proc_control_node_B.q1n_b_tmp,
    &proc_control_node_B.q1n_c_tmp);
  proc_control_node_B.expl_temp_h = proc_computeFirstQuatDerivative
    (proc_control_node_B.linearScaling, proc_control_node_B.pnCorrected_b,
     proc_control_node_B.pnCorrected_c, proc_control_node_B.pnCorrected_d,
     proc_control_node_B.n_tmp, proc_control_node_B.n_tmp_n,
     proc_control_node_B.q2n_c, proc_control_node_B.q2n_d,
     proc_control_node_B.e_idx_0, proc_control_node_B.n_i,
     proc_control_node_B.n_tmp_h, proc_control_node_B.q1n_b_tmp,
     proc_control_node_B.q1n_c_tmp);
  proc_control_node_B.q1n_d_tmp = 2.0 * proc_control_node_B.expl_temp_h.a;
  proc_control_node_B.q2n_b_tmp = 2.0 * proc_control_node_B.expl_temp_h.b;
  proc_control_node_B.q2n_c_tmp = 2.0 * proc_control_node_B.expl_temp_h.c;
  proc_control_node_B.dp = 2.0 * proc_control_node_B.expl_temp_h.d;
  omega[0] = ((proc_control_node_B.q1n_d_tmp * -proc_control_node_B.n_tmp_h +
               proc_control_node_B.q2n_b_tmp * proc_control_node_B.n_i) +
              proc_control_node_B.q2n_c_tmp * -proc_control_node_B.q1n_c_tmp) -
    proc_control_node_B.dp * -proc_control_node_B.q1n_b_tmp;
  omega[1] = ((proc_control_node_B.q1n_d_tmp * -proc_control_node_B.q1n_b_tmp -
               proc_control_node_B.q2n_b_tmp * -proc_control_node_B.q1n_c_tmp) +
              proc_control_node_B.q2n_c_tmp * proc_control_node_B.n_i) +
    proc_control_node_B.dp * -proc_control_node_B.n_tmp_h;
  omega[2] = ((proc_control_node_B.q1n_d_tmp * -proc_control_node_B.q1n_c_tmp +
               proc_control_node_B.q2n_b_tmp * -proc_control_node_B.q1n_b_tmp) -
              proc_control_node_B.q2n_c_tmp * -proc_control_node_B.n_tmp_h) +
    proc_control_node_B.dp * proc_control_node_B.n_i;
  proc_control_node_B.expl_temp_b = proc_computeFirstQuatDerivative
    (proc_control_node_B.linearScaling, proc_control_node_B.pnCorrected_b,
     proc_control_node_B.pnCorrected_c, proc_control_node_B.pnCorrected_d,
     proc_control_node_B.n_tmp, proc_control_node_B.n_tmp_n,
     proc_control_node_B.q2n_c, proc_control_node_B.q2n_d, 1.0,
     proc_control_node_B.n_i, proc_control_node_B.n_tmp_h,
     proc_control_node_B.q1n_b_tmp, proc_control_node_B.q1n_c_tmp);
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp_n) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_d, ((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp_n + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_d) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_c, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_d) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp_n, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp_n) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp, &proc_control_node_B.qn_a,
    &proc_control_node_B.qn_b, &proc_control_node_B.qn_c,
    &proc_control_node_B.qn_d);
  proc_control_node_B.oa = ((proc_control_node_B.n_i * proc_control_node_B.qn_a
    - proc_control_node_B.n_tmp_h * proc_control_node_B.qn_b) -
    proc_control_node_B.q1n_b_tmp * proc_control_node_B.qn_c) -
    proc_control_node_B.q1n_c_tmp * proc_control_node_B.qn_d;
  proc_control_node_B.ob = ((proc_control_node_B.n_i * proc_control_node_B.qn_b
    + proc_control_node_B.n_tmp_h * proc_control_node_B.qn_a) +
    proc_control_node_B.q1n_b_tmp * proc_control_node_B.qn_d) -
    proc_control_node_B.q1n_c_tmp * proc_control_node_B.qn_c;
  proc_control_node_B.oc = ((proc_control_node_B.n_i * proc_control_node_B.qn_c
    - proc_control_node_B.n_tmp_h * proc_control_node_B.qn_d) +
    proc_control_node_B.q1n_b_tmp * proc_control_node_B.qn_a) +
    proc_control_node_B.q1n_c_tmp * proc_control_node_B.qn_b;
  proc_control_node_B.od = ((proc_control_node_B.n_i * proc_control_node_B.qn_d
    + proc_control_node_B.n_tmp_h * proc_control_node_B.qn_c) -
    proc_control_node_B.q1n_b_tmp * proc_control_node_B.qn_b) +
    proc_control_node_B.q1n_c_tmp * proc_control_node_B.qn_a;
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp_n) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_d, ((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp_n + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_d) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_c, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_d) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp_n, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp_n) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp, &proc_control_node_B.qn_a,
    &proc_control_node_B.qn_b, &proc_control_node_B.qn_c,
    &proc_control_node_B.qn_d);
  proc_control_node_B.pnCorrected_d = proc_control_node_B.e_idx_0 *
    proc_control_node_B.e_idx_0;
  proc_control_node_B.linearScaling = ((((proc_control_node_B.oa *
    proc_control_node_B.qn_a - proc_control_node_B.ob * proc_control_node_B.qn_b)
    - proc_control_node_B.oc * proc_control_node_B.qn_c) -
    proc_control_node_B.od * proc_control_node_B.qn_d) *
    proc_control_node_B.pnCorrected_d + 0.0 * proc_control_node_B.expl_temp_b.a)
    * 2.0;
  proc_control_node_B.pnCorrected_b = ((((proc_control_node_B.oa *
    proc_control_node_B.qn_b + proc_control_node_B.ob * proc_control_node_B.qn_a)
    + proc_control_node_B.oc * proc_control_node_B.qn_d) -
    proc_control_node_B.od * proc_control_node_B.qn_c) *
    proc_control_node_B.pnCorrected_d + 0.0 * proc_control_node_B.expl_temp_b.b)
    * 2.0;
  proc_control_node_B.pnCorrected_c = ((((proc_control_node_B.oa *
    proc_control_node_B.qn_c - proc_control_node_B.ob * proc_control_node_B.qn_d)
    + proc_control_node_B.oc * proc_control_node_B.qn_a) +
    proc_control_node_B.od * proc_control_node_B.qn_b) *
    proc_control_node_B.pnCorrected_d + 0.0 * proc_control_node_B.expl_temp_b.c)
    * 2.0;
  proc_control_node_B.pnCorrected_d = ((((proc_control_node_B.oa *
    proc_control_node_B.qn_d + proc_control_node_B.ob * proc_control_node_B.qn_c)
    - proc_control_node_B.oc * proc_control_node_B.qn_b) +
    proc_control_node_B.od * proc_control_node_B.qn_a) *
    proc_control_node_B.pnCorrected_d + 0.0 * proc_control_node_B.expl_temp_b.d)
    * 2.0;
  alpha[0] = (((proc_control_node_B.linearScaling * -proc_control_node_B.n_tmp_h
                + proc_control_node_B.pnCorrected_b * proc_control_node_B.n_i) +
               proc_control_node_B.pnCorrected_c *
               -proc_control_node_B.q1n_c_tmp) -
              proc_control_node_B.pnCorrected_d * -proc_control_node_B.q1n_b_tmp)
    - (((proc_control_node_B.q1n_d_tmp * -proc_control_node_B.expl_temp_h.b +
         proc_control_node_B.q2n_b_tmp * proc_control_node_B.expl_temp_h.a) +
        proc_control_node_B.q2n_c_tmp * -proc_control_node_B.expl_temp_h.d) -
       proc_control_node_B.dp * -proc_control_node_B.expl_temp_h.c);
  alpha[1] = (((proc_control_node_B.linearScaling *
                -proc_control_node_B.q1n_b_tmp -
                proc_control_node_B.pnCorrected_b *
                -proc_control_node_B.q1n_c_tmp) +
               proc_control_node_B.pnCorrected_c * proc_control_node_B.n_i) +
              proc_control_node_B.pnCorrected_d * -proc_control_node_B.n_tmp_h)
    - (((proc_control_node_B.q1n_d_tmp * -proc_control_node_B.expl_temp_h.c -
         proc_control_node_B.q2n_b_tmp * -proc_control_node_B.expl_temp_h.d) +
        proc_control_node_B.q2n_c_tmp * proc_control_node_B.expl_temp_h.a) +
       proc_control_node_B.dp * -proc_control_node_B.expl_temp_h.b);
  alpha[2] = (((proc_control_node_B.linearScaling *
                -proc_control_node_B.q1n_c_tmp +
                proc_control_node_B.pnCorrected_b *
                -proc_control_node_B.q1n_b_tmp) -
               proc_control_node_B.pnCorrected_c * -proc_control_node_B.n_tmp_h)
              + proc_control_node_B.pnCorrected_d * proc_control_node_B.n_i) -
    (((proc_control_node_B.q1n_d_tmp * -proc_control_node_B.expl_temp_h.d +
       proc_control_node_B.q2n_b_tmp * -proc_control_node_B.expl_temp_h.c) -
      proc_control_node_B.q2n_c_tmp * -proc_control_node_B.expl_temp_h.b) +
     proc_control_node_B.dp * proc_control_node_B.expl_temp_h.a);
  R[0] = proc_control_node_B.n_i;
  R[1] = proc_control_node_B.n_tmp_h;
  R[2] = proc_control_node_B.q1n_b_tmp;
  R[3] = proc_control_node_B.q1n_c_tmp;
}

void proc_control_nodeModelClass::proc_control_node_ppval_b(const real_T
  pp_breaks[4], const real_T pp_coefs[36], real_T x, real_T v[3])
{
  if (std::isnan(x)) {
    v[0] = x;
    v[1] = x;
    v[2] = x;
  } else {
    real_T xloc;
    int32_T high_i;
    int32_T ic0;
    int32_T low_i;
    int32_T low_ip1;
    low_i = 0;
    low_ip1 = 1;
    high_i = 4;
    while (high_i > low_ip1 + 1) {
      ic0 = ((low_i + high_i) + 1) >> 1;
      if (x >= pp_breaks[ic0 - 1]) {
        low_i = ic0 - 1;
        low_ip1 = ic0;
      } else {
        high_i = ic0;
      }
    }

    low_ip1 = low_i * 3;
    xloc = x - pp_breaks[low_i];
    v[0] = pp_coefs[low_ip1];
    v[1] = pp_coefs[low_ip1 + 1];
    v[2] = pp_coefs[low_ip1 + 2];
    for (high_i = 0; high_i < 3; high_i++) {
      ic0 = ((high_i + 1) * 9 + low_ip1) - 1;
      v[0] = xloc * v[0] + pp_coefs[ic0 + 1];
      v[1] = xloc * v[1] + pp_coefs[ic0 + 2];
      v[2] = xloc * v[2] + pp_coefs[ic0 + 3];
    }
  }
}

void proc_control_nodeModelClass::proc_TrajectoryManager_stepImpl
  (TrajectoryManager_proc_contro_T *b_this, const real_T poses[13], const real_T
   target[7], real_T reset, const real_T x0[7], const real_T mesuredPose[13],
   real_T currentPose[130], boolean_T *isReached)
{
  int32_T b_index;
  int32_T b_index_0;
  int32_T b_itilerow;
  int32_T b_jcol;
  int32_T ibmat;
  boolean_T exitg1;
  boolean_T isempty;
  boolean_T y;

  //  Main execute a chaque iteration.
  //  Implement algorithm. Calculate y as a function of input u and
  if (reset == 1.0) {
    b_this->init = 0.0;
  }

  if (b_this->init == 0.0) {
    //  Conditions Initiales
    for (ibmat = 0; ibmat < 7; ibmat++) {
      proc_control_node_B.a_ji[ibmat] = x0[ibmat];
    }

    proc_control_node_B.a_ji[7] = 0.0;
    proc_control_node_B.a_ji[8] = 0.0;
    proc_control_node_B.a_ji[9] = 0.0;
    proc_control_node_B.a_ji[10] = 0.0;
    proc_control_node_B.a_ji[11] = 0.0;
    proc_control_node_B.a_ji[12] = 0.0;
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      ibmat = b_jcol * 10;
      for (b_itilerow = 0; b_itilerow < 10; b_itilerow++) {
        proc_control_node_B.b[ibmat + b_itilerow] =
          proc_control_node_B.a_ji[b_jcol];
        b_this->poseBuffer[((b_itilerow + 1) + 6001 * b_jcol) - 1] =
          proc_control_node_B.b[10 * b_jcol + b_itilerow];
      }
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    b_this->init = 1.0;
  }

  // this.BufferReset(reset,mp);
  //  Fonction qui traites les nouveau poses.
  //  Insertion des nouveaux points.
  // if new == this.generationNumber %new>
  if (b_this->bufferCount + 1.0 < 6001.0) {
    ibmat = static_cast<int32_T>(b_this->bufferCount + 1.0);
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      b_this->poseBuffer[(ibmat + 6001 * b_jcol) - 1] = poses[b_jcol];
    }

    // this.poseBuffer(this.bufferCount:count + this.bufferCount,:) = pose(1:count+1,:) 
    b_this->bufferCount++;
    b_this->generationNumber++;
  } else {
    printf("%s\n", "Problem");
    fflush(stdout);
  }

  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  b_index = 2;
  isempty = false;
  b_itilerow = 0;
  exitg1 = false;
  while ((!exitg1) && (b_itilerow < 9)) {
    boolean_T exitg2;
    b_index = b_itilerow + 2;
    for (ibmat = 0; ibmat < 13; ibmat++) {
      proc_control_node_B.x_e[ibmat] = (b_this->poseBuffer[(6001 * ibmat +
        b_itilerow) + 1] == b_this->emptyArray[ibmat]);
    }

    y = true;
    b_jcol = 0;
    exitg2 = false;
    while ((!exitg2) && (b_jcol < 13)) {
      if (!proc_control_node_B.x_e[b_jcol]) {
        y = false;
        exitg2 = true;
      } else {
        b_jcol++;
      }
    }

    if (y) {
      isempty = true;
      exitg1 = true;
    } else {
      b_itilerow++;
    }
  }

  std::memset(&currentPose[0], 0, 130U * sizeof(real_T));
  ibmat = 0;
  b_jcol = 0;
  for (b_itilerow = 0; b_itilerow < 13; b_itilerow++) {
    for (b_index_0 = 0; b_index_0 < b_index; b_index_0++) {
      currentPose[b_index_0 + ibmat] = b_this->poseBuffer[b_index_0 + b_jcol];
    }

    ibmat += 10;
    b_jcol += 6001;
  }

  if (isempty) {
    b_itilerow = 10 - b_index;
    for (b_jcol = 0; b_jcol <= b_itilerow; b_jcol++) {
      b_index_0 = b_index + b_jcol;
      for (ibmat = 0; ibmat < 13; ibmat++) {
        proc_control_node_B.a_ji[ibmat] = currentPose[(10 * ibmat + b_index) - 2];
      }

      for (ibmat = 0; ibmat < 13; ibmat++) {
        currentPose[(b_index_0 + 10 * ibmat) - 1] =
          proc_control_node_B.a_ji[ibmat];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  ibmat = 0;
  for (b_jcol = 0; b_jcol < 13; b_jcol++) {
    proc_control_node_B.x_e[b_jcol] = !(b_this->poseBuffer[ibmat + 10] ==
      b_this->emptyArray[b_jcol]);
    ibmat += 6001;
  }

  y = true;
  b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (b_jcol < 13)) {
    if (!proc_control_node_B.x_e[b_jcol]) {
      y = false;
      exitg1 = true;
    } else {
      b_jcol++;
    }
  }

  if (y) {
    ibmat = 0;
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      std::memcpy(&proc_control_node_B.b_this[ibmat], &b_this->poseBuffer[ibmat
                  + 1], 6000U * sizeof(real_T));
      ibmat += 6001;
    }

    ibmat = 0;
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      proc_control_node_B.b_this[ibmat + 6000] = b_this->emptyArray[b_jcol];
      ibmat += 6001;
    }

    std::memcpy(&b_this->poseBuffer[0], &proc_control_node_B.b_this[0], 78013U *
                sizeof(real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    b_this->done = true;
  }

  //  Fonction qui verifie le target reached
  //  vérifier si la trajectoire est fini
  for (b_jcol = 0; b_jcol < 7; b_jcol++) {
    proc_control_node_B.x_n[b_jcol] = poses[b_jcol] - target[b_jcol];
    proc_control_node_B.y_e[b_jcol] = std::abs(proc_control_node_B.x_n[b_jcol]);
  }

  b_this->done = true;
  b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (b_jcol < 7)) {
    if (!(proc_control_node_B.y_e[b_jcol] < 0.001)) {
      b_this->done = false;
      exitg1 = true;
    } else {
      b_jcol++;
    }
  }

  *isReached = false;

  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  calcule de l'erreur de langle en 3D avec le quaternion
    proc_control_node_B.qRel[0] = ((target[3] * mesuredPose[3] - -target[4] *
      mesuredPose[4]) - -target[5] * mesuredPose[5]) - -target[6] * mesuredPose
      [6];
    proc_control_node_B.qRel[1] = (target[3] * mesuredPose[4] + -target[4] *
      mesuredPose[3]) + (-target[5] * mesuredPose[6] - -target[6] * mesuredPose
                         [5]);
    proc_control_node_B.qRel[2] = (target[3] * mesuredPose[5] + -target[5] *
      mesuredPose[3]) + (-target[6] * mesuredPose[4] - -target[4] * mesuredPose
                         [6]);
    proc_control_node_B.qRel[3] = (target[3] * mesuredPose[6] + mesuredPose[3] *
      -target[6]) + (-target[4] * mesuredPose[5] - -target[5] * mesuredPose[4]);

    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    proc_control_node_B.target[0] = target[0] - mesuredPose[0];
    proc_control_node_B.target[1] = target[1] - mesuredPose[1];
    proc_control_node_B.target[2] = target[2] - mesuredPose[2];
    if ((proc_control_node_norm_b4(proc_control_node_B.target) <
         b_this->linearConvergence) && (2.0 * rt_atan2d_snf
         (proc_control_node_norm_b4(&proc_control_node_B.qRel[1]),
          proc_control_node_B.qRel[0]) < b_this->quaternionConvergence)) {
      b_this->targetReachedCount++;
      *isReached = (b_this->targetReachedCount * 0.1 >= b_this->TargetThreshold);
    } else {
      b_this->targetReachedCount = 0.0;
    }
  }
}

// Function for MATLAB Function: '<S151>/MATLAB Function2'
void proc_control_nodeModelClass::proc_cont_AUVQuatJacobianMatrix(const real_T
  in1[13], real_T Anqv[169])
{
  real_T t29_tmp;
  proc_control_node_B.t2 = std::abs(in1[10]);
  proc_control_node_B.t3 = std::abs(in1[11]);
  proc_control_node_B.t4 = std::abs(in1[12]);
  proc_control_node_B.t5 = std::abs(in1[7]);
  proc_control_node_B.t6 = std::abs(in1[8]);
  proc_control_node_B.t7_e = std::abs(in1[9]);
  if (in1[10] < 0.0) {
    proc_control_node_B.t8_i = -1.0;
  } else if (in1[10] > 0.0) {
    proc_control_node_B.t8_i = 1.0;
  } else if (in1[10] == 0.0) {
    proc_control_node_B.t8_i = 0.0;
  } else {
    proc_control_node_B.t8_i = (rtNaN);
  }

  if (in1[11] < 0.0) {
    proc_control_node_B.t9_g = -1.0;
  } else if (in1[11] > 0.0) {
    proc_control_node_B.t9_g = 1.0;
  } else if (in1[11] == 0.0) {
    proc_control_node_B.t9_g = 0.0;
  } else {
    proc_control_node_B.t9_g = (rtNaN);
  }

  if (in1[12] < 0.0) {
    proc_control_node_B.t10_g = -1.0;
  } else if (in1[12] > 0.0) {
    proc_control_node_B.t10_g = 1.0;
  } else if (in1[12] == 0.0) {
    proc_control_node_B.t10_g = 0.0;
  } else {
    proc_control_node_B.t10_g = (rtNaN);
  }

  if (in1[7] < 0.0) {
    proc_control_node_B.t11_g = -1.0;
  } else if (in1[7] > 0.0) {
    proc_control_node_B.t11_g = 1.0;
  } else if (in1[7] == 0.0) {
    proc_control_node_B.t11_g = 0.0;
  } else {
    proc_control_node_B.t11_g = (rtNaN);
  }

  if (in1[8] < 0.0) {
    proc_control_node_B.t12 = -1.0;
  } else if (in1[8] > 0.0) {
    proc_control_node_B.t12 = 1.0;
  } else if (in1[8] == 0.0) {
    proc_control_node_B.t12 = 0.0;
  } else {
    proc_control_node_B.t12 = (rtNaN);
  }

  if (in1[9] < 0.0) {
    proc_control_node_B.t13_g = -1.0;
  } else if (in1[9] > 0.0) {
    proc_control_node_B.t13_g = 1.0;
  } else if (in1[9] == 0.0) {
    proc_control_node_B.t13_g = 0.0;
  } else {
    proc_control_node_B.t13_g = (rtNaN);
  }

  proc_control_node_B.t17_c = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t18 = in1[4] * in1[6] * 2.0;
  proc_control_node_B.t19 = in1[5] * in1[6] * 2.0;
  proc_control_node_B.t20 = in1[3] * in1[4] * 2.0;
  proc_control_node_B.t21 = in1[3] * in1[5] * 2.0;
  proc_control_node_B.t22_k = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t23_d = in1[4] * in1[7] * 2.0;
  proc_control_node_B.t24_tmp = in1[5] * in1[7];
  proc_control_node_B.t24 = proc_control_node_B.t24_tmp * 2.0;
  proc_control_node_B.t25_tmp = in1[6] * in1[7];
  proc_control_node_B.t25 = proc_control_node_B.t25_tmp * 2.0;
  proc_control_node_B.t26 = in1[3] * in1[7] * 2.0;
  proc_control_node_B.t27_tmp = in1[4] * in1[8];
  proc_control_node_B.t27 = proc_control_node_B.t27_tmp * 2.0;
  proc_control_node_B.t28 = in1[5] * in1[8] * 2.0;
  t29_tmp = in1[6] * in1[8];
  proc_control_node_B.t29 = t29_tmp * 2.0;
  proc_control_node_B.t30 = in1[3] * in1[8] * 2.0;
  proc_control_node_B.t31_tmp = in1[4] * in1[9];
  proc_control_node_B.t31_k = proc_control_node_B.t31_tmp * 2.0;
  proc_control_node_B.t32_tmp = in1[5] * in1[9];
  proc_control_node_B.t32_p = proc_control_node_B.t32_tmp * 2.0;
  proc_control_node_B.t33 = in1[6] * in1[9] * 2.0;
  proc_control_node_B.t34 = in1[3] * in1[9] * 2.0;
  proc_control_node_B.t39_p = in1[4] / 2.0;
  proc_control_node_B.t40_m = in1[5] / 2.0;
  proc_control_node_B.t41 = in1[6] / 2.0;
  proc_control_node_B.t42 = in1[3] / 2.0;
  proc_control_node_B.t43 = in1[10] / 2.0;
  proc_control_node_B.t44 = in1[11] / 2.0;
  proc_control_node_B.t45 = in1[12] / 2.0;
  proc_control_node_B.t55_k = in1[12] * 1.0571299073092789E-5;
  proc_control_node_B.t56_a = in1[11] * 9.7602896722846373E-5;
  proc_control_node_B.t57_f = in1[8] * 0.01129023503850542;
  proc_control_node_B.t58 = in1[7] * 0.00477039452928936;
  proc_control_node_B.t59 = in1[10] * 9.1703771260780813E-5;
  proc_control_node_B.t61 = in1[9] * 0.143523560675718;
  proc_control_node_B.t62 = in1[7] * 0.00568699616459184;
  proc_control_node_B.t65_c = in1[9] * 0.069014505171846527;
  proc_control_node_B.t68 = in1[8] * 0.0071670223909459834;
  proc_control_node_B.t35 = in1[4] * in1[4] * 2.0;
  proc_control_node_B.t36 = in1[5] * in1[5] * 2.0;
  proc_control_node_B.t37_j = in1[6] * in1[6] * 2.0;
  std::memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -proc_control_node_B.t29 + proc_control_node_B.t32_p;
  Anqv[40] = proc_control_node_B.t25 - proc_control_node_B.t31_k;
  Anqv[41] = -proc_control_node_B.t24 + proc_control_node_B.t27;
  Anqv[42] = 0.0;
  Anqv[43] = proc_control_node_B.t43;
  Anqv[44] = proc_control_node_B.t44;
  Anqv[45] = proc_control_node_B.t45;
  Anqv[46] = in1[4] * -0.0013017970932508 + in1[5] * 0.4138016519122657;
  Anqv[47] = in1[4] * -0.51979016069898065 + in1[5] * 0.00099202109956931486;
  Anqv[48] = in1[4] * 0.033540735888224739 - in1[5] * 0.0058758415205803329;
  Anqv[49] = in1[4] * -25.242114556122988 + in1[5] * 0.1138522338822895;
  Anqv[50] = in1[4] * 0.1184627304742461 - in1[5] * 8.6371397256799973;
  Anqv[51] = in1[4] * 0.38451002147839958 + in1[5] * 0.65361132374006825;
  Anqv[52] = proc_control_node_B.t28 + proc_control_node_B.t33;
  Anqv[53] = (proc_control_node_B.t24 - proc_control_node_B.t34) -
    proc_control_node_B.t27_tmp * 4.0;
  Anqv[54] = (proc_control_node_B.t25 + proc_control_node_B.t30) -
    proc_control_node_B.t31_tmp * 4.0;
  Anqv[55] = -proc_control_node_B.t43;
  Anqv[56] = 0.0;
  Anqv[57] = -proc_control_node_B.t45;
  Anqv[58] = proc_control_node_B.t44;
  Anqv[59] = (in1[4] * -0.01263905936484723 - in1[6] * 0.4138016519122657) -
    in1[3] * 0.0013017970932508;
  Anqv[60] = (in1[4] * -0.05386046241846134 - in1[6] * 0.00099202109956931486) -
    in1[3] * 0.51979016069898065;
  Anqv[61] = (in1[4] * 0.37271497842704371 + in1[6] * 0.0058758415205803329) +
    in1[3] * 0.033540735888224739;
  Anqv[62] = (in1[4] * -4.2094140168137981 - in1[6] * 0.1138522338822895) - in1
    [3] * 25.242114556122988;
  Anqv[63] = (in1[4] * 0.73643595165049924 + in1[6] * 8.6371397256799973) + in1
    [3] * 0.1184627304742461;
  Anqv[64] = (in1[4] * 0.009785912146552939 - in1[6] * 0.65361132374006825) +
    in1[3] * 0.38451002147839958;
  Anqv[65] = (proc_control_node_B.t27 + proc_control_node_B.t34) -
    proc_control_node_B.t24_tmp * 4.0;
  Anqv[66] = proc_control_node_B.t23_d + proc_control_node_B.t33;
  Anqv[67] = (-proc_control_node_B.t26 + proc_control_node_B.t29) -
    proc_control_node_B.t32_tmp * 4.0;
  Anqv[68] = -proc_control_node_B.t44;
  Anqv[69] = proc_control_node_B.t45;
  Anqv[70] = 0.0;
  Anqv[71] = -proc_control_node_B.t43;
  Anqv[72] = (in1[5] * -0.01263905936484723 - in1[6] * 0.0013017970932508) +
    in1[3] * 0.4138016519122657;
  Anqv[73] = (in1[5] * -0.05386046241846134 - in1[6] * 0.51979016069898065) +
    in1[3] * 0.00099202109956931486;
  Anqv[74] = (in1[5] * 0.37271497842704371 + in1[6] * 0.033540735888224739) -
    in1[3] * 0.0058758415205803329;
  Anqv[75] = (in1[5] * -4.2094140168137981 - in1[6] * 25.242114556122988) + in1
    [3] * 0.1138522338822895;
  Anqv[76] = (in1[5] * 0.73643595165049924 + in1[6] * 0.1184627304742461) - in1
    [3] * 8.6371397256799973;
  Anqv[77] = (in1[5] * 0.009785912146552939 + in1[6] * 0.38451002147839958) +
    in1[3] * 0.65361132374006825;
  Anqv[78] = (-proc_control_node_B.t30 + proc_control_node_B.t31_k) -
    proc_control_node_B.t25_tmp * 4.0;
  Anqv[79] = (proc_control_node_B.t26 + proc_control_node_B.t32_p) - t29_tmp *
    4.0;
  Anqv[80] = proc_control_node_B.t23_d + proc_control_node_B.t28;
  Anqv[81] = -proc_control_node_B.t45;
  Anqv[82] = -proc_control_node_B.t44;
  Anqv[83] = proc_control_node_B.t43;
  Anqv[84] = 0.0;
  Anqv[85] = in1[4] * -0.4138016519122657 - in1[5] * 0.0013017970932508;
  Anqv[86] = in1[4] * -0.00099202109956931486 - in1[5] * 0.51979016069898065;
  Anqv[87] = in1[4] * 0.0058758415205803329 + in1[5] * 0.033540735888224739;
  Anqv[88] = in1[4] * -0.1138522338822895 - in1[5] * 25.242114556122988;
  Anqv[89] = in1[4] * 8.6371397256799973 + in1[5] * 0.1184627304742461;
  Anqv[90] = in1[4] * -0.65361132374006825 + in1[5] * 0.38451002147839958;
  Anqv[91] = (-proc_control_node_B.t36 + -proc_control_node_B.t37_j) + 1.0;
  Anqv[92] = proc_control_node_B.t17_c + proc_control_node_B.t22_k;
  Anqv[93] = proc_control_node_B.t18 - proc_control_node_B.t21;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  proc_control_node_B.t11_g *= in1[7];
  Anqv[98] = (((((proc_control_node_B.t5 * -0.036243063166504788 +
                  proc_control_node_B.t55_k) + proc_control_node_B.t56_a) -
                proc_control_node_B.t57_f) - proc_control_node_B.t61) -
              proc_control_node_B.t11_g * 0.036243063166504788) -
    0.46465465598083061;
  Anqv[99] = (((in1[8] * 0.00477039452928936 - in1[9] * 0.001468966557066211) -
               proc_control_node_B.t11_g * 1.109195745194835E-6) -
              1.422045827172866E-5) + ((in1[11] * 0.00041592787873873338 - in1
    [12] * 0.74121409319149256) - proc_control_node_B.t5 * 1.109195745194835E-6);
  Anqv[100] = (((in1[8] * -5.890830655932608E-5 + in1[9] * 0.00568699616459184)
                + proc_control_node_B.t11_g * 7.9830677445685858E-6) +
               0.0001023470223662639) + ((in1[11] * 0.69409782663856512 - in1[12]
    * 0.00032422410747795261) + proc_control_node_B.t5 * 7.9830677445685858E-6);
  Anqv[101] = (((in1[11] * 0.032506453976272241 + in1[12] * 0.24400486517334929)
                - proc_control_node_B.t5 * 0.0001525121428377004) + ((in1[8] *
    0.044446246736648841 - in1[9] * 0.1148218101592509) -
    proc_control_node_B.t11_g * 0.0001525121428377004)) + -0.0019552838825346208;
  Anqv[102] = (((in1[8] * 1.7911420833141059E-5 + in1[9] * 8.3502908029033716) +
                proc_control_node_B.t11_g * 0.011738978516892359) +
               0.150499724575543) + ((in1[11] * -0.00568699616459184 - in1[12] *
    0.001145088836853196) + proc_control_node_B.t5 * 0.011738978516892359);
  Anqv[103] = (((in1[11] * -7.5569972812640509E-5 - in1[12] *
                 0.00477039452928936) - proc_control_node_B.t5 *
                0.0011846302503005471) + ((in1[8] * -5.91169722427816 - in1[9] *
    2.2977499514997389E-5) - proc_control_node_B.t11_g * 0.0011846302503005471))
    + -0.015187567311545479;
  Anqv[104] = proc_control_node_B.t17_c - proc_control_node_B.t22_k;
  Anqv[105] = (-proc_control_node_B.t35 + -proc_control_node_B.t37_j) + 1.0;
  Anqv[106] = proc_control_node_B.t19 + proc_control_node_B.t20;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  proc_control_node_B.t11_g = proc_control_node_B.t12 * in1[8];
  Anqv[111] = (((in1[10] * -2.1519484922730651E-5 + in1[12] * 1.3454180758607359)
                - proc_control_node_B.t6 * 7.7738505218783331E-7) - in1[7] *
               0.01129023503850542) + ((in1[9] * -0.00041111798914172931 -
    proc_control_node_B.t11_g * 7.7738505218783331E-7) - 1.8960611028971542E-5);
  Anqv[112] = (((((proc_control_node_B.t6 * -0.01903042325061665 +
                   proc_control_node_B.t55_k) + proc_control_node_B.t58) +
                 -proc_control_node_B.t59) - proc_control_node_B.t65_c) -
               proc_control_node_B.t11_g * 0.01903042325061665) -
    0.46415666464918648;
  Anqv[113] = (((in1[7] * -5.890830655932608E-5 + in1[9] * 0.0071670223909459834)
                + proc_control_node_B.t11_g * 2.3842573459475649E-5) +
               0.00058152618193843065) + ((in1[10] * -0.93255469429176219 - in1
    [12] * 7.6083411800115719E-5) + proc_control_node_B.t6 *
    2.3842573459475649E-5);
  Anqv[114] = (((in1[10] * -0.0071670223909459834 + in1[12] *
                 0.00145353196782447) - proc_control_node_B.t6 *
                0.017943464992838758) + ((in1[7] * 0.044446246736648841 - in1[9]
    * 5.3937622658585171) - proc_control_node_B.t11_g * 0.017943464992838758)) +
    -0.4376454876302136;
  Anqv[115] = (((in1[10] * 0.0012538688125934979 - in1[12] * 0.1118794885864644)
                + proc_control_node_B.t6 * 8.4206769578830268E-5) + in1[7] *
               1.7911420833141059E-5) + ((proc_control_node_B.t11_g *
    8.4206769578830268E-5 + in1[9] * 0.025315910649035739) +
    0.0020538236482641531);
  Anqv[116] = (((in1[10] * 1.6661666253314429E-5 + in1[12] * 0.01129023503850542)
                + proc_control_node_B.t6 * 0.00035080205133418912) + ((in1[7] *
    -5.91169722427816 + in1[9] * 0.01257120723021817) +
    proc_control_node_B.t11_g * 0.00035080205133418912)) + 0.0085561475935168052;
  Anqv[117] = proc_control_node_B.t18 + proc_control_node_B.t21;
  Anqv[118] = proc_control_node_B.t19 - proc_control_node_B.t20;
  Anqv[119] = (-proc_control_node_B.t35 + -proc_control_node_B.t36) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  proc_control_node_B.t11_g = proc_control_node_B.t13_g * in1[9];
  Anqv[124] = (((in1[10] * 2.989993556213668E-6 - in1[11] * 1.4431163638272659)
                + proc_control_node_B.t7_e * 5.1582899272597018E-6) - in1[7] *
               0.143523560675718) + ((proc_control_node_B.t11_g *
    5.1582899272597018E-6 + in1[8] * -0.00041111798914172931) +
    0.0001592064792364106);
  Anqv[125] = (((in1[10] * 1.0731951852318531 - in1[11] * 1.356129262930646E-5)
                + proc_control_node_B.t7_e * 2.1981689677272681E-5) + ((in1[7] *
    -0.001468966557066211 - in1[8] * 0.069014505171846527) +
    proc_control_node_B.t11_g * 2.1981689677272681E-5)) + 0.00067844721226150231;
  Anqv[126] = (((((proc_control_node_B.t7_e * -0.01616685726098728 +
                   proc_control_node_B.t56_a) + -proc_control_node_B.t59) +
                 proc_control_node_B.t62) + proc_control_node_B.t68) -
               proc_control_node_B.t11_g * 0.01616685726098728) -
    0.49897707595639768;
  Anqv[127] = (((in1[10] * 0.069014505171846527 - in1[11] *
                 0.0018646499569661989) + proc_control_node_B.t7_e *
                0.00171795837774031) + ((in1[7] * -0.1148218101592509 - in1[8] *
    5.3937622658585171) + proc_control_node_B.t11_g * 0.00171795837774031)) +
    0.053023406720379938;
  Anqv[128] = (((in1[10] * -0.00032387772021301561 + in1[11] * 0.143523560675718)
                - proc_control_node_B.t7_e * 0.00030055639757781919) + ((in1[7] *
    8.3502908029033716 + in1[8] * 0.025315910649035739) -
    proc_control_node_B.t11_g * 0.00030055639757781919)) +
    -0.0092764320240067664;
  Anqv[129] = (((in1[10] * -0.0013492616947596331 - in1[11] *
                 0.01448357294143097) - proc_control_node_B.t7_e *
                3.993855127780116E-6) - in1[7] * 2.2977499514997389E-5) + ((in1
    [8] * 0.01257120723021817 - proc_control_node_B.t11_g * 3.993855127780116E-6)
    - 0.00012326713357346041);
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -proc_control_node_B.t39_p;
  Anqv[134] = proc_control_node_B.t42;
  Anqv[135] = proc_control_node_B.t41;
  Anqv[136] = -proc_control_node_B.t40_m;
  proc_control_node_B.t11_g = in1[10] * proc_control_node_B.t8_i;
  Anqv[137] = (((in1[10] * -0.00010396365424827521 - in1[11] *
                 0.0030560301354578762) - in1[12] * 0.030270009262121408) -
               proc_control_node_B.t2 * 2.1768827225552109E-5) + (((in1[8] *
    -2.1519484922730651E-5 + in1[9] * 2.989993556213668E-6) -
    proc_control_node_B.t11_g * 2.1768827225552109E-5) - 0.00043450752945213789);
  Anqv[138] = ((((in1[10] * 0.0028513455484883 - in1[11] *
                  0.00032316342950661811) + in1[12] * 4.2079285691049859E-5) -
                proc_control_node_B.t2 * 0.0036543398217122828) + ((in1[8] *
    -9.1703771260780813E-5 + in1[9] * 1.0731951852318531) -
    proc_control_node_B.t11_g * 0.0036543398217122828)) + -0.072940914605035587;
  Anqv[139] = (((in1[10] * 0.023864851221217471 + in1[11] *
                 4.0426879502317728E-6) - in1[12] * 0.00016269010774240791) +
               ((proc_control_node_B.t2 * 0.0003794960966701478 - in1[8] *
                 0.93255469429176219) - in1[9] * 9.1703771260780813E-5)) +
    (proc_control_node_B.t11_g * 0.0003794960966701478 + 0.007574772388625705);
  Anqv[140] = ((((proc_control_node_B.t2 * -0.28560141361437341 +
                  proc_control_node_B.t65_c) - proc_control_node_B.t68) -
                proc_control_node_B.t11_g * 0.28560141361437341) -
               5.7006270182509668) + ((in1[10] * 0.00017692814721597281 - in1[11]
    * 0.00301187450220627) + in1[12] * 0.0032852614324183722);
  Anqv[141] = (((in1[10] * 0.005100926963153893 + in1[11] * 7.54282242443926E-5)
                + in1[12] * 0.76112100692746432) + ((proc_control_node_B.t2 *
    0.0013404854555911631 + in1[8] * 0.0012538688125934979) - in1[9] *
    0.00032387772021301561)) + (proc_control_node_B.t11_g *
    0.0013404854555911631 + 0.026756196718386482);
  Anqv[142] = (((in1[10] * -0.0085297096290247246 - in1[11] *
                 0.59953739020136265) - in1[12] * 6.8948828938803766E-5) +
               ((proc_control_node_B.t2 * 0.00066564938883491385 + in1[8] *
                 1.6661666253314429E-5) - in1[9] * 0.0013492616947596331)) +
    (proc_control_node_B.t11_g * 0.00066564938883491385 + 0.013286414946804669);
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -proc_control_node_B.t40_m;
  Anqv[147] = -proc_control_node_B.t41;
  Anqv[148] = proc_control_node_B.t42;
  Anqv[149] = proc_control_node_B.t39_p;
  proc_control_node_B.t11_g = in1[11] * proc_control_node_B.t9_g;
  Anqv[150] = ((((in1[10] * -0.0030560301354578762 + in1[11] *
                  0.001929418735906703) + in1[12] * 6.2884941489263073E-5) +
                proc_control_node_B.t3 * 0.001003331497170287) + ((in1[7] *
    9.7602896722846373E-5 - in1[9] * 1.4431163638272659) +
    proc_control_node_B.t11_g * 0.001003331497170287)) + 0.0234110682673067;
  Anqv[151] = (((in1[10] * -0.00032316342950661811 + in1[11] *
                 4.5292476302332957E-6) - in1[12] * 0.016528998001422841) +
               proc_control_node_B.t3 * 1.026911824132076E-5) + (((in1[7] *
    0.00041592787873873338 - in1[9] * 1.356129262930646E-5) +
    proc_control_node_B.t11_g * 1.026911824132076E-5) + 0.00023961275896415121);
  Anqv[152] = (((in1[10] * 4.0426879502317728E-6 + in1[11] *
                 0.023860477346842442) - in1[12] * 0.000941018323416786) +
               ((proc_control_node_B.t3 * -3.9756137245743291E-5 + in1[7] *
                 0.69409782663856512) + in1[9] * 9.7602896722846373E-5)) +
    (proc_control_node_B.t11_g * -3.9756137245743291E-5 - 0.00092764320240067675);
  Anqv[153] = (((in1[10] * -0.00301187450220627 + in1[11] *
                 0.00082864946354184129) - in1[12] * 0.291807921220024) +
               ((proc_control_node_B.t3 * 0.00080268590155159437 + in1[7] *
                 0.032506453976272241) - in1[9] * 0.0018646499569661989)) +
    (proc_control_node_B.t11_g * 0.00080268590155159437 + 0.018729337702870542);
  Anqv[154] = ((((proc_control_node_B.t3 * -0.058374455968341669 +
                  proc_control_node_B.t61) - proc_control_node_B.t62) -
                proc_control_node_B.t11_g * 0.058374455968341669) -
               1.362070639261306) + ((in1[10] * 7.54282242443926E-5 - in1[11] *
    0.00019446645525741661) - in1[12] * 0.003324115892995542);
  Anqv[155] = ((((proc_control_node_B.t3 * 1.6062902063655571E-7 - in1[7] *
                  7.5569972812640509E-5) - in1[9] * 0.01448357294143097) +
                proc_control_node_B.t11_g * 1.6062902063655571E-7) + ((in1[10] *
    -0.59953739020136265 + in1[11] * 0.0085432434746820687) + in1[12] *
    0.0030111351640179931)) + 3.7480104815196341E-6;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -proc_control_node_B.t41;
  Anqv[160] = proc_control_node_B.t40_m;
  Anqv[161] = -proc_control_node_B.t39_p;
  Anqv[162] = proc_control_node_B.t42;
  proc_control_node_B.t11_g = in1[12] * proc_control_node_B.t10_g;
  Anqv[163] = (((in1[10] * -0.030270009262121408 + in1[11] *
                 6.2884941489263073E-5) + in1[12] * 0.0020006959490984312) -
               proc_control_node_B.t4 * 0.0001032754577185093) + (((in1[7] *
    1.0571299073092789E-5 + in1[8] * 1.3454180758607359) -
    proc_control_node_B.t11_g * 0.0001032754577185093) - 0.0050625224371818262);
  Anqv[164] = (((in1[10] * 4.2079285691049859E-5 - in1[11] *
                 0.016528998001422841) + in1[12] * 0.00283488707941543) +
               proc_control_node_B.t4 * 4.3636352726935713E-5) + (((in1[7] *
    -0.74121409319149256 + in1[8] * 1.0571299073092789E-5) +
    proc_control_node_B.t11_g * 4.3636352726935713E-5) + 0.0021390368983792022);
  Anqv[165] = ((((proc_control_node_B.t4 * -5.3885346962112674E-7 - in1[7] *
                  0.00032422410747795261) - in1[8] * 7.6083411800115719E-5) -
                proc_control_node_B.t11_g * 5.3885346962112674E-7) + ((in1[10] *
    -0.00016269010774240791 - in1[11] * 0.000941018323416786) - in1[12] *
    2.6641242336162E-6)) + -2.6414385765741509E-5;
  Anqv[166] = (((in1[10] * 0.0032852614324183722 - in1[11] * 0.291807921220024)
                - in1[12] * 0.00063467747547131872) + ((proc_control_node_B.t4 *
    0.00040656429737222281 + in1[7] * 0.24400486517334929) + in1[8] *
    0.00145353196782447)) + (proc_control_node_B.t11_g * 0.00040656429737222281
    + 0.019929622420207);
  Anqv[167] = ((((proc_control_node_B.t4 * 1.6384160104928689E-7 - in1[7] *
                  0.001145088836853196) - in1[8] * 0.1118794885864644) +
                proc_control_node_B.t11_g * 1.6384160104928689E-7) + ((in1[10] *
    0.76112100692746432 - in1[11] * 0.003324115892995542) - in1[12] *
    0.005288701994301117)) + 8.0314510318277867E-6;
  Anqv[168] = ((((proc_control_node_B.t4 * -0.054076220260104418 +
                  proc_control_node_B.t57_f) - proc_control_node_B.t58) -
                proc_control_node_B.t11_g * 0.054076220260104418) -
               2.6507951107894319) + ((in1[10] * -6.8948828938803766E-5 + in1[11]
    * 0.0030111351640179931) + in1[12] * 1.7711862430984169E-5);
}

// Function for MATLAB Function: '<S151>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_lusolve(const real_T A[169],
  const real_T B[169], real_T X[169])
{
  int32_T b_j;
  int32_T c_ix;
  int32_T c_k;
  int32_T ijA;
  int32_T ix;
  int32_T iy;
  int32_T jj;
  std::memcpy(&proc_control_node_B.b_A_a[0], &A[0], 169U * sizeof(real_T));
  std::memcpy(&X[0], &B[0], 169U * sizeof(real_T));
  for (b_j = 0; b_j < 13; b_j++) {
    proc_control_node_B.ipiv[b_j] = static_cast<int8_T>(b_j + 1);
  }

  for (b_j = 0; b_j < 12; b_j++) {
    jj = b_j * 14;
    iy = 0;
    ix = jj;
    proc_control_node_B.smax = std::abs(proc_control_node_B.b_A_a[jj]);
    for (c_k = 2; c_k <= 13 - b_j; c_k++) {
      ix++;
      proc_control_node_B.s_p = std::abs(proc_control_node_B.b_A_a[ix]);
      if (proc_control_node_B.s_p > proc_control_node_B.smax) {
        iy = c_k - 1;
        proc_control_node_B.smax = proc_control_node_B.s_p;
      }
    }

    if (proc_control_node_B.b_A_a[jj + iy] != 0.0) {
      if (iy != 0) {
        iy += b_j;
        proc_control_node_B.ipiv[b_j] = static_cast<int8_T>(iy + 1);
        for (c_k = 0; c_k < 13; c_k++) {
          proc_control_node_B.smax = proc_control_node_B.b_A_a[c_k * 13 + b_j];
          ix = c_k * 13 + iy;
          proc_control_node_B.b_A_a[b_j + c_k * 13] =
            proc_control_node_B.b_A_a[ix];
          proc_control_node_B.b_A_a[ix] = proc_control_node_B.smax;
        }
      }

      iy = (jj - b_j) + 13;
      for (ix = jj + 1; ix < iy; ix++) {
        proc_control_node_B.b_A_a[ix] /= proc_control_node_B.b_A_a[jj];
      }
    }

    iy = jj;
    ix = jj + 13;
    for (c_k = 0; c_k <= 11 - b_j; c_k++) {
      if (proc_control_node_B.b_A_a[ix] != 0.0) {
        int32_T c;
        proc_control_node_B.smax = -proc_control_node_B.b_A_a[ix];
        c_ix = jj + 1;
        ijA = iy + 14;
        c = (iy - b_j) + 26;
        while (ijA + 1 <= c) {
          proc_control_node_B.b_A_a[ijA] += proc_control_node_B.b_A_a[c_ix] *
            proc_control_node_B.smax;
          c_ix++;
          ijA++;
        }
      }

      ix += 13;
      iy += 13;
    }
  }

  for (b_j = 0; b_j < 12; b_j++) {
    int8_T ipiv;
    ipiv = proc_control_node_B.ipiv[b_j];
    if (b_j + 1 != ipiv) {
      for (iy = 0; iy < 13; iy++) {
        jj = 13 * iy + b_j;
        proc_control_node_B.smax = X[jj];
        ix = (13 * iy + ipiv) - 1;
        X[jj] = X[ix];
        X[ix] = proc_control_node_B.smax;
      }
    }
  }

  for (b_j = 0; b_j < 13; b_j++) {
    jj = 13 * b_j;
    for (iy = 0; iy < 13; iy++) {
      ix = 13 * iy;
      if (X[iy + jj] != 0.0) {
        for (c_k = iy + 2; c_k < 14; c_k++) {
          c_ix = (c_k + jj) - 1;
          X[c_ix] -= proc_control_node_B.b_A_a[(c_k + ix) - 1] * X[iy + jj];
        }
      }
    }
  }

  for (b_j = 0; b_j < 13; b_j++) {
    jj = 13 * b_j;
    for (iy = 12; iy >= 0; iy--) {
      ix = 13 * iy;
      if (X[iy + jj] != 0.0) {
        c_ix = iy + jj;
        X[c_ix] /= proc_control_node_B.b_A_a[iy + ix];
        for (c_k = 0; c_k < iy; c_k++) {
          ijA = c_k + jj;
          X[ijA] -= proc_control_node_B.b_A_a[c_k + ix] * X[c_ix];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S151>/MATLAB Function2'
void proc_control_nodeModelClass::proc_co_PadeApproximantOfDegree(const real_T
  A[169], uint8_T m, real_T F[169])
{
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
       proc_control_node_B.i10++) {
    std::memset(&proc_control_node_B.A2[proc_control_node_B.i10 * 13], 0, 13U *
                sizeof(real_T));
    for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
         proc_control_node_B.e_k++) {
      for (proc_control_node_B.e_k_b = 0; proc_control_node_B.e_k_b < 13;
           proc_control_node_B.e_k_b++) {
        proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i10 +
          proc_control_node_B.e_k_b;
        proc_control_node_B.A2[proc_control_node_B.A2_tmp] += A[13 *
          proc_control_node_B.e_k + proc_control_node_B.e_k_b] * A[13 *
          proc_control_node_B.i10 + proc_control_node_B.e_k];
      }
    }
  }

  if (m == 3) {
    std::memcpy(&proc_control_node_B.U_o[0], &proc_control_node_B.A2[0], 169U *
                sizeof(real_T));
    proc_control_node_B.e_k_b = 0;
    proc_control_node_B.A2_tmp = 0;
    for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
         proc_control_node_B.e_k++) {
      std::memset(&proc_control_node_B.A4_b[proc_control_node_B.A2_tmp], 0, 13U *
                  sizeof(real_T));
      proc_control_node_B.U_o[proc_control_node_B.e_k_b] += 60.0;
      proc_control_node_B.e_k_b += 14;
      proc_control_node_B.A2_tmp += 13;
    }

    proc_control_node_B.e_k_b = 0;
    for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
         proc_control_node_B.e_k++) {
      proc_control_node_B.A2_tmp = 0;
      for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 13;
           proc_control_node_B.i11++) {
        for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
             proc_control_node_B.i10++) {
          int32_T A_tmp;
          A_tmp = proc_control_node_B.i10 + proc_control_node_B.e_k_b;
          proc_control_node_B.A4_b[A_tmp] += A[proc_control_node_B.i10 +
            proc_control_node_B.A2_tmp] *
            proc_control_node_B.U_o[proc_control_node_B.i11 +
            proc_control_node_B.e_k_b];
        }

        proc_control_node_B.A2_tmp += 13;
      }

      proc_control_node_B.e_k_b += 13;
    }

    for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 169;
         proc_control_node_B.i10++) {
      proc_control_node_B.U_o[proc_control_node_B.i10] =
        proc_control_node_B.A4_b[proc_control_node_B.i10];
      proc_control_node_B.V[proc_control_node_B.i10] = 12.0 *
        proc_control_node_B.A2[proc_control_node_B.i10];
    }

    proc_control_node_B.d_i = 120.0;
  } else {
    for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
         proc_control_node_B.i10++) {
      std::memset(&proc_control_node_B.A3[proc_control_node_B.i10 * 13], 0, 13U *
                  sizeof(real_T));
      for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
           proc_control_node_B.e_k++) {
        for (proc_control_node_B.e_k_b = 0; proc_control_node_B.e_k_b < 13;
             proc_control_node_B.e_k_b++) {
          proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i10 +
            proc_control_node_B.e_k_b;
          proc_control_node_B.A3[proc_control_node_B.A2_tmp] +=
            proc_control_node_B.A2[13 * proc_control_node_B.e_k +
            proc_control_node_B.e_k_b] * proc_control_node_B.A2[13 *
            proc_control_node_B.i10 + proc_control_node_B.e_k];
        }
      }
    }

    if (m == 5) {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 169;
           proc_control_node_B.i10++) {
        proc_control_node_B.U_o[proc_control_node_B.i10] = 420.0 *
          proc_control_node_B.A2[proc_control_node_B.i10] +
          proc_control_node_B.A3[proc_control_node_B.i10];
      }

      proc_control_node_B.e_k_b = 0;
      proc_control_node_B.A2_tmp = 0;
      for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
           proc_control_node_B.e_k++) {
        std::memset(&proc_control_node_B.A4_b[proc_control_node_B.A2_tmp], 0,
                    13U * sizeof(real_T));
        proc_control_node_B.U_o[proc_control_node_B.e_k_b] += 15120.0;
        proc_control_node_B.e_k_b += 14;
        proc_control_node_B.A2_tmp += 13;
      }

      proc_control_node_B.e_k_b = 0;
      for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
           proc_control_node_B.e_k++) {
        proc_control_node_B.A2_tmp = 0;
        for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 13;
             proc_control_node_B.i11++) {
          for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
               proc_control_node_B.i10++) {
            int32_T A_tmp;
            A_tmp = proc_control_node_B.i10 + proc_control_node_B.e_k_b;
            proc_control_node_B.A4_b[A_tmp] += A[proc_control_node_B.i10 +
              proc_control_node_B.A2_tmp] *
              proc_control_node_B.U_o[proc_control_node_B.i11 +
              proc_control_node_B.e_k_b];
          }

          proc_control_node_B.A2_tmp += 13;
        }

        proc_control_node_B.e_k_b += 13;
      }

      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 169;
           proc_control_node_B.i10++) {
        proc_control_node_B.U_o[proc_control_node_B.i10] =
          proc_control_node_B.A4_b[proc_control_node_B.i10];
        proc_control_node_B.V[proc_control_node_B.i10] = 30.0 *
          proc_control_node_B.A3[proc_control_node_B.i10] + 3360.0 *
          proc_control_node_B.A2[proc_control_node_B.i10];
      }

      proc_control_node_B.d_i = 30240.0;
    } else {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
           proc_control_node_B.i10++) {
        std::memset(&proc_control_node_B.A4[proc_control_node_B.i10 * 13], 0,
                    13U * sizeof(real_T));
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          for (proc_control_node_B.e_k_b = 0; proc_control_node_B.e_k_b < 13;
               proc_control_node_B.e_k_b++) {
            proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i10 +
              proc_control_node_B.e_k_b;
            proc_control_node_B.A4[proc_control_node_B.A2_tmp] +=
              proc_control_node_B.A3[13 * proc_control_node_B.e_k +
              proc_control_node_B.e_k_b] * proc_control_node_B.A2[13 *
              proc_control_node_B.i10 + proc_control_node_B.e_k];
          }
        }
      }

      switch (m) {
       case 7:
        {
          for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 169;
               proc_control_node_B.i10++) {
            proc_control_node_B.U_o[proc_control_node_B.i10] = (1512.0 *
              proc_control_node_B.A3[proc_control_node_B.i10] +
              proc_control_node_B.A4[proc_control_node_B.i10]) + 277200.0 *
              proc_control_node_B.A2[proc_control_node_B.i10];
          }

          proc_control_node_B.e_k_b = 0;
          proc_control_node_B.A2_tmp = 0;
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            std::memset(&proc_control_node_B.A4_b[proc_control_node_B.A2_tmp], 0,
                        13U * sizeof(real_T));
            proc_control_node_B.U_o[proc_control_node_B.e_k_b] += 8.64864E+6;
            proc_control_node_B.e_k_b += 14;
            proc_control_node_B.A2_tmp += 13;
          }

          proc_control_node_B.e_k_b = 0;
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            proc_control_node_B.A2_tmp = 0;
            for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 13;
                 proc_control_node_B.i11++) {
              for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
                   proc_control_node_B.i10++) {
                int32_T A_tmp;
                A_tmp = proc_control_node_B.i10 + proc_control_node_B.e_k_b;
                proc_control_node_B.A4_b[A_tmp] += A[proc_control_node_B.i10 +
                  proc_control_node_B.A2_tmp] *
                  proc_control_node_B.U_o[proc_control_node_B.i11 +
                  proc_control_node_B.e_k_b];
              }

              proc_control_node_B.A2_tmp += 13;
            }

            proc_control_node_B.e_k_b += 13;
          }

          for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 169;
               proc_control_node_B.i10++) {
            proc_control_node_B.U_o[proc_control_node_B.i10] =
              proc_control_node_B.A4_b[proc_control_node_B.i10];
            proc_control_node_B.V[proc_control_node_B.i10] = (56.0 *
              proc_control_node_B.A4[proc_control_node_B.i10] + 25200.0 *
              proc_control_node_B.A3[proc_control_node_B.i10]) + 1.99584E+6 *
              proc_control_node_B.A2[proc_control_node_B.i10];
          }

          proc_control_node_B.d_i = 1.729728E+7;
        }
        break;

       case 9:
        {
          for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
               proc_control_node_B.i10++) {
            std::memset(&proc_control_node_B.V[proc_control_node_B.i10 * 13], 0,
                        13U * sizeof(real_T));
            for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
                 proc_control_node_B.e_k++) {
              for (proc_control_node_B.e_k_b = 0; proc_control_node_B.e_k_b < 13;
                   proc_control_node_B.e_k_b++) {
                proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i10 +
                  proc_control_node_B.e_k_b;
                proc_control_node_B.V[proc_control_node_B.A2_tmp] +=
                  proc_control_node_B.A4[13 * proc_control_node_B.e_k +
                  proc_control_node_B.e_k_b] * proc_control_node_B.A2[13 *
                  proc_control_node_B.i10 + proc_control_node_B.e_k];
              }
            }
          }

          for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 169;
               proc_control_node_B.i10++) {
            proc_control_node_B.U_o[proc_control_node_B.i10] = ((3960.0 *
              proc_control_node_B.A4[proc_control_node_B.i10] +
              proc_control_node_B.V[proc_control_node_B.i10]) + 2.16216E+6 *
              proc_control_node_B.A3[proc_control_node_B.i10]) + 3.027024E+8 *
              proc_control_node_B.A2[proc_control_node_B.i10];
          }

          proc_control_node_B.e_k_b = 0;
          proc_control_node_B.A2_tmp = 0;
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            std::memset(&proc_control_node_B.A4_b[proc_control_node_B.A2_tmp], 0,
                        13U * sizeof(real_T));
            proc_control_node_B.U_o[proc_control_node_B.e_k_b] += 8.8216128E+9;
            proc_control_node_B.e_k_b += 14;
            proc_control_node_B.A2_tmp += 13;
          }

          proc_control_node_B.e_k_b = 0;
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            proc_control_node_B.A2_tmp = 0;
            for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 13;
                 proc_control_node_B.i11++) {
              for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
                   proc_control_node_B.i10++) {
                int32_T A_tmp;
                A_tmp = proc_control_node_B.i10 + proc_control_node_B.e_k_b;
                proc_control_node_B.A4_b[A_tmp] += A[proc_control_node_B.i10 +
                  proc_control_node_B.A2_tmp] *
                  proc_control_node_B.U_o[proc_control_node_B.i11 +
                  proc_control_node_B.e_k_b];
              }

              proc_control_node_B.A2_tmp += 13;
            }

            proc_control_node_B.e_k_b += 13;
          }

          for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 169;
               proc_control_node_B.i10++) {
            proc_control_node_B.U_o[proc_control_node_B.i10] =
              proc_control_node_B.A4_b[proc_control_node_B.i10];
            proc_control_node_B.V[proc_control_node_B.i10] = ((90.0 *
              proc_control_node_B.V[proc_control_node_B.i10] + 110880.0 *
              proc_control_node_B.A4[proc_control_node_B.i10]) + 3.027024E+7 *
              proc_control_node_B.A3[proc_control_node_B.i10]) + 2.0756736E+9 *
              proc_control_node_B.A2[proc_control_node_B.i10];
          }

          proc_control_node_B.d_i = 1.76432256E+10;
        }
        break;

       default:
        for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 169;
             proc_control_node_B.i10++) {
          proc_control_node_B.U_o[proc_control_node_B.i10] = (3.352212864E+10 *
            proc_control_node_B.A4[proc_control_node_B.i10] + 1.05594705216E+13 *
            proc_control_node_B.A3[proc_control_node_B.i10]) +
            1.1873537964288E+15 * proc_control_node_B.A2[proc_control_node_B.i10];
        }

        proc_control_node_B.e_k_b = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          proc_control_node_B.U_o[proc_control_node_B.e_k_b] +=
            3.238237626624E+16;
          proc_control_node_B.e_k_b += 14;
        }

        for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 169;
             proc_control_node_B.i10++) {
          proc_control_node_B.V[proc_control_node_B.i10] = (16380.0 *
            proc_control_node_B.A3[proc_control_node_B.i10] +
            proc_control_node_B.A4[proc_control_node_B.i10]) + 4.08408E+7 *
            proc_control_node_B.A2[proc_control_node_B.i10];
        }

        for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
             proc_control_node_B.i10++) {
          proc_control_node_B.e_k_b = 0;
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            proc_control_node_B.d_i = 0.0;
            proc_control_node_B.A2_tmp = 0;
            for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 13;
                 proc_control_node_B.i11++) {
              proc_control_node_B.d_i +=
                proc_control_node_B.A4[proc_control_node_B.A2_tmp +
                proc_control_node_B.i10] *
                proc_control_node_B.V[proc_control_node_B.i11 +
                proc_control_node_B.e_k_b];
              proc_control_node_B.A2_tmp += 13;
            }

            proc_control_node_B.A2_tmp = proc_control_node_B.e_k_b +
              proc_control_node_B.i10;
            proc_control_node_B.A4_b[proc_control_node_B.A2_tmp] =
              proc_control_node_B.U_o[proc_control_node_B.A2_tmp] +
              proc_control_node_B.d_i;
            proc_control_node_B.e_k_b += 13;
          }
        }

        for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
             proc_control_node_B.i10++) {
          std::memset(&proc_control_node_B.U_o[proc_control_node_B.i10 * 13], 0,
                      13U * sizeof(real_T));
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            for (proc_control_node_B.e_k_b = 0; proc_control_node_B.e_k_b < 13;
                 proc_control_node_B.e_k_b++) {
              proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i10 +
                proc_control_node_B.e_k_b;
              proc_control_node_B.U_o[proc_control_node_B.A2_tmp] += A[13 *
                proc_control_node_B.e_k + proc_control_node_B.e_k_b] *
                proc_control_node_B.A4_b[13 * proc_control_node_B.i10 +
                proc_control_node_B.e_k];
            }
          }
        }

        for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 169;
             proc_control_node_B.i10++) {
          proc_control_node_B.A4_b[proc_control_node_B.i10] = (182.0 *
            proc_control_node_B.A4[proc_control_node_B.i10] + 960960.0 *
            proc_control_node_B.A3[proc_control_node_B.i10]) + 1.32324192E+9 *
            proc_control_node_B.A2[proc_control_node_B.i10];
        }

        for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 13;
             proc_control_node_B.i10++) {
          proc_control_node_B.e_k_b = 0;
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            proc_control_node_B.d_i = 0.0;
            proc_control_node_B.A2_tmp = 0;
            for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 13;
                 proc_control_node_B.i11++) {
              proc_control_node_B.d_i +=
                proc_control_node_B.A4[proc_control_node_B.A2_tmp +
                proc_control_node_B.i10] *
                proc_control_node_B.A4_b[proc_control_node_B.i11 +
                proc_control_node_B.e_k_b];
              proc_control_node_B.A2_tmp += 13;
            }

            proc_control_node_B.A2_tmp = proc_control_node_B.e_k_b +
              proc_control_node_B.i10;
            proc_control_node_B.V[proc_control_node_B.A2_tmp] =
              ((proc_control_node_B.A4[proc_control_node_B.A2_tmp] *
                6.704425728E+11 + proc_control_node_B.d_i) +
               proc_control_node_B.A3[proc_control_node_B.A2_tmp] *
               1.29060195264E+14) +
              proc_control_node_B.A2[proc_control_node_B.A2_tmp] *
              7.7717703038976E+15;
            proc_control_node_B.e_k_b += 13;
          }
        }

        proc_control_node_B.d_i = 6.476475253248E+16;
        break;
      }
    }
  }

  proc_control_node_B.e_k_b = 0;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
       proc_control_node_B.e_k++) {
    proc_control_node_B.V[proc_control_node_B.e_k_b] += proc_control_node_B.d_i;
    proc_control_node_B.e_k_b += 14;
  }

  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 169;
       proc_control_node_B.e_k++) {
    proc_control_node_B.V[proc_control_node_B.e_k] -=
      proc_control_node_B.U_o[proc_control_node_B.e_k];
    proc_control_node_B.U_o[proc_control_node_B.e_k] *= 2.0;
  }

  proc_control_node_lusolve(proc_control_node_B.V, proc_control_node_B.U_o, F);
  proc_control_node_B.e_k_b = 0;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
       proc_control_node_B.e_k++) {
    F[proc_control_node_B.e_k_b]++;
    proc_control_node_B.e_k_b += 14;
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_WtMult(const real_T W[8],
  const real_T M[1280], int32_T nwt, real_T WM[1280])
{
  int16_T ixw;
  ixw = 1;
  for (int32_T i{0}; i < 80; i++) {
    real_T W_0;
    int32_T WM_tmp;
    int32_T i_0;
    W_0 = W[ixw - 1];
    for (i_0 = 0; i_0 < 16; i_0++) {
      WM_tmp = 80 * i_0 + i;
      WM[WM_tmp] = M[WM_tmp] * W_0;
    }

    i_0 = ixw + 1;
    if (ixw + 1 > 32767) {
      i_0 = 32767;
    }

    ixw = static_cast<int16_T>(i_0);
    if (static_cast<int16_T>(i_0) > 8) {
      if (nwt < -2147483639) {
        WM_tmp = MAX_int32_T;
      } else {
        WM_tmp = 8 - nwt;
      }

      if (WM_tmp > 32767) {
        WM_tmp = 32767;
      } else if (WM_tmp < -32768) {
        WM_tmp = -32768;
      }

      i_0 = WM_tmp + 1;
      if (WM_tmp + 1 > 32767) {
        i_0 = 32767;
      }

      ixw = static_cast<int16_T>(i_0);
    }
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
int32_T proc_control_nodeModelClass::proc_control_node_xpotrf(real_T b_A[289])
{
  int32_T info;
  int32_T j;
  boolean_T exitg1;
  info = 0;
  j = 0;
  exitg1 = false;
  while ((!exitg1) && (j < 17)) {
    int32_T b_ix;
    int32_T b_iy;
    int32_T b_k;
    int32_T idxAjj;
    idxAjj = j * 17 + j;
    proc_control_node_B.ssq = 0.0;
    if (j >= 1) {
      b_ix = j;
      b_iy = j;
      for (b_k = 0; b_k < j; b_k++) {
        proc_control_node_B.ssq += b_A[b_ix] * b_A[b_iy];
        b_ix += 17;
        b_iy += 17;
      }
    }

    proc_control_node_B.ssq = b_A[idxAjj] - proc_control_node_B.ssq;
    if (proc_control_node_B.ssq > 0.0) {
      proc_control_node_B.ssq = std::sqrt(proc_control_node_B.ssq);
      b_A[idxAjj] = proc_control_node_B.ssq;
      if (j + 1 < 17) {
        if (j != 0) {
          b_ix = j;
          b_iy = ((j - 1) * 17 + j) + 2;
          for (b_k = j + 2; b_k <= b_iy; b_k += 17) {
            int32_T d;
            int32_T iy;
            proc_control_node_B.c_p = -b_A[b_ix];
            iy = idxAjj + 1;
            d = (b_k - j) + 15;
            for (int32_T ia{b_k}; ia <= d; ia++) {
              b_A[iy] += b_A[ia - 1] * proc_control_node_B.c_p;
              iy++;
            }

            b_ix += 17;
          }
        }

        proc_control_node_B.ssq = 1.0 / proc_control_node_B.ssq;
        b_ix = (idxAjj - j) + 17;
        for (idxAjj++; idxAjj < b_ix; idxAjj++) {
          b_A[idxAjj] *= proc_control_node_B.ssq;
        }
      }

      j++;
    } else {
      b_A[idxAjj] = proc_control_node_B.ssq;
      info = j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_minimum(const real_T x[17])
{
  real_T ex;
  int32_T idx;
  if (!std::isnan(x[0])) {
    idx = 1;
  } else {
    int32_T k;
    boolean_T exitg1;
    idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 18)) {
      if (!std::isnan(x[k - 1])) {
        idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (idx == 0) {
    ex = x[0];
  } else {
    ex = x[idx - 1];
    while (idx + 1 <= 17) {
      if (ex > x[idx]) {
        ex = x[idx];
      }

      idx++;
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_n_mpc_checkhessian(real_T b_H[289],
  real_T L[289], real_T *BadH)
{
  int32_T Tries;
  boolean_T guard1{ false };

  *BadH = 0.0;
  std::memcpy(&L[0], &b_H[0], 289U * sizeof(real_T));
  proc_control_node_B.Tries_e = proc_control_node_xpotrf(L);
  guard1 = false;
  if (proc_control_node_B.Tries_e == 0) {
    Tries = 0;
    for (proc_control_node_B.Tries_e = 0; proc_control_node_B.Tries_e < 17;
         proc_control_node_B.Tries_e++) {
      proc_control_node_B.varargin_1_l[proc_control_node_B.Tries_e] = L[Tries];
      Tries += 18;
    }

    if (proc_control_node_minimum(proc_control_node_B.varargin_1_l) >
        1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    boolean_T exitg2;
    proc_control_node_B.normH_p = 0.0;
    proc_control_node_B.Tries_e = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.Tries_e < 17)) {
      proc_control_node_B.s_b = 0.0;
      for (Tries = 0; Tries < 17; Tries++) {
        proc_control_node_B.s_b += std::abs(b_H[17 * Tries +
          proc_control_node_B.Tries_e]);
      }

      if (std::isnan(proc_control_node_B.s_b)) {
        proc_control_node_B.normH_p = (rtNaN);
        exitg2 = true;
      } else {
        if (proc_control_node_B.s_b > proc_control_node_B.normH_p) {
          proc_control_node_B.normH_p = proc_control_node_B.s_b;
        }

        proc_control_node_B.Tries_e++;
      }
    }

    if (proc_control_node_B.normH_p >= 1.0E+10) {
      *BadH = 2.0;
    } else {
      boolean_T exitg1;
      proc_control_node_B.Tries_e = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.Tries_e <= 4)) {
        boolean_T guard2{ false };

        proc_control_node_B.normH_p = rt_powd_snf(10.0, static_cast<real_T>
          (proc_control_node_B.Tries_e)) * 1.4901161193847656E-7;
        std::memset(&proc_control_node_B.b_cx[0], 0, 289U * sizeof(int8_T));
        proc_control_node_B.j_e = 0;
        for (Tries = 0; Tries < 17; Tries++) {
          proc_control_node_B.b_cx[proc_control_node_B.j_e] = 1;
          proc_control_node_B.j_e += 18;
        }

        for (Tries = 0; Tries < 289; Tries++) {
          b_H[Tries] += proc_control_node_B.normH_p * static_cast<real_T>
            (proc_control_node_B.b_cx[Tries]);
          L[Tries] = b_H[Tries];
        }

        Tries = proc_control_node_xpotrf(L);
        guard2 = false;
        if (Tries == 0) {
          proc_control_node_B.j_e = 0;
          for (Tries = 0; Tries < 17; Tries++) {
            proc_control_node_B.varargin_1_l[Tries] = L[proc_control_node_B.j_e];
            proc_control_node_B.j_e += 18;
          }

          if (proc_control_node_minimum(proc_control_node_B.varargin_1_l) >
              1.4901161193847656E-7) {
            *BadH = 1.0;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          *BadH = 3.0;
          proc_control_node_B.Tries_e++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_trisolve(const real_T b_A
  [289], real_T b_B[289])
{
  for (int32_T j{0}; j < 17; j++) {
    int32_T jBcol;
    jBcol = 17 * j;
    for (int32_T k{0}; k < 17; k++) {
      real_T tmp_0;
      int32_T kAcol;
      int32_T tmp;
      kAcol = 17 * k;
      tmp = k + jBcol;
      tmp_0 = b_B[tmp];
      if (tmp_0 != 0.0) {
        b_B[tmp] = tmp_0 / b_A[k + kAcol];
        for (int32_T i{k + 2}; i < 18; i++) {
          int32_T tmp_1;
          tmp_1 = (i + jBcol) - 1;
          b_B[tmp_1] -= b_A[(i + kAcol) - 1] * b_B[tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_Unconstrained(const real_T
  b_Hinv[289], const real_T f[17], real_T x[17], int16_T n)
{
  for (int32_T i{1}; i - 1 < n; i++) {
    real_T b_Hinv_0;
    b_Hinv_0 = 0.0;
    for (int32_T i_0{0}; i_0 < 17; i_0++) {
      b_Hinv_0 += -b_Hinv[(17 * i_0 + static_cast<int16_T>(i)) - 1] * f[i_0];
    }

    x[static_cast<int16_T>(i) - 1] = b_Hinv_0;
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_norm(const real_T x[17])
{
  real_T y;
  y = 0.0;
  proc_control_node_B.scale_j = 3.3121686421112381E-170;
  for (int32_T k{0}; k < 17; k++) {
    proc_control_node_B.absxk_b = std::abs(x[k]);
    if (proc_control_node_B.absxk_b > proc_control_node_B.scale_j) {
      real_T t;
      t = proc_control_node_B.scale_j / proc_control_node_B.absxk_b;
      y = y * t * t + 1.0;
      proc_control_node_B.scale_j = proc_control_node_B.absxk_b;
    } else {
      real_T t;
      t = proc_control_node_B.absxk_b / proc_control_node_B.scale_j;
      y += t * t;
    }
  }

  return proc_control_node_B.scale_j * std::sqrt(y);
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_abs(const real_T x[17],
  real_T y[17])
{
  for (int32_T k{0}; k < 17; k++) {
    y[k] = std::abs(x[k]);
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_maximum(const real_T x[17])
{
  real_T ex;
  int32_T idx;
  if (!std::isnan(x[0])) {
    idx = 1;
  } else {
    int32_T k;
    boolean_T exitg1;
    idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 18)) {
      if (!std::isnan(x[k - 1])) {
        idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (idx == 0) {
    ex = x[0];
  } else {
    ex = x[idx - 1];
    while (idx + 1 <= 17) {
      if (ex < x[idx]) {
        ex = x[idx];
      }

      idx++;
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_abs_m(const real_T x[32],
  real_T y[32])
{
  for (int32_T k{0}; k < 32; k++) {
    y[k] = std::abs(x[k]);
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_maximum2(const real_T x[32],
  real_T y, real_T ex[32])
{
  for (int32_T k{0}; k < 32; k++) {
    ex[k] = std::fmax(x[k], y);
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2(int32_T n, const
  real_T x[289], int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_node_B.scale_a = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_node_B.absxk_h = std::abs(x[k - 1]);
        if (proc_control_node_B.absxk_h > proc_control_node_B.scale_a) {
          proc_control_node_B.t_mi = proc_control_node_B.scale_a /
            proc_control_node_B.absxk_h;
          y = y * proc_control_node_B.t_mi * proc_control_node_B.t_mi + 1.0;
          proc_control_node_B.scale_a = proc_control_node_B.absxk_h;
        } else {
          proc_control_node_B.t_mi = proc_control_node_B.absxk_h /
            proc_control_node_B.scale_a;
          y += proc_control_node_B.t_mi * proc_control_node_B.t_mi;
        }
      }

      y = proc_control_node_B.scale_a * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xgemv(int32_T b_m, int32_T n,
  const real_T b_A[289], int32_T ia0, const real_T x[289], int32_T ix0, real_T
  y[17])
{
  if ((b_m != 0) && (n != 0)) {
    proc_control_node_B.b_iy = 0;
    while (proc_control_node_B.b_iy <= n - 1) {
      y[proc_control_node_B.b_iy] = 0.0;
      proc_control_node_B.b_iy++;
    }

    proc_control_node_B.b_iy = 0;
    proc_control_node_B.b_ir = (n - 1) * 17 + ia0;
    for (int32_T iac{ia0}; iac <= proc_control_node_B.b_ir; iac += 17) {
      int32_T d;
      proc_control_node_B.ix_i = ix0;
      proc_control_node_B.c_e = 0.0;
      d = (iac + b_m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_e += b_A[ia - 1] * x[proc_control_node_B.ix_i - 1];
        proc_control_node_B.ix_i++;
      }

      y[proc_control_node_B.b_iy] += proc_control_node_B.c_e;
      proc_control_node_B.b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xgerc(int32_T b_m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[17], real_T b_A[289], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA = ia0 - 1;
    proc_control_node_B.jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[proc_control_node_B.jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        proc_control_node_B.temp = y[proc_control_node_B.jy] * alpha1;
        proc_control_node_B.ix_g = ix0;
        ijA = proc_control_node_B.jA;
        b = b_m + proc_control_node_B.jA;
        while (ijA + 1 <= b) {
          b_A[ijA] += b_A[proc_control_node_B.ix_g - 1] *
            proc_control_node_B.temp;
          proc_control_node_B.ix_g++;
          ijA++;
        }
      }

      proc_control_node_B.jy++;
      proc_control_node_B.jA += 17;
    }
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_qr(const real_T b_A[289],
  real_T Q[289], real_T R[289])
{
  int32_T exitg1;
  boolean_T exitg2;
  std::memcpy(&proc_control_node_B.c_A[0], &b_A[0], 289U * sizeof(real_T));
  std::memset(&proc_control_node_B.tau[0], 0, 17U * sizeof(real_T));
  std::memset(&proc_control_node_B.work[0], 0, 17U * sizeof(real_T));
  for (proc_control_node_B.itau = 0; proc_control_node_B.itau < 17;
       proc_control_node_B.itau++) {
    proc_control_node_B.i_f = proc_control_node_B.itau * 17 +
      proc_control_node_B.itau;
    if (proc_control_node_B.itau + 1 < 17) {
      proc_control_node_B.atmp = proc_control_node_B.c_A[proc_control_node_B.i_f];
      proc_control_node_B.tau[proc_control_node_B.itau] = 0.0;
      proc_control_node_B.beta1 = proc_control_node_xnrm2(16 -
        proc_control_node_B.itau, proc_control_node_B.c_A,
        proc_control_node_B.i_f + 2);
      if (proc_control_node_B.beta1 != 0.0) {
        proc_control_node_B.beta1 = rt_hypotd_snf
          (proc_control_node_B.c_A[proc_control_node_B.i_f],
           proc_control_node_B.beta1);
        if (proc_control_node_B.c_A[proc_control_node_B.i_f] >= 0.0) {
          proc_control_node_B.beta1 = -proc_control_node_B.beta1;
        }

        if (std::abs(proc_control_node_B.beta1) < 1.0020841800044864E-292) {
          proc_control_node_B.knt = -1;
          proc_control_node_B.c_lastc = (proc_control_node_B.i_f -
            proc_control_node_B.itau) + 17;
          do {
            proc_control_node_B.knt++;
            proc_control_node_B.b_coltop = proc_control_node_B.i_f + 1;
            while (proc_control_node_B.b_coltop + 1 <=
                   proc_control_node_B.c_lastc) {
              proc_control_node_B.c_A[proc_control_node_B.b_coltop] *=
                9.9792015476736E+291;
              proc_control_node_B.b_coltop++;
            }

            proc_control_node_B.beta1 *= 9.9792015476736E+291;
            proc_control_node_B.atmp *= 9.9792015476736E+291;
          } while (!(std::abs(proc_control_node_B.beta1) >=
                     1.0020841800044864E-292));

          proc_control_node_B.beta1 = rt_hypotd_snf(proc_control_node_B.atmp,
            proc_control_node_xnrm2(16 - proc_control_node_B.itau,
            proc_control_node_B.c_A, proc_control_node_B.i_f + 2));
          if (proc_control_node_B.atmp >= 0.0) {
            proc_control_node_B.beta1 = -proc_control_node_B.beta1;
          }

          proc_control_node_B.tau[proc_control_node_B.itau] =
            (proc_control_node_B.beta1 - proc_control_node_B.atmp) /
            proc_control_node_B.beta1;
          proc_control_node_B.atmp = 1.0 / (proc_control_node_B.atmp -
            proc_control_node_B.beta1);
          proc_control_node_B.b_coltop = proc_control_node_B.i_f + 1;
          while (proc_control_node_B.b_coltop + 1 <= proc_control_node_B.c_lastc)
          {
            proc_control_node_B.c_A[proc_control_node_B.b_coltop] *=
              proc_control_node_B.atmp;
            proc_control_node_B.b_coltop++;
          }

          proc_control_node_B.c_lastc = 0;
          while (proc_control_node_B.c_lastc <= proc_control_node_B.knt) {
            proc_control_node_B.beta1 *= 1.0020841800044864E-292;
            proc_control_node_B.c_lastc++;
          }

          proc_control_node_B.atmp = proc_control_node_B.beta1;
        } else {
          proc_control_node_B.tau[proc_control_node_B.itau] =
            (proc_control_node_B.beta1 -
             proc_control_node_B.c_A[proc_control_node_B.i_f]) /
            proc_control_node_B.beta1;
          proc_control_node_B.atmp = 1.0 /
            (proc_control_node_B.c_A[proc_control_node_B.i_f] -
             proc_control_node_B.beta1);
          proc_control_node_B.knt = (proc_control_node_B.i_f -
            proc_control_node_B.itau) + 17;
          proc_control_node_B.c_lastc = proc_control_node_B.i_f + 1;
          while (proc_control_node_B.c_lastc + 1 <= proc_control_node_B.knt) {
            proc_control_node_B.c_A[proc_control_node_B.c_lastc] *=
              proc_control_node_B.atmp;
            proc_control_node_B.c_lastc++;
          }

          proc_control_node_B.atmp = proc_control_node_B.beta1;
        }
      }

      proc_control_node_B.c_A[proc_control_node_B.i_f] =
        proc_control_node_B.atmp;
      proc_control_node_B.beta1 =
        proc_control_node_B.c_A[proc_control_node_B.i_f];
      proc_control_node_B.c_A[proc_control_node_B.i_f] = 1.0;
      if (proc_control_node_B.tau[proc_control_node_B.itau] != 0.0) {
        proc_control_node_B.knt = 17 - proc_control_node_B.itau;
        proc_control_node_B.c_lastc = (proc_control_node_B.i_f -
          proc_control_node_B.itau) + 16;
        while ((proc_control_node_B.knt > 0) &&
               (proc_control_node_B.c_A[proc_control_node_B.c_lastc] == 0.0)) {
          proc_control_node_B.knt--;
          proc_control_node_B.c_lastc--;
        }

        proc_control_node_B.c_lastc = 16 - proc_control_node_B.itau;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.c_lastc > 0)) {
          proc_control_node_B.b_coltop = ((proc_control_node_B.c_lastc - 1) * 17
            + proc_control_node_B.i_f) + 17;
          proc_control_node_B.coltop = proc_control_node_B.b_coltop;
          do {
            exitg1 = 0;
            if (proc_control_node_B.coltop + 1 <= proc_control_node_B.b_coltop +
                proc_control_node_B.knt) {
              if (proc_control_node_B.c_A[proc_control_node_B.coltop] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_node_B.coltop++;
              }
            } else {
              proc_control_node_B.c_lastc--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_node_B.knt = 0;
        proc_control_node_B.c_lastc = 0;
      }

      if (proc_control_node_B.knt > 0) {
        proc_control_node_xgemv(proc_control_node_B.knt,
          proc_control_node_B.c_lastc, proc_control_node_B.c_A,
          proc_control_node_B.i_f + 18, proc_control_node_B.c_A,
          proc_control_node_B.i_f + 1, proc_control_node_B.work);
        proc_control_node_xgerc(proc_control_node_B.knt,
          proc_control_node_B.c_lastc,
          -proc_control_node_B.tau[proc_control_node_B.itau],
          proc_control_node_B.i_f + 1, proc_control_node_B.work,
          proc_control_node_B.c_A, proc_control_node_B.i_f + 18);
      }

      proc_control_node_B.c_A[proc_control_node_B.i_f] =
        proc_control_node_B.beta1;
    } else {
      proc_control_node_B.tau[16] = 0.0;
    }
  }

  for (proc_control_node_B.itau = 0; proc_control_node_B.itau < 17;
       proc_control_node_B.itau++) {
    proc_control_node_B.i_f = 0;
    while (proc_control_node_B.i_f <= proc_control_node_B.itau) {
      R[proc_control_node_B.i_f + 17 * proc_control_node_B.itau] =
        proc_control_node_B.c_A[17 * proc_control_node_B.itau +
        proc_control_node_B.i_f];
      proc_control_node_B.i_f++;
    }

    proc_control_node_B.i_f = proc_control_node_B.itau + 1;
    while (proc_control_node_B.i_f + 1 < 18) {
      R[proc_control_node_B.i_f + 17 * proc_control_node_B.itau] = 0.0;
      proc_control_node_B.i_f++;
    }

    proc_control_node_B.work[proc_control_node_B.itau] = 0.0;
  }

  for (proc_control_node_B.i_f = 16; proc_control_node_B.i_f >= 0;
       proc_control_node_B.i_f--) {
    proc_control_node_B.knt = (proc_control_node_B.i_f * 17 +
      proc_control_node_B.i_f) + 18;
    if (proc_control_node_B.i_f + 1 < 17) {
      proc_control_node_B.c_A[proc_control_node_B.knt - 18] = 1.0;
      if (proc_control_node_B.tau[proc_control_node_B.i_f] != 0.0) {
        proc_control_node_B.c_lastc = 17 - proc_control_node_B.i_f;
        proc_control_node_B.b_coltop = proc_control_node_B.knt -
          proc_control_node_B.i_f;
        while ((proc_control_node_B.c_lastc > 0) &&
               (proc_control_node_B.c_A[proc_control_node_B.b_coltop - 2] == 0.0))
        {
          proc_control_node_B.c_lastc--;
          proc_control_node_B.b_coltop--;
        }

        proc_control_node_B.b_coltop = 16 - proc_control_node_B.i_f;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.b_coltop > 0)) {
          proc_control_node_B.coltop = (proc_control_node_B.b_coltop - 1) * 17 +
            proc_control_node_B.knt;
          proc_control_node_B.itau = proc_control_node_B.coltop;
          do {
            exitg1 = 0;
            if (proc_control_node_B.itau <= (proc_control_node_B.coltop +
                 proc_control_node_B.c_lastc) - 1) {
              if (proc_control_node_B.c_A[proc_control_node_B.itau - 1] != 0.0)
              {
                exitg1 = 1;
              } else {
                proc_control_node_B.itau++;
              }
            } else {
              proc_control_node_B.b_coltop--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_node_B.c_lastc = 0;
        proc_control_node_B.b_coltop = 0;
      }

      if (proc_control_node_B.c_lastc > 0) {
        proc_control_node_xgemv(proc_control_node_B.c_lastc,
          proc_control_node_B.b_coltop, proc_control_node_B.c_A,
          proc_control_node_B.knt, proc_control_node_B.c_A,
          proc_control_node_B.knt - 17, proc_control_node_B.work);
        proc_control_node_xgerc(proc_control_node_B.c_lastc,
          proc_control_node_B.b_coltop,
          -proc_control_node_B.tau[proc_control_node_B.i_f],
          proc_control_node_B.knt - 17, proc_control_node_B.work,
          proc_control_node_B.c_A, proc_control_node_B.knt);
      }

      proc_control_node_B.c_lastc = (proc_control_node_B.knt -
        proc_control_node_B.i_f) - 1;
      proc_control_node_B.b_coltop = proc_control_node_B.knt - 17;
      while (proc_control_node_B.b_coltop + 1 <= proc_control_node_B.c_lastc) {
        proc_control_node_B.c_A[proc_control_node_B.b_coltop] *=
          -proc_control_node_B.tau[proc_control_node_B.i_f];
        proc_control_node_B.b_coltop++;
      }
    }

    proc_control_node_B.c_A[proc_control_node_B.knt - 18] = 1.0 -
      proc_control_node_B.tau[proc_control_node_B.i_f];
    proc_control_node_B.c_lastc = 0;
    while (proc_control_node_B.c_lastc <= proc_control_node_B.i_f - 1) {
      proc_control_node_B.c_A[(proc_control_node_B.knt -
        proc_control_node_B.c_lastc) - 19] = 0.0;
      proc_control_node_B.c_lastc++;
    }
  }

  proc_control_node_B.knt = 0;
  for (proc_control_node_B.itau = 0; proc_control_node_B.itau < 17;
       proc_control_node_B.itau++) {
    std::memcpy(&Q[proc_control_node_B.knt],
                &proc_control_node_B.c_A[proc_control_node_B.knt], 17U * sizeof
                (real_T));
    proc_control_node_B.knt += 17;
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_KWIKfactor(const real_T
  b_Ac[544], const int16_T iC[32], int16_T nA, const real_T b_Linv[289], real_T
  b_D[289], real_T b_H[289], int16_T n, real_T RLinv[289], real_T *Status)
{
  *Status = 1.0;
  std::memset(&RLinv[0], 0, 289U * sizeof(real_T));
  proc_control_node_B.i_lt = 1;
  while (proc_control_node_B.i_lt - 1 <= nA - 1) {
    proc_control_node_B.iC_l = iC[static_cast<int16_T>(proc_control_node_B.i_lt)
      - 1];
    for (proc_control_node_B.RLinv_tmp_tmp = 0;
         proc_control_node_B.RLinv_tmp_tmp < 17;
         proc_control_node_B.RLinv_tmp_tmp++) {
      proc_control_node_B.f_i = (static_cast<int16_T>(proc_control_node_B.i_lt)
        - 1) * 17 + proc_control_node_B.RLinv_tmp_tmp;
      RLinv[proc_control_node_B.f_i] = 0.0;
      for (proc_control_node_B.RLinv_tmp = 0; proc_control_node_B.RLinv_tmp < 17;
           proc_control_node_B.RLinv_tmp++) {
        RLinv[proc_control_node_B.f_i] += b_Ac[((proc_control_node_B.RLinv_tmp <<
          5) + proc_control_node_B.iC_l) - 1] * b_Linv[17 *
          proc_control_node_B.RLinv_tmp + proc_control_node_B.RLinv_tmp_tmp];
      }
    }

    proc_control_node_B.i_lt++;
  }

  proc_control_node_qr(RLinv, proc_control_node_B.QQ, proc_control_node_B.RR);
  proc_control_node_B.i_lt = 1;
  int32_T exitg1;
  do {
    exitg1 = 0;
    if (proc_control_node_B.i_lt - 1 <= nA - 1) {
      if (std::abs(proc_control_node_B.RR[((static_cast<int16_T>
             (proc_control_node_B.i_lt) - 1) * 17 + static_cast<int16_T>
            (proc_control_node_B.i_lt)) - 1]) < 1.0E-12) {
        *Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_node_B.i_lt++;
      }
    } else {
      int16_T b_j;
      int16_T c_k;
      proc_control_node_B.i_lt = 1;
      while (proc_control_node_B.i_lt - 1 <= n - 1) {
        proc_control_node_B.f_i = 1;
        while (proc_control_node_B.f_i - 1 <= n - 1) {
          proc_control_node_B.b_Linv_c2 = 0.0;
          for (proc_control_node_B.RLinv_tmp_tmp = 0;
               proc_control_node_B.RLinv_tmp_tmp < 17;
               proc_control_node_B.RLinv_tmp_tmp++) {
            proc_control_node_B.b_Linv_c2 += b_Linv[(static_cast<int16_T>
              (proc_control_node_B.i_lt) - 1) * 17 +
              proc_control_node_B.RLinv_tmp_tmp] * proc_control_node_B.QQ[(
              static_cast<int16_T>(proc_control_node_B.f_i) - 1) * 17 +
              proc_control_node_B.RLinv_tmp_tmp];
          }

          proc_control_node_B.TL[(static_cast<int16_T>(proc_control_node_B.i_lt)
            + 17 * (static_cast<int16_T>(proc_control_node_B.f_i) - 1)) - 1] =
            proc_control_node_B.b_Linv_c2;
          proc_control_node_B.f_i++;
        }

        proc_control_node_B.i_lt++;
      }

      std::memset(&RLinv[0], 0, 289U * sizeof(real_T));
      for (b_j = nA; b_j > 0; b_j = static_cast<int16_T>(b_j - 1)) {
        proc_control_node_B.RLinv_tmp_tmp = (b_j - 1) * 17;
        proc_control_node_B.f_i = (b_j + proc_control_node_B.RLinv_tmp_tmp) - 1;
        RLinv[proc_control_node_B.f_i] = 1.0;
        for (c_k = b_j; c_k <= nA; c_k = static_cast<int16_T>(c_k + 1)) {
          proc_control_node_B.RLinv_tmp = ((c_k - 1) * 17 + b_j) - 1;
          RLinv[proc_control_node_B.RLinv_tmp] /=
            proc_control_node_B.RR[proc_control_node_B.f_i];
        }

        if (b_j > 1) {
          proc_control_node_B.i_lt = 1;
          while (proc_control_node_B.i_lt - 1 <= b_j - 2) {
            for (c_k = b_j; c_k <= nA; c_k = static_cast<int16_T>(c_k + 1)) {
              proc_control_node_B.f_i = (c_k - 1) * 17;
              proc_control_node_B.RLinv_tmp = (proc_control_node_B.f_i +
                static_cast<int16_T>(proc_control_node_B.i_lt)) - 1;
              RLinv[proc_control_node_B.RLinv_tmp] -= proc_control_node_B.RR
                [(proc_control_node_B.RLinv_tmp_tmp + static_cast<int16_T>
                  (proc_control_node_B.i_lt)) - 1] * RLinv
                [(proc_control_node_B.f_i + b_j) - 1];
            }

            proc_control_node_B.i_lt++;
          }
        }
      }

      proc_control_node_B.i_lt = 1;
      while (proc_control_node_B.i_lt - 1 <= n - 1) {
        for (b_j = static_cast<int16_T>(proc_control_node_B.i_lt); b_j <= n; b_j
             = static_cast<int16_T>(b_j + 1)) {
          proc_control_node_B.RLinv_tmp_tmp = ((b_j - 1) * 17 +
            static_cast<int16_T>(proc_control_node_B.i_lt)) - 1;
          b_H[proc_control_node_B.RLinv_tmp_tmp] = 0.0;
          proc_control_node_B.RLinv_tmp = nA + 1;
          if (nA + 1 > 32767) {
            proc_control_node_B.RLinv_tmp = 32767;
          }

          for (c_k = static_cast<int16_T>(proc_control_node_B.RLinv_tmp); c_k <=
               n; c_k = static_cast<int16_T>(c_k + 1)) {
            proc_control_node_B.RLinv_tmp = (c_k - 1) * 17;
            b_H[proc_control_node_B.RLinv_tmp_tmp] -= proc_control_node_B.TL
              [(proc_control_node_B.RLinv_tmp + static_cast<int16_T>
                (proc_control_node_B.i_lt)) - 1] * proc_control_node_B.TL
              [(proc_control_node_B.RLinv_tmp + b_j) - 1];
          }

          b_H[(b_j + 17 * (static_cast<int16_T>(proc_control_node_B.i_lt) - 1))
            - 1] = b_H[proc_control_node_B.RLinv_tmp_tmp];
        }

        proc_control_node_B.i_lt++;
      }

      proc_control_node_B.i_lt = 1;
      while (proc_control_node_B.i_lt - 1 <= nA - 1) {
        proc_control_node_B.f_i = 1;
        while (proc_control_node_B.f_i - 1 <= n - 1) {
          proc_control_node_B.RLinv_tmp_tmp = ((static_cast<int16_T>
            (proc_control_node_B.i_lt) - 1) * 17 + static_cast<int16_T>
            (proc_control_node_B.f_i)) - 1;
          b_D[proc_control_node_B.RLinv_tmp_tmp] = 0.0;
          for (b_j = static_cast<int16_T>(proc_control_node_B.i_lt); b_j <= nA;
               b_j = static_cast<int16_T>(b_j + 1)) {
            proc_control_node_B.RLinv_tmp = (b_j - 1) * 17;
            b_D[proc_control_node_B.RLinv_tmp_tmp] += proc_control_node_B.TL
              [(proc_control_node_B.RLinv_tmp + static_cast<int16_T>
                (proc_control_node_B.f_i)) - 1] * RLinv
              [(proc_control_node_B.RLinv_tmp + static_cast<int16_T>
                (proc_control_node_B.i_lt)) - 1];
          }

          proc_control_node_B.f_i++;
        }

        proc_control_node_B.i_lt++;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_mtimes(const real_T b_A[17],
  const real_T b_B[17])
{
  real_T b_C;
  b_C = 0.0;
  for (int32_T k{0}; k < 17; k++) {
    b_C += b_A[k] * b_B[k];
  }

  return b_C;
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_nod_DropConstraint(int16_T kDrop,
  int16_T iA[32], int16_T *nA, int16_T iC[32])
{
  int32_T tmp;
  iA[iC[kDrop - 1] - 1] = 0;
  if (kDrop < *nA) {
    tmp = *nA - 1;
    if (*nA - 1 < -32768) {
      tmp = -32768;
    }

    for (int16_T i{kDrop}; i <= static_cast<int16_T>(tmp); i =
         static_cast<int16_T>(i + 1)) {
      iC[i - 1] = iC[i];
    }
  }

  iC[*nA - 1] = 0;
  tmp = *nA - 1;
  if (*nA - 1 < -32768) {
    tmp = -32768;
  }

  *nA = static_cast<int16_T>(tmp);
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_qpkwik(const real_T b_Linv
  [289], const real_T b_Hinv[289], const real_T f[17], const real_T b_Ac[544],
  const real_T b[32], int16_T iA[32], int16_T maxiter, real_T FeasTol, real_T x
  [17], real_T lambda[32], real_T *status)
{
  int16_T kDrop;
  int16_T kNext;
  int16_T nA;
  boolean_T ColdReset;
  boolean_T DualFeasible;
  boolean_T cTolComputed;
  boolean_T guard1{ false };

  *status = 1.0;
  std::memset(&lambda[0], 0, sizeof(real_T) << 5U);
  std::memset(&x[0], 0, 17U * sizeof(real_T));
  std::memset(&proc_control_node_B.r[0], 0, 17U * sizeof(real_T));
  proc_control_node_B.rMin = 0.0;
  cTolComputed = false;
  for (proc_control_node_B.i_l = 0; proc_control_node_B.i_l < 32;
       proc_control_node_B.i_l++) {
    proc_control_node_B.cTol[proc_control_node_B.i_l] = 1.0;
    proc_control_node_B.iC[proc_control_node_B.i_l] = 0;
  }

  nA = 0;
  for (proc_control_node_B.i_l = 0; proc_control_node_B.i_l < 32;
       proc_control_node_B.i_l++) {
    if (iA[proc_control_node_B.i_l] == 1) {
      proc_control_node_B.U_tmp = nA + 1;
      if (nA + 1 > 32767) {
        proc_control_node_B.U_tmp = 32767;
      }

      nA = static_cast<int16_T>(proc_control_node_B.U_tmp);
      proc_control_node_B.iC[static_cast<int16_T>(proc_control_node_B.U_tmp) - 1]
        = static_cast<int16_T>(proc_control_node_B.i_l + 1);
    }
  }

  guard1 = false;
  if (nA > 0) {
    int32_T exitg3;
    uint16_T c_x;
    uint16_T q;
    std::memset(&proc_control_node_B.Opt[0], 0, 34U * sizeof(real_T));
    for (proc_control_node_B.i_l = 0; proc_control_node_B.i_l < 17;
         proc_control_node_B.i_l++) {
      proc_control_node_B.Rhs[proc_control_node_B.i_l] =
        f[proc_control_node_B.i_l];
      proc_control_node_B.Rhs[proc_control_node_B.i_l + 17] = 0.0;
    }

    DualFeasible = false;
    proc_control_node_B.U_tmp = 3 * nA;
    if (proc_control_node_B.U_tmp > 32767) {
      proc_control_node_B.U_tmp = 32767;
    }

    if (static_cast<int16_T>(proc_control_node_B.U_tmp) >= 50) {
      kNext = static_cast<int16_T>(proc_control_node_B.U_tmp);
    } else {
      kNext = 50;
    }

    q = static_cast<uint16_T>(kNext / 10U);
    c_x = static_cast<uint16_T>(static_cast<uint32_T>(kNext) - q * 10);
    if ((c_x > 0) && (c_x >= 5)) {
      q = static_cast<uint16_T>(q + 1);
    }

    ColdReset = false;
    do {
      exitg3 = 0;
      if ((!DualFeasible) && (nA > 0) && (static_cast<int32_T>(*status) <=
           maxiter)) {
        proc_control_node_KWIKfactor(b_Ac, proc_control_node_B.iC, nA, b_Linv,
          proc_control_node_B.b_D_c, proc_control_node_B.b_H, 17,
          proc_control_node_B.RLinv, &proc_control_node_B.Xnorm0);
        if (proc_control_node_B.Xnorm0 < 0.0) {
          if (ColdReset) {
            *status = -2.0;
            exitg3 = 2;
          } else {
            nA = 0;
            std::memset(&iA[0], 0, sizeof(int16_T) << 5U);
            std::memset(&proc_control_node_B.iC[0], 0, sizeof(int16_T) << 5U);
            ColdReset = true;
          }
        } else {
          proc_control_node_B.i_l = 1;
          while (proc_control_node_B.i_l - 1 <= nA - 1) {
            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_l) + 17;
            if (static_cast<int16_T>(proc_control_node_B.i_l) + 17 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            proc_control_node_B.Rhs[proc_control_node_B.U_tmp - 1] =
              b[proc_control_node_B.iC[static_cast<int16_T>
              (proc_control_node_B.i_l) - 1] - 1];
            for (kNext = static_cast<int16_T>(proc_control_node_B.i_l); kNext <=
                 nA; kNext = static_cast<int16_T>(kNext + 1)) {
              proc_control_node_B.U_tmp = ((static_cast<int16_T>
                (proc_control_node_B.i_l) - 1) * 17 + kNext) - 1;
              proc_control_node_B.U[proc_control_node_B.U_tmp] = 0.0;
              proc_control_node_B.lambda_tmp_tmp = 1;
              while (proc_control_node_B.lambda_tmp_tmp - 1 <= nA - 1) {
                proc_control_node_B.U_tmp_f = (static_cast<int16_T>
                  (proc_control_node_B.lambda_tmp_tmp) - 1) * 17;
                proc_control_node_B.U[proc_control_node_B.U_tmp] +=
                  proc_control_node_B.RLinv[(proc_control_node_B.U_tmp_f + kNext)
                  - 1] * proc_control_node_B.RLinv[(proc_control_node_B.U_tmp_f
                  + static_cast<int16_T>(proc_control_node_B.i_l)) - 1];
                proc_control_node_B.lambda_tmp_tmp++;
              }

              proc_control_node_B.U[(static_cast<int16_T>
                (proc_control_node_B.i_l) + 17 * (kNext - 1)) - 1] =
                proc_control_node_B.U[proc_control_node_B.U_tmp];
            }

            proc_control_node_B.i_l++;
          }

          for (proc_control_node_B.i_l = 0; proc_control_node_B.i_l < 17;
               proc_control_node_B.i_l++) {
            proc_control_node_B.Xnorm0 = 0.0;
            for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
                 proc_control_node_B.U_tmp++) {
              proc_control_node_B.Xnorm0 += proc_control_node_B.b_H[17 *
                proc_control_node_B.U_tmp + proc_control_node_B.i_l] *
                proc_control_node_B.Rhs[proc_control_node_B.U_tmp];
            }

            proc_control_node_B.Opt[proc_control_node_B.i_l] =
              proc_control_node_B.Xnorm0;
            proc_control_node_B.lambda_tmp_tmp = 1;
            while (proc_control_node_B.lambda_tmp_tmp - 1 <= nA - 1) {
              proc_control_node_B.U_tmp = static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) + 17;
              if (static_cast<int16_T>(proc_control_node_B.lambda_tmp_tmp) + 17 >
                  32767) {
                proc_control_node_B.U_tmp = 32767;
              }

              proc_control_node_B.Opt[proc_control_node_B.i_l] +=
                proc_control_node_B.b_D_c[(static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) - 1) * 17 +
                proc_control_node_B.i_l] *
                proc_control_node_B.Rhs[proc_control_node_B.U_tmp - 1];
              proc_control_node_B.lambda_tmp_tmp++;
            }
          }

          proc_control_node_B.i_l = 1;
          while (proc_control_node_B.i_l - 1 <= nA - 1) {
            proc_control_node_B.Xnorm0 = 0.0;
            for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
                 proc_control_node_B.U_tmp++) {
              proc_control_node_B.Xnorm0 += proc_control_node_B.b_D_c[(
                static_cast<int16_T>(proc_control_node_B.i_l) - 1) * 17 +
                proc_control_node_B.U_tmp] *
                proc_control_node_B.Rhs[proc_control_node_B.U_tmp];
            }

            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_l) + 17;
            if (static_cast<int16_T>(proc_control_node_B.i_l) + 17 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1] =
              proc_control_node_B.Xnorm0;
            proc_control_node_B.lambda_tmp_tmp = 1;
            while (proc_control_node_B.lambda_tmp_tmp - 1 <= nA - 1) {
              proc_control_node_B.U_tmp = static_cast<int16_T>
                (proc_control_node_B.i_l) + 17;
              if (static_cast<int16_T>(proc_control_node_B.i_l) + 17 > 32767) {
                proc_control_node_B.U_tmp = 32767;
              }

              proc_control_node_B.U_tmp_f = static_cast<int16_T>
                (proc_control_node_B.i_l) + 17;
              if (static_cast<int16_T>(proc_control_node_B.i_l) + 17 > 32767) {
                proc_control_node_B.U_tmp_f = 32767;
              }

              proc_control_node_B.i4 = static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) + 17;
              if (static_cast<int16_T>(proc_control_node_B.lambda_tmp_tmp) + 17 >
                  32767) {
                proc_control_node_B.i4 = 32767;
              }

              proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1] =
                proc_control_node_B.U[((static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) - 1) * 17 +
                static_cast<int16_T>(proc_control_node_B.i_l)) - 1] *
                proc_control_node_B.Rhs[proc_control_node_B.i4 - 1] +
                proc_control_node_B.Opt[proc_control_node_B.U_tmp_f - 1];
              proc_control_node_B.lambda_tmp_tmp++;
            }

            proc_control_node_B.i_l++;
          }

          proc_control_node_B.Xnorm0 = -1.0E-12;
          kDrop = 0;
          proc_control_node_B.i_l = 1;
          while (proc_control_node_B.i_l - 1 <= nA - 1) {
            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_l) + 17;
            if (static_cast<int16_T>(proc_control_node_B.i_l) + 17 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            lambda[proc_control_node_B.iC[static_cast<int16_T>
              (proc_control_node_B.i_l) - 1] - 1] =
              proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1];
            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_l) + 17;
            if (static_cast<int16_T>(proc_control_node_B.i_l) + 17 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            if ((proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1] <
                 proc_control_node_B.Xnorm0) && (static_cast<int16_T>
                 (proc_control_node_B.i_l) <= nA)) {
              kDrop = static_cast<int16_T>(proc_control_node_B.i_l);
              proc_control_node_B.U_tmp = static_cast<int16_T>
                (proc_control_node_B.i_l) + 17;
              if (static_cast<int16_T>(proc_control_node_B.i_l) + 17 > 32767) {
                proc_control_node_B.U_tmp = 32767;
              }

              proc_control_node_B.Xnorm0 =
                proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1];
            }

            proc_control_node_B.i_l++;
          }

          if (kDrop <= 0) {
            DualFeasible = true;
            std::memcpy(&x[0], &proc_control_node_B.Opt[0], 17U * sizeof(real_T));
          } else {
            (*status)++;
            if (static_cast<int32_T>(*status) > q) {
              nA = 0;
              std::memset(&iA[0], 0, sizeof(int16_T) << 5U);
              std::memset(&proc_control_node_B.iC[0], 0, sizeof(int16_T) << 5U);
              ColdReset = true;
            } else {
              lambda[proc_control_node_B.iC[kDrop - 1] - 1] = 0.0;
              proc_control_nod_DropConstraint(kDrop, iA, &nA,
                proc_control_node_B.iC);
            }
          }
        }
      } else {
        if (nA <= 0) {
          std::memset(&lambda[0], 0, sizeof(real_T) << 5U);
          proc_control_node_Unconstrained(b_Hinv, f, x, 17);
        }

        exitg3 = 1;
      }
    } while (exitg3 == 0);

    if (exitg3 == 1) {
      guard1 = true;
    }
  } else {
    proc_control_node_Unconstrained(b_Hinv, f, x, 17);
    guard1 = true;
  }

  if (guard1) {
    boolean_T exitg2;
    proc_control_node_B.Xnorm0 = proc_control_node_norm(x);
    exitg2 = false;
    while ((!exitg2) && (static_cast<int32_T>(*status) <= maxiter)) {
      proc_control_node_B.cMin = -FeasTol;
      kNext = 0;
      for (proc_control_node_B.i_l = 0; proc_control_node_B.i_l < 32;
           proc_control_node_B.i_l++) {
        proc_control_node_B.t_o =
          proc_control_node_B.cTol[proc_control_node_B.i_l];
        if (!cTolComputed) {
          for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
               proc_control_node_B.U_tmp++) {
            proc_control_node_B.b_Ac[proc_control_node_B.U_tmp] = b_Ac
              [(proc_control_node_B.U_tmp << 5) + proc_control_node_B.i_l] *
              x[proc_control_node_B.U_tmp];
          }

          proc_control_node_abs(proc_control_node_B.b_Ac,
                                proc_control_node_B.z_d);
          proc_control_node_B.t_o = std::fmax(proc_control_node_B.t_o,
            proc_control_node_maximum(proc_control_node_B.z_d));
        }

        if (iA[proc_control_node_B.i_l] == 0) {
          proc_control_node_B.b_Ac_h = 0.0;
          for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
               proc_control_node_B.U_tmp++) {
            proc_control_node_B.b_Ac_h += b_Ac[(proc_control_node_B.U_tmp << 5)
              + proc_control_node_B.i_l] * x[proc_control_node_B.U_tmp];
          }

          proc_control_node_B.cVal = (proc_control_node_B.b_Ac_h -
            b[proc_control_node_B.i_l]) / proc_control_node_B.t_o;
          if (proc_control_node_B.cVal < proc_control_node_B.cMin) {
            proc_control_node_B.cMin = proc_control_node_B.cVal;
            kNext = static_cast<int16_T>(proc_control_node_B.i_l + 1);
          }
        }

        proc_control_node_B.cTol[proc_control_node_B.i_l] =
          proc_control_node_B.t_o;
      }

      cTolComputed = true;
      if (kNext <= 0) {
        exitg2 = true;
      } else if (static_cast<int32_T>(*status) == maxiter) {
        *status = 0.0;
        exitg2 = true;
      } else {
        int32_T exitg1;
        do {
          exitg1 = 0;
          if ((kNext > 0) && (static_cast<int32_T>(*status) <= maxiter)) {
            boolean_T guard2{ false };

            guard2 = false;
            if (nA == 0) {
              for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
                   proc_control_node_B.U_tmp++) {
                proc_control_node_B.z_d[proc_control_node_B.U_tmp] = 0.0;
                for (proc_control_node_B.U_tmp_f = 0;
                     proc_control_node_B.U_tmp_f < 17;
                     proc_control_node_B.U_tmp_f++) {
                  proc_control_node_B.z_d[proc_control_node_B.U_tmp] += b_Ac
                    [((proc_control_node_B.U_tmp_f << 5) + kNext) - 1] * b_Hinv
                    [17 * proc_control_node_B.U_tmp_f +
                    proc_control_node_B.U_tmp];
                }
              }

              guard2 = true;
            } else {
              proc_control_node_KWIKfactor(b_Ac, proc_control_node_B.iC, nA,
                b_Linv, proc_control_node_B.b_D_c, proc_control_node_B.b_H, 17,
                proc_control_node_B.RLinv, &proc_control_node_B.cMin);
              if (proc_control_node_B.cMin <= 0.0) {
                *status = -2.0;
                exitg1 = 1;
              } else {
                for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                     289; proc_control_node_B.U_tmp++) {
                  proc_control_node_B.U[proc_control_node_B.U_tmp] =
                    -proc_control_node_B.b_H[proc_control_node_B.U_tmp];
                }

                for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                     17; proc_control_node_B.U_tmp++) {
                  proc_control_node_B.z_d[proc_control_node_B.U_tmp] = 0.0;
                  for (proc_control_node_B.U_tmp_f = 0;
                       proc_control_node_B.U_tmp_f < 17;
                       proc_control_node_B.U_tmp_f++) {
                    proc_control_node_B.z_d[proc_control_node_B.U_tmp] += b_Ac
                      [((proc_control_node_B.U_tmp_f << 5) + kNext) - 1] *
                      proc_control_node_B.U[17 * proc_control_node_B.U_tmp_f +
                      proc_control_node_B.U_tmp];
                  }
                }

                proc_control_node_B.i_l = 1;
                while (proc_control_node_B.i_l - 1 <= nA - 1) {
                  proc_control_node_B.b_Ac_h = 0.0;
                  for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                       17; proc_control_node_B.U_tmp++) {
                    proc_control_node_B.b_Ac_h += b_Ac
                      [((proc_control_node_B.U_tmp << 5) + kNext) - 1] *
                      proc_control_node_B.b_D_c[(static_cast<int16_T>
                      (proc_control_node_B.i_l) - 1) * 17 +
                      proc_control_node_B.U_tmp];
                  }

                  proc_control_node_B.r[static_cast<int16_T>
                    (proc_control_node_B.i_l) - 1] = proc_control_node_B.b_Ac_h;
                  proc_control_node_B.i_l++;
                }

                guard2 = true;
              }
            }

            if (guard2) {
              boolean_T exitg4;
              kDrop = 0;
              proc_control_node_B.cMin = 0.0;
              DualFeasible = true;
              ColdReset = true;
              if (nA > 0) {
                proc_control_node_B.i_l = 0;
                exitg4 = false;
                while ((!exitg4) && (proc_control_node_B.i_l <= nA - 1)) {
                  if (proc_control_node_B.r[proc_control_node_B.i_l] >= 1.0E-12)
                  {
                    ColdReset = false;
                    exitg4 = true;
                  } else {
                    proc_control_node_B.i_l++;
                  }
                }
              }

              if ((nA != 0) && (!ColdReset)) {
                proc_control_node_B.i_l = 1;
                while (proc_control_node_B.i_l - 1 <= nA - 1) {
                  proc_control_node_B.cVal = proc_control_node_B.r
                    [static_cast<int16_T>(proc_control_node_B.i_l) - 1];
                  if (proc_control_node_B.cVal > 1.0E-12) {
                    proc_control_node_B.cVal = lambda[proc_control_node_B.iC[
                      static_cast<int16_T>(proc_control_node_B.i_l) - 1] - 1] /
                      proc_control_node_B.cVal;
                    if ((kDrop == 0) || (proc_control_node_B.cVal <
                                         proc_control_node_B.rMin)) {
                      proc_control_node_B.rMin = proc_control_node_B.cVal;
                      kDrop = static_cast<int16_T>(proc_control_node_B.i_l);
                    }
                  }

                  proc_control_node_B.i_l++;
                }

                if (kDrop > 0) {
                  proc_control_node_B.cMin = proc_control_node_B.rMin;
                  DualFeasible = false;
                }
              }

              for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
                   proc_control_node_B.U_tmp++) {
                proc_control_node_B.b_Ac[proc_control_node_B.U_tmp] = b_Ac
                  [((proc_control_node_B.U_tmp << 5) + kNext) - 1];
              }

              proc_control_node_B.cVal = proc_control_node_mtimes
                (proc_control_node_B.z_d, proc_control_node_B.b_Ac);
              if (proc_control_node_B.cVal <= 0.0) {
                proc_control_node_B.cVal = 0.0;
                ColdReset = true;
              } else {
                proc_control_node_B.b_Ac_h = 0.0;
                for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                     17; proc_control_node_B.U_tmp++) {
                  proc_control_node_B.b_Ac_h += b_Ac[((proc_control_node_B.U_tmp
                    << 5) + kNext) - 1] * x[proc_control_node_B.U_tmp];
                }

                proc_control_node_B.cVal = (b[kNext - 1] -
                  proc_control_node_B.b_Ac_h) / proc_control_node_B.cVal;
                ColdReset = false;
              }

              if (DualFeasible && ColdReset) {
                *status = -1.0;
                exitg1 = 1;
              } else {
                if (ColdReset) {
                  proc_control_node_B.t_o = proc_control_node_B.cMin;
                } else if (DualFeasible) {
                  proc_control_node_B.t_o = proc_control_node_B.cVal;
                } else {
                  proc_control_node_B.t_o = std::fmin(proc_control_node_B.cMin,
                    proc_control_node_B.cVal);
                }

                proc_control_node_B.i_l = 1;
                while (proc_control_node_B.i_l - 1 <= nA - 1) {
                  proc_control_node_B.lambda_tmp_tmp = proc_control_node_B.iC[
                    static_cast<int16_T>(proc_control_node_B.i_l) - 1];
                  lambda[proc_control_node_B.lambda_tmp_tmp - 1] -=
                    proc_control_node_B.r[static_cast<int16_T>
                    (proc_control_node_B.i_l) - 1] * proc_control_node_B.t_o;
                  if ((proc_control_node_B.lambda_tmp_tmp <= 32) &&
                      (lambda[proc_control_node_B.lambda_tmp_tmp - 1] < 0.0)) {
                    lambda[proc_control_node_B.lambda_tmp_tmp - 1] = 0.0;
                  }

                  proc_control_node_B.i_l++;
                }

                lambda[kNext - 1] += proc_control_node_B.t_o;
                if (proc_control_node_B.t_o == proc_control_node_B.cMin) {
                  proc_control_nod_DropConstraint(kDrop, iA, &nA,
                    proc_control_node_B.iC);
                }

                if (!ColdReset) {
                  for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                       17; proc_control_node_B.U_tmp++) {
                    x[proc_control_node_B.U_tmp] += proc_control_node_B.t_o *
                      proc_control_node_B.z_d[proc_control_node_B.U_tmp];
                  }

                  if (proc_control_node_B.t_o == proc_control_node_B.cVal) {
                    if (nA == 17) {
                      *status = -1.0;
                      exitg1 = 1;
                    } else {
                      proc_control_node_B.U_tmp = nA + 1;
                      if (nA + 1 > 32767) {
                        proc_control_node_B.U_tmp = 32767;
                      }

                      nA = static_cast<int16_T>(proc_control_node_B.U_tmp);
                      proc_control_node_B.iC[static_cast<int16_T>
                        (proc_control_node_B.U_tmp) - 1] = kNext;
                      kDrop = static_cast<int16_T>(proc_control_node_B.U_tmp);
                      exitg4 = false;
                      while ((!exitg4) && (kDrop > 1)) {
                        int16_T tmp;
                        int16_T tmp_0;
                        tmp = proc_control_node_B.iC[kDrop - 1];
                        tmp_0 = proc_control_node_B.iC[kDrop - 2];
                        if (tmp > tmp_0) {
                          exitg4 = true;
                        } else {
                          proc_control_node_B.iC[kDrop - 1] = tmp_0;
                          proc_control_node_B.iC[kDrop - 2] = tmp;
                          kDrop = static_cast<int16_T>(kDrop - 1);
                        }
                      }

                      iA[kNext - 1] = 1;
                      kNext = 0;
                      (*status)++;
                    }
                  } else {
                    (*status)++;
                  }
                } else {
                  (*status)++;
                }
              }
            }
          } else {
            proc_control_node_B.cMin = proc_control_node_norm(x);
            if (std::abs(proc_control_node_B.cMin - proc_control_node_B.Xnorm0) >
                0.001) {
              proc_control_node_B.Xnorm0 = proc_control_node_B.cMin;
              proc_control_node_abs_m(b, proc_control_node_B.dv13);
              proc_control_node_maximum2(proc_control_node_B.dv13, 1.0,
                proc_control_node_B.cTol);
              cTolComputed = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S230>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_mpcblock_optimizer(const real_T
  rseq[130], const real_T vseq[11], const real_T umin[8], const real_T umax[8],
  const real_T x[21], const real_T old_u[8], const boolean_T iA[32], const
  real_T b_Mlim[32], real_T b_Mx[672], real_T b_Mu1[256], real_T b_Mv[352],
  const real_T b_utarget[80], const real_T b_uoff[8], real_T b_H[289], real_T
  b_Ac[544], const real_T ywt[13], const real_T uwt[8], const real_T duwt[8],
  const real_T b_Jm[1280], const real_T b_I1[640], const real_T b_A[441], const
  real_T Bu[1848], const real_T Bv[231], const real_T b_C[273], const real_T Dv
  [143], const int32_T b_Mrows[32], const real_T b_RMVscale[8], real_T u[8],
  real_T useq[88], real_T *status, boolean_T iAout[32])
{
  static const int8_T c_A[100]{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1 };

  int16_T ixw;
  boolean_T exitg1;
  std::memset(&useq[0], 0, 88U * sizeof(real_T));
  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 32;
       proc_control_node_B.i_d++) {
    iAout[proc_control_node_B.i_d] = false;
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 21;
       proc_control_node_B.i_d++) {
    std::memset(&proc_control_node_B.CA[proc_control_node_B.i_d * 13], 0, 13U *
                sizeof(real_T));
    for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 21;
         proc_control_node_B.i1_h++) {
      for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 13;
           proc_control_node_B.j2++) {
        proc_control_node_B.CA_tmp = 13 * proc_control_node_B.i_d +
          proc_control_node_B.j2;
        proc_control_node_B.CA[proc_control_node_B.CA_tmp] += b_C[13 *
          proc_control_node_B.i1_h + proc_control_node_B.j2] * b_A[21 *
          proc_control_node_B.i_d + proc_control_node_B.i1_h];
      }
    }
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
       proc_control_node_B.i_d++) {
    std::memset(&proc_control_node_B.Sum_n[proc_control_node_B.i_d * 13], 0, 13U
                * sizeof(real_T));
    for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 21;
         proc_control_node_B.i1_h++) {
      for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 13;
           proc_control_node_B.j2++) {
        proc_control_node_B.Sum_tmp = 13 * proc_control_node_B.i_d +
          proc_control_node_B.j2;
        proc_control_node_B.Sum_n[proc_control_node_B.Sum_tmp] += b_C[13 *
          proc_control_node_B.i1_h + proc_control_node_B.j2] * Bu[21 *
          proc_control_node_B.i_d + proc_control_node_B.i1_h];
      }
    }
  }

  std::memset(&proc_control_node_B.rows[0], 0, 13U * sizeof(real_T));
  proc_control_node_B.j2 = 0;
  for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 21;
       proc_control_node_B.i1_h++) {
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 13;
         proc_control_node_B.i_d++) {
      proc_control_node_B.rows[proc_control_node_B.i_d] +=
        b_C[proc_control_node_B.i_d + proc_control_node_B.j2] *
        Bv[proc_control_node_B.i1_h];
    }

    proc_control_node_B.j2 += 13;
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 13;
       proc_control_node_B.i_d++) {
    proc_control_node_B.b_Hv[proc_control_node_B.i_d] =
      proc_control_node_B.rows[proc_control_node_B.i_d];
    proc_control_node_B.b_Hv[proc_control_node_B.i_d + 130] =
      Dv[proc_control_node_B.i_d];
  }

  proc_control_node_B.i_d = 0;
  for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 9;
       proc_control_node_B.j2++) {
    std::memset(&proc_control_node_B.b_Hv[proc_control_node_B.i_d + 260], 0, 13U
                * sizeof(real_T));
    proc_control_node_B.i_d += 130;
  }

  proc_control_node_B.i_d = 0;
  for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 11;
       proc_control_node_B.j2++) {
    std::memset(&proc_control_node_B.b_Hv[proc_control_node_B.i_d + 13], 0, 117U
                * sizeof(real_T));
    proc_control_node_B.i_d += 130;
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 21;
       proc_control_node_B.i_d++) {
    std::memcpy(&proc_control_node_B.b_Sx[proc_control_node_B.i_d * 130],
                &proc_control_node_B.CA[proc_control_node_B.i_d * 13], 13U *
                sizeof(real_T));
    std::memset(&proc_control_node_B.b_Sx[proc_control_node_B.i_d * 130 + 13], 0,
                117U * sizeof(real_T));
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
       proc_control_node_B.i_d++) {
    std::memcpy(&proc_control_node_B.b_Su1[proc_control_node_B.i_d * 130],
                &proc_control_node_B.Sum_n[proc_control_node_B.i_d * 13], 13U *
                sizeof(real_T));
    std::memset(&proc_control_node_B.b_Su1[proc_control_node_B.i_d * 130 + 13],
                0, 117U * sizeof(real_T));
    std::memcpy(&proc_control_node_B.Su[proc_control_node_B.i_d * 130],
                &proc_control_node_B.Sum_n[proc_control_node_B.i_d * 13], 13U *
                sizeof(real_T));
  }

  proc_control_node_B.i_d = 0;
  for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 72;
       proc_control_node_B.j2++) {
    std::memset(&proc_control_node_B.Su[proc_control_node_B.i_d + 1040], 0, 13U *
                sizeof(real_T));
    proc_control_node_B.i_d += 130;
  }

  proc_control_node_B.i_d = 0;
  for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 80;
       proc_control_node_B.j2++) {
    std::memset(&proc_control_node_B.Su[proc_control_node_B.i_d + 13], 0, 117U *
                sizeof(real_T));
    proc_control_node_B.i_d += 130;
  }

  for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 9;
       proc_control_node_B.kidx++) {
    proc_control_node_B.CA_tmp = (proc_control_node_B.kidx + 1) * 13;
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 13;
         proc_control_node_B.i_d++) {
      proc_control_node_B.rows[proc_control_node_B.i_d] =
        (proc_control_node_B.CA_tmp + proc_control_node_B.i_d) + 1;
      proc_control_node_B.j2 = 0;
      proc_control_node_B.i1_h = 0;
      for (proc_control_node_B.i3 = 0; proc_control_node_B.i3 < 8;
           proc_control_node_B.i3++) {
        proc_control_node_B.Sum_g = 0.0;
        proc_control_node_B.Sum_tmp = 0;
        for (proc_control_node_B.b_Linv_tmp = 0; proc_control_node_B.b_Linv_tmp <
             21; proc_control_node_B.b_Linv_tmp++) {
          proc_control_node_B.Sum_g +=
            proc_control_node_B.CA[proc_control_node_B.Sum_tmp +
            proc_control_node_B.i_d] * Bu[proc_control_node_B.b_Linv_tmp +
            proc_control_node_B.i1_h];
          proc_control_node_B.Sum_tmp += 13;
        }

        proc_control_node_B.Sum_tmp = proc_control_node_B.j2 +
          proc_control_node_B.i_d;
        proc_control_node_B.Sum_n[proc_control_node_B.Sum_tmp] +=
          proc_control_node_B.Sum_g;
        proc_control_node_B.j2 += 13;
        proc_control_node_B.i1_h += 21;
      }

      proc_control_node_B.b_Su1_tmp[proc_control_node_B.i_d] =
        static_cast<uint8_T>(proc_control_node_B.rows[proc_control_node_B.i_d]);
    }

    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
         proc_control_node_B.i_d++) {
      for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 13;
           proc_control_node_B.j2++) {
        proc_control_node_B.Sum_tmp = 13 * proc_control_node_B.i_d +
          proc_control_node_B.j2;
        proc_control_node_B.Sum_g =
          proc_control_node_B.Sum_n[proc_control_node_B.Sum_tmp];
        proc_control_node_B.b_Su1
          [(proc_control_node_B.b_Su1_tmp[proc_control_node_B.j2] + 130 *
            proc_control_node_B.i_d) - 1] = proc_control_node_B.Sum_g;
        proc_control_node_B.Sum_b[proc_control_node_B.Sum_tmp] =
          proc_control_node_B.Sum_g;
      }
    }

    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 72;
         proc_control_node_B.i_d++) {
      for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 13;
           proc_control_node_B.j2++) {
        proc_control_node_B.Sum_b[proc_control_node_B.j2 + 13 *
          (proc_control_node_B.i_d + 8)] = proc_control_node_B.Su[(130 *
          proc_control_node_B.i_d +
          proc_control_node_B.b_Su1_tmp[proc_control_node_B.j2]) - 14];
      }
    }

    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 80;
         proc_control_node_B.i_d++) {
      for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 13;
           proc_control_node_B.j2++) {
        proc_control_node_B.Su[(static_cast<int32_T>
          (proc_control_node_B.rows[proc_control_node_B.j2]) + 130 *
          proc_control_node_B.i_d) - 1] = proc_control_node_B.Sum_b[13 *
          proc_control_node_B.i_d + proc_control_node_B.j2];
      }
    }

    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 13;
         proc_control_node_B.i_d++) {
      proc_control_node_B.CA_i[proc_control_node_B.i_d] = 0.0;
      proc_control_node_B.j2 = 0;
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 21;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.CA_i[proc_control_node_B.i_d] +=
          proc_control_node_B.CA[proc_control_node_B.j2 +
          proc_control_node_B.i_d] * Bv[proc_control_node_B.i1_h];
        proc_control_node_B.j2 += 13;
      }

      proc_control_node_B.CA_kk[proc_control_node_B.i_d] =
        proc_control_node_B.CA_i[proc_control_node_B.i_d];
    }

    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 10;
         proc_control_node_B.i_d++) {
      for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 13;
           proc_control_node_B.j2++) {
        proc_control_node_B.CA_kk[proc_control_node_B.j2 + 13 *
          (proc_control_node_B.i_d + 1)] = proc_control_node_B.b_Hv[(130 *
          proc_control_node_B.i_d + static_cast<int32_T>
          (proc_control_node_B.rows[proc_control_node_B.j2])) - 14];
      }
    }

    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 11;
         proc_control_node_B.i_d++) {
      for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 13;
           proc_control_node_B.j2++) {
        proc_control_node_B.b_Hv[(static_cast<int32_T>
          (proc_control_node_B.rows[proc_control_node_B.j2]) + 130 *
          proc_control_node_B.i_d) - 1] = proc_control_node_B.CA_kk[13 *
          proc_control_node_B.i_d + proc_control_node_B.j2];
      }
    }

    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 13;
         proc_control_node_B.i_d++) {
      proc_control_node_B.j2 = 0;
      proc_control_node_B.i1_h = 0;
      for (proc_control_node_B.i3 = 0; proc_control_node_B.i3 < 21;
           proc_control_node_B.i3++) {
        proc_control_node_B.CA_tmp = proc_control_node_B.j2 +
          proc_control_node_B.i_d;
        proc_control_node_B.CA_m[proc_control_node_B.CA_tmp] = 0.0;
        proc_control_node_B.Sum_tmp = 0;
        for (proc_control_node_B.b_Linv_tmp = 0; proc_control_node_B.b_Linv_tmp <
             21; proc_control_node_B.b_Linv_tmp++) {
          proc_control_node_B.CA_m[proc_control_node_B.CA_tmp] +=
            proc_control_node_B.CA[proc_control_node_B.Sum_tmp +
            proc_control_node_B.i_d] * b_A[proc_control_node_B.b_Linv_tmp +
            proc_control_node_B.i1_h];
          proc_control_node_B.Sum_tmp += 13;
        }

        proc_control_node_B.j2 += 13;
        proc_control_node_B.i1_h += 21;
      }
    }

    std::memcpy(&proc_control_node_B.CA[0], &proc_control_node_B.CA_m[0], 273U *
                sizeof(real_T));
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 21;
         proc_control_node_B.i_d++) {
      for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 13;
           proc_control_node_B.j2++) {
        proc_control_node_B.b_Sx[(static_cast<int32_T>
          (proc_control_node_B.rows[proc_control_node_B.j2]) + 130 *
          proc_control_node_B.i_d) - 1] = proc_control_node_B.CA[13 *
          proc_control_node_B.i_d + proc_control_node_B.j2];
      }
    }
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 16;
       proc_control_node_B.i_d++) {
    std::memset(&proc_control_node_B.b_SuJm[proc_control_node_B.i_d * 130], 0,
                130U * sizeof(real_T));
    for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 80;
         proc_control_node_B.i1_h++) {
      for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 130;
           proc_control_node_B.j2++) {
        proc_control_node_B.kidx = 130 * proc_control_node_B.i_d +
          proc_control_node_B.j2;
        proc_control_node_B.b_SuJm[proc_control_node_B.kidx] +=
          proc_control_node_B.Su[130 * proc_control_node_B.i1_h +
          proc_control_node_B.j2] * b_Jm[80 * proc_control_node_B.i_d +
          proc_control_node_B.i1_h];
      }
    }
  }

  if (b_Mrows[0] > 0) {
    proc_control_node_B.kidx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.kidx < 32)) {
      if (b_Mrows[proc_control_node_B.kidx] <= 130) {
        proc_control_node_B.j2 = b_Mrows[proc_control_node_B.kidx];
        for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 16;
             proc_control_node_B.i_d++) {
          b_Ac[proc_control_node_B.kidx + (proc_control_node_B.i_d << 5)] =
            -proc_control_node_B.b_SuJm[(130 * proc_control_node_B.i_d +
            proc_control_node_B.j2) - 1];
        }

        proc_control_node_B.j2 = b_Mrows[proc_control_node_B.kidx];
        for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 21;
             proc_control_node_B.i_d++) {
          b_Mx[proc_control_node_B.kidx + (proc_control_node_B.i_d << 5)] =
            -proc_control_node_B.b_Sx[(130 * proc_control_node_B.i_d +
            proc_control_node_B.j2) - 1];
        }

        proc_control_node_B.j2 = b_Mrows[proc_control_node_B.kidx];
        for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
             proc_control_node_B.i_d++) {
          b_Mu1[proc_control_node_B.kidx + (proc_control_node_B.i_d << 5)] =
            -proc_control_node_B.b_Su1[(130 * proc_control_node_B.i_d +
            proc_control_node_B.j2) - 1];
        }

        proc_control_node_B.j2 = b_Mrows[proc_control_node_B.kidx];
        for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 11;
             proc_control_node_B.i_d++) {
          b_Mv[proc_control_node_B.kidx + (proc_control_node_B.i_d << 5)] =
            -proc_control_node_B.b_Hv[(130 * proc_control_node_B.i_d +
            proc_control_node_B.j2) - 1];
        }

        proc_control_node_B.kidx++;
      } else if (b_Mrows[proc_control_node_B.kidx] <= 260) {
        proc_control_node_B.i_d = b_Mrows[proc_control_node_B.kidx];
        if (proc_control_node_B.i_d < -2147483518) {
          proc_control_node_B.j2 = MIN_int32_T;
        } else {
          proc_control_node_B.j2 = proc_control_node_B.i_d - 130;
        }

        for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 16;
             proc_control_node_B.i_d++) {
          b_Ac[proc_control_node_B.kidx + (proc_control_node_B.i_d << 5)] =
            proc_control_node_B.b_SuJm[(130 * proc_control_node_B.i_d +
            proc_control_node_B.j2) - 1];
        }

        for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 21;
             proc_control_node_B.i_d++) {
          b_Mx[proc_control_node_B.kidx + (proc_control_node_B.i_d << 5)] =
            proc_control_node_B.b_Sx[(130 * proc_control_node_B.i_d +
            proc_control_node_B.j2) - 1];
        }

        for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
             proc_control_node_B.i_d++) {
          b_Mu1[proc_control_node_B.kidx + (proc_control_node_B.i_d << 5)] =
            proc_control_node_B.b_Su1[(130 * proc_control_node_B.i_d +
            proc_control_node_B.j2) - 1];
        }

        for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 11;
             proc_control_node_B.i_d++) {
          b_Mv[proc_control_node_B.kidx + (proc_control_node_B.i_d << 5)] =
            proc_control_node_B.b_Hv[(130 * proc_control_node_B.i_d +
            proc_control_node_B.j2) - 1];
        }

        proc_control_node_B.kidx++;
      } else {
        exitg1 = true;
      }
    }
  }

  for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 13;
       proc_control_node_B.kidx++) {
    proc_control_node_B.Sum_g = ywt[proc_control_node_B.kidx];
    if (proc_control_node_B.Sum_g < 0.0) {
      proc_control_node_B.rows[proc_control_node_B.kidx] = 0.0;
    } else {
      proc_control_node_B.rows[proc_control_node_B.kidx] =
        proc_control_node_B.Sum_g * proc_control_node_B.Sum_g;
    }
  }

  for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 8;
       proc_control_node_B.kidx++) {
    proc_control_node_B.Sum_g = duwt[proc_control_node_B.kidx];
    proc_control_node_B.uwt = uwt[proc_control_node_B.kidx];
    if (proc_control_node_B.uwt < 0.0) {
      proc_control_node_B.b_Wu[proc_control_node_B.kidx] = 0.0;
    } else {
      proc_control_node_B.b_Wu[proc_control_node_B.kidx] =
        proc_control_node_B.uwt * proc_control_node_B.uwt;
    }

    if (proc_control_node_B.Sum_g < 0.0) {
      proc_control_node_B.b_Wdu[proc_control_node_B.kidx] = 0.0;
    } else {
      proc_control_node_B.b_Wdu[proc_control_node_B.kidx] =
        proc_control_node_B.Sum_g * proc_control_node_B.Sum_g;
    }
  }

  std::memset(&proc_control_node_B.b_B_nu[0], 0, sizeof(int8_T) << 6U);
  proc_control_node_B.CA_tmp = 0;
  for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 8;
       proc_control_node_B.kidx++) {
    proc_control_node_B.b_B_nu[proc_control_node_B.CA_tmp] = 1;
    proc_control_node_B.CA_tmp += 9;
  }

  proc_control_node_B.kidx = -1;
  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 10;
       proc_control_node_B.i_d++) {
    for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 8;
         proc_control_node_B.j2++) {
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 10;
           proc_control_node_B.i1_h++) {
        for (proc_control_node_B.CA_tmp = 0; proc_control_node_B.CA_tmp < 8;
             proc_control_node_B.CA_tmp++) {
          proc_control_node_B.a_j[(proc_control_node_B.kidx +
            proc_control_node_B.CA_tmp) + 1] = static_cast<int8_T>(c_A[10 *
            proc_control_node_B.i_d + proc_control_node_B.i1_h] *
            proc_control_node_B.b_B_nu[(proc_control_node_B.j2 << 3) +
            proc_control_node_B.CA_tmp]);
        }

        proc_control_node_B.kidx += 8;
      }
    }
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 16;
       proc_control_node_B.i_d++) {
    std::memset(&proc_control_node_B.I2Jm[proc_control_node_B.i_d * 80], 0, 80U *
                sizeof(real_T));
    for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 80;
         proc_control_node_B.i1_h++) {
      for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 80;
           proc_control_node_B.j2++) {
        proc_control_node_B.kidx = 80 * proc_control_node_B.i_d +
          proc_control_node_B.j2;
        proc_control_node_B.I2Jm[proc_control_node_B.kidx] += static_cast<real_T>
          (proc_control_node_B.a_j[80 * proc_control_node_B.i1_h +
           proc_control_node_B.j2]) * b_Jm[80 * proc_control_node_B.i_d +
          proc_control_node_B.i1_h];
      }
    }
  }

  ixw = 1;
  for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 130;
       proc_control_node_B.kidx++) {
    proc_control_node_B.Sum_g = proc_control_node_B.rows[ixw - 1];
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 16;
         proc_control_node_B.i_d++) {
      proc_control_node_B.j2 = 130 * proc_control_node_B.i_d +
        proc_control_node_B.kidx;
      proc_control_node_B.WySuJm[proc_control_node_B.j2] =
        proc_control_node_B.b_SuJm[proc_control_node_B.j2] *
        proc_control_node_B.Sum_g;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 13) {
      ixw = 1;
    }
  }

  proc_control_node_WtMult(proc_control_node_B.b_Wu, proc_control_node_B.I2Jm,
    proc_control_node_nu, proc_control_node_B.WuI2Jm);
  proc_control_node_WtMult(proc_control_node_B.b_Wdu, b_Jm, proc_control_node_nu,
    proc_control_node_B.dv1);
  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 16;
       proc_control_node_B.i_d++) {
    for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 16;
         proc_control_node_B.j2++) {
      proc_control_node_B.kidx = (proc_control_node_B.i_d << 4) +
        proc_control_node_B.j2;
      proc_control_node_B.b_SuJm_h[proc_control_node_B.kidx] = 0.0;
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 130;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.b_SuJm_h[proc_control_node_B.kidx] +=
          proc_control_node_B.b_SuJm[130 * proc_control_node_B.j2 +
          proc_control_node_B.i1_h] * proc_control_node_B.WySuJm[130 *
          proc_control_node_B.i_d + proc_control_node_B.i1_h];
      }

      proc_control_node_B.b_Jm[proc_control_node_B.kidx] = 0.0;
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 80;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.b_Jm[proc_control_node_B.kidx] += b_Jm[80 *
          proc_control_node_B.j2 + proc_control_node_B.i1_h] *
          proc_control_node_B.dv1[80 * proc_control_node_B.i_d +
          proc_control_node_B.i1_h];
      }
    }
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 16;
       proc_control_node_B.i_d++) {
    for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 16;
         proc_control_node_B.j2++) {
      proc_control_node_B.Sum_g = 0.0;
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 80;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.Sum_g += proc_control_node_B.I2Jm[80 *
          proc_control_node_B.i_d + proc_control_node_B.i1_h] *
          proc_control_node_B.WuI2Jm[80 * proc_control_node_B.j2 +
          proc_control_node_B.i1_h];
      }

      proc_control_node_B.kidx = (proc_control_node_B.j2 << 4) +
        proc_control_node_B.i_d;
      b_H[proc_control_node_B.i_d + 17 * proc_control_node_B.j2] =
        (proc_control_node_B.b_SuJm_h[proc_control_node_B.kidx] +
         proc_control_node_B.b_Jm[proc_control_node_B.kidx]) +
        proc_control_node_B.Sum_g;
    }

    for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 8;
         proc_control_node_B.j2++) {
      proc_control_node_B.kidx = (proc_control_node_B.i_d << 3) +
        proc_control_node_B.j2;
      proc_control_node_B.b_Su1_b[proc_control_node_B.kidx] = 0.0;
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 130;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.b_Su1_b[proc_control_node_B.kidx] +=
          proc_control_node_B.b_Su1[130 * proc_control_node_B.j2 +
          proc_control_node_B.i1_h] * proc_control_node_B.WySuJm[130 *
          proc_control_node_B.i_d + proc_control_node_B.i1_h];
      }

      proc_control_node_B.b_I1[proc_control_node_B.kidx] = 0.0;
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 80;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.b_I1[proc_control_node_B.kidx] += b_I1[80 *
          proc_control_node_B.j2 + proc_control_node_B.i1_h] *
          proc_control_node_B.WuI2Jm[80 * proc_control_node_B.i_d +
          proc_control_node_B.i1_h];
      }
    }
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 128;
       proc_control_node_B.i_d++) {
    proc_control_node_B.b_Ku1[proc_control_node_B.i_d] =
      proc_control_node_B.b_Su1_b[proc_control_node_B.i_d] +
      proc_control_node_B.b_I1[proc_control_node_B.i_d];
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 1280;
       proc_control_node_B.i_d++) {
    proc_control_node_B.WuI2Jm[proc_control_node_B.i_d] =
      -proc_control_node_B.WuI2Jm[proc_control_node_B.i_d];
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 16;
       proc_control_node_B.i_d++) {
    for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 21;
         proc_control_node_B.j2++) {
      proc_control_node_B.kidx = 21 * proc_control_node_B.i_d +
        proc_control_node_B.j2;
      proc_control_node_B.b_Kx[proc_control_node_B.kidx] = 0.0;
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 130;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.b_Kx[proc_control_node_B.kidx] +=
          proc_control_node_B.b_Sx[130 * proc_control_node_B.j2 +
          proc_control_node_B.i1_h] * proc_control_node_B.WySuJm[130 *
          proc_control_node_B.i_d + proc_control_node_B.i1_h];
      }
    }

    for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 11;
         proc_control_node_B.j2++) {
      proc_control_node_B.kidx = 11 * proc_control_node_B.i_d +
        proc_control_node_B.j2;
      proc_control_node_B.b_Kv[proc_control_node_B.kidx] = 0.0;
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 130;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.b_Kv[proc_control_node_B.kidx] +=
          proc_control_node_B.b_Hv[130 * proc_control_node_B.j2 +
          proc_control_node_B.i1_h] * proc_control_node_B.WySuJm[130 *
          proc_control_node_B.i_d + proc_control_node_B.i1_h];
      }
    }
  }

  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 2080;
       proc_control_node_B.i_d++) {
    proc_control_node_B.WySuJm[proc_control_node_B.i_d] =
      -proc_control_node_B.WySuJm[proc_control_node_B.i_d];
  }

  std::memcpy(&proc_control_node_B.b_Linv[0], &b_H[0], 289U * sizeof(real_T));
  proc_control_n_mpc_checkhessian(proc_control_node_B.b_Linv,
    proc_control_node_B.c_Linv, &proc_control_node_B.Sum_g);
  if (proc_control_node_B.Sum_g > 1.0) {
    proc_control_node_B.kidx = 0;
    for (proc_control_node_B.CA_tmp = 0; proc_control_node_B.CA_tmp < 8;
         proc_control_node_B.CA_tmp++) {
      u[proc_control_node_B.CA_tmp] = old_u[proc_control_node_B.CA_tmp] +
        b_uoff[proc_control_node_B.CA_tmp];
      for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 11;
           proc_control_node_B.i_d++) {
        useq[proc_control_node_B.i_d + proc_control_node_B.kidx] =
          u[proc_control_node_B.CA_tmp];
      }

      proc_control_node_B.kidx += 11;
    }

    *status = -2.0;
  } else {
    std::memset(&proc_control_node_B.c_B[0], 0, 289U * sizeof(int8_T));
    proc_control_node_B.CA_tmp = 0;
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 17;
         proc_control_node_B.kidx++) {
      proc_control_node_B.c_B[proc_control_node_B.CA_tmp] = 1;
      proc_control_node_B.CA_tmp += 18;
    }

    proc_control_node_B.CA_tmp = 0;
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 17;
         proc_control_node_B.kidx++) {
      for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 17;
           proc_control_node_B.i_d++) {
        proc_control_node_B.b_Linv_tmp = proc_control_node_B.i_d +
          proc_control_node_B.CA_tmp;
        proc_control_node_B.b_Linv[proc_control_node_B.b_Linv_tmp] =
          proc_control_node_B.c_B[proc_control_node_B.b_Linv_tmp];
      }

      proc_control_node_B.CA_tmp += 17;
    }

    proc_control_node_trisolve(proc_control_node_B.c_Linv,
      proc_control_node_B.b_Linv);
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 32;
         proc_control_node_B.i_d++) {
      proc_control_node_B.Sum_g = 0.0;
      proc_control_node_B.j2 = 0;
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 21;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.Sum_g += b_Mx[proc_control_node_B.j2 +
          proc_control_node_B.i_d] * x[proc_control_node_B.i1_h];
        proc_control_node_B.j2 += 32;
      }

      proc_control_node_B.b_Mlim_c[proc_control_node_B.i_d] =
        b_Mlim[proc_control_node_B.i_d] + proc_control_node_B.Sum_g;
      proc_control_node_B.b_Mu1[proc_control_node_B.i_d] = 0.0;
    }

    proc_control_node_B.i_d = 0;
    for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 8;
         proc_control_node_B.j2++) {
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 32;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.b_Mu1[proc_control_node_B.i1_h] +=
          b_Mu1[proc_control_node_B.i1_h + proc_control_node_B.i_d] *
          old_u[proc_control_node_B.j2];
      }

      proc_control_node_B.i_d += 32;
    }

    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 32;
         proc_control_node_B.i_d++) {
      proc_control_node_B.Sum_g = 0.0;
      proc_control_node_B.j2 = 0;
      for (proc_control_node_B.i1_h = 0; proc_control_node_B.i1_h < 11;
           proc_control_node_B.i1_h++) {
        proc_control_node_B.Sum_g += b_Mv[proc_control_node_B.j2 +
          proc_control_node_B.i_d] * vseq[proc_control_node_B.i1_h];
        proc_control_node_B.j2 += 32;
      }

      proc_control_node_B.Bc[proc_control_node_B.i_d] =
        -((proc_control_node_B.b_Mlim_c[proc_control_node_B.i_d] +
           proc_control_node_B.b_Mu1[proc_control_node_B.i_d]) +
          proc_control_node_B.Sum_g);
    }

    std::memset(&proc_control_node_B.b_Wu[0], 0, sizeof(real_T) << 3U);
    std::memset(&proc_control_node_B.b_Wdu[0], 0, sizeof(real_T) << 3U);
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
         proc_control_node_B.i_d++) {
      proc_control_node_B.umax_incr_flag[proc_control_node_B.i_d] = false;
      proc_control_node_B.umin_incr_flag[proc_control_node_B.i_d] = false;
    }

    if (b_Mrows[0] > 0) {
      proc_control_node_B.kidx = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.kidx < 32)) {
        if ((b_Mrows[proc_control_node_B.kidx] <= 130) ||
            (b_Mrows[proc_control_node_B.kidx] <= 260)) {
          proc_control_node_B.kidx++;
        } else if (b_Mrows[proc_control_node_B.kidx] <= 340) {
          boolean_T b_Del_Save_Flag0_tmp;
          proc_control_node_B.i_d = b_Mrows[proc_control_node_B.kidx];
          if (proc_control_node_B.i_d < -2147483388) {
            proc_control_node_B.j2 = MIN_int32_T;
          } else {
            proc_control_node_B.j2 = proc_control_node_B.i_d - 260;
          }

          if (proc_control_node_B.j2 < -2147483647) {
            proc_control_node_B.j2 = MIN_int32_T;
          } else {
            proc_control_node_B.j2--;
          }

          proc_control_node_B.i_d = proc_control_node_B.j2 -
            ((proc_control_node_B.j2 >> 3) << 3);
          if (proc_control_node_B.i_d > 2147483646) {
            proc_control_node_B.j2 = MAX_int32_T;
          } else {
            proc_control_node_B.j2 = proc_control_node_B.i_d + 1;
          }

          b_Del_Save_Flag0_tmp =
            proc_control_node_B.umax_incr_flag[proc_control_node_B.j2 - 1];
          if (!b_Del_Save_Flag0_tmp) {
            proc_control_node_B.Sum_g = -(b_RMVscale[proc_control_node_B.j2 - 1]
              * umax[proc_control_node_B.j2 - 1] - b_uoff[proc_control_node_B.j2
              - 1]) - (-b_Mlim[proc_control_node_B.kidx]);
            b_Del_Save_Flag0_tmp = true;
          } else {
            proc_control_node_B.Sum_g =
              proc_control_node_B.b_Wu[proc_control_node_B.j2 - 1];
          }

          proc_control_node_B.b_Wu[proc_control_node_B.j2 - 1] =
            proc_control_node_B.Sum_g;
          proc_control_node_B.umax_incr_flag[proc_control_node_B.j2 - 1] =
            b_Del_Save_Flag0_tmp;
          proc_control_node_B.Bc[proc_control_node_B.kidx] +=
            proc_control_node_B.Sum_g;
          proc_control_node_B.kidx++;
        } else if (b_Mrows[proc_control_node_B.kidx] <= 420) {
          boolean_T b_Del_Save_Flag0_tmp;
          proc_control_node_B.i_d = b_Mrows[proc_control_node_B.kidx];
          if (proc_control_node_B.i_d < -2147483388) {
            proc_control_node_B.j2 = MIN_int32_T;
          } else {
            proc_control_node_B.j2 = proc_control_node_B.i_d - 260;
          }

          if (proc_control_node_B.j2 < -2147483568) {
            proc_control_node_B.j2 = MIN_int32_T;
          } else {
            proc_control_node_B.j2 -= 80;
          }

          if (proc_control_node_B.j2 < -2147483647) {
            proc_control_node_B.j2 = MIN_int32_T;
          } else {
            proc_control_node_B.j2--;
          }

          proc_control_node_B.i_d = proc_control_node_B.j2 -
            ((proc_control_node_B.j2 >> 3) << 3);
          if (proc_control_node_B.i_d > 2147483646) {
            proc_control_node_B.j2 = MAX_int32_T;
          } else {
            proc_control_node_B.j2 = proc_control_node_B.i_d + 1;
          }

          b_Del_Save_Flag0_tmp =
            proc_control_node_B.umin_incr_flag[proc_control_node_B.j2 - 1];
          if (!b_Del_Save_Flag0_tmp) {
            proc_control_node_B.Sum_g = (b_RMVscale[proc_control_node_B.j2 - 1] *
              umin[proc_control_node_B.j2 - 1] - b_uoff[proc_control_node_B.j2 -
              1]) - (-b_Mlim[proc_control_node_B.kidx]);
            b_Del_Save_Flag0_tmp = true;
          } else {
            proc_control_node_B.Sum_g =
              proc_control_node_B.b_Wdu[proc_control_node_B.j2 - 1];
          }

          proc_control_node_B.b_Wdu[proc_control_node_B.j2 - 1] =
            proc_control_node_B.Sum_g;
          proc_control_node_B.umin_incr_flag[proc_control_node_B.j2 - 1] =
            b_Del_Save_Flag0_tmp;
          proc_control_node_B.Bc[proc_control_node_B.kidx] +=
            proc_control_node_B.Sum_g;
          proc_control_node_B.kidx++;
        } else {
          exitg1 = true;
        }
      }
    }

    std::memset(&proc_control_node_B.f[0], 0, 17U * sizeof(real_T));
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 16;
         proc_control_node_B.kidx++) {
      proc_control_node_B.Sum_g = 0.0;
      for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 21;
           proc_control_node_B.i_d++) {
        proc_control_node_B.Sum_g += proc_control_node_B.b_Kx[21 *
          proc_control_node_B.kidx + proc_control_node_B.i_d] *
          x[proc_control_node_B.i_d];
      }

      proc_control_node_B.uwt = 0.0;
      for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 130;
           proc_control_node_B.i_d++) {
        proc_control_node_B.uwt += proc_control_node_B.WySuJm[130 *
          proc_control_node_B.kidx + proc_control_node_B.i_d] *
          rseq[proc_control_node_B.i_d];
      }

      proc_control_node_B.b_Ku1_e = 0.0;
      for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
           proc_control_node_B.i_d++) {
        proc_control_node_B.b_Ku1_e += proc_control_node_B.b_Ku1
          [(proc_control_node_B.kidx << 3) + proc_control_node_B.i_d] *
          old_u[proc_control_node_B.i_d];
      }

      proc_control_node_B.b_Kv_jy = 0.0;
      for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 11;
           proc_control_node_B.i_d++) {
        proc_control_node_B.b_Kv_jy += proc_control_node_B.b_Kv[11 *
          proc_control_node_B.kidx + proc_control_node_B.i_d] *
          vseq[proc_control_node_B.i_d];
      }

      proc_control_node_B.WuI2Jm_j = 0.0;
      for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 80;
           proc_control_node_B.i_d++) {
        proc_control_node_B.WuI2Jm_j += proc_control_node_B.WuI2Jm[80 *
          proc_control_node_B.kidx + proc_control_node_B.i_d] *
          b_utarget[proc_control_node_B.i_d];
      }

      proc_control_node_B.f[proc_control_node_B.kidx] =
        (((proc_control_node_B.Sum_g + proc_control_node_B.uwt) +
          proc_control_node_B.b_Ku1_e) + proc_control_node_B.b_Kv_jy) +
        proc_control_node_B.WuI2Jm_j;
    }

    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 32;
         proc_control_node_B.i_d++) {
      proc_control_node_B.iAnew[proc_control_node_B.i_d] =
        iA[proc_control_node_B.i_d];
    }

    proc_control_node_B.i_d = 0;
    for (proc_control_node_B.j2 = 0; proc_control_node_B.j2 < 17;
         proc_control_node_B.j2++) {
      proc_control_node_B.i1_h = 0;
      for (proc_control_node_B.i3 = 0; proc_control_node_B.i3 < 17;
           proc_control_node_B.i3++) {
        proc_control_node_B.b_Linv_tmp = proc_control_node_B.i3 +
          proc_control_node_B.i_d;
        proc_control_node_B.c_Linv[proc_control_node_B.b_Linv_tmp] = 0.0;
        for (proc_control_node_B.Sum_tmp = 0; proc_control_node_B.Sum_tmp < 17;
             proc_control_node_B.Sum_tmp++) {
          proc_control_node_B.c_Linv[proc_control_node_B.b_Linv_tmp] +=
            proc_control_node_B.b_Linv[proc_control_node_B.Sum_tmp +
            proc_control_node_B.i1_h] *
            proc_control_node_B.b_Linv[proc_control_node_B.Sum_tmp +
            proc_control_node_B.i_d];
        }

        proc_control_node_B.i1_h += 17;
      }

      proc_control_node_B.i_d += 17;
    }

    proc_control_node_qpkwik(proc_control_node_B.b_Linv,
      proc_control_node_B.c_Linv, proc_control_node_B.f, b_Ac,
      proc_control_node_B.Bc, proc_control_node_B.iAnew, 196, 1.0E-6,
      proc_control_node_B.zopt, proc_control_node_B.b_Mlim_c, status);
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 32;
         proc_control_node_B.i_d++) {
      iAout[proc_control_node_B.i_d] =
        (proc_control_node_B.iAnew[proc_control_node_B.i_d] != 0);
    }

    proc_control_node_B.Sum_g = std::round(*status);
    if (proc_control_node_B.Sum_g < 2.147483648E+9) {
      if (proc_control_node_B.Sum_g >= -2.147483648E+9) {
        proc_control_node_B.i_d = static_cast<int32_T>(proc_control_node_B.Sum_g);
      } else {
        proc_control_node_B.i_d = MIN_int32_T;
      }

      if (proc_control_node_B.Sum_g >= -2.147483648E+9) {
        proc_control_node_B.j2 = static_cast<int32_T>(proc_control_node_B.Sum_g);
      } else {
        proc_control_node_B.j2 = MIN_int32_T;
      }
    } else {
      proc_control_node_B.i_d = MAX_int32_T;
      proc_control_node_B.j2 = MAX_int32_T;
    }

    if ((proc_control_node_B.i_d < 0) || (proc_control_node_B.j2 == 0)) {
      std::memset(&proc_control_node_B.zopt[0], 0, 17U * sizeof(real_T));
    }

    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 8;
         proc_control_node_B.kidx++) {
      u[proc_control_node_B.kidx] = (old_u[proc_control_node_B.kidx] +
        proc_control_node_B.zopt[proc_control_node_B.kidx]) +
        b_uoff[proc_control_node_B.kidx];
    }
  }
}

// Function for MATLAB Function: '<S151>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_AUVQuatSimFcn(const real_T
  in1[13], const real_T in2[8], real_T out1[13])
{
  real_T out1_tmp;
  proc_control_node_B.t8_g = in1[4] * in1[4];
  proc_control_node_B.t9_e = in1[5] * in1[5];
  proc_control_node_B.t11_n = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t12_tmp = in1[4] * in1[6];
  proc_control_node_B.t12_f = proc_control_node_B.t12_tmp * 2.0;
  proc_control_node_B.t13_tmp = in1[5] * in1[6];
  proc_control_node_B.t13_n = proc_control_node_B.t13_tmp * 2.0;
  proc_control_node_B.t14_tmp = in1[3] * in1[4];
  proc_control_node_B.t14_e = proc_control_node_B.t14_tmp * 2.0;
  proc_control_node_B.t15_tmp = in1[3] * in1[5];
  proc_control_node_B.t15_b = proc_control_node_B.t15_tmp * 2.0;
  proc_control_node_B.t16_a = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t25_i = in1[11] / 500.0;
  proc_control_node_B.t29_n = in1[10] / 1000.0;
  proc_control_node_B.t31_f = in1[12] * 0.018;
  proc_control_node_B.t50 = in1[7] * 32.4648;
  proc_control_node_B.t53_i = in1[8] * 43.6156;
  proc_control_node_B.t54_k = in1[9] * 46.7695;
  proc_control_node_B.t17_b = proc_control_node_B.t8_g * 2.0;
  proc_control_node_B.t18_d = proc_control_node_B.t9_e * 2.0;
  proc_control_node_B.t19_h = in1[6] * in1[6] * 2.0;
  proc_control_node_B.t57_n = proc_control_node_B.t25_i +
    proc_control_node_B.t31_f;
  proc_control_node_B.t25_i += proc_control_node_B.t29_n;
  proc_control_node_B.t29_n += proc_control_node_B.t31_f;
  proc_control_node_B.t31_f = in1[11] * 0.558 + proc_control_node_B.t50;
  proc_control_node_B.t64 = in1[10] * 0.062 + proc_control_node_B.t54_k;
  proc_control_node_B.t65_f = in1[12] * 0.031 + proc_control_node_B.t53_i;
  proc_control_node_B.t68_a = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] *
    0.592;
  proc_control_node_B.t50 = in1[12] * 0.062 + -proc_control_node_B.t50;
  proc_control_node_B.t53_i = in1[10] * 0.558 + -proc_control_node_B.t53_i;
  proc_control_node_B.t54_k = in1[11] * 0.031 + -proc_control_node_B.t54_k;
  proc_control_node_B.t69 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_node_B.t70_m = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  out1[0] = (((proc_control_node_B.t18_d + proc_control_node_B.t19_h) - 1.0) *
             -in1[7] + (proc_control_node_B.t12_f + proc_control_node_B.t15_b) *
             in1[9]) + (proc_control_node_B.t11_n - proc_control_node_B.t16_a) *
    in1[8];
  out1[1] = ((proc_control_node_B.t11_n + proc_control_node_B.t16_a) * in1[7] -
             ((proc_control_node_B.t17_b + proc_control_node_B.t19_h) - 1.0) *
             in1[8]) + (proc_control_node_B.t13_n - proc_control_node_B.t14_e) *
    in1[9];
  out1[2] = ((proc_control_node_B.t13_n + proc_control_node_B.t14_e) * in1[8] -
             ((proc_control_node_B.t17_b + proc_control_node_B.t18_d) - 1.0) *
             in1[9]) + (proc_control_node_B.t12_f - proc_control_node_B.t15_b) *
    in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_node_B.t11_n = in1[10] * proc_control_node_B.t57_n;
  proc_control_node_B.t12_f = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) *
    in1[10];
  proc_control_node_B.t13_n = in1[10] * proc_control_node_B.t64;
  proc_control_node_B.t14_e = in1[10] * proc_control_node_B.t53_i;
  proc_control_node_B.t15_b = in1[10] * proc_control_node_B.t69;
  proc_control_node_B.t16_a = in1[10] * proc_control_node_B.t70_m;
  proc_control_node_B.t17_b = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) *
    in1[11];
  proc_control_node_B.t18_d = in1[11] * proc_control_node_B.t29_n;
  proc_control_node_B.t19_h = in1[11] * proc_control_node_B.t31_f;
  proc_control_node_B.out1_tmp = in1[11] * proc_control_node_B.t54_k;
  proc_control_node_B.out1_tmp_g = in1[11] * proc_control_node_B.t68_a;
  proc_control_node_B.t69 *= in1[11];
  proc_control_node_B.out1_tmp_n = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_node_B.out1_tmp_c = in1[12] * proc_control_node_B.t25_i;
  proc_control_node_B.out1_tmp_d = in1[12] * proc_control_node_B.t50;
  proc_control_node_B.out1_tmp_k = in1[12] * proc_control_node_B.t65_f;
  proc_control_node_B.t68_a *= in1[12];
  proc_control_node_B.t70_m *= in1[12];
  proc_control_node_B.out1_tmp_cl = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_node_B.t57_n *= in1[7];
  proc_control_node_B.t65_f *= in1[7];
  proc_control_node_B.t54_k *= in1[7];
  proc_control_node_B.out1_tmp_gw = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_node_B.t29_n *= in1[8];
  proc_control_node_B.t50 *= in1[8];
  proc_control_node_B.t64 *= in1[8];
  out1_tmp = (std::abs(in1[9]) * 0.756 + 23.333333333333332) * in1[9];
  proc_control_node_B.t25_i *= in1[9];
  proc_control_node_B.t31_f *= in1[9];
  proc_control_node_B.t53_i *= in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 - proc_control_node_B.t8_g * 0.0063195296824236141)) +
                      ((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        proc_control_node_B.t9_e * -0.0063195296824236141) +
                       in2[1] * 1.4142135623730951 * 0.014928824155507611)) +
                     ((in2[2] * 1.4142135623730951 * 0.015171119710606879 + in2
                       [3] * 1.4142135623730951 * 0.01516372519659284) -
                      proc_control_node_B.t12_tmp * 0.4138016519122657)) +
                    ((proc_control_node_B.t13_tmp * -0.0013017970932508 -
                      proc_control_node_B.t14_tmp * 0.0013017970932508) +
                     proc_control_node_B.t15_tmp * 0.4138016519122657)) +
                   (((proc_control_node_B.t11_n * -0.96028628902704993 -
                      proc_control_node_B.t12_f * 0.0001303522588356414) +
                     proc_control_node_B.t13_n * 9.4803055144857715E-7) -
                    proc_control_node_B.t14_e * 6.8231348244175949E-6)) +
                  (((proc_control_node_B.t15_b * -0.010033314971702871 -
                     proc_control_node_B.t16_a * 0.0010125044874363649) +
                    proc_control_node_B.t17_b * 0.010033314971702871) -
                   proc_control_node_B.t18_d * 2.9388947094905889E-5)) +
                 (((proc_control_node_B.t19_h * -6.8231348244175949E-6 +
                    proc_control_node_B.out1_tmp * 0.030976977065388711) +
                   proc_control_node_B.out1_tmp_g * 0.0010125044874363649) -
                  proc_control_node_B.t69 * 0.0001303522588356414)) +
                (((proc_control_node_B.out1_tmp_n * -0.0010125044874363649 +
                   proc_control_node_B.out1_tmp_c * 0.0002115171795569455) +
                  proc_control_node_B.out1_tmp_d * 9.4803055144857715E-7) +
                 proc_control_node_B.out1_tmp_k * 0.030976977065388711)) +
               (((proc_control_node_B.t68_a * 0.010033314971702871 +
                  proc_control_node_B.t70_m * 0.0001303522588356414) -
                 proc_control_node_B.out1_tmp_cl * 0.030976977065388711) +
                proc_control_node_B.t57_n * 0.0040409200239048832)) +
              (((proc_control_node_B.t65_f * -0.0010125044874363649 +
                 proc_control_node_B.t54_k * 0.010033314971702871) -
                proc_control_node_B.out1_tmp_gw * 9.4803055144857715E-7) -
               proc_control_node_B.t29_n * 0.311032764122789)) +
             (((proc_control_node_B.t50 * -0.0010125044874363649 -
                proc_control_node_B.t64 * 0.0001303522588356414) + out1_tmp *
               6.8231348244175949E-6) + proc_control_node_B.t25_i *
              0.031387639110527318)) + ((proc_control_node_B.t31_f *
    0.010033314971702871 - proc_control_node_B.t53_i * 0.0001303522588356414) +
    0.003159764841211807);
  out1[8] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 - proc_control_node_B.t8_g * 0.02693023120923067)) +
                      ((proc_control_node_B.t9_e * -0.02693023120923067 - in2[0]
                        * 1.4142135623730951 * 0.01090649593858282) + in2[1] *
                       1.4142135623730951 * 0.011000123045544621)) + ((in2[2] *
    1.4142135623730951 * -0.01090649593858282 + in2[3] * 1.4142135623730951 *
    0.01090087173345982) - proc_control_node_B.t12_tmp * 0.00099202109956931486))
                    + ((proc_control_node_B.t13_tmp * -0.51979016069898065 -
                        proc_control_node_B.t14_tmp * 0.51979016069898065) +
                       proc_control_node_B.t15_tmp * 0.00099202109956931486)) +
                   (((proc_control_node_B.t11_n * -2.9388947094905889E-5 -
                      proc_control_node_B.t12_f * 0.021882274381510681) +
                     proc_control_node_B.t13_n * 0.02320783323245932) -
                    proc_control_node_B.t14_e * 2.9076309096921531E-5)) +
                  (((proc_control_node_B.t15_b * -0.0001026911824132076 +
                     proc_control_node_B.t16_a * 0.00042780737967584029) +
                    proc_control_node_B.t17_b * 0.0001026911824132076) -
                   proc_control_node_B.t18_d * 0.71944283020623911)) +
                 (((proc_control_node_B.t19_h * -2.9076309096921531E-5 +
                    proc_control_node_B.out1_tmp * 9.4803055144857715E-7) -
                   proc_control_node_B.out1_tmp_g * 0.00042780737967584029) -
                  proc_control_node_B.t69 * 0.021882274381510681)) +
                (((proc_control_node_B.out1_tmp_n * 0.00042780737967584029 +
                   proc_control_node_B.out1_tmp_c * 0.00090136558200456737) +
                  proc_control_node_B.out1_tmp_d * 0.02320783323245932) +
                 proc_control_node_B.out1_tmp_k * 9.4803055144857715E-7)) +
               (((proc_control_node_B.t68_a * 0.0001026911824132076 +
                  proc_control_node_B.t70_m * 0.021882274381510681) -
                 proc_control_node_B.out1_tmp_cl * 9.4803055144857715E-7) +
                proc_control_node_B.t57_n * 0.678350505826831)) +
              (((proc_control_node_B.t65_f * 0.00042780737967584029 +
                 proc_control_node_B.t54_k * 0.0001026911824132076) -
                proc_control_node_B.out1_tmp_gw * 0.02320783323245932) -
               proc_control_node_B.t29_n * 0.0031834266548094372)) +
             (((proc_control_node_B.t50 * 0.00042780737967584029 -
                proc_control_node_B.t64 * 0.021882274381510681) + out1_tmp *
               2.9076309096921531E-5) - proc_control_node_B.t25_i *
              0.013262028769951049)) + ((proc_control_node_B.t31_f *
    0.0001026911824132076 - proc_control_node_B.t53_i * 0.021882274381510681) +
    0.01346511560461533);
  out1[9] = (((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 + proc_control_node_B.t8_g * 0.18635748921352191)) +
                      ((proc_control_node_B.t9_e * 0.18635748921352191 - in2[0] *
                        1.4142135623730951 * 4.8869263875916949E-5) + in2[1] *
                       1.4142135623730951 * 6.6264429389244648E-5)) + ((in2[2] *
    1.4142135623730951 * -4.8869263875916949E-5 + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + proc_control_node_B.t12_tmp * 0.0058758415205803329))
                    + ((proc_control_node_B.t13_tmp * 0.033540735888224739 +
                        proc_control_node_B.t14_tmp * 0.033540735888224739) -
                       proc_control_node_B.t15_tmp * 0.0058758415205803329)) +
                   (((proc_control_node_B.t11_n * 0.0002115171795569455 +
                      proc_control_node_B.t12_f * 0.002272431716587712) -
                     proc_control_node_B.t13_n * 2.9076309096921531E-5) +
                    proc_control_node_B.t14_e * 0.021384731826702759)) +
                  (((proc_control_node_B.t15_b * 0.00039756137245743289 -
                     proc_control_node_B.t16_a * 5.2828771531483014E-6) -
                    proc_control_node_B.t17_b * 0.00039756137245743289) +
                   proc_control_node_B.t18_d * 0.00090136558200456737)) +
                 (((proc_control_node_B.t19_h * 0.021384731826702759 -
                    proc_control_node_B.out1_tmp * 6.8231348244175949E-6) +
                   proc_control_node_B.out1_tmp_g * 5.2828771531483014E-6) +
                  proc_control_node_B.t69 * 0.002272431716587712)) +
                (((proc_control_node_B.out1_tmp_n * -5.2828771531483014E-6 -
                   proc_control_node_B.out1_tmp_c * 0.66292668662778553) -
                  proc_control_node_B.out1_tmp_d * 2.9076309096921531E-5) -
                 proc_control_node_B.out1_tmp_k * 6.8231348244175949E-6)) +
               (((proc_control_node_B.t68_a * -0.00039756137245743289 -
                  proc_control_node_B.t70_m * 0.002272431716587712) +
                 proc_control_node_B.out1_tmp_cl * 6.8231348244175949E-6) -
                proc_control_node_B.t57_n * 0.070445383214219059)) +
              (((proc_control_node_B.t65_f * -5.2828771531483014E-6 -
                 proc_control_node_B.t54_k * 0.00039756137245743289) +
                proc_control_node_B.out1_tmp_gw * 2.9076309096921531E-5) +
               proc_control_node_B.t29_n * 0.01232440254618042)) +
             (((proc_control_node_B.t50 * -5.2828771531483014E-6 +
                proc_control_node_B.t64 * 0.002272431716587712) - out1_tmp *
               0.021384731826702759) + proc_control_node_B.t25_i *
              0.00016376919174759729)) + ((proc_control_node_B.t31_f *
    -0.00039756137245743289 + proc_control_node_B.t53_i * 0.002272431716587712)
    - 0.093178744606760927);
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 - proc_control_node_B.t8_g * 2.1047070084068991)) +
    ((in2[0] * 1.4142135623730951 * 0.043593198825375247 +
      proc_control_node_B.t9_e * -2.1047070084068991) - in2[1] *
     1.4142135623730951 * 0.043051831063235027)) + ((in2[2] * 1.4142135623730951
    * 0.043593198825375247 - in2[3] * 1.4142135623730951 * 0.043976565543532631)
    - proc_control_node_B.t12_tmp * 0.1138522338822895)) +
                       ((proc_control_node_B.t13_tmp * -25.242114556122988 -
    proc_control_node_B.t14_tmp * 25.242114556122988) +
                        proc_control_node_B.t15_tmp * 0.1138522338822895)) +
                      ((proc_control_node_B.t11_n * -0.0040409200239048832 -
                        proc_control_node_B.t12_f * 1.71018810547529) +
                       proc_control_node_B.t13_n * 0.021882274381510681)) +
                     ((proc_control_node_B.t14_e * -0.002272431716587712 -
                       proc_control_node_B.t15_b * 0.0080268590155159435) +
                      proc_control_node_B.t16_a * 0.0039859244840414)) +
                    ((proc_control_node_B.t17_b * 0.0080268590155159435 -
                      proc_control_node_B.t18_d * 0.678350505826831) -
                     proc_control_node_B.t19_h * 0.002272431716587712)) +
                   ((proc_control_node_B.out1_tmp * 0.0001303522588356414 -
                     proc_control_node_B.out1_tmp_g * 0.0039859244840414) -
                    proc_control_node_B.t69 * 1.71018810547529)) +
                  (((proc_control_node_B.out1_tmp_n * 0.0039859244840414 +
                     proc_control_node_B.out1_tmp_c * 0.070445383214219059) +
                    proc_control_node_B.out1_tmp_d * 0.021882274381510681) +
                   proc_control_node_B.out1_tmp_k * 0.0001303522588356414)) +
                 ((proc_control_node_B.t68_a * 0.0080268590155159435 +
                   proc_control_node_B.t70_m * 1.71018810547529) -
                  proc_control_node_B.out1_tmp_cl * 0.0001303522588356414)) +
                ((proc_control_node_B.t57_n * 53.015831269733987 +
                  proc_control_node_B.t65_f * 0.0039859244840414) +
                 proc_control_node_B.t54_k * 0.0080268590155159435)) +
               ((proc_control_node_B.out1_tmp_gw * -0.021882274381510681 -
                 proc_control_node_B.t29_n * 0.2488326294809943) +
                proc_control_node_B.t50 * 0.0039859244840414)) +
              ((proc_control_node_B.t64 * -1.71018810547529 + out1_tmp *
                0.002272431716587712) - proc_control_node_B.t25_i *
               0.1235636590052834)) + ((proc_control_node_B.t31_f *
    0.0080268590155159435 - proc_control_node_B.t53_i * 1.71018810547529) +
    1.0523535042034491);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 + proc_control_node_B.t8_g * 0.36821797582524962)) +
                        ((in2[0] * 1.4142135623730951 * 0.013457654526727991 +
    proc_control_node_B.t9_e * 0.36821797582524962) + in2[1] *
    1.4142135623730951 * 0.013869054980635681)) + ((in2[2] * 1.4142135623730951 *
    0.013457654526727991 + in2[3] * 1.4142135623730951 * 0.01386868232130781) +
    proc_control_node_B.t12_tmp * 8.6371397256799973)) +
                      ((proc_control_node_B.t13_tmp * 0.1184627304742461 +
                        proc_control_node_B.t14_tmp * 0.1184627304742461) -
                       proc_control_node_B.t15_tmp * 8.6371397256799973)) +
                     (((proc_control_node_B.t11_n * 0.311032764122789 +
                        proc_control_node_B.t12_f * 0.0080268590155159435) -
                       proc_control_node_B.t13_n * 0.0001026911824132076) +
                      proc_control_node_B.t14_e * 0.00039756137245743289)) +
                    ((proc_control_node_B.t15_b * 0.58374455968341665 +
                      proc_control_node_B.t16_a * 1.606290206365557E-6) -
                     proc_control_node_B.t17_b * 0.58374455968341665)) +
                   (((proc_control_node_B.t18_d * 0.0031834266548094372 +
                      proc_control_node_B.t19_h * 0.00039756137245743289) -
                     proc_control_node_B.out1_tmp * 0.010033314971702871) -
                    proc_control_node_B.out1_tmp_g * 1.606290206365557E-6)) +
                  (((proc_control_node_B.t69 * 0.0080268590155159435 +
                     proc_control_node_B.out1_tmp_n * 1.606290206365557E-6) -
                    proc_control_node_B.out1_tmp_c * 0.01232440254618042) -
                   proc_control_node_B.out1_tmp_d * 0.0001026911824132076)) +
                 ((proc_control_node_B.out1_tmp_k * -0.010033314971702871 -
                   proc_control_node_B.t68_a * 0.58374455968341665) -
                  proc_control_node_B.t70_m * 0.0080268590155159435)) +
                ((proc_control_node_B.out1_tmp_cl * 0.010033314971702871 -
                  proc_control_node_B.t57_n * 0.2488326294809943) +
                 proc_control_node_B.t65_f * 1.606290206365557E-6)) +
               ((proc_control_node_B.t54_k * -0.58374455968341665 +
                 proc_control_node_B.out1_tmp_gw * 0.0001026911824132076) +
                proc_control_node_B.t29_n * 18.096081350185919)) +
              (((proc_control_node_B.t50 * 1.606290206365557E-6 +
                 proc_control_node_B.t64 * 0.0080268590155159435) - out1_tmp *
                0.00039756137245743289) - proc_control_node_B.t25_i *
               4.9794996397332282E-5)) + ((proc_control_node_B.t31_f *
    -0.58374455968341665 + proc_control_node_B.t53_i * 0.0080268590155159435) -
    0.18410898791262481);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_node_B.t8_g * 0.0048929560732764686))
                        + ((in2[0] * 1.4142135623730951 * 0.00059255494878017434
    + proc_control_node_B.t9_e * 0.0048929560732764686) - in2[1] *
    1.4142135623730951 * 0.1225770464045467)) + ((in2[2] * 1.4142135623730951 *
    0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - proc_control_node_B.t12_tmp * 0.65361132374006825))
                      + ((proc_control_node_B.t13_tmp * 0.38451002147839958 +
    proc_control_node_B.t14_tmp * 0.38451002147839958) +
    proc_control_node_B.t15_tmp * 0.65361132374006825)) +
                     (((proc_control_node_B.t11_n * -0.031387639110527318 +
                        proc_control_node_B.t12_f * 0.0039859244840414) -
                       proc_control_node_B.t13_n * 0.00042780737967584029) +
                      proc_control_node_B.t14_e * 5.2828771531483014E-6)) +
                    (((proc_control_node_B.t15_b * -1.606290206365557E-6 -
                       proc_control_node_B.t16_a * 0.53015902215788635) +
                      proc_control_node_B.t17_b * 1.606290206365557E-6) +
                     proc_control_node_B.t18_d * 0.013262028769951049)) +
                   (((proc_control_node_B.t19_h * 5.2828771531483014E-6 +
                      proc_control_node_B.out1_tmp * 0.0010125044874363649) +
                     proc_control_node_B.out1_tmp_g * 0.53015902215788635) +
                    proc_control_node_B.t69 * 0.0039859244840414)) +
                  ((proc_control_node_B.out1_tmp_n * -0.53015902215788635 -
                    proc_control_node_B.out1_tmp_c * 0.00016376919174759729) -
                   proc_control_node_B.out1_tmp_d * 0.00042780737967584029)) +
                 (((proc_control_node_B.out1_tmp_k * 0.0010125044874363649 +
                    proc_control_node_B.t68_a * 1.606290206365557E-6) -
                   proc_control_node_B.t70_m * 0.0039859244840414) -
                  proc_control_node_B.out1_tmp_cl * 0.0010125044874363649)) +
                ((proc_control_node_B.t57_n * -0.1235636590052834 -
                  proc_control_node_B.t65_f * 0.53015902215788635) +
                 proc_control_node_B.t54_k * 1.606290206365557E-6)) +
               ((proc_control_node_B.out1_tmp_gw * 0.00042780737967584029 -
                 proc_control_node_B.t29_n * 4.9794996397332282E-5) -
                proc_control_node_B.t50 * 0.53015902215788635)) +
              (((proc_control_node_B.t64 * 0.0039859244840414 - out1_tmp *
                 5.2828771531483014E-6) + proc_control_node_B.t25_i *
                16.434929686894481) + proc_control_node_B.t31_f *
               1.606290206365557E-6)) + (proc_control_node_B.t53_i *
    0.0039859244840414 - 0.0024464780366382352);
}

boolean_T proc_control_nodeModelClass::proc_control_node_isequal(const real_T
  varargin_1[3], const real_T varargin_2[3])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 3)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T proc_control_nodeModelClass::proc_control_node_isequal_b(const real_T
  varargin_1[6], const real_T varargin_2[6])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 6)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S154>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_mldivide(const real_T A[36],
  const real_T B[36], real_T Y[36])
{
  int32_T b_j;
  int32_T c_ix;
  int32_T c_k;
  int32_T ijA;
  int32_T ix;
  int32_T iy;
  int32_T jj;
  int8_T ipiv[6];
  std::memcpy(&proc_control_node_B.b_A_f[0], &A[0], 36U * sizeof(real_T));
  std::memcpy(&Y[0], &B[0], 36U * sizeof(real_T));
  for (b_j = 0; b_j < 6; b_j++) {
    ipiv[b_j] = static_cast<int8_T>(b_j + 1);
  }

  for (b_j = 0; b_j < 5; b_j++) {
    jj = b_j * 7;
    iy = 0;
    ix = jj;
    proc_control_node_B.smax_k = std::abs(proc_control_node_B.b_A_f[jj]);
    for (c_k = 2; c_k <= 6 - b_j; c_k++) {
      ix++;
      proc_control_node_B.s_k4 = std::abs(proc_control_node_B.b_A_f[ix]);
      if (proc_control_node_B.s_k4 > proc_control_node_B.smax_k) {
        iy = c_k - 1;
        proc_control_node_B.smax_k = proc_control_node_B.s_k4;
      }
    }

    if (proc_control_node_B.b_A_f[jj + iy] != 0.0) {
      if (iy != 0) {
        iy += b_j;
        ipiv[b_j] = static_cast<int8_T>(iy + 1);
        for (c_k = 0; c_k < 6; c_k++) {
          proc_control_node_B.smax_k = proc_control_node_B.b_A_f[c_k * 6 + b_j];
          ix = c_k * 6 + iy;
          proc_control_node_B.b_A_f[b_j + c_k * 6] =
            proc_control_node_B.b_A_f[ix];
          proc_control_node_B.b_A_f[ix] = proc_control_node_B.smax_k;
        }
      }

      iy = (jj - b_j) + 6;
      for (ix = jj + 1; ix < iy; ix++) {
        proc_control_node_B.b_A_f[ix] /= proc_control_node_B.b_A_f[jj];
      }
    }

    iy = jj;
    ix = jj + 6;
    for (c_k = 0; c_k <= 4 - b_j; c_k++) {
      if (proc_control_node_B.b_A_f[ix] != 0.0) {
        int32_T c;
        proc_control_node_B.smax_k = -proc_control_node_B.b_A_f[ix];
        c_ix = jj + 1;
        ijA = iy + 7;
        c = (iy - b_j) + 12;
        while (ijA + 1 <= c) {
          proc_control_node_B.b_A_f[ijA] += proc_control_node_B.b_A_f[c_ix] *
            proc_control_node_B.smax_k;
          c_ix++;
          ijA++;
        }
      }

      ix += 6;
      iy += 6;
    }
  }

  for (b_j = 0; b_j < 5; b_j++) {
    int8_T ipiv_0;
    ipiv_0 = ipiv[b_j];
    if (b_j + 1 != ipiv_0) {
      for (iy = 0; iy < 6; iy++) {
        jj = 6 * iy + b_j;
        proc_control_node_B.smax_k = Y[jj];
        ix = (6 * iy + ipiv_0) - 1;
        Y[jj] = Y[ix];
        Y[ix] = proc_control_node_B.smax_k;
      }
    }
  }

  for (b_j = 0; b_j < 6; b_j++) {
    jj = 6 * b_j;
    for (iy = 0; iy < 6; iy++) {
      ix = 6 * iy;
      if (Y[iy + jj] != 0.0) {
        for (c_k = iy + 2; c_k < 7; c_k++) {
          c_ix = (c_k + jj) - 1;
          Y[c_ix] -= proc_control_node_B.b_A_f[(c_k + ix) - 1] * Y[iy + jj];
        }
      }
    }
  }

  for (b_j = 0; b_j < 6; b_j++) {
    jj = 6 * b_j;
    for (iy = 5; iy >= 0; iy--) {
      ix = 6 * iy;
      if (Y[iy + jj] != 0.0) {
        c_ix = iy + jj;
        Y[c_ix] /= proc_control_node_B.b_A_f[iy + ix];
        for (c_k = 0; c_k < iy; c_k++) {
          ijA = c_k + jj;
          Y[ijA] -= proc_control_node_B.b_A_f[c_k + ix] * Y[c_ix];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S264>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_no_mpc_plantupdate(const real_T
  a[169], real_T b[104], const real_T c[169], real_T b_A[441], real_T b_B[630],
  real_T b_C[273], const real_T b_D[390], const int32_T b_mvindex[8], const
  int32_T b_myindex[13], const real_T b_Uscale[8], const real_T b_Yscale[13],
  real_T Bu[168], real_T Bv[21], real_T Cm[273], real_T Dv[13], real_T Dvm[13],
  real_T QQ[441], real_T RR[169], real_T NN[273])
{
  int32_T b_tmp;
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T tmp;
  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    for (i = 0; i < 13; i++) {
      b_tmp = i + i_1;
      b[b_tmp] *= b_Uscale[i_0];
    }

    i_1 += 13;
  }

  i_1 = 0;
  i_0 = 0;
  for (i = 0; i < 13; i++) {
    for (b_tmp = 0; b_tmp < 13; b_tmp++) {
      tmp = b_tmp + i_1;
      b_C[tmp] = c[tmp] / b_Yscale[b_tmp];
      b_A[b_tmp + i_0] = a[tmp];
    }

    i_1 += 13;
    i_0 += 21;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      b_B[i_0 + 21 * i_1] = b[(b_mvindex[i_1] - 1) * 13 + i_0];
    }

    std::memcpy(&Bu[i_1 * 21], &b_B[i_1 * 21], 21U * sizeof(real_T));
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    Bv[i_1] = b_B[i_1 + 168];
    for (i_0 = 0; i_0 < 13; i_0++) {
      Cm[i_0 + 13 * i_1] = b_C[(13 * i_1 + b_myindex[i_0]) - 1];
    }
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    Dv[i_1] = b_D[i_1 + 104];
    Dvm[i_1] = b_D[b_myindex[i_1] + 103];
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    proc_control_node_B.UnknownIn[i_1] = 0;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    proc_control_node_B.UnknownIn[i_1] = static_cast<int8_T>(i_1 + 1);
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    proc_control_node_B.UnknownIn[i_1 + 8] = static_cast<int8_T>(i_1 + 10);
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    for (i_0 = 0; i_0 < 21; i_0++) {
      proc_control_node_B.b_tmp[i_0 + 34 * i_1] = b_B
        [(proc_control_node_B.UnknownIn[i_1] - 1) * 21 + i_0];
    }
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.b_tmp[(i_0 + 34 * i_1) + 21] = b_D
        [((proc_control_node_B.UnknownIn[i_1] - 1) * 13 + b_myindex[i_0]) - 1];
    }
  }

  i_1 = 0;
  for (i_0 = 0; i_0 < 34; i_0++) {
    std::memset(&proc_control_node_B.CovMat[i_1], 0, 34U * sizeof(real_T));
    i_1 += 34;
  }

  i_1 = 0;
  for (b_tmp = 0; b_tmp < 29; b_tmp++) {
    tmp = 0;
    for (i_0 = 0; i_0 < 34; i_0++) {
      for (i = 0; i < 34; i++) {
        int32_T CovMat_tmp;
        CovMat_tmp = i + tmp;
        proc_control_node_B.CovMat[CovMat_tmp] += proc_control_node_B.b_tmp[i +
          i_1] * proc_control_node_B.b_tmp[i_0 + i_1];
      }

      tmp += 34;
    }

    i_1 += 34;
  }

  i_1 = 0;
  i_0 = 0;
  for (i = 0; i < 21; i++) {
    std::memcpy(&QQ[i_1], &proc_control_node_B.CovMat[i_0], 21U * sizeof(real_T));
    i_1 += 21;
    i_0 += 34;
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    std::memcpy(&RR[i_1 * 13], &proc_control_node_B.CovMat[i_1 * 34 + 735], 13U *
                sizeof(real_T));
    std::memcpy(&NN[i_1 * 21], &proc_control_node_B.CovMat[i_1 * 34 + 714], 21U *
                sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S264>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_cont_mpc_constraintcoefLTV(const real_T
  b_A[4851], const real_T Bu[1848], const real_T Bv[231], const real_T b_C[3003],
  const real_T Dv[143], const real_T b_Jm[1280], real_T b_SuJm[2080], real_T
  b_Sx[2730], real_T b_Su1[1040], real_T b_Hv[1430])
{
  int32_T b_C_tmp;
  int32_T i;
  int32_T i_1;
  int32_T i_2;
  int32_T i_3;
  std::memset(&proc_control_node_B.b_C_l[0], 0, 13U * sizeof(real_T));
  i_3 = 0;
  for (i_1 = 0; i_1 < 21; i_1++) {
    for (i_2 = 0; i_2 < 13; i_2++) {
      proc_control_node_B.b_C_l[i_2] += b_C[(i_2 + i_3) + 273] * Bv[i_1];
    }

    i_3 += 13;
  }

  for (i_2 = 0; i_2 < 13; i_2++) {
    b_Hv[i_2] = proc_control_node_B.b_C_l[i_2];
    b_Hv[i_2 + 130] = Dv[i_2 + 13];
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 9; i_3++) {
    std::memset(&b_Hv[i_2 + 260], 0, 13U * sizeof(real_T));
    i_2 += 130;
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 11; i_3++) {
    std::memset(&b_Hv[i_2 + 13], 0, 117U * sizeof(real_T));
    i_2 += 130;
  }

  for (i_2 = 0; i_2 < 21; i_2++) {
    std::memset(&proc_control_node_B.b_C_c[i_2 * 13], 0, 13U * sizeof(real_T));
    for (i_1 = 0; i_1 < 21; i_1++) {
      for (i_3 = 0; i_3 < 13; i_3++) {
        b_C_tmp = 13 * i_2 + i_3;
        proc_control_node_B.b_C_c[b_C_tmp] += b_C[(13 * i_1 + i_3) + 273] * b_A
          [21 * i_2 + i_1];
      }
    }

    std::memcpy(&b_Sx[i_2 * 130], &proc_control_node_B.b_C_c[i_2 * 13], 13U *
                sizeof(real_T));
    std::memset(&b_Sx[i_2 * 130 + 13], 0, 117U * sizeof(real_T));
  }

  for (i_2 = 0; i_2 < 8; i_2++) {
    std::memset(&proc_control_node_B.b_C_d[i_2 * 13], 0, 13U * sizeof(real_T));
    for (i_1 = 0; i_1 < 21; i_1++) {
      for (i_3 = 0; i_3 < 13; i_3++) {
        b_C_tmp = 13 * i_2 + i_3;
        proc_control_node_B.b_C_d[b_C_tmp] += b_C[(13 * i_1 + i_3) + 273] * Bu
          [21 * i_2 + i_1];
      }
    }

    std::memcpy(&b_Su1[i_2 * 130], &proc_control_node_B.b_C_d[i_2 * 13], 13U *
                sizeof(real_T));
    std::memset(&b_Su1[i_2 * 130 + 13], 0, 117U * sizeof(real_T));
    std::memcpy(&proc_control_node_B.a[i_2 * 130], &b_Su1[i_2 * 130], 13U *
                sizeof(real_T));
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 72; i_3++) {
    std::memset(&proc_control_node_B.a[i_2 + 1040], 0, 13U * sizeof(real_T));
    i_2 += 130;
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 80; i_3++) {
    std::memset(&proc_control_node_B.a[i_2 + 13], 0, 117U * sizeof(real_T));
    i_2 += 130;
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 21; i_3++) {
    std::memcpy(&proc_control_node_B.AA[i_2], &b_A[i_2 + 441], 21U * sizeof
                (real_T));
    i_2 += 21;
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 168; i_3++) {
    std::memset(&proc_control_node_B.AA[i_2 + 441], 0, 21U * sizeof(real_T));
    i_2 += 21;
  }

  for (i = 0; i < 9; i++) {
    int32_T b_Hv_tmp;
    int32_T b_Su1_tmp;
    uint8_T i_0;
    i_0 = static_cast<uint8_T>((i + 1) * 13U + 1U);
    for (i_2 = 0; i_2 < 13; i_2++) {
      proc_control_node_B.rows_g[i_2] = static_cast<uint8_T>
        (static_cast<uint32_T>(i_2) + i_0);
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      for (i_3 = 0; i_3 < 8; i_3++) {
        b_Su1_tmp = (130 * i_3 + proc_control_node_B.rows_g[i_2]) - 1;
        b_Su1[b_Su1_tmp] = 0.0;
        for (i_1 = 0; i_1 < 21; i_1++) {
          b_Su1[b_Su1_tmp] += b_C[(13 * i_1 + i_2) + (i + 2) * 273] * Bu[(21 *
            i_3 + i_1) + (i + 1) * 168];
        }
      }
    }

    i_1 = (i + 1) << 3;
    for (i_2 = 0; i_2 < 8; i_2++) {
      for (i_3 = 0; i_3 < 13; i_3++) {
        i_0 = proc_control_node_B.rows_g[i_3];
        proc_control_node_B.a[(i_0 + 130 * (i_2 + i_1)) - 1] = b_Su1[(130 * i_2
          + i_0) - 1];
      }
    }

    for (b_Su1_tmp = 0; b_Su1_tmp <= i; b_Su1_tmp++) {
      b_Hv_tmp = i - b_Su1_tmp;
      i_1 = b_Hv_tmp * 21;
      for (i_2 = 0; i_2 < 21; i_2++) {
        std::memcpy(&proc_control_node_B.AA_o[i_2 * 21],
                    &proc_control_node_B.AA[i_2 * 21 + i_1 * 21], 21U * sizeof
                    (real_T));
      }

      for (i_2 = 0; i_2 < 13; i_2++) {
        for (i_3 = 0; i_3 < 21; i_3++) {
          b_C_tmp = 13 * i_3 + i_2;
          proc_control_node_B.b_C_c[b_C_tmp] = 0.0;
          for (i_1 = 0; i_1 < 21; i_1++) {
            proc_control_node_B.b_C_c[b_C_tmp] += b_C[(13 * i_1 + i_2) + (i + 2)
              * 273] * proc_control_node_B.AA_o[21 * i_3 + i_1];
          }
        }

        for (i_3 = 0; i_3 < 8; i_3++) {
          proc_control_node_B.d39 = 0.0;
          for (i_1 = 0; i_1 < 21; i_1++) {
            proc_control_node_B.d39 += Bu[(21 * i_3 + i_1) + 168 * b_Hv_tmp] *
              proc_control_node_B.b_C_c[13 * i_1 + i_2];
          }

          proc_control_node_B.b_C_d[i_2 + 13 * i_3] = b_Su1[(130 * i_3 +
            proc_control_node_B.rows_g[i_2]) - 1] + proc_control_node_B.d39;
        }
      }

      for (i_2 = 0; i_2 < 8; i_2++) {
        for (i_3 = 0; i_3 < 13; i_3++) {
          b_Su1[(proc_control_node_B.rows_g[i_3] + 130 * i_2) - 1] =
            proc_control_node_B.b_C_d[13 * i_2 + i_3];
        }
      }

      b_Hv_tmp <<= 3;
      for (i_2 = 0; i_2 < 8; i_2++) {
        for (i_3 = 0; i_3 < 13; i_3++) {
          i_0 = proc_control_node_B.rows_g[i_3];
          proc_control_node_B.a[(i_0 + 130 * (i_2 + b_Hv_tmp)) - 1] = b_Su1[(130
            * i_2 + i_0) - 1];
        }
      }
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      b_Hv[(proc_control_node_B.rows_g[i_2] + 130 * (i + 2)) - 1] = Dv[(i + 2) *
        13 + i_2];
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      b_Hv_tmp = ((i + 1) * 130 + proc_control_node_B.rows_g[i_2]) - 1;
      b_Hv[b_Hv_tmp] = 0.0;
      for (i_3 = 0; i_3 < 21; i_3++) {
        b_Hv[b_Hv_tmp] += b_C[(13 * i_3 + i_2) + (i + 2) * 273] * Bv[(i + 1) *
          21 + i_3];
      }
    }

    for (b_Su1_tmp = 0; b_Su1_tmp <= i; b_Su1_tmp++) {
      i_1 = b_Su1_tmp * 21;
      for (i_2 = 0; i_2 < 21; i_2++) {
        std::memcpy(&proc_control_node_B.AA_o[i_2 * 21],
                    &proc_control_node_B.AA[i_2 * 21 + i_1 * 21], 21U * sizeof
                    (real_T));
      }

      for (i_2 = 0; i_2 < 13; i_2++) {
        b_Hv_tmp = (130 * b_Su1_tmp + proc_control_node_B.rows_g[i_2]) - 1;
        b_Hv[b_Hv_tmp] = 0.0;
        for (i_3 = 0; i_3 < 21; i_3++) {
          b_C_tmp = 13 * i_3 + i_2;
          proc_control_node_B.b_C_c[b_C_tmp] = 0.0;
          for (i_1 = 0; i_1 < 21; i_1++) {
            proc_control_node_B.b_C_c[b_C_tmp] += b_C[(13 * i_1 + i_2) + (i + 2)
              * 273] * proc_control_node_B.AA_o[21 * i_3 + i_1];
          }

          b_Hv[b_Hv_tmp] += Bv[21 * b_Su1_tmp + i_3] *
            proc_control_node_B.b_C_c[b_C_tmp];
        }
      }
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      for (i_3 = 0; i_3 < 21; i_3++) {
        b_C_tmp = 13 * i_3 + i_2;
        proc_control_node_B.b_C_c[b_C_tmp] = 0.0;
        for (i_1 = 0; i_1 < 21; i_1++) {
          proc_control_node_B.b_C_c[b_C_tmp] += b_C[(13 * i_1 + i_2) + (i + 2) *
            273] * proc_control_node_B.AA[21 * i_3 + i_1];
        }
      }

      for (i_3 = 0; i_3 < 21; i_3++) {
        b_C_tmp = (130 * i_3 + proc_control_node_B.rows_g[i_2]) - 1;
        b_Sx[b_C_tmp] = 0.0;
        for (i_1 = 0; i_1 < 21; i_1++) {
          b_Sx[b_C_tmp] += proc_control_node_B.b_C_c[13 * i_1 + i_2] * b_A[21 *
            i_3 + i_1];
        }
      }
    }

    if (i + 2 < 10) {
      for (b_Su1_tmp = 0; b_Su1_tmp <= i; b_Su1_tmp++) {
        b_Hv_tmp = b_Su1_tmp * 21;
        for (i_2 = 0; i_2 < 21; i_2++) {
          std::memcpy(&proc_control_node_B.AA_o[i_2 * 21],
                      &proc_control_node_B.AA[i_2 * 21 + b_Hv_tmp * 21], 21U *
                      sizeof(real_T));
        }

        for (i_2 = 0; i_2 < 21; i_2++) {
          for (i_3 = 0; i_3 < 21; i_3++) {
            b_C_tmp = (i_3 + b_Hv_tmp) * 21 + i_2;
            proc_control_node_B.AA[b_C_tmp] = 0.0;
            for (i_1 = 0; i_1 < 21; i_1++) {
              proc_control_node_B.AA[b_C_tmp] += b_A[(21 * i_1 + i_2) + (i + 2) *
                441] * proc_control_node_B.AA_o[21 * i_3 + i_1];
            }
          }
        }
      }

      i_1 = (i + 1) * 21;
      for (i_2 = 0; i_2 < 21; i_2++) {
        std::memcpy(&proc_control_node_B.AA[i_2 * 21 + i_1 * 21], &b_A[(i * 441
          + i_2 * 21) + 882], 21U * sizeof(real_T));
      }
    }
  }

  for (i_2 = 0; i_2 < 16; i_2++) {
    std::memset(&b_SuJm[i_2 * 130], 0, 130U * sizeof(real_T));
    for (i_1 = 0; i_1 < 80; i_1++) {
      for (i_3 = 0; i_3 < 130; i_3++) {
        i = 130 * i_2 + i_3;
        b_SuJm[i] += proc_control_node_B.a[130 * i_1 + i_3] * b_Jm[80 * i_2 +
          i_1];
      }
    }
  }
}

// Function for MATLAB Function: '<S264>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_kron(const real_T b_A[100],
  const real_T b_B[64], real_T K[6400])
{
  int32_T kidx;
  kidx = -1;
  for (int32_T b_j1{0}; b_j1 < 10; b_j1++) {
    for (int32_T j2{0}; j2 < 8; j2++) {
      for (int32_T i1{0}; i1 < 10; i1++) {
        for (int32_T i2{0}; i2 < 8; i2++) {
          K[(kidx + i2) + 1] = b_A[10 * b_j1 + i1] * b_B[(j2 << 3) + i2];
        }

        kidx += 8;
      }
    }
  }
}

// Function for MATLAB Function: '<S264>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_contr_mpcblock_optimizer_d(const real_T
  rseq[130], const real_T vseq[11], const real_T umin[8], const real_T umax[8],
  const real_T x[21], const real_T old_u[8], const boolean_T iA[32], const
  real_T b_Mlim[32], real_T b_Mx[672], real_T b_Mu1[256], real_T b_Mv[352],
  const real_T b_utarget[80], const real_T b_uoff[8], real_T b_H[289], real_T
  b_Ac[544], const real_T ywt[13], const real_T uwt[8], const real_T duwt[8],
  const real_T b_Jm[1280], const real_T b_I1[640], const real_T b_A[4851], const
  real_T Bu[1848], const real_T Bv[231], const real_T b_C[3003], const real_T
  Dv[143], const int32_T b_Mrows[32], const real_T b_RMVscale[8], real_T u[8],
  real_T useq[88], real_T *status, boolean_T iAout[32])
{
  static const real_T b[100]{ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  int16_T ixw;
  boolean_T exitg1;
  for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 32;
       proc_control_node_B.i_g++) {
    iAout[proc_control_node_B.i_g] = false;
  }

  proc_cont_mpc_constraintcoefLTV(b_A, Bu, Bv, b_C, Dv, b_Jm,
    proc_control_node_B.b_SuJm_f, proc_control_node_B.b_Sx_p,
    proc_control_node_B.b_Su1_j, proc_control_node_B.b_Hv_b);
  if (b_Mrows[0] > 0) {
    proc_control_node_B.i_g = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.i_g < 32)) {
      if (b_Mrows[proc_control_node_B.i_g] <= 130) {
        proc_control_node_B.i_a = b_Mrows[proc_control_node_B.i_g];
        for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 16;
             proc_control_node_B.ii++) {
          b_Ac[proc_control_node_B.i_g + (proc_control_node_B.ii << 5)] =
            -proc_control_node_B.b_SuJm_f[(130 * proc_control_node_B.ii +
            proc_control_node_B.i_a) - 1];
        }

        proc_control_node_B.i_a = b_Mrows[proc_control_node_B.i_g];
        for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 21;
             proc_control_node_B.ii++) {
          b_Mx[proc_control_node_B.i_g + (proc_control_node_B.ii << 5)] =
            -proc_control_node_B.b_Sx_p[(130 * proc_control_node_B.ii +
            proc_control_node_B.i_a) - 1];
        }

        proc_control_node_B.i_a = b_Mrows[proc_control_node_B.i_g];
        for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 8;
             proc_control_node_B.ii++) {
          b_Mu1[proc_control_node_B.i_g + (proc_control_node_B.ii << 5)] =
            -proc_control_node_B.b_Su1_j[(130 * proc_control_node_B.ii +
            proc_control_node_B.i_a) - 1];
        }

        proc_control_node_B.i_a = b_Mrows[proc_control_node_B.i_g];
        for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 11;
             proc_control_node_B.ii++) {
          b_Mv[proc_control_node_B.i_g + (proc_control_node_B.ii << 5)] =
            -proc_control_node_B.b_Hv_b[(130 * proc_control_node_B.ii +
            proc_control_node_B.i_a) - 1];
        }

        proc_control_node_B.i_g++;
      } else if (b_Mrows[proc_control_node_B.i_g] <= 260) {
        proc_control_node_B.ii = b_Mrows[proc_control_node_B.i_g];
        if (proc_control_node_B.ii < -2147483518) {
          proc_control_node_B.i_a = MIN_int32_T;
        } else {
          proc_control_node_B.i_a = proc_control_node_B.ii - 130;
        }

        for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 16;
             proc_control_node_B.ii++) {
          b_Ac[proc_control_node_B.i_g + (proc_control_node_B.ii << 5)] =
            proc_control_node_B.b_SuJm_f[(130 * proc_control_node_B.ii +
            proc_control_node_B.i_a) - 1];
        }

        for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 21;
             proc_control_node_B.ii++) {
          b_Mx[proc_control_node_B.i_g + (proc_control_node_B.ii << 5)] =
            proc_control_node_B.b_Sx_p[(130 * proc_control_node_B.ii +
            proc_control_node_B.i_a) - 1];
        }

        for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 8;
             proc_control_node_B.ii++) {
          b_Mu1[proc_control_node_B.i_g + (proc_control_node_B.ii << 5)] =
            proc_control_node_B.b_Su1_j[(130 * proc_control_node_B.ii +
            proc_control_node_B.i_a) - 1];
        }

        for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 11;
             proc_control_node_B.ii++) {
          b_Mv[proc_control_node_B.i_g + (proc_control_node_B.ii << 5)] =
            proc_control_node_B.b_Hv_b[(130 * proc_control_node_B.ii +
            proc_control_node_B.i_a) - 1];
        }

        proc_control_node_B.i_g++;
      } else {
        exitg1 = true;
      }
    }
  }

  for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 13;
       proc_control_node_B.i_g++) {
    proc_control_node_B.ywt_i = ywt[proc_control_node_B.i_g];
    if (proc_control_node_B.ywt_i < 0.0) {
      proc_control_node_B.b_Wy[proc_control_node_B.i_g] = 0.0;
    } else {
      proc_control_node_B.b_Wy[proc_control_node_B.i_g] =
        proc_control_node_B.ywt_i * proc_control_node_B.ywt_i;
    }
  }

  for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 8;
       proc_control_node_B.i_g++) {
    proc_control_node_B.ywt_i = duwt[proc_control_node_B.i_g];
    proc_control_node_B.uwt_m = uwt[proc_control_node_B.i_g];
    if (proc_control_node_B.uwt_m < 0.0) {
      proc_control_node_B.b_Wu_h[proc_control_node_B.i_g] = 0.0;
    } else {
      proc_control_node_B.b_Wu_h[proc_control_node_B.i_g] =
        proc_control_node_B.uwt_m * proc_control_node_B.uwt_m;
    }

    if (proc_control_node_B.ywt_i < 0.0) {
      proc_control_node_B.b_Wdu_k[proc_control_node_B.i_g] = 0.0;
    } else {
      proc_control_node_B.b_Wdu_k[proc_control_node_B.i_g] =
        proc_control_node_B.ywt_i * proc_control_node_B.ywt_i;
    }
  }

  std::memset(&proc_control_node_B.b_I[0], 0, sizeof(real_T) << 6U);
  proc_control_node_B.i_a = 0;
  for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 8;
       proc_control_node_B.i_g++) {
    proc_control_node_B.b_I[proc_control_node_B.i_a] = 1.0;
    proc_control_node_B.i_a += 9;
  }

  proc_control_node_kron(b, proc_control_node_B.b_I, proc_control_node_B.dv);
  for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 16;
       proc_control_node_B.ii++) {
    std::memset(&proc_control_node_B.I2Jm_h[proc_control_node_B.ii * 80], 0, 80U
                * sizeof(real_T));
    for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 80;
         proc_control_node_B.i_a++) {
      for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 80;
           proc_control_node_B.i_g++) {
        proc_control_node_B.I2Jm_tmp = 80 * proc_control_node_B.ii +
          proc_control_node_B.i_g;
        proc_control_node_B.I2Jm_h[proc_control_node_B.I2Jm_tmp] +=
          proc_control_node_B.dv[80 * proc_control_node_B.i_a +
          proc_control_node_B.i_g] * b_Jm[80 * proc_control_node_B.ii +
          proc_control_node_B.i_a];
      }
    }
  }

  ixw = 1;
  for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 130;
       proc_control_node_B.i_g++) {
    proc_control_node_B.ywt_i = proc_control_node_B.b_Wy[ixw - 1];
    for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 16;
         proc_control_node_B.ii++) {
      proc_control_node_B.i_a = 130 * proc_control_node_B.ii +
        proc_control_node_B.i_g;
      proc_control_node_B.WySuJm_g[proc_control_node_B.i_a] =
        proc_control_node_B.b_SuJm_f[proc_control_node_B.i_a] *
        proc_control_node_B.ywt_i;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 13) {
      ixw = 1;
    }
  }

  proc_control_node_WtMult(proc_control_node_B.b_Wu_h,
    proc_control_node_B.I2Jm_h, proc_control_node_nu,
    proc_control_node_B.WuI2Jm_b);
  proc_control_node_WtMult(proc_control_node_B.b_Wdu_k, b_Jm,
    proc_control_node_nu, proc_control_node_B.dv2);
  for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 16;
       proc_control_node_B.ii++) {
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 16;
         proc_control_node_B.i_g++) {
      proc_control_node_B.I2Jm_tmp = (proc_control_node_B.ii << 4) +
        proc_control_node_B.i_g;
      proc_control_node_B.b_SuJm_l[proc_control_node_B.I2Jm_tmp] = 0.0;
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 130;
           proc_control_node_B.i_a++) {
        proc_control_node_B.b_SuJm_l[proc_control_node_B.I2Jm_tmp] +=
          proc_control_node_B.b_SuJm_f[130 * proc_control_node_B.i_g +
          proc_control_node_B.i_a] * proc_control_node_B.WySuJm_g[130 *
          proc_control_node_B.ii + proc_control_node_B.i_a];
      }

      proc_control_node_B.b_Jm_h[proc_control_node_B.I2Jm_tmp] = 0.0;
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 80;
           proc_control_node_B.i_a++) {
        proc_control_node_B.b_Jm_h[proc_control_node_B.I2Jm_tmp] += b_Jm[80 *
          proc_control_node_B.i_g + proc_control_node_B.i_a] *
          proc_control_node_B.dv2[80 * proc_control_node_B.ii +
          proc_control_node_B.i_a];
      }
    }
  }

  for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 16;
       proc_control_node_B.ii++) {
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 16;
         proc_control_node_B.i_g++) {
      proc_control_node_B.ywt_i = 0.0;
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 80;
           proc_control_node_B.i_a++) {
        proc_control_node_B.ywt_i += proc_control_node_B.I2Jm_h[80 *
          proc_control_node_B.ii + proc_control_node_B.i_a] *
          proc_control_node_B.WuI2Jm_b[80 * proc_control_node_B.i_g +
          proc_control_node_B.i_a];
      }

      proc_control_node_B.i_a = (proc_control_node_B.i_g << 4) +
        proc_control_node_B.ii;
      b_H[proc_control_node_B.ii + 17 * proc_control_node_B.i_g] =
        (proc_control_node_B.b_SuJm_l[proc_control_node_B.i_a] +
         proc_control_node_B.b_Jm_h[proc_control_node_B.i_a]) +
        proc_control_node_B.ywt_i;
    }

    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 8;
         proc_control_node_B.i_g++) {
      proc_control_node_B.I2Jm_tmp = (proc_control_node_B.ii << 3) +
        proc_control_node_B.i_g;
      proc_control_node_B.b_Su1_n[proc_control_node_B.I2Jm_tmp] = 0.0;
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 130;
           proc_control_node_B.i_a++) {
        proc_control_node_B.b_Su1_n[proc_control_node_B.I2Jm_tmp] +=
          proc_control_node_B.b_Su1_j[130 * proc_control_node_B.i_g +
          proc_control_node_B.i_a] * proc_control_node_B.WySuJm_g[130 *
          proc_control_node_B.ii + proc_control_node_B.i_a];
      }

      proc_control_node_B.b_I1_i[proc_control_node_B.I2Jm_tmp] = 0.0;
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 80;
           proc_control_node_B.i_a++) {
        proc_control_node_B.b_I1_i[proc_control_node_B.I2Jm_tmp] += b_I1[80 *
          proc_control_node_B.i_g + proc_control_node_B.i_a] *
          proc_control_node_B.WuI2Jm_b[80 * proc_control_node_B.ii +
          proc_control_node_B.i_a];
      }
    }
  }

  for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 128;
       proc_control_node_B.ii++) {
    proc_control_node_B.b_Ku1_c[proc_control_node_B.ii] =
      proc_control_node_B.b_Su1_n[proc_control_node_B.ii] +
      proc_control_node_B.b_I1_i[proc_control_node_B.ii];
  }

  for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 1280;
       proc_control_node_B.ii++) {
    proc_control_node_B.WuI2Jm_b[proc_control_node_B.ii] =
      -proc_control_node_B.WuI2Jm_b[proc_control_node_B.ii];
  }

  for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 16;
       proc_control_node_B.ii++) {
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 21;
         proc_control_node_B.i_g++) {
      proc_control_node_B.I2Jm_tmp = 21 * proc_control_node_B.ii +
        proc_control_node_B.i_g;
      proc_control_node_B.b_Kx_m[proc_control_node_B.I2Jm_tmp] = 0.0;
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 130;
           proc_control_node_B.i_a++) {
        proc_control_node_B.b_Kx_m[proc_control_node_B.I2Jm_tmp] +=
          proc_control_node_B.b_Sx_p[130 * proc_control_node_B.i_g +
          proc_control_node_B.i_a] * proc_control_node_B.WySuJm_g[130 *
          proc_control_node_B.ii + proc_control_node_B.i_a];
      }
    }

    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 11;
         proc_control_node_B.i_g++) {
      proc_control_node_B.I2Jm_tmp = 11 * proc_control_node_B.ii +
        proc_control_node_B.i_g;
      proc_control_node_B.b_Kv_a[proc_control_node_B.I2Jm_tmp] = 0.0;
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 130;
           proc_control_node_B.i_a++) {
        proc_control_node_B.b_Kv_a[proc_control_node_B.I2Jm_tmp] +=
          proc_control_node_B.b_Hv_b[130 * proc_control_node_B.i_g +
          proc_control_node_B.i_a] * proc_control_node_B.WySuJm_g[130 *
          proc_control_node_B.ii + proc_control_node_B.i_a];
      }
    }
  }

  for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 2080;
       proc_control_node_B.ii++) {
    proc_control_node_B.WySuJm_g[proc_control_node_B.ii] =
      -proc_control_node_B.WySuJm_g[proc_control_node_B.ii];
  }

  std::memcpy(&proc_control_node_B.b_Linv_c[0], &b_H[0], 289U * sizeof(real_T));
  proc_control_n_mpc_checkhessian(proc_control_node_B.b_Linv_c,
    proc_control_node_B.c_Linv_p, &proc_control_node_B.ywt_i);
  if (proc_control_node_B.ywt_i > 1.0) {
    proc_control_node_B.i_g = 0;
    for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 8;
         proc_control_node_B.i_a++) {
      u[proc_control_node_B.i_a] = old_u[proc_control_node_B.i_a] +
        b_uoff[proc_control_node_B.i_a];
      for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 11;
           proc_control_node_B.ii++) {
        useq[proc_control_node_B.ii + proc_control_node_B.i_g] =
          u[proc_control_node_B.i_a];
      }

      proc_control_node_B.i_g += 11;
    }

    *status = -2.0;
  } else {
    std::memset(&proc_control_node_B.b_B_g[0], 0, 289U * sizeof(int8_T));
    proc_control_node_B.i_a = 0;
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 17;
         proc_control_node_B.i_g++) {
      proc_control_node_B.b_B_g[proc_control_node_B.i_a] = 1;
      proc_control_node_B.i_a += 18;
    }

    proc_control_node_B.i_a = 0;
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 17;
         proc_control_node_B.i_g++) {
      for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 17;
           proc_control_node_B.ii++) {
        proc_control_node_B.I2Jm_tmp = proc_control_node_B.ii +
          proc_control_node_B.i_a;
        proc_control_node_B.b_Linv_c[proc_control_node_B.I2Jm_tmp] =
          proc_control_node_B.b_B_g[proc_control_node_B.I2Jm_tmp];
      }

      proc_control_node_B.i_a += 17;
    }

    proc_control_node_trisolve(proc_control_node_B.c_Linv_p,
      proc_control_node_B.b_Linv_c);
    for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 32;
         proc_control_node_B.ii++) {
      proc_control_node_B.ywt_i = 0.0;
      proc_control_node_B.i_g = 0;
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 21;
           proc_control_node_B.i_a++) {
        proc_control_node_B.ywt_i += b_Mx[proc_control_node_B.i_g +
          proc_control_node_B.ii] * x[proc_control_node_B.i_a];
        proc_control_node_B.i_g += 32;
      }

      proc_control_node_B.b_Mlim_e[proc_control_node_B.ii] =
        b_Mlim[proc_control_node_B.ii] + proc_control_node_B.ywt_i;
      proc_control_node_B.b_Mu1_d[proc_control_node_B.ii] = 0.0;
    }

    proc_control_node_B.ii = 0;
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 8;
         proc_control_node_B.i_g++) {
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 32;
           proc_control_node_B.i_a++) {
        proc_control_node_B.b_Mu1_d[proc_control_node_B.i_a] +=
          b_Mu1[proc_control_node_B.i_a + proc_control_node_B.ii] *
          old_u[proc_control_node_B.i_g];
      }

      proc_control_node_B.ii += 32;
    }

    for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 32;
         proc_control_node_B.ii++) {
      proc_control_node_B.ywt_i = 0.0;
      proc_control_node_B.i_g = 0;
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 11;
           proc_control_node_B.i_a++) {
        proc_control_node_B.ywt_i += b_Mv[proc_control_node_B.i_g +
          proc_control_node_B.ii] * vseq[proc_control_node_B.i_a];
        proc_control_node_B.i_g += 32;
      }

      proc_control_node_B.Bc_b[proc_control_node_B.ii] =
        -((proc_control_node_B.b_Mlim_e[proc_control_node_B.ii] +
           proc_control_node_B.b_Mu1_d[proc_control_node_B.ii]) +
          proc_control_node_B.ywt_i);
    }

    std::memset(&proc_control_node_B.b_Wu_h[0], 0, sizeof(real_T) << 3U);
    std::memset(&proc_control_node_B.b_Wdu_k[0], 0, sizeof(real_T) << 3U);
    for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 8;
         proc_control_node_B.ii++) {
      proc_control_node_B.umax_incr_flag_c[proc_control_node_B.ii] = false;
      proc_control_node_B.umin_incr_flag_i[proc_control_node_B.ii] = false;
    }

    if (b_Mrows[0] > 0) {
      proc_control_node_B.i_g = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_g < 32)) {
        if ((b_Mrows[proc_control_node_B.i_g] <= 130) ||
            (b_Mrows[proc_control_node_B.i_g] <= 260)) {
          proc_control_node_B.i_g++;
        } else if (b_Mrows[proc_control_node_B.i_g] <= 340) {
          boolean_T b_Del_Save_Flag0_tmp;
          proc_control_node_B.ii = b_Mrows[proc_control_node_B.i_g];
          if (proc_control_node_B.ii < -2147483388) {
            proc_control_node_B.i_a = MIN_int32_T;
          } else {
            proc_control_node_B.i_a = proc_control_node_B.ii - 260;
          }

          if (proc_control_node_B.i_a < -2147483647) {
            proc_control_node_B.i_a = MIN_int32_T;
          } else {
            proc_control_node_B.i_a--;
          }

          proc_control_node_B.ii = proc_control_node_B.i_a -
            ((proc_control_node_B.i_a >> 3) << 3);
          if (proc_control_node_B.ii > 2147483646) {
            proc_control_node_B.i_a = MAX_int32_T;
          } else {
            proc_control_node_B.i_a = proc_control_node_B.ii + 1;
          }

          b_Del_Save_Flag0_tmp =
            proc_control_node_B.umax_incr_flag_c[proc_control_node_B.i_a - 1];
          if (!b_Del_Save_Flag0_tmp) {
            proc_control_node_B.ywt_i = -(b_RMVscale[proc_control_node_B.i_a - 1]
              * umax[proc_control_node_B.i_a - 1] -
              b_uoff[proc_control_node_B.i_a - 1]) -
              (-b_Mlim[proc_control_node_B.i_g]);
            b_Del_Save_Flag0_tmp = true;
          } else {
            proc_control_node_B.ywt_i =
              proc_control_node_B.b_Wu_h[proc_control_node_B.i_a - 1];
          }

          proc_control_node_B.b_Wu_h[proc_control_node_B.i_a - 1] =
            proc_control_node_B.ywt_i;
          proc_control_node_B.umax_incr_flag_c[proc_control_node_B.i_a - 1] =
            b_Del_Save_Flag0_tmp;
          proc_control_node_B.Bc_b[proc_control_node_B.i_g] +=
            proc_control_node_B.ywt_i;
          proc_control_node_B.i_g++;
        } else if (b_Mrows[proc_control_node_B.i_g] <= 420) {
          boolean_T b_Del_Save_Flag0_tmp;
          proc_control_node_B.ii = b_Mrows[proc_control_node_B.i_g];
          if (proc_control_node_B.ii < -2147483388) {
            proc_control_node_B.i_a = MIN_int32_T;
          } else {
            proc_control_node_B.i_a = proc_control_node_B.ii - 260;
          }

          if (proc_control_node_B.i_a < -2147483568) {
            proc_control_node_B.i_a = MIN_int32_T;
          } else {
            proc_control_node_B.i_a -= 80;
          }

          if (proc_control_node_B.i_a < -2147483647) {
            proc_control_node_B.i_a = MIN_int32_T;
          } else {
            proc_control_node_B.i_a--;
          }

          proc_control_node_B.ii = proc_control_node_B.i_a -
            ((proc_control_node_B.i_a >> 3) << 3);
          if (proc_control_node_B.ii > 2147483646) {
            proc_control_node_B.i_a = MAX_int32_T;
          } else {
            proc_control_node_B.i_a = proc_control_node_B.ii + 1;
          }

          b_Del_Save_Flag0_tmp =
            proc_control_node_B.umin_incr_flag_i[proc_control_node_B.i_a - 1];
          if (!b_Del_Save_Flag0_tmp) {
            proc_control_node_B.ywt_i = (b_RMVscale[proc_control_node_B.i_a - 1]
              * umin[proc_control_node_B.i_a - 1] -
              b_uoff[proc_control_node_B.i_a - 1]) -
              (-b_Mlim[proc_control_node_B.i_g]);
            b_Del_Save_Flag0_tmp = true;
          } else {
            proc_control_node_B.ywt_i =
              proc_control_node_B.b_Wdu_k[proc_control_node_B.i_a - 1];
          }

          proc_control_node_B.b_Wdu_k[proc_control_node_B.i_a - 1] =
            proc_control_node_B.ywt_i;
          proc_control_node_B.umin_incr_flag_i[proc_control_node_B.i_a - 1] =
            b_Del_Save_Flag0_tmp;
          proc_control_node_B.Bc_b[proc_control_node_B.i_g] +=
            proc_control_node_B.ywt_i;
          proc_control_node_B.i_g++;
        } else {
          exitg1 = true;
        }
      }
    }

    std::memset(&proc_control_node_B.f_j[0], 0, 17U * sizeof(real_T));
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 16;
         proc_control_node_B.i_g++) {
      proc_control_node_B.ywt_i = 0.0;
      for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 21;
           proc_control_node_B.ii++) {
        proc_control_node_B.ywt_i += proc_control_node_B.b_Kx_m[21 *
          proc_control_node_B.i_g + proc_control_node_B.ii] *
          x[proc_control_node_B.ii];
      }

      proc_control_node_B.uwt_m = 0.0;
      for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 130;
           proc_control_node_B.ii++) {
        proc_control_node_B.uwt_m += proc_control_node_B.WySuJm_g[130 *
          proc_control_node_B.i_g + proc_control_node_B.ii] *
          rseq[proc_control_node_B.ii];
      }

      proc_control_node_B.b_Ku1_a = 0.0;
      for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 8;
           proc_control_node_B.ii++) {
        proc_control_node_B.b_Ku1_a += proc_control_node_B.b_Ku1_c
          [(proc_control_node_B.i_g << 3) + proc_control_node_B.ii] *
          old_u[proc_control_node_B.ii];
      }

      proc_control_node_B.b_Kv_l = 0.0;
      for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 11;
           proc_control_node_B.ii++) {
        proc_control_node_B.b_Kv_l += proc_control_node_B.b_Kv_a[11 *
          proc_control_node_B.i_g + proc_control_node_B.ii] *
          vseq[proc_control_node_B.ii];
      }

      proc_control_node_B.WuI2Jm_jc = 0.0;
      for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 80;
           proc_control_node_B.ii++) {
        proc_control_node_B.WuI2Jm_jc += proc_control_node_B.WuI2Jm_b[80 *
          proc_control_node_B.i_g + proc_control_node_B.ii] *
          b_utarget[proc_control_node_B.ii];
      }

      proc_control_node_B.f_j[proc_control_node_B.i_g] =
        (((proc_control_node_B.ywt_i + proc_control_node_B.uwt_m) +
          proc_control_node_B.b_Ku1_a) + proc_control_node_B.b_Kv_l) +
        proc_control_node_B.WuI2Jm_jc;
    }

    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 32;
         proc_control_node_B.i_g++) {
      proc_control_node_B.iAnew_k[proc_control_node_B.i_g] =
        iA[proc_control_node_B.i_g];
    }

    proc_control_node_B.ii = 0;
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 17;
         proc_control_node_B.i_g++) {
      proc_control_node_B.i_a = 0;
      for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 < 17;
           proc_control_node_B.i5++) {
        proc_control_node_B.I2Jm_tmp = proc_control_node_B.i5 +
          proc_control_node_B.ii;
        proc_control_node_B.c_Linv_p[proc_control_node_B.I2Jm_tmp] = 0.0;
        for (proc_control_node_B.i6 = 0; proc_control_node_B.i6 < 17;
             proc_control_node_B.i6++) {
          proc_control_node_B.c_Linv_p[proc_control_node_B.I2Jm_tmp] +=
            proc_control_node_B.b_Linv_c[proc_control_node_B.i6 +
            proc_control_node_B.i_a] *
            proc_control_node_B.b_Linv_c[proc_control_node_B.i6 +
            proc_control_node_B.ii];
        }

        proc_control_node_B.i_a += 17;
      }

      proc_control_node_B.ii += 17;
    }

    proc_control_node_qpkwik(proc_control_node_B.b_Linv_c,
      proc_control_node_B.c_Linv_p, proc_control_node_B.f_j, b_Ac,
      proc_control_node_B.Bc_b, proc_control_node_B.iAnew_k, 196, 1.0E-6,
      proc_control_node_B.zopt_o, proc_control_node_B.b_Mlim_e, status);
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 32;
         proc_control_node_B.i_g++) {
      iAout[proc_control_node_B.i_g] =
        (proc_control_node_B.iAnew_k[proc_control_node_B.i_g] != 0);
    }

    proc_control_node_B.ywt_i = std::round(*status);
    if (proc_control_node_B.ywt_i < 2.147483648E+9) {
      if (proc_control_node_B.ywt_i >= -2.147483648E+9) {
        proc_control_node_B.ii = static_cast<int32_T>(proc_control_node_B.ywt_i);
      } else {
        proc_control_node_B.ii = MIN_int32_T;
      }

      if (proc_control_node_B.ywt_i >= -2.147483648E+9) {
        proc_control_node_B.i_g = static_cast<int32_T>(proc_control_node_B.ywt_i);
      } else {
        proc_control_node_B.i_g = MIN_int32_T;
      }
    } else {
      proc_control_node_B.ii = MAX_int32_T;
      proc_control_node_B.i_g = MAX_int32_T;
    }

    if ((proc_control_node_B.ii < 0) || (proc_control_node_B.i_g == 0)) {
      std::memset(&proc_control_node_B.zopt_o[0], 0, 17U * sizeof(real_T));
    }

    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 8;
         proc_control_node_B.i_g++) {
      u[proc_control_node_B.i_g] = (old_u[proc_control_node_B.i_g] +
        proc_control_node_B.zopt_o[proc_control_node_B.i_g]) +
        b_uoff[proc_control_node_B.i_g];
    }

    std::memset(&proc_control_node_B.b_I[0], 0, sizeof(real_T) << 6U);
    proc_control_node_B.i_a = 0;
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 8;
         proc_control_node_B.i_g++) {
      proc_control_node_B.b_I[proc_control_node_B.i_a] = 1.0;
      proc_control_node_B.i_a += 9;
    }

    proc_control_node_kron(b, proc_control_node_B.b_I, proc_control_node_B.dv);
    for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 16;
         proc_control_node_B.ii++) {
      std::memset(&proc_control_node_B.dv2[proc_control_node_B.ii * 80], 0, 80U *
                  sizeof(real_T));
      for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 80;
           proc_control_node_B.i_a++) {
        for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 80;
             proc_control_node_B.i_g++) {
          proc_control_node_B.i5 = 80 * proc_control_node_B.ii +
            proc_control_node_B.i_g;
          proc_control_node_B.dv2[proc_control_node_B.i5] +=
            proc_control_node_B.dv[80 * proc_control_node_B.i_a +
            proc_control_node_B.i_g] * b_Jm[80 * proc_control_node_B.ii +
            proc_control_node_B.i_a];
        }
      }
    }

    for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 8;
         proc_control_node_B.ii++) {
      proc_control_node_B.b_Wu_h[proc_control_node_B.ii] =
        old_u[proc_control_node_B.ii] + b_uoff[proc_control_node_B.ii];
    }

    std::memset(&proc_control_node_B.dv11[0], 0, 80U * sizeof(real_T));
    proc_control_node_B.i_g = 0;
    for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 16;
         proc_control_node_B.i_a++) {
      for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 80;
           proc_control_node_B.ii++) {
        proc_control_node_B.dv11[proc_control_node_B.ii] +=
          proc_control_node_B.dv2[proc_control_node_B.ii +
          proc_control_node_B.i_g] *
          proc_control_node_B.zopt_o[proc_control_node_B.i_a];
      }

      proc_control_node_B.i_g += 80;
    }

    std::memset(&proc_control_node_B.b_I1_g[0], 0, 80U * sizeof(real_T));
    proc_control_node_B.i_g = 0;
    for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 8;
         proc_control_node_B.i_a++) {
      for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 80;
           proc_control_node_B.ii++) {
        proc_control_node_B.b_I1_g[proc_control_node_B.ii] +=
          b_I1[proc_control_node_B.ii + proc_control_node_B.i_g] *
          proc_control_node_B.b_Wu_h[proc_control_node_B.i_a];
      }

      proc_control_node_B.i_g += 80;
    }

    for (proc_control_node_B.ii = 0; proc_control_node_B.ii < 80;
         proc_control_node_B.ii++) {
      proc_control_node_B.dv12[proc_control_node_B.ii] =
        proc_control_node_B.dv11[proc_control_node_B.ii] +
        proc_control_node_B.b_I1_g[proc_control_node_B.ii];
    }

    proc_control_node_B.ii = 0;
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 8;
         proc_control_node_B.i_g++) {
      proc_control_node_B.i_a = 0;
      for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 < 10;
           proc_control_node_B.i5++) {
        useq[proc_control_node_B.i5 + proc_control_node_B.ii] =
          proc_control_node_B.dv12[proc_control_node_B.i_a +
          proc_control_node_B.i_g];
        proc_control_node_B.i_a += 8;
      }

      proc_control_node_B.ii += 11;
    }

    proc_control_node_B.ii = 0;
    for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 8;
         proc_control_node_B.i_g++) {
      proc_control_node_B.b_Wu_h[proc_control_node_B.i_g] =
        useq[proc_control_node_B.ii + 9];
      useq[proc_control_node_B.ii + 10] =
        proc_control_node_B.b_Wu_h[proc_control_node_B.i_g];
      proc_control_node_B.ii += 11;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_isfinite(const real_T x[8],
  boolean_T b[8])
{
  for (int32_T i{0}; i < 8; i++) {
    real_T x_0;
    x_0 = x[i];
    b[i] = ((!std::isinf(x_0)) && (!std::isnan(x_0)));
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_mtimes_f(const real_T
  A_data[], const int32_T A_size[2], real_T C_data[], int32_T C_size[2])
{
  static const int8_T b[1280]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  proc_control_node_B.mc = A_size[0];
  C_size[0] = A_size[0];
  C_size[1] = 16;
  for (int32_T j{0}; j < 16; j++) {
    int32_T boffset;
    int32_T coffset;
    int32_T i;
    coffset = j * proc_control_node_B.mc;
    boffset = j * 80;
    for (i = 0; i < proc_control_node_B.mc; i++) {
      C_data[coffset + i] = 0.0;
    }

    for (i = 0; i < 80; i++) {
      int32_T aoffset;
      int32_T bkj;
      aoffset = i * A_size[0];
      bkj = b[boffset + i];
      for (int32_T b_i{1}; b_i - 1 < proc_control_node_B.mc; b_i++) {
        int32_T tmp;
        tmp = (coffset + b_i) - 1;
        C_data[tmp] += A_data[(aoffset + b_i) - 1] * static_cast<real_T>(bkj);
      }
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control__znlmpc_getUBounds(const real_T
  runtimedata_lastMV[8], const real_T runtimedata_MVMin[80], const real_T
  runtimedata_MVMax[80], const real_T runtimedata_MVRateMin[80], const real_T
  runtimedata_MVRateMax[80], real_T A_data[], int32_T A_size[2], real_T Bu_data[],
  int32_T *Bu_size)
{
  int32_T i;
  boolean_T exitg1;
  std::memset(&proc_control_node_B.Au[0], 0, 25600U * sizeof(real_T));
  std::memset(&proc_control_node_B.b_Bu[0], 0, 320U * sizeof(real_T));
  std::memset(&proc_control_node_B.x[0], 0, 320U * sizeof(boolean_T));
  for (i = 0; i < 8; i++) {
    proc_control_node_B.ic_h[i] = static_cast<real_T>(i) + 1.0;
  }

  std::memset(&proc_control_node_B.As[0], 0, sizeof(int8_T) << 6U);
  i = 0;
  for (proc_control_node_B.idx_c = 0; proc_control_node_B.idx_c < 8;
       proc_control_node_B.idx_c++) {
    proc_control_node_B.As[i] = 1;
    i += 9;
  }

  for (i = 0; i < 64; i++) {
    proc_control_node_B.idx_c = proc_control_node_B.As[i];
    proc_control_node_B.Au_tmp_b[i] = static_cast<int8_T>
      (-proc_control_node_B.idx_c);
    proc_control_node_B.Au_tmp[i] = static_cast<int8_T>
      (proc_control_node_B.idx_c);
  }

  for (proc_control_node_B.idx_c = 0; proc_control_node_B.idx_c < 10;
       proc_control_node_B.idx_c++) {
    for (i = 0; i < 8; i++) {
      proc_control_node_B.runtimedata_MVRateMin[i] = runtimedata_MVRateMin[10 *
        i + proc_control_node_B.idx_c];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_MVRateMin,
      proc_control_node_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_node_B.x[static_cast<int32_T>(proc_control_node_B.ic_h[i]) -
        1] = proc_control_node_B.bv3[i];
      proc_control_node_B.runtimedata_MVRateMin[i] = runtimedata_MVRateMax[10 *
        i + proc_control_node_B.idx_c];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_MVRateMin,
      proc_control_node_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_node_B.x[static_cast<int32_T>(proc_control_node_B.ic_h[i] +
        8.0) - 1] = proc_control_node_B.bv3[i];
      proc_control_node_B.runtimedata_MVRateMin[i] = runtimedata_MVMin[10 * i +
        proc_control_node_B.idx_c];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_MVRateMin,
      proc_control_node_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_node_B.x[static_cast<int32_T>(proc_control_node_B.ic_h[i] +
        16.0) - 1] = proc_control_node_B.bv3[i];
      proc_control_node_B.runtimedata_MVRateMin[i] = runtimedata_MVMax[10 * i +
        proc_control_node_B.idx_c];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_MVRateMin,
      proc_control_node_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_node_B.x[static_cast<int32_T>(proc_control_node_B.ic_h[i] +
        24.0) - 1] = proc_control_node_B.bv3[i];
      for (proc_control_node_B.k_h = 0; proc_control_node_B.k_h < 8;
           proc_control_node_B.k_h++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_h[proc_control_node_B.k_h]) + 320 * i) + 2560 *
          proc_control_node_B.idx_c) - 1] = proc_control_node_B.Au_tmp_b[(i << 3)
          + proc_control_node_B.k_h];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_node_B.k_h = 0; proc_control_node_B.k_h < 8;
           proc_control_node_B.k_h++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_h[proc_control_node_B.k_h] + 8.0) + 320 * i) +
          2560 * proc_control_node_B.idx_c) - 1] = proc_control_node_B.Au_tmp[(i
          << 3) + proc_control_node_B.k_h];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_node_B.k_h = 0; proc_control_node_B.k_h < 8;
           proc_control_node_B.k_h++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_h[proc_control_node_B.k_h] + 16.0) + 320 * i)
          + 2560 * proc_control_node_B.idx_c) - 1] =
          proc_control_node_B.Au_tmp_b[(i << 3) + proc_control_node_B.k_h];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_node_B.k_h = 0; proc_control_node_B.k_h < 8;
           proc_control_node_B.k_h++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_h[proc_control_node_B.k_h] + 24.0) + 320 * i)
          + 2560 * proc_control_node_B.idx_c) - 1] = proc_control_node_B.Au_tmp
          [(i << 3) + proc_control_node_B.k_h];
      }

      proc_control_node_B.b_Bu[static_cast<int32_T>(proc_control_node_B.ic_h[i])
        - 1] = -runtimedata_MVRateMin[10 * i + proc_control_node_B.idx_c];
    }

    for (i = 0; i < 8; i++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>(proc_control_node_B.ic_h[i]
        + 8.0) - 1] = runtimedata_MVRateMax[10 * i + proc_control_node_B.idx_c];
    }

    for (i = 0; i < 8; i++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>(proc_control_node_B.ic_h[i]
        + 16.0) - 1] = -runtimedata_MVMin[10 * i + proc_control_node_B.idx_c];
    }

    for (i = 0; i < 8; i++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>(proc_control_node_B.ic_h[i]
        + 24.0) - 1] = runtimedata_MVMax[10 * i + proc_control_node_B.idx_c];
    }

    if (proc_control_node_B.idx_c + 1 == 1) {
      for (i = 0; i < 8; i++) {
        proc_control_node_B.c_j = runtimedata_lastMV[i];
        proc_control_node_B.runtimedata_MVRateMin[i] = proc_control_node_B.b_Bu[
          static_cast<int32_T>(proc_control_node_B.ic_h[i]) - 1] -
          proc_control_node_B.c_j;
        proc_control_node_B.c_i[i] = proc_control_node_B.c_j;
      }

      for (i = 0; i < 8; i++) {
        proc_control_node_B.b_Bu[static_cast<int32_T>(proc_control_node_B.ic_h[i])
          - 1] = proc_control_node_B.runtimedata_MVRateMin[i];
      }

      for (i = 0; i < 8; i++) {
        proc_control_node_B.runtimedata_MVRateMin[i] = proc_control_node_B.b_Bu[
          static_cast<int32_T>(proc_control_node_B.ic_h[i] + 8.0) - 1] +
          proc_control_node_B.c_i[i];
      }

      for (i = 0; i < 8; i++) {
        proc_control_node_B.b_Bu[static_cast<int32_T>(proc_control_node_B.ic_h[i]
          + 8.0) - 1] = proc_control_node_B.runtimedata_MVRateMin[i];
      }
    } else {
      for (i = 0; i < 8; i++) {
        for (proc_control_node_B.k_h = 0; proc_control_node_B.k_h < 8;
             proc_control_node_B.k_h++) {
          proc_control_node_B.Au[((static_cast<int32_T>
            (proc_control_node_B.ic_h[proc_control_node_B.k_h]) + 320 * i) +
            2560 * (proc_control_node_B.idx_c - 1)) - 1] =
            proc_control_node_B.Au_tmp[(i << 3) + proc_control_node_B.k_h];
        }
      }

      for (i = 0; i < 8; i++) {
        for (proc_control_node_B.k_h = 0; proc_control_node_B.k_h < 8;
             proc_control_node_B.k_h++) {
          proc_control_node_B.Au[((static_cast<int32_T>
            (proc_control_node_B.ic_h[proc_control_node_B.k_h] + 8.0) + 320 * i)
            + 2560 * (proc_control_node_B.idx_c - 1)) - 1] =
            proc_control_node_B.Au_tmp_b[(i << 3) + proc_control_node_B.k_h];
        }
      }
    }

    for (i = 0; i < 8; i++) {
      proc_control_node_B.ic_h[i] += 32.0;
    }
  }

  proc_control_node_B.idx_c = 0;
  i = 0;
  exitg1 = false;
  while ((!exitg1) && (i < 320)) {
    if (proc_control_node_B.x[i]) {
      proc_control_node_B.idx_c++;
      proc_control_node_B.ii_data[proc_control_node_B.idx_c - 1] =
        static_cast<int16_T>(i + 1);
      if (proc_control_node_B.idx_c >= 320) {
        exitg1 = true;
      } else {
        i++;
      }
    } else {
      i++;
    }
  }

  if (1 > proc_control_node_B.idx_c) {
    proc_control_node_B.idx_c = 0;
  }

  if (proc_control_node_B.idx_c > 0) {
    *Bu_size = proc_control_node_B.idx_c;
    for (i = 0; i < proc_control_node_B.idx_c; i++) {
      Bu_data[i] = proc_control_node_B.b_Bu[proc_control_node_B.ii_data[i] - 1];
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_node_B.k_h = 0; proc_control_node_B.k_h < 10;
           proc_control_node_B.k_h++) {
        proc_control_node_B.b_i_i = 0;
        while (proc_control_node_B.b_i_i <= proc_control_node_B.idx_c - 1) {
          proc_control_node_B.Auf_data[(proc_control_node_B.b_i_i +
            proc_control_node_B.idx_c * i) + (proc_control_node_B.idx_c << 3) *
            proc_control_node_B.k_h] = proc_control_node_B.Au[((320 * i +
            proc_control_node_B.ii_data[proc_control_node_B.b_i_i]) + 2560 *
            proc_control_node_B.k_h) - 1];
          proc_control_node_B.b_i_i++;
        }
      }
    }

    proc_control_node_B.idx[0] = proc_control_node_B.idx_c;
    proc_control_node_B.idx[1] = 80;
    proc_control_node_mtimes_f(proc_control_node_B.Auf_data,
      proc_control_node_B.idx, proc_control_node_B.tmp_data_c,
      proc_control_node_B.tmp_size_p);
    A_size[0] = proc_control_node_B.idx_c;
    A_size[1] = 147;
    proc_control_node_B.k_h = proc_control_node_B.idx_c * 130;
    if (0 <= proc_control_node_B.k_h - 1) {
      std::memset(&A_data[0], 0, proc_control_node_B.k_h * sizeof(real_T));
    }

    proc_control_node_B.k_h = proc_control_node_B.idx_c << 4;
    for (i = 0; i < proc_control_node_B.k_h; i++) {
      A_data[i + proc_control_node_B.idx_c * 130] =
        proc_control_node_B.tmp_data_c[i];
    }

    if (0 <= proc_control_node_B.idx_c - 1) {
      std::memset(&A_data[proc_control_node_B.idx_c * 130 +
                  proc_control_node_B.k_h], 0, ((((proc_control_node_B.idx_c +
        proc_control_node_B.idx_c * 130) + proc_control_node_B.k_h) -
        proc_control_node_B.idx_c * 130) - proc_control_node_B.k_h) * sizeof
                  (real_T));
    }
  } else {
    *Bu_size = 0;
    A_size[0] = 0;
    A_size[1] = 211;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_znlmpc_getXUe(const real_T
  z[147], const real_T x[13], real_T X[143], real_T U[88], real_T *e)
{
  static const int8_T y[1280]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  int32_T U_tmp;
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  std::memset(&X[0], 0, 143U * sizeof(real_T));
  std::memset(&proc_control_node_B.Umv[0], 0, 88U * sizeof(real_T));
  std::memset(&proc_control_node_B.y_c[0], 0, 80U * sizeof(real_T));
  i_1 = 0;
  for (i_0 = 0; i_0 < 16; i_0++) {
    for (i = 0; i < 80; i++) {
      proc_control_node_B.y_c[i] += static_cast<real_T>(y[i + i_1]) * z[i_0 +
        130];
    }

    i_1 += 80;
  }

  i = 0;
  for (i_1 = 0; i_1 < 8; i_1++) {
    i_0 = 0;
    for (U_tmp = 0; U_tmp < 10; U_tmp++) {
      proc_control_node_B.Umv[U_tmp + i] = proc_control_node_B.y_c[i_0 + i_1];
      i_0 += 8;
    }

    i += 11;
  }

  *e = z[146];
  std::memcpy(&proc_control_node_B.z_p[0], &z[0], 130U * sizeof(real_T));
  i = 0;
  for (i_1 = 0; i_1 < 10; i_1++) {
    i_0 = 0;
    for (U_tmp = 0; U_tmp < 13; U_tmp++) {
      X[(i_0 + i_1) + 1] = proc_control_node_B.z_p[U_tmp + i];
      i_0 += 11;
    }

    i += 13;
  }

  i = 0;
  for (U_tmp = 0; U_tmp < 13; U_tmp++) {
    X[i] = x[U_tmp];
    i += 11;
  }

  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    proc_control_node_B.Umv[i_1 + 10] = proc_control_node_B.Umv[i_1 + 9];
    std::memcpy(&U[i_1], &proc_control_node_B.Umv[i_1], 11U * sizeof(real_T));
    i_1 += 11;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_stateEvolution(const real_T
  X[143], const real_T U[88], real_T c[130], real_T J[19110])
{
  static const real_T val[104]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.002112443491058583, -0.0015284356933675683, -7.0837403672252151E-6,
    0.0062952228101239545, 0.0019032522297668638, -0.017235611708486639, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021112545591001931, 0.001555652319878204,
    9.371205474517828E-6, -0.0060884483374622281, 0.0019613805650913105,
    -0.017335012146094616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021790267284400532, -0.0015565687047941388, -6.7363334491227172E-6,
    0.00603310470655138, 0.0019031465986279986, 0.017628138981294922, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0021778377964816625, 0.0015275193084516327,
    9.7186123926203251E-6, -0.0063505664410348026, 0.001961274933952446,
    0.017528738543686955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00018196388647192952, -0.00034249251816346321, -0.0020956399000156153,
    -0.026767193546582569, 0.010593667623599361, 6.2021813460420573E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.00018124211550371483, 0.00033877509736010515,
    0.0021100316216985742, 0.026476621250220891, 0.01053788543694033,
    -6.207996116589E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00018538731733468782, 0.00035708122797193444, -0.0021822949502860629,
    0.027907360503893332, -0.010793139553633729, -6.4672437426625527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017781868464095571,
    -0.00035336380716857632, 0.002167903228603104, -0.027616788207531651,
    -0.010338413506905951, 6.4730585132094889E-5 };

  static const int8_T b[1280]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  int32_T Ak1_tmp;
  int32_T Jx_tmp;
  int32_T i;
  int32_T k;
  std::memset(&proc_control_node_B.Jx_c[0], 0, 16900U * sizeof(real_T));
  std::memset(&proc_control_node_B.Jmv[0], 0, 10400U * sizeof(real_T));
  std::memset(&c[0], 0, 130U * sizeof(real_T));
  for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
    proc_control_node_B.ic_a[Jx_tmp] = static_cast<real_T>(Jx_tmp) + 1.0;
  }

  for (Jx_tmp = 0; Jx_tmp < 11; Jx_tmp++) {
    for (i = 0; i < 8; i++) {
      proc_control_node_B.b_U_k[i + (Jx_tmp << 3)] = U[11 * i + Jx_tmp];
    }

    for (i = 0; i < 13; i++) {
      proc_control_node_B.b_X_f[i + 13 * Jx_tmp] = X[11 * i + Jx_tmp];
    }
  }

  for (i = 0; i < 10; i++) {
    proc_cont_AUVQuatJacobianMatrix(&proc_control_node_B.b_X_f[13 * i],
      proc_control_node_B.Ak);
    Ak1_tmp = (i + 1) * 13;
    proc_cont_AUVQuatJacobianMatrix(&proc_control_node_B.b_X_f[Ak1_tmp],
      proc_control_node_B.Ak1);
    Jx_tmp = i << 3;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X_f[13 * i],
      &proc_control_node_B.b_U_k[Jx_tmp], proc_control_node_B.dv18);
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X_f[Ak1_tmp],
      &proc_control_node_B.b_U_k[Jx_tmp], proc_control_node_B.dv19);
    for (k = 0; k < 13; k++) {
      int32_T c_tmp;
      c_tmp = static_cast<int32_T>(proc_control_node_B.ic_a[k]);
      c[c_tmp - 1] = (proc_control_node_B.b_X_f[13 * i + k] +
                      (proc_control_node_B.dv18[k] + proc_control_node_B.dv19[k])
                      * 0.05) - proc_control_node_B.b_X_f[Ak1_tmp + k];
      if (i + 1 > 1) {
        for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
          proc_control_node_B.Jx_c[((static_cast<int32_T>
            (proc_control_node_B.ic_a[Jx_tmp]) + 130 * k) + 1690 * (i - 1)) - 1]
            = proc_control_node_B.Ak[13 * k + Jx_tmp] * 0.05;
        }

        proc_control_node_B.Jx_c[((static_cast<int32_T>
          (proc_control_node_B.ic_a[k]) + 130 * k) + 1690 * (i - 1)) - 1] =
          proc_control_node_B.Jx_c[((130 * k + c_tmp) + (i - 1) * 1690) - 1] +
          1.0;
      }
    }

    for (k = 0; k < 13; k++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_node_B.Jx_c[((static_cast<int32_T>
          (proc_control_node_B.ic_a[Jx_tmp]) + 130 * k) + 1690 * i) - 1] =
          proc_control_node_B.Ak1[13 * k + Jx_tmp] * 0.05;
      }

      Jx_tmp = ((130 * k + static_cast<int32_T>(proc_control_node_B.ic_a[k])) +
                1690 * i) - 1;
      proc_control_node_B.Jx_c[Jx_tmp]--;
    }

    for (k = 0; k < 8; k++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_node_B.Jmv[((static_cast<int32_T>
          (proc_control_node_B.ic_a[Jx_tmp]) + 130 * k) + 1040 * i) - 1] = val
          [13 * k + Jx_tmp];
      }
    }

    for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
      proc_control_node_B.ic_a[Jx_tmp] += 13.0;
    }
  }

  for (Jx_tmp = 0; Jx_tmp < 130; Jx_tmp++) {
    for (i = 0; i < 16; i++) {
      k = (Jx_tmp << 4) + i;
      proc_control_node_B.Jmv_g[k] = 0.0;
      for (Ak1_tmp = 0; Ak1_tmp < 80; Ak1_tmp++) {
        proc_control_node_B.Jmv_g[k] += proc_control_node_B.Jmv[130 * Ak1_tmp +
          Jx_tmp] * static_cast<real_T>(b[80 * i + Ak1_tmp]);
      }
    }

    for (i = 0; i < 130; i++) {
      J[i + 147 * Jx_tmp] = proc_control_node_B.Jx_c[130 * i + Jx_tmp];
    }

    std::memcpy(&J[Jx_tmp * 147 + 130], &proc_control_node_B.Jmv_g[Jx_tmp << 4],
                sizeof(real_T) << 4U);
    J[147 * Jx_tmp + 146] = 0.0;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_all(const boolean_T x[130],
  boolean_T y[13])
{
  int32_T i2;
  i2 = 1;
  for (int32_T i{0}; i < 13; i++) {
    int32_T a;
    int32_T ix;
    boolean_T exitg1;
    y[i] = true;
    a = i2 + 9;
    ix = i2;
    i2 += 10;
    exitg1 = false;
    while ((!exitg1) && (ix <= a)) {
      if (!x[ix - 1]) {
        y[i] = false;
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_any(const boolean_T x
  [26])
{
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  y = false;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k <= 25)) {
    if (x[k]) {
      y = true;
      exitg1 = true;
    } else {
      k++;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_cont_znlmpc_reformJacobian(const real_T
  Jx_data[], const int32_T Jx_size[3], const real_T Jmv_data[], const real_T
  Je_data[], const int32_T *Je_size, real_T Jc_data[], int32_T Jc_size[2])
{
  if (Jx_size[0] == 0) {
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    proc_control_node_B.Jx_m[0] = static_cast<int16_T>(Jx_size[0]);
    proc_control_node_B.Jx_m[1] = 130;
    proc_control_node_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>
      (Jx_size[0]);
    for (proc_control_node_B.i9 = 0; proc_control_node_B.i9 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i9++)
    {
      for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 130;
           proc_control_node_B.i8++) {
        proc_control_node_B.varargin_1_data[proc_control_node_B.i8 + 130 *
          proc_control_node_B.i9] = Jx_data[proc_control_node_B.Jx_m[0] *
          proc_control_node_B.i8 + proc_control_node_B.i9];
      }
    }

    proc_control_node_B.Jx_g[0] = Jx_size[0];
    proc_control_node_B.Jx_g[1] = 80;
    proc_control_node_mtimes_f(Jmv_data, proc_control_node_B.Jx_g,
      proc_control_node_B.tmp_data_b, proc_control_node_B.tmp_size);
    proc_control_node_B.loop_ub_a = proc_control_node_B.tmp_size[0];
    for (proc_control_node_B.i9 = 0; proc_control_node_B.i9 <
         proc_control_node_B.loop_ub_a; proc_control_node_B.i9++) {
      for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 16;
           proc_control_node_B.i8++) {
        proc_control_node_B.varargin_2_data[proc_control_node_B.i8 +
          (proc_control_node_B.i9 << 4)] =
          proc_control_node_B.tmp_data_b[proc_control_node_B.tmp_size[0] *
          proc_control_node_B.i8 + proc_control_node_B.i9];
      }
    }

    if (proc_control_node_B.tmp_size[0] != 0) {
      proc_control_node_B.empty_non_axis_sizes_idx_0 = 16;
    } else {
      proc_control_node_B.empty_non_axis_sizes_idx_0 = 0;
    }

    proc_control_node_B.loop_ub_a = *Je_size;
    if (0 <= proc_control_node_B.loop_ub_a - 1) {
      std::memcpy(&proc_control_node_B.Je_data[0], &Je_data[0],
                  proc_control_node_B.loop_ub_a * sizeof(real_T));
    }

    proc_control_node_B.Jx_m[0] = (static_cast<int16_T>(*Je_size) != 0);
    proc_control_node_B.Jx_m[1] = static_cast<int16_T>(Jx_size[0]);
    Jc_size[0] = (proc_control_node_B.empty_non_axis_sizes_idx_0 +
                  proc_control_node_B.Jx_m[0]) + 130;
    Jc_size[1] = static_cast<int16_T>(Jx_size[0]);
    for (proc_control_node_B.i9 = 0; proc_control_node_B.i9 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i9++)
    {
      for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 130;
           proc_control_node_B.i8++) {
        Jc_data[proc_control_node_B.i8 + Jc_size[0] * proc_control_node_B.i9] =
          proc_control_node_B.varargin_1_data[130 * proc_control_node_B.i9 +
          proc_control_node_B.i8];
      }
    }

    for (proc_control_node_B.i9 = 0; proc_control_node_B.i9 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i9++)
    {
      for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
           proc_control_node_B.empty_non_axis_sizes_idx_0;
           proc_control_node_B.i8++) {
        Jc_data[(proc_control_node_B.i8 + Jc_size[0] * proc_control_node_B.i9) +
          130] = proc_control_node_B.varargin_2_data[(proc_control_node_B.i9 <<
          4) + proc_control_node_B.i8];
      }
    }

    proc_control_node_B.loop_ub_a = static_cast<int16_T>(Jx_size[0]);
    if (0 <= proc_control_node_B.Jx_m[0] - 1) {
      for (proc_control_node_B.i9 = 0; proc_control_node_B.i9 <
           proc_control_node_B.loop_ub_a; proc_control_node_B.i9++) {
        Jc_data[(proc_control_node_B.empty_non_axis_sizes_idx_0 + Jc_size[0] *
                 proc_control_node_B.i9) + 130] =
          proc_control_node_B.Je_data[proc_control_node_B.Jx_m[0] *
          proc_control_node_B.i9];
      }
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_outputBounds(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2], real_T Jc_data[],
  int32_T Jc_size[2])
{
  boolean_T exitg1;
  boolean_T y;
  for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 130;
       proc_control_node_B.i_o++) {
    proc_control_node_B.bv1[proc_control_node_B.i_o] = std::isinf
      (runtimedata_OutputMin[proc_control_node_B.i_o]);
  }

  proc_control_node_all(proc_control_node_B.bv1, proc_control_node_B.x_c);
  y = true;
  proc_control_node_B.d_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.d_k < 13)) {
    if (!proc_control_node_B.x_c[proc_control_node_B.d_k]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_node_B.d_k++;
    }
  }

  if (y) {
    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 130;
         proc_control_node_B.i_o++) {
      proc_control_node_B.bv1[proc_control_node_B.i_o] = std::isinf
        (runtimedata_OutputMax[proc_control_node_B.i_o]);
    }

    proc_control_node_all(proc_control_node_B.bv1, proc_control_node_B.x_c);
    proc_control_node_B.d_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.d_k < 13)) {
      if (!proc_control_node_B.x_c[proc_control_node_B.d_k]) {
        y = false;
        exitg1 = true;
      } else {
        proc_control_node_B.d_k++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 260;
         proc_control_node_B.i_o++) {
      proc_control_node_B.b_c_e[proc_control_node_B.i_o] = 0.0;
      proc_control_node_B.icf_o[proc_control_node_B.i_o] = true;
    }

    std::memset(&proc_control_node_B.Jx[0], 0, 33800U * sizeof(real_T));
    std::memset(&proc_control_node_B.Je[0], 0, 260U * sizeof(int8_T));
    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 13;
         proc_control_node_B.i_o++) {
      proc_control_node_B.ic_k[proc_control_node_B.i_o] = static_cast<real_T>
        (proc_control_node_B.i_o) + 1.0;
    }

    for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 10;
         proc_control_node_B.d_k++) {
      for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 13;
           proc_control_node_B.i_o++) {
        proc_control_node_B.runtimedata_OutputMin_j = runtimedata_OutputMin[10 *
          proc_control_node_B.i_o + proc_control_node_B.d_k];
        proc_control_node_B.icf_o[static_cast<int32_T>
          (proc_control_node_B.ic_k[proc_control_node_B.i_o]) - 1] = ((!std::
          isinf(proc_control_node_B.runtimedata_OutputMin_j)) && (!std::isnan
          (proc_control_node_B.runtimedata_OutputMin_j)));
      }

      for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 13;
           proc_control_node_B.i_o++) {
        proc_control_node_B.runtimedata_OutputMin_j =
          proc_control_node_B.ic_k[proc_control_node_B.i_o];
        proc_control_node_B.runtimedata_OutputMax_g = runtimedata_OutputMax[10 *
          proc_control_node_B.i_o + proc_control_node_B.d_k];
        proc_control_node_B.icf_o[static_cast<int32_T>
          (proc_control_node_B.runtimedata_OutputMin_j + 13.0) - 1] = ((!std::
          isinf(proc_control_node_B.runtimedata_OutputMax_g)) && (!std::isnan
          (proc_control_node_B.runtimedata_OutputMax_g)));
        proc_control_node_B.ic_c[proc_control_node_B.i_o] = static_cast<int32_T>
          (proc_control_node_B.runtimedata_OutputMin_j) - 1;
        proc_control_node_B.ic_c[proc_control_node_B.i_o + 13] =
          static_cast<int32_T>(proc_control_node_B.runtimedata_OutputMin_j +
          13.0) - 1;
      }

      for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 26;
           proc_control_node_B.i_o++) {
        proc_control_node_B.icf_d[proc_control_node_B.i_o] =
          proc_control_node_B.icf_o[proc_control_node_B.ic_c[proc_control_node_B.i_o]];
      }

      if (proc_control_node_any(proc_control_node_B.icf_d)) {
        std::memset(&proc_control_node_B.Ck[0], 0, 169U * sizeof(int8_T));
        for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 13;
             proc_control_node_B.c_k++) {
          proc_control_node_B.Ck[proc_control_node_B.c_k + 13 *
            proc_control_node_B.c_k] = 1;
          proc_control_node_B.b_c_e[static_cast<int32_T>
            (proc_control_node_B.ic_k[proc_control_node_B.c_k]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_node_B.c_k +
             proc_control_node_B.d_k] - e) - X[(11 * proc_control_node_B.c_k +
            proc_control_node_B.d_k) + 1];
        }

        for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 13;
             proc_control_node_B.i_o++) {
          proc_control_node_B.b_c_e[static_cast<int32_T>
            (proc_control_node_B.ic_k[proc_control_node_B.i_o] + 13.0) - 1] =
            (X[(11 * proc_control_node_B.i_o + proc_control_node_B.d_k) + 1] -
             runtimedata_OutputMax[10 * proc_control_node_B.i_o +
             proc_control_node_B.d_k]) - e;
        }

        for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 169;
             proc_control_node_B.i_o++) {
          proc_control_node_B.val[proc_control_node_B.i_o] = static_cast<int8_T>
            (-proc_control_node_B.Ck[proc_control_node_B.i_o]);
        }

        for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 13;
             proc_control_node_B.c_k++) {
          for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 13;
               proc_control_node_B.i_o++) {
            proc_control_node_B.Jx[((static_cast<int32_T>
              (proc_control_node_B.ic_k[proc_control_node_B.i_o]) + 260 *
              proc_control_node_B.c_k) + 3380 * proc_control_node_B.d_k) - 1] =
              proc_control_node_B.val[13 * proc_control_node_B.c_k +
              proc_control_node_B.i_o];
          }
        }

        for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 13;
             proc_control_node_B.c_k++) {
          for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 13;
               proc_control_node_B.i_o++) {
            proc_control_node_B.Jx[((static_cast<int32_T>
              (proc_control_node_B.ic_k[proc_control_node_B.i_o] + 13.0) + 260 *
              proc_control_node_B.c_k) + 3380 * proc_control_node_B.d_k) - 1] =
              proc_control_node_B.Ck[13 * proc_control_node_B.c_k +
              proc_control_node_B.i_o];
          }

          proc_control_node_B.Je[static_cast<int32_T>
            (proc_control_node_B.ic_k[proc_control_node_B.c_k]) - 1] = -1;
        }

        for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 13;
             proc_control_node_B.i_o++) {
          proc_control_node_B.Je[static_cast<int32_T>
            (proc_control_node_B.ic_k[proc_control_node_B.i_o] + 13.0) - 1] = -1;
        }
      }

      for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 13;
           proc_control_node_B.i_o++) {
        proc_control_node_B.ic_k[proc_control_node_B.i_o] += 26.0;
      }
    }

    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 260;
         proc_control_node_B.c_k++) {
      if (proc_control_node_B.icf_o[proc_control_node_B.c_k]) {
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.b_size_idx_0 = proc_control_node_B.d_k;
    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 260;
         proc_control_node_B.c_k++) {
      if (proc_control_node_B.icf_o[proc_control_node_B.c_k]) {
        proc_control_node_B.b_data_m[proc_control_node_B.d_k] =
          static_cast<int16_T>(proc_control_node_B.c_k + 1);
        proc_control_node_B.d_k++;
      }
    }

    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o <
         proc_control_node_B.b_size_idx_0; proc_control_node_B.i_o++) {
      proc_control_node_B.b_c_data_o[proc_control_node_B.i_o] =
        proc_control_node_B.b_c_e[proc_control_node_B.b_data_m[proc_control_node_B.i_o]
        - 1];
    }

    c_size[0] = proc_control_node_B.b_size_idx_0;
    c_size[1] = 1;
    if (0 <= proc_control_node_B.b_size_idx_0 - 1) {
      std::memcpy(&c_data[0], &proc_control_node_B.b_c_data_o[0],
                  proc_control_node_B.b_size_idx_0 * sizeof(real_T));
    }

    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 260;
         proc_control_node_B.c_k++) {
      if (proc_control_node_B.icf_o[proc_control_node_B.c_k]) {
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.b_size_idx_0 = proc_control_node_B.d_k;
    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 260;
         proc_control_node_B.c_k++) {
      if (proc_control_node_B.icf_o[proc_control_node_B.c_k]) {
        proc_control_node_B.d_data[proc_control_node_B.d_k] =
          static_cast<int16_T>(proc_control_node_B.c_k + 1);
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.Jx_size[0] = proc_control_node_B.b_size_idx_0;
    proc_control_node_B.Jx_size[1] = 13;
    proc_control_node_B.Jx_size[2] = 10;
    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 10;
         proc_control_node_B.i_o++) {
      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
           proc_control_node_B.d_k++) {
        for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k <
             proc_control_node_B.b_size_idx_0; proc_control_node_B.c_k++) {
          proc_control_node_B.Jx_data[(proc_control_node_B.c_k +
            proc_control_node_B.b_size_idx_0 * proc_control_node_B.d_k) +
            proc_control_node_B.b_size_idx_0 * 13 * proc_control_node_B.i_o] =
            proc_control_node_B.Jx[((260 * proc_control_node_B.d_k +
            proc_control_node_B.d_data[proc_control_node_B.c_k]) + 3380 *
            proc_control_node_B.i_o) - 1];
        }
      }

      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 8;
           proc_control_node_B.d_k++) {
        for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k <
             proc_control_node_B.b_size_idx_0; proc_control_node_B.c_k++) {
          proc_control_node_B.tmp_data[(proc_control_node_B.c_k +
            proc_control_node_B.b_size_idx_0 * proc_control_node_B.d_k) +
            (proc_control_node_B.b_size_idx_0 << 3) * proc_control_node_B.i_o] =
            0.0;
        }
      }
    }

    proc_control_node_B.b_c_size = proc_control_node_B.b_size_idx_0;
    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o <
         proc_control_node_B.b_size_idx_0; proc_control_node_B.i_o++) {
      proc_control_node_B.b_c_data_o[proc_control_node_B.i_o] =
        proc_control_node_B.Je[proc_control_node_B.d_data[proc_control_node_B.i_o]
        - 1];
    }

    proc_cont_znlmpc_reformJacobian(proc_control_node_B.Jx_data,
      proc_control_node_B.Jx_size, proc_control_node_B.tmp_data,
      proc_control_node_B.b_c_data_o, &proc_control_node_B.b_c_size, Jc_data,
      Jc_size);
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_co_eML_blk_kernel_anonFcn2(const real_T
  runtimedata_x[13], const real_T runtimedata_OutputMin[130], const real_T
  runtimedata_OutputMax[130], const real_T z[147], real_T varargout_1_data[],
  int32_T varargout_1_size[2], real_T varargout_2[130], real_T varargout_3_data[],
  int32_T varargout_3_size[2], real_T varargout_4[19110])
{
  int16_T sizes;
  uint8_T sizes_idx_1;
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_o,
    proc_control_node_B.U_p, &proc_control_node_B.e_h);
  proc_control_nod_stateEvolution(proc_control_node_B.X_o,
    proc_control_node_B.U_p, varargout_2, varargout_4);
  proc_control_node_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_node_B.X_o, proc_control_node_B.e_h,
    proc_control_node_B.varargin_1_data_p, proc_control_node_B.varargin_1_size_k,
    proc_control_node_B.b_varargin_1_data, proc_control_node_B.b_varargin_1_size);
  sizes_idx_1 = ((proc_control_node_B.varargin_1_size_k[0] != 0) &&
                 (proc_control_node_B.varargin_1_size_k[1] != 0));
  if (sizes_idx_1 == 0) {
    proc_control_node_B.sizes_idx_0 = proc_control_node_B.varargin_1_size_k[0];
  } else if ((proc_control_node_B.varargin_1_size_k[0] != 0) &&
             (proc_control_node_B.varargin_1_size_k[1] != 0)) {
    proc_control_node_B.sizes_idx_0 = proc_control_node_B.varargin_1_size_k[0];
  } else {
    proc_control_node_B.sizes_idx_0 = 0;
  }

  varargout_1_size[0] = proc_control_node_B.sizes_idx_0;
  varargout_1_size[1] = sizes_idx_1;
  if ((0 <= sizes_idx_1 - 1) && (0 <= proc_control_node_B.sizes_idx_0 - 1)) {
    std::memcpy(&varargout_1_data[0], &proc_control_node_B.varargin_1_data_p[0],
                proc_control_node_B.sizes_idx_0 * sizeof(real_T));
  }

  if ((proc_control_node_B.b_varargin_1_size[0] != 0) &&
      (proc_control_node_B.b_varargin_1_size[1] != 0)) {
    sizes_idx_1 = static_cast<uint8_T>(proc_control_node_B.b_varargin_1_size[0]);
  } else {
    sizes_idx_1 = 0U;
  }

  varargout_3_size[0] = sizes_idx_1;
  if (sizes_idx_1 == 0) {
    varargout_3_size[1] = proc_control_node_B.b_varargin_1_size[1];
    sizes = static_cast<int16_T>(proc_control_node_B.b_varargin_1_size[1]);
  } else if ((proc_control_node_B.b_varargin_1_size[0] != 0) &&
             (proc_control_node_B.b_varargin_1_size[1] != 0)) {
    varargout_3_size[1] = proc_control_node_B.b_varargin_1_size[1];
    sizes = static_cast<int16_T>(proc_control_node_B.b_varargin_1_size[1]);
  } else {
    varargout_3_size[1] = 0;
    sizes = 0;
  }

  proc_control_node_B.sizes_idx_0 = sizes_idx_1 * sizes;
  if (0 <= proc_control_node_B.sizes_idx_0 - 1) {
    std::memcpy(&varargout_3_data[0], &proc_control_node_B.b_varargin_1_data[0],
                proc_control_node_B.sizes_idx_0 * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_factoryConstruct(int32_T
  nVarMax, int32_T mConstrMax, int32_T mIneq, int32_T mNonlinIneq,
  s_UjlJWoQEHmSUKFcPTad7eC_proc_T *obj)
{
  obj->nVarMax = nVarMax;
  obj->mNonlinIneq = mNonlinIneq;
  obj->mNonlinEq = 130;
  obj->mIneq = mIneq;
  obj->mEq = 130;
  obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
  obj->iNonEq0 = 1;
  obj->sqpFval = 0.0;
  obj->sqpFval_old = 0.0;
  obj->cIneq.size = mIneq;
  obj->cIneq_old.size = mIneq;
  obj->grad.size = nVarMax;
  obj->grad_old.size = nVarMax;
  obj->FunctionEvaluations = 0;
  obj->sqpIterations = 0;
  obj->sqpExitFlag = 0;
  obj->lambdasqp.size = mConstrMax;
  if (0 <= mConstrMax - 1) {
    std::memset(&obj->lambdasqp.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->lambdaStopTest.size = mConstrMax;
  obj->lambdaStopTestPrev.size = mConstrMax;
  obj->steplength = 1.0;
  obj->delta_x.size = nVarMax;
  if (0 <= nVarMax - 1) {
    std::memset(&obj->delta_x.data[0], 0, nVarMax * sizeof(real_T));
  }

  obj->socDirection.size = nVarMax;
  obj->workingset_old.size = mConstrMax;
  if (mNonlinIneq > 0) {
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
  } else {
    obj->JacCineqTrans_old.size[0] = 0;
    obj->JacCineqTrans_old.size[1] = 0;
  }

  obj->JacCeqTrans_old.size[0] = nVarMax;
  obj->JacCeqTrans_old.size[1] = 130;
  obj->gradLag.size = nVarMax;
  obj->delta_gradLag.size = nVarMax;
  obj->xstar.size = nVarMax;
  obj->fstar = 0.0;
  obj->firstorderopt = 0.0;
  obj->lambda.size = mConstrMax;
  if (0 <= mConstrMax - 1) {
    std::memset(&obj->lambda.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->state = 0;
  obj->maxConstr = 0.0;
  obj->iterations = 0;
  obj->searchDir.size = nVarMax;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_cont_factoryConstruct_lnz4(int32_T
  MaxVars, int32_T *obj_grad_size, int32_T *obj_Hx_size, boolean_T
  *obj_hasLinear, int32_T *obj_nvar, int32_T *obj_maxVar, real_T *obj_beta,
  real_T *obj_rho, int32_T *obj_objtype, int32_T *obj_prev_objtype, int32_T
  *obj_prev_nvar, boolean_T *obj_prev_hasLinear, real_T *obj_gammaScalar)
{
  *obj_grad_size = MaxVars;
  *obj_Hx_size = MaxVars - 1;
  *obj_hasLinear = false;
  *obj_nvar = 0;
  *obj_maxVar = MaxVars;
  *obj_beta = 0.0;
  *obj_rho = 0.0;
  *obj_objtype = 3;
  *obj_prev_objtype = 3;
  *obj_prev_nvar = 0;
  *obj_prev_hasLinear = false;
  *obj_gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_con_factoryConstruct_lnz42(int32_T
  mIneqMax, int32_T nVarMax, int32_T mConstrMax, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *obj)
{
  int32_T i;
  obj->mConstr = 0;
  obj->mConstrOrig = 0;
  obj->mConstrMax = mConstrMax;
  obj->nVar = 147;
  obj->nVarOrig = 147;
  obj->nVarMax = nVarMax;
  obj->ldA = nVarMax;
  obj->Aineq.size = mIneqMax * nVarMax;
  obj->bineq.size = mIneqMax;
  obj->Aeq.size = 130 * nVarMax;
  obj->lb.size = nVarMax;
  obj->ub.size = nVarMax;
  obj->indexLB.size = nVarMax;
  obj->indexUB.size = nVarMax;
  obj->indexFixed.size = nVarMax;
  obj->mEqRemoved = 0;
  obj->ATwset.size = nVarMax * mConstrMax;
  obj->bwset.size = mConstrMax;
  obj->nActiveConstr = 0;
  obj->maxConstrWorkspace.size = mConstrMax;
  for (i = 0; i < 5; i++) {
    obj->sizes[i] = 0;
    obj->sizesNormal[i] = 0;
    obj->sizesPhaseOne[i] = 0;
    obj->sizesRegularized[i] = 0;
    obj->sizesRegPhaseOne[i] = 0;
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdx[i] = 0;
    obj->isActiveIdxNormal[i] = 0;
    obj->isActiveIdxPhaseOne[i] = 0;
    obj->isActiveIdxRegularized[i] = 0;
    obj->isActiveIdxRegPhaseOne[i] = 0;
  }

  obj->isActiveConstr.size = mConstrMax;
  obj->Wid.size = mConstrMax;
  obj->Wlocalidx.size = mConstrMax;
  for (i = 0; i < 5; i++) {
    obj->nWConstr[i] = 0;
  }

  obj->probType = 3;
  obj->SLACK0 = 1.0E-5;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_loadProblem
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T mIneq, int32_T mLinIneq, const
   real_T Aineq_data[], int32_T mLB, int32_T mUB, int32_T mFixed, int32_T
   mConstrMax)
{
  int32_T b_idx_col;
  int32_T k;
  b_idx_col = mIneq + mLB;
  k = ((b_idx_col + mUB) + mFixed) + 130;
  obj->mConstr = k;
  obj->mConstrOrig = k;
  obj->mConstrMax = mConstrMax;
  obj->sizes[0] = mFixed;
  obj->sizes[1] = 130;
  obj->sizes[2] = mIneq;
  obj->sizes[3] = mLB;
  obj->sizes[4] = mUB;
  for (k = 0; k < 5; k++) {
    obj->sizesNormal[k] = obj->sizes[k];
  }

  obj->sizesPhaseOne[0] = mFixed;
  obj->sizesPhaseOne[1] = 130;
  obj->sizesPhaseOne[2] = mIneq;
  obj->sizesPhaseOne[3] = mLB + 1;
  obj->sizesPhaseOne[4] = mUB;
  obj->sizesRegularized[0] = mFixed;
  obj->sizesRegularized[1] = 130;
  obj->sizesRegularized[2] = mIneq;
  obj->sizesRegularized[3] = b_idx_col + 260;
  obj->sizesRegularized[4] = mUB;
  obj->sizesRegPhaseOne[0] = mFixed;
  obj->sizesRegPhaseOne[1] = 130;
  obj->sizesRegPhaseOne[2] = mIneq;
  obj->sizesRegPhaseOne[3] = b_idx_col + 261;
  obj->sizesRegPhaseOne[4] = mUB;
  obj->isActiveIdxNormal[0] = 1;
  obj->isActiveIdxNormal[1] = mFixed;
  obj->isActiveIdxNormal[2] = 130;
  obj->isActiveIdxNormal[3] = mIneq;
  obj->isActiveIdxNormal[4] = mLB;
  obj->isActiveIdxNormal[5] = mUB;
  for (k = 0; k < 6; k++) {
    obj->isActiveIdxRegPhaseOne[k] = obj->isActiveIdxNormal[k];
  }

  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdx[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = mLB + 1;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxNormal[k + 1] += obj->isActiveIdxNormal[k];
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdxPhaseOne[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 260;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdxRegularized[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 261;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  if (mIneq > 0) {
    for (b_idx_col = 0; b_idx_col < mLinIneq; b_idx_col++) {
      for (k = 0; k < 147; k++) {
        obj->Aineq.data[k + obj->ldA * b_idx_col] = Aineq_data[mLinIneq * k +
          b_idx_col];
      }
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
int32_T proc_control_nodeModelClass::proc_contr_checkVectorNonFinite(int32_T N,
  const real_T vec_data[], int32_T iv0)
{
  int32_T idx_current;
  int32_T idx_end;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = iv0 - 2;
  idx_end = (iv0 + N) - 1;
  while (allFinite && (idx_current + 2 <= idx_end)) {
    real_T allFinite_tmp;
    allFinite_tmp = vec_data[idx_current + 1];
    allFinite = ((!std::isinf(allFinite_tmp)) && (!std::isnan(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    if (std::isnan(vec_data[idx_current])) {
      status = -3;
    } else if (vec_data[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::computeObjectiveAndUserGradient(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T x[147], real_T
  grad_workspace_data[], real_T *fval, int32_T *status)
{
  static const int8_T b[1280]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T c[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  int32_T i;
  int32_T i_0;
  int32_T obj_objfun_workspace_runtimed_6;
  proc_control_node_znlmpc_getXUe(x, obj_objfun_workspace_runtimedat,
    proc_control_node_B.X_m, proc_control_node_B.U_p2, &proc_control_node_B.e_b);
  std::memset(&proc_control_node_B.gfX[0], 0, 130U * sizeof(real_T));
  std::memset(&proc_control_node_B.gfU[0], 0, 80U * sizeof(real_T));
  proc_control_node_B.fs_o = 0.0;
  for (i_0 = 0; i_0 < 13; i_0++) {
    proc_control_node_B.ix[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 8; i_0++) {
    proc_control_node_B.iu[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 11; i_0++) {
    for (obj_objfun_workspace_runtimed_6 = 0; obj_objfun_workspace_runtimed_6 <
         13; obj_objfun_workspace_runtimed_6++) {
      proc_control_node_B.b_X_c[obj_objfun_workspace_runtimed_6 + 13 * i_0] =
        proc_control_node_B.X_m[11 * obj_objfun_workspace_runtimed_6 + i_0];
    }

    for (obj_objfun_workspace_runtimed_6 = 0; obj_objfun_workspace_runtimed_6 <
         8; obj_objfun_workspace_runtimed_6++) {
      proc_control_node_B.b_U_n[obj_objfun_workspace_runtimed_6 + (i_0 << 3)] =
        proc_control_node_B.U_p2[11 * obj_objfun_workspace_runtimed_6 + i_0];
    }
  }

  for (i = 0; i < 10; i++) {
    proc_control_node_B.wtYerr_j = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
      obj_objfun_workspace_runtimed_6 = 10 * i_0 + i;
      proc_control_node_B.obj_objfun_workspace_runtimed_e =
        obj_objfun_workspace_runtimed_2[obj_objfun_workspace_runtimed_6];
      proc_control_node_B.wtYerr_i = (proc_control_node_B.b_X_c[(i + 1) * 13 +
        i_0] - obj_objfun_workspace_runtimed_1[obj_objfun_workspace_runtimed_6])
        * proc_control_node_B.obj_objfun_workspace_runtimed_e;
      proc_control_node_B.wtYerr_j += proc_control_node_B.wtYerr_i *
        proc_control_node_B.wtYerr_i;
      proc_control_node_B.obj_objfun_workspace_runtimedat[i_0] =
        proc_control_node_B.obj_objfun_workspace_runtimed_e *
        proc_control_node_B.wtYerr_i;
    }

    proc_control_node_B.fs_o += proc_control_node_B.wtYerr_j;
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.wtYerr_j = 0.0;
      for (obj_objfun_workspace_runtimed_6 = 0; obj_objfun_workspace_runtimed_6 <
           13; obj_objfun_workspace_runtimed_6++) {
        proc_control_node_B.wtYerr_j += static_cast<real_T>(c[13 *
          obj_objfun_workspace_runtimed_6 + i_0]) *
          proc_control_node_B.obj_objfun_workspace_runtimedat[obj_objfun_workspace_runtimed_6];
      }

      proc_control_node_B.gfX_f[i_0] = proc_control_node_B.gfX
        [static_cast<int32_T>(proc_control_node_B.ix[i_0]) - 1] +
        proc_control_node_B.wtYerr_j;
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.gfX[static_cast<int32_T>(proc_control_node_B.ix[i_0])
        - 1] = proc_control_node_B.gfX_f[i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.ix[i_0] += 13.0;
    }

    std::memcpy(&proc_control_node_B.umvk_j[0], &proc_control_node_B.b_U_n[i <<
                3], sizeof(real_T) << 3U);
    if (i + 1 == 1) {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.duk_o[i_0] = proc_control_node_B.umvk_j[i_0] -
          obj_objfun_workspace_runtimed_0[i_0];
      }
    } else {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.duk_o[i_0] = proc_control_node_B.umvk_j[i_0] -
          proc_control_node_B.b_U_n[((i - 1) << 3) + i_0];
      }
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      obj_objfun_workspace_runtimed_6 = 10 * i_0 + i;
      proc_control_node_B.obj_objfun_workspace_runtimed_e =
        obj_objfun_workspace_runtimed_3[obj_objfun_workspace_runtimed_6];
      proc_control_node_B.wtYerr_j = (proc_control_node_B.umvk_j[i_0] -
        obj_objfun_workspace_runtimed_5[obj_objfun_workspace_runtimed_6]) *
        proc_control_node_B.obj_objfun_workspace_runtimed_e;
      proc_control_node_B.gfU_c[i_0] = proc_control_node_B.gfU
        [static_cast<int32_T>(proc_control_node_B.iu[i_0]) - 1] +
        proc_control_node_B.obj_objfun_workspace_runtimed_e *
        proc_control_node_B.wtYerr_j;
      proc_control_node_B.umvk_j[i_0] = proc_control_node_B.wtYerr_j;
    }

    proc_control_node_B.wtYerr_j = 0.0;
    proc_control_node_B.obj_objfun_workspace_runtimed_e = 0.0;
    for (i_0 = 0; i_0 < 8; i_0++) {
      real_T duk;
      proc_control_node_B.wtYerr_i = proc_control_node_B.umvk_j[i_0];
      proc_control_node_B.obj_objfun_workspace_runtimed_n =
        obj_objfun_workspace_runtimed_4[10 * i_0 + i];
      proc_control_node_B.gfU[static_cast<int32_T>(proc_control_node_B.iu[i_0])
        - 1] = proc_control_node_B.gfU_c[i_0];
      duk = proc_control_node_B.obj_objfun_workspace_runtimed_n *
        proc_control_node_B.duk_o[i_0];
      proc_control_node_B.wtYerr_j += proc_control_node_B.wtYerr_i *
        proc_control_node_B.wtYerr_i;
      proc_control_node_B.obj_objfun_workspace_runtimed_e += duk * duk;
      proc_control_node_B.umvk_j[i_0] =
        proc_control_node_B.obj_objfun_workspace_runtimed_n * duk;
      proc_control_node_B.duk_o[i_0] = duk;
    }

    proc_control_node_B.fs_o = (proc_control_node_B.fs_o +
      proc_control_node_B.wtYerr_j) +
      proc_control_node_B.obj_objfun_workspace_runtimed_e;
    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.gfU_c[i_0] = proc_control_node_B.gfU
        [static_cast<int32_T>(proc_control_node_B.iu[i_0]) - 1] +
        proc_control_node_B.umvk_j[i_0];
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.gfU[static_cast<int32_T>(proc_control_node_B.iu[i_0])
        - 1] = proc_control_node_B.gfU_c[i_0];
    }

    if (i + 1 > 1) {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.gfU_tmp[i_0] = static_cast<int32_T>
          (proc_control_node_B.iu[i_0] - 8.0);
      }

      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.gfU_c[i_0] =
          proc_control_node_B.gfU[proc_control_node_B.gfU_tmp[i_0] - 1] -
          proc_control_node_B.umvk_j[i_0];
      }

      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.gfU[proc_control_node_B.gfU_tmp[i_0] - 1] =
          proc_control_node_B.gfU_c[i_0];
      }
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.iu[i_0] += 8.0;
    }
  }

  *fval = 100000.0 * proc_control_node_B.e_b * proc_control_node_B.e_b +
    proc_control_node_B.fs_o;
  for (i_0 = 0; i_0 < 16; i_0++) {
    proc_control_node_B.wtYerr_j = 0.0;
    obj_objfun_workspace_runtimed_6 = 0;
    for (i = 0; i < 80; i++) {
      proc_control_node_B.wtYerr_j += static_cast<real_T>
        (b[obj_objfun_workspace_runtimed_6 + i_0]) * (2.0 *
        proc_control_node_B.gfU[i]);
      obj_objfun_workspace_runtimed_6 += 16;
    }

    proc_control_node_B.b_f[i_0] = proc_control_node_B.wtYerr_j;
  }

  for (i_0 = 0; i_0 < 130; i_0++) {
    proc_control_node_B.b_x[i_0] = 2.0 * proc_control_node_B.gfX[i_0];
  }

  std::memcpy(&proc_control_node_B.b_x[130], &proc_control_node_B.b_f[0], sizeof
              (real_T) << 4U);
  proc_control_node_B.b_x[146] = 200000.0 * proc_control_node_B.e_b;
  std::memcpy(&grad_workspace_data[0], &proc_control_node_B.b_x[0], 147U *
              sizeof(real_T));
  if (std::isinf(*fval) || std::isnan(*fval)) {
    if (std::isnan(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    *status = proc_contr_checkVectorNonFinite(147, grad_workspace_data, 1);
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
int32_T proc_control_nodeModelClass::proc_con_checkVectorNonFinite_g(const
  real_T vec[130])
{
  int32_T idx_current;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = -1;
  while (allFinite && (idx_current + 2 <= 130)) {
    real_T allFinite_tmp;
    allFinite_tmp = vec[idx_current + 1];
    allFinite = ((!std::isinf(allFinite_tmp)) && (!std::isnan(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    if (std::isnan(vec[idx_current])) {
      status = -3;
    } else if (vec[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S268>/NLMPC'
int32_T proc_control_nodeModelClass::proc_contr_checkMatrixNonFinite(int32_T
  ncols, const real_T mat_data[], int32_T col0, int32_T ldm)
{
  int32_T col;
  int32_T col_end;
  int32_T idx_mat;
  int32_T row;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  row = -1;
  col = col0;
  col_end = (col0 + ncols) - 1;
  while (allFinite && (col <= col_end)) {
    row = -1;
    while (allFinite && (row + 2 <= 147)) {
      idx_mat = ((col - 1) * ldm + row) + 1;
      allFinite = ((!std::isinf(mat_data[idx_mat])) && (!std::isnan
        (mat_data[idx_mat])));
      row++;
    }

    col++;
  }

  if (!allFinite) {
    idx_mat = (col - 2) * ldm + row;
    if (std::isnan(mat_data[idx_mat])) {
      status = -3;
    } else if (mat_data[idx_mat] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S268>/NLMPC'
int32_T proc_control_nodeModelClass::computeConstraintsAndUserJacobi(const
  real_T obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[147],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
  JacEqTrans_workspace_data[], int32_T ldJE)
{
  int32_T status;
  if (obj_mCineq > 0) {
    proc_co_eML_blk_kernel_anonFcn2(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_node_B.a__3_data, proc_control_node_B.a__3_size,
      proc_control_node_B.b_x_k, proc_control_node_B.a__4_data,
      proc_control_node_B.a__4_size, proc_control_node_B.JacEqTrans_tmp);
    proc_control_node_B.b_k = 0;
    while (proc_control_node_B.b_k <= obj_mCineq - 1) {
      Cineq_workspace_data[(ineq0 + proc_control_node_B.b_k) - 1] =
        proc_control_node_B.a__3_data[proc_control_node_B.b_k];
      proc_control_node_B.b_k++;
    }

    std::memcpy(&Ceq_workspace[0], &proc_control_node_B.b_x_k[0], 130U * sizeof
                (real_T));
    proc_control_node_B.b_k = 0;
    while (proc_control_node_B.b_k <= proc_control_node_B.a__4_size[0] - 1) {
      proc_control_node_B.c_idx_col = 0;
      while (proc_control_node_B.c_idx_col <= proc_control_node_B.a__4_size[1] -
             1) {
        JacIneqTrans_workspace_data[proc_control_node_B.b_k + ldJI * ((iJI_col +
          proc_control_node_B.c_idx_col) - 1)] =
          proc_control_node_B.a__4_data[proc_control_node_B.a__4_size[0] *
          proc_control_node_B.c_idx_col + proc_control_node_B.b_k];
        proc_control_node_B.c_idx_col++;
      }

      proc_control_node_B.b_k++;
    }

    for (proc_control_node_B.b_k = 0; proc_control_node_B.b_k < 147;
         proc_control_node_B.b_k++) {
      for (proc_control_node_B.c_idx_col = 0; proc_control_node_B.c_idx_col <
           130; proc_control_node_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_node_B.b_k + ldJE *
          proc_control_node_B.c_idx_col] = proc_control_node_B.JacEqTrans_tmp
          [147 * proc_control_node_B.c_idx_col + proc_control_node_B.b_k];
      }
    }
  } else {
    proc_co_eML_blk_kernel_anonFcn2(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_node_B.a__3_data, proc_control_node_B.a__3_size,
      proc_control_node_B.b_x_k, proc_control_node_B.a__4_data,
      proc_control_node_B.a__4_size, proc_control_node_B.JacEqTrans_tmp);
    std::memcpy(&Ceq_workspace[0], &proc_control_node_B.b_x_k[0], 130U * sizeof
                (real_T));
    for (proc_control_node_B.b_k = 0; proc_control_node_B.b_k < 147;
         proc_control_node_B.b_k++) {
      for (proc_control_node_B.c_idx_col = 0; proc_control_node_B.c_idx_col <
           130; proc_control_node_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_node_B.b_k + ldJE *
          proc_control_node_B.c_idx_col] = proc_control_node_B.JacEqTrans_tmp
          [147 * proc_control_node_B.c_idx_col + proc_control_node_B.b_k];
      }
    }
  }

  status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = proc_con_checkVectorNonFinite_g(Ceq_workspace);
    if (status == 1) {
      status = proc_contr_checkMatrixNonFinite(obj_mCineq,
        JacIneqTrans_workspace_data, iJI_col, ldJI);
      if (status == 1) {
        status = proc_contr_checkMatrixNonFinite(130, JacEqTrans_workspace_data,
          1, ldJE);
      }
    }
  }

  return status;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::evalObjAndConstrAndDerivatives(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[147],
  real_T grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0,
  real_T Ceq_workspace[130], real_T JacIneqTrans_workspace_data[], int32_T
  iJI_col, int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T ldJE,
  real_T *fval, int32_T *status)
{
  computeObjectiveAndUserGradient(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x,
    grad_workspace_data, fval, status);
  if (*status == 1) {
    *status = computeConstraintsAndUserJacobi(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace,
      JacIneqTrans_workspace_data, iJI_col, ldJI, JacEqTrans_workspace_data,
      ldJE);
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_c_updateWorkingSetForNewQP(const real_T
  xk[147], s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, int32_T mIneq, const
  real_T cIneq_data[], const real_T cEq[130], int32_T mLB, const real_T lb[147],
  int32_T mUB, int32_T mFixed)
{
  int32_T b_idx;
  int32_T iEq0;
  int32_T iw0;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (b_idx = 0; b_idx < 130; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    std::memcpy(&WorkingSet->ATwset.data[iw0], &WorkingSet->Aeq.data[iEq0], 147U
                * sizeof(real_T));
    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (b_idx = 0; b_idx < mIneq; b_idx++) {
    WorkingSet->bineq.data[b_idx] = -cIneq_data[b_idx];
  }

  for (b_idx = 0; b_idx < mLB; b_idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[b_idx] - 1] = -lb
      [WorkingSet->indexLB.data[b_idx] - 1] + xk[WorkingSet->indexLB.data[b_idx]
      - 1];
  }

  for (b_idx = 0; b_idx < mUB; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[b_idx] - 1];
  }

  for (b_idx = 0; b_idx < mFixed; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[b_idx] - 1];
    WorkingSet->bwset.data[b_idx] = (rtInf) - xk[WorkingSet->
      indexFixed.data[b_idx] - 1];
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_co_modifyOverheadPhaseOne_
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj)
{
  int32_T idx;
  for (idx = 0; idx < obj->sizes[0]; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * idx) - 1] = 0.0;
  }

  for (idx = 0; idx < 130; idx++) {
    int32_T idxEq;
    idxEq = (obj->ldA * idx + obj->nVar) - 1;
    obj->Aeq.data[idxEq] = 0.0;
    obj->ATwset.data[idxEq + obj->ldA * (obj->isActiveIdx[1] - 1)] = 0.0;
  }

  for (idx = 0; idx < obj->sizes[2]; idx++) {
    obj->Aineq.data[(obj->nVar + obj->ldA * idx) - 1] = -1.0;
  }

  obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
  obj->lb.data[obj->nVar - 1] = 1.0E-5;
  for (idx = obj->isActiveIdx[2]; idx <= obj->nActiveConstr; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * (idx - 1)) - 1] = -1.0;
  }

  if (obj->nWConstr[4] > 0) {
    for (idx = 0; idx <= obj->sizesNormal[4]; idx++) {
      obj->isActiveConstr.data[(obj->isActiveIdx[4] + idx) - 1] = false;
    }
  }

  obj->isActiveConstr.data[obj->isActiveIdx[4] - 2] = false;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_setProblemType
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T PROBLEM_TYPE)
{
  switch (PROBLEM_TYPE) {
   case 3:
    {
      int32_T d_idx_row;
      obj->nVar = 147;
      obj->mConstr = obj->mConstrOrig;
      if (obj->nWConstr[4] > 0) {
        for (int32_T mIneq{-1}; mIneq < obj->sizesNormal[4] - 1; mIneq++) {
          obj->isActiveConstr.data[obj->isActiveIdxNormal[4] + mIneq] =
            obj->isActiveConstr.data[obj->isActiveIdx[4] + mIneq];
        }
      }

      for (d_idx_row = 0; d_idx_row < 5; d_idx_row++) {
        obj->sizes[d_idx_row] = obj->sizesNormal[d_idx_row];
      }

      for (d_idx_row = 0; d_idx_row < 6; d_idx_row++) {
        obj->isActiveIdx[d_idx_row] = obj->isActiveIdxNormal[d_idx_row];
      }
    }
    break;

   case 1:
    {
      int32_T d_idx_row;
      obj->nVar = 148;
      obj->mConstr = obj->mConstrOrig + 1;
      for (d_idx_row = 0; d_idx_row < 5; d_idx_row++) {
        obj->sizes[d_idx_row] = obj->sizesPhaseOne[d_idx_row];
      }

      for (d_idx_row = 0; d_idx_row < 6; d_idx_row++) {
        obj->isActiveIdx[d_idx_row] = obj->isActiveIdxPhaseOne[d_idx_row];
      }

      proc_co_modifyOverheadPhaseOne_(obj);
    }
    break;

   case 2:
    {
      int32_T d_idx_row;
      obj->nVar = obj->nVarMax - 1;
      obj->mConstr = obj->mConstrMax - 1;
      for (d_idx_row = 0; d_idx_row < 5; d_idx_row++) {
        obj->sizes[d_idx_row] = obj->sizesRegularized[d_idx_row];
      }

      if (obj->probType != 4) {
        int32_T c_idx;
        int32_T colOffsetATw;
        int32_T colOffsetAeq;
        int32_T mIneq;
        mIneq = obj->sizes[2] + 148;
        for (c_idx = 0; c_idx < obj->sizes[0]; c_idx++) {
          colOffsetATw = obj->ldA * c_idx;
          for (colOffsetAeq = 148; colOffsetAeq <= obj->nVar; colOffsetAeq++) {
            obj->ATwset.data[(colOffsetAeq + colOffsetATw) - 1] = 0.0;
          }
        }

        for (colOffsetATw = 0; colOffsetATw <= mIneq - 149; colOffsetATw++) {
          c_idx = obj->ldA * colOffsetATw - 1;
          for (d_idx_row = 148; d_idx_row <= colOffsetATw + 147; d_idx_row++) {
            obj->Aineq.data[d_idx_row + c_idx] = 0.0;
          }

          obj->Aineq.data[(colOffsetATw + c_idx) + 148] = -1.0;
          for (colOffsetAeq = colOffsetATw + 149; colOffsetAeq <= obj->nVar;
               colOffsetAeq++) {
            obj->Aineq.data[colOffsetAeq + c_idx] = 0.0;
          }
        }

        for (c_idx = 0; c_idx < 130; c_idx++) {
          int32_T b_tmp;
          colOffsetAeq = obj->ldA * c_idx - 1;
          colOffsetATw = (obj->isActiveIdx[1] - 1) * obj->ldA + colOffsetAeq;
          for (d_idx_row = 148; d_idx_row < mIneq; d_idx_row++) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
          }

          d_idx_row = mIneq;
          b_tmp = mIneq + c_idx;
          while (d_idx_row <= b_tmp - 1) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
            d_idx_row++;
          }

          obj->Aeq.data[b_tmp + colOffsetAeq] = -1.0;
          obj->ATwset.data[b_tmp + colOffsetATw] = -1.0;
          for (d_idx_row = b_tmp + 1; d_idx_row <= mIneq + 129; d_idx_row++) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
          }

          d_idx_row = mIneq + 130;
          b_tmp = mIneq + c_idx;
          while (d_idx_row <= b_tmp + 129) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
            d_idx_row++;
          }

          obj->Aeq.data[((mIneq + c_idx) + colOffsetAeq) + 130] = 1.0;
          d_idx_row = mIneq + c_idx;
          obj->ATwset.data[(d_idx_row + colOffsetATw) + 130] = 1.0;
          for (d_idx_row += 131; d_idx_row <= obj->nVar; d_idx_row++) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
          }
        }

        colOffsetATw = 147;
        for (c_idx = obj->sizesNormal[3]; c_idx < obj->sizesRegularized[3];
             c_idx++) {
          colOffsetATw++;
          obj->indexLB.data[c_idx] = colOffsetATw;
        }

        if (obj->nWConstr[4] > 0) {
          for (colOffsetATw = -1; colOffsetATw < obj->sizesRegularized[4] - 1;
               colOffsetATw++) {
            obj->isActiveConstr.data[(obj->isActiveIdxRegularized[4] +
              colOffsetATw) + 1] = obj->isActiveConstr.data[obj->isActiveIdx[4]
              + colOffsetATw];
          }
        }

        for (colOffsetATw = obj->isActiveIdx[4]; colOffsetATw <
             obj->isActiveIdxRegularized[4]; colOffsetATw++) {
          obj->isActiveConstr.data[colOffsetATw - 1] = false;
        }

        for (colOffsetATw = 148; colOffsetATw <= mIneq + 259; colOffsetATw++) {
          obj->lb.data[colOffsetATw - 1] = 0.0;
        }

        for (mIneq = obj->isActiveIdx[2] - 1; mIneq < obj->nActiveConstr; mIneq
             ++) {
          colOffsetATw = obj->ldA * mIneq - 1;
          if (obj->Wid.data[mIneq] == 3) {
            for (c_idx = 148; c_idx <= obj->Wlocalidx.data[mIneq] + 146; c_idx++)
            {
              obj->ATwset.data[c_idx + colOffsetATw] = 0.0;
            }

            obj->ATwset.data[(obj->Wlocalidx.data[mIneq] + colOffsetATw) + 147] =
              -1.0;
            for (c_idx = obj->Wlocalidx.data[mIneq] + 148; c_idx <= obj->nVar;
                 c_idx++) {
              obj->ATwset.data[c_idx + colOffsetATw] = 0.0;
            }
          } else {
            for (c_idx = 148; c_idx <= obj->nVar; c_idx++) {
              obj->ATwset.data[c_idx + colOffsetATw] = 0.0;
            }
          }
        }
      }

      for (d_idx_row = 0; d_idx_row < 6; d_idx_row++) {
        obj->isActiveIdx[d_idx_row] = obj->isActiveIdxRegularized[d_idx_row];
      }
    }
    break;

   default:
    {
      int32_T d_idx_row;
      obj->nVar = obj->nVarMax;
      obj->mConstr = obj->mConstrMax;
      for (d_idx_row = 0; d_idx_row < 5; d_idx_row++) {
        obj->sizes[d_idx_row] = obj->sizesRegPhaseOne[d_idx_row];
      }

      for (d_idx_row = 0; d_idx_row < 6; d_idx_row++) {
        obj->isActiveIdx[d_idx_row] = obj->isActiveIdxRegPhaseOne[d_idx_row];
      }

      proc_co_modifyOverheadPhaseOne_(obj);
    }
    break;
  }

  obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_initActiveSet
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj)
{
  proc_control_nod_setProblemType(obj, 3);
  proc_control_node_B.nWFixed = obj->isActiveIdx[2];
  while (proc_control_node_B.nWFixed <= obj->mConstrMax) {
    obj->isActiveConstr.data[proc_control_node_B.nWFixed - 1] = false;
    proc_control_node_B.nWFixed++;
  }

  obj->nWConstr[0] = obj->sizes[0];
  obj->nWConstr[1] = 130;
  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + 130;
  proc_control_node_B.nWFixed = obj->sizes[0];
  proc_control_node_B.b_idx_local = 0;
  while (proc_control_node_B.b_idx_local <= proc_control_node_B.nWFixed - 1) {
    obj->Wid.data[proc_control_node_B.b_idx_local] = 1;
    obj->Wlocalidx.data[proc_control_node_B.b_idx_local] =
      proc_control_node_B.b_idx_local + 1;
    obj->isActiveConstr.data[proc_control_node_B.b_idx_local] = true;
    proc_control_node_B.iAeq0 = obj->ldA * proc_control_node_B.b_idx_local - 1;
    proc_control_node_B.iATw0 = 0;
    while (proc_control_node_B.iATw0 <= obj->
           indexFixed.data[proc_control_node_B.b_idx_local] - 2) {
      obj->ATwset.data[(proc_control_node_B.iATw0 + proc_control_node_B.iAeq0) +
        1] = 0.0;
      proc_control_node_B.iATw0++;
    }

    obj->ATwset.data[obj->indexFixed.data[proc_control_node_B.b_idx_local] +
      proc_control_node_B.iAeq0] = 1.0;
    proc_control_node_B.iATw0 = obj->
      indexFixed.data[proc_control_node_B.b_idx_local] + 1;
    while (proc_control_node_B.iATw0 <= obj->nVar) {
      obj->ATwset.data[proc_control_node_B.iATw0 + proc_control_node_B.iAeq0] =
        0.0;
      proc_control_node_B.iATw0++;
    }

    obj->bwset.data[proc_control_node_B.b_idx_local] = obj->ub.data
      [obj->indexFixed.data[proc_control_node_B.b_idx_local] - 1];
    proc_control_node_B.b_idx_local++;
  }

  for (proc_control_node_B.b_idx_local = 0; proc_control_node_B.b_idx_local <
       130; proc_control_node_B.b_idx_local++) {
    proc_control_node_B.idx_global = proc_control_node_B.nWFixed +
      proc_control_node_B.b_idx_local;
    obj->Wid.data[proc_control_node_B.idx_global] = 2;
    obj->Wlocalidx.data[proc_control_node_B.idx_global] =
      proc_control_node_B.b_idx_local + 1;
    obj->isActiveConstr.data[proc_control_node_B.idx_global] = true;
    proc_control_node_B.iAeq0 = obj->ldA * proc_control_node_B.b_idx_local;
    proc_control_node_B.iATw0 = obj->ldA * proc_control_node_B.idx_global;
    for (int32_T c_i{0}; c_i < obj->nVar; c_i++) {
      obj->ATwset.data[proc_control_node_B.iATw0 + c_i] = obj->
        Aeq.data[proc_control_node_B.iAeq0 + c_i];
    }

    obj->bwset.data[proc_control_node_B.idx_global] = obj->
      beq[proc_control_node_B.b_idx_local];
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_contro_factoryConstruct_ln(int32_T
  maxRows, int32_T maxCols, int32_T *obj_ldq, int32_T obj_QR_size[2], real_T
  obj_Q_data[], int32_T obj_Q_size[2], int32_T obj_jpvt_data[], int32_T
  *obj_jpvt_size, int32_T *obj_mrows, int32_T *obj_ncols, int32_T *obj_tau_size,
  int32_T *obj_minRowCol, boolean_T *obj_usedPivoting)
{
  int32_T loop_ub;
  *obj_ldq = maxRows;
  obj_QR_size[0] = maxRows;
  obj_QR_size[1] = maxCols;
  obj_Q_size[0] = maxRows;
  obj_Q_size[1] = maxRows;
  loop_ub = maxRows * maxRows - 1;
  if (0 <= loop_ub) {
    std::memset(&obj_Q_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  *obj_jpvt_size = maxCols;
  if (0 <= maxCols - 1) {
    std::memset(&obj_jpvt_data[0], 0, maxCols * sizeof(int32_T));
  }

  *obj_mrows = 0;
  *obj_ncols = 0;
  if (maxRows <= maxCols) {
    *obj_tau_size = maxRows;
  } else {
    *obj_tau_size = maxCols;
  }

  *obj_minRowCol = 0;
  *obj_usedPivoting = false;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_contr_factoryConstruct_lnz(int32_T
  MaxDims, int32_T obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims,
  int32_T *obj_info, real_T *obj_scaleFactor, boolean_T *obj_ConvexCheck, real_T
  *obj_regTol_, real_T *obj_workspace_, real_T *obj_workspace2_)
{
  obj_FMat_size[0] = MaxDims;
  obj_FMat_size[1] = MaxDims;
  *obj_ldm = MaxDims;
  *obj_ndims = 0;
  *obj_info = 0;
  *obj_scaleFactor = 0.0;
  *obj_ConvexCheck = true;
  *obj_regTol_ = (rtInf);
  *obj_workspace_ = (rtInf);
  *obj_workspace2_ = (rtInf);
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_m(int32_T m, int32_T n,
  const real_T A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    ix = ix0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_computeGradLag(real_T
  workspace_data[], int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T
  mIneq, const real_T AineqTrans_data[], const real_T AeqTrans_data[], const
  int32_T finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[],
  int32_T mLB, const int32_T finiteUB_data[], int32_T mUB, const real_T
  lambda_data[])
{
  int32_T c_idx;
  int32_T iL0;
  for (iL0 = 0; iL0 < nVar; iL0++) {
    workspace_data[iL0] = grad_data[iL0];
  }

  for (iL0 = 0; iL0 < mFixed; iL0++) {
    workspace_data[finiteFixed_data[iL0] - 1] += lambda_data[iL0];
  }

  proc_control_node_xgemv_m(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed +
    1, workspace_data);
  proc_control_node_xgemv_m(nVar, mIneq, AineqTrans_data, ldA, lambda_data,
    mFixed + 131, workspace_data);
  iL0 = (mFixed + mIneq) + 130;
  for (c_idx = 0; c_idx < mLB; c_idx++) {
    workspace_data[finiteLB_data[c_idx] - 1] -= lambda_data[iL0];
    iL0++;
  }

  for (c_idx = 0; c_idx < mUB; c_idx++) {
    workspace_data[finiteUB_data[c_idx] - 1] += lambda_data[iL0];
    iL0++;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc_con_computePrimalFeasError(const real_T
  x[147], int32_T mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[],
  const real_T cEq[130], const int32_T finiteLB_data[], int32_T mLB, const
  real_T lb[147], const int32_T finiteUB_data[], int32_T mUB)
{
  real_T feasError;
  int32_T idx;
  int32_T mIneq;
  feasError = 0.0;
  mIneq = mNonlinIneq + mLinIneq;
  for (idx = 0; idx < 130; idx++) {
    feasError = std::fmax(feasError, std::abs(cEq[idx]));
  }

  for (idx = 0; idx < mIneq; idx++) {
    feasError = std::fmax(feasError, cIneq_data[idx]);
  }

  for (mIneq = 0; mIneq < mLB; mIneq++) {
    feasError = std::fmax(feasError, lb[finiteLB_data[mIneq] - 1] -
                          x[finiteLB_data[mIneq] - 1]);
  }

  for (mIneq = 0; mIneq < mUB; mIneq++) {
    feasError = std::fmax(feasError, x[finiteUB_data[mIneq] - 1] - (rtInf));
  }

  return feasError;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_contr_computeDualFeasError(int32_T nVar,
  const real_T gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!std::isinf(gradLag_data[b_idx])) && (!std::isnan
                (gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      *val = std::fmax(*val, std::abs(gradLag_data[b_idx]));
      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_saveJacobian
  (s_UjlJWoQEHmSUKFcPTad7eC_proc_T *obj, int32_T nVar, int32_T mIneq, const
   real_T JacCineqTrans_data[], int32_T ineqCol0, const real_T JacCeqTrans_data[],
   int32_T ldJ)
{
  int32_T b;
  int32_T iCol;
  int32_T iCol_old;
  int32_T idx_col;
  iCol = (ineqCol0 - 1) * ldJ;
  iCol_old = -1;
  b = mIneq - ineqCol0;
  for (idx_col = 0; idx_col <= b; idx_col++) {
    int32_T loop_ub_tmp;
    int32_T y_size_idx_0;
    int32_T y_size_idx_1;
    y_size_idx_0 = obj->JacCineqTrans_old.size[0];
    y_size_idx_1 = obj->JacCineqTrans_old.size[1];
    loop_ub_tmp = obj->JacCineqTrans_old.size[0] * obj->JacCineqTrans_old.size[1];
    if (0 <= loop_ub_tmp - 1) {
      std::memcpy(&proc_control_node_B.y_data[0], &obj->JacCineqTrans_old.data[0],
                  loop_ub_tmp * sizeof(real_T));
    }

    for (loop_ub_tmp = 1; loop_ub_tmp - 1 < nVar; loop_ub_tmp++) {
      proc_control_node_B.y_data[iCol_old + loop_ub_tmp] = JacCineqTrans_data
        [(iCol + loop_ub_tmp) - 1];
    }

    obj->JacCineqTrans_old.size[1] = y_size_idx_1;
    y_size_idx_0 *= y_size_idx_1;
    if (0 <= y_size_idx_0 - 1) {
      std::memcpy(&obj->JacCineqTrans_old.data[0], &proc_control_node_B.y_data[0],
                  y_size_idx_0 * sizeof(real_T));
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }

  iCol = -1;
  iCol_old = -1;
  for (b = 0; b < 130; b++) {
    for (idx_col = 1; idx_col - 1 < nVar; idx_col++) {
      obj->JacCeqTrans_old.data[iCol_old + idx_col] = JacCeqTrans_data[iCol +
        idx_col];
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_saveState
  (s_UjlJWoQEHmSUKFcPTad7eC_proc_T *obj)
{
  int32_T k;
  int32_T y_size_idx_0;
  obj->sqpFval_old = obj->sqpFval;
  for (k = 0; k < 147; k++) {
    obj->xstarsqp_old[k] = obj->xstarsqp[k];
    obj->grad_old.data[k] = obj->grad.data[k];
  }

  y_size_idx_0 = obj->cIneq_old.size;
  if (0 <= obj->cIneq_old.size - 1) {
    std::memcpy(&proc_control_node_B.y_data_g[0], &obj->cIneq_old.data[0],
                obj->cIneq_old.size * sizeof(real_T));
  }

  for (k = 0; k < obj->mIneq; k++) {
    proc_control_node_B.y_data_g[k] = obj->cIneq.data[k];
  }

  if (0 <= y_size_idx_0 - 1) {
    std::memcpy(&obj->cIneq_old.data[0], &proc_control_node_B.y_data_g[0],
                y_size_idx_0 * sizeof(real_T));
  }

  std::memcpy(&obj->cEq_old[0], &obj->cEq[0], 130U * sizeof(real_T));
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc_control__computeComplError(const
  int32_T *fscales_lineq_constraint_size, const int32_T
  *fscales_cineq_constraint_size, const real_T xCurrent[147], int32_T mIneq,
  const real_T cIneq_data[], const int32_T finiteLB_data[], int32_T mLB, const
  real_T lb[147], const int32_T finiteUB_data[], int32_T mUB, const real_T
  lambda_data[], int32_T iL0)
{
  real_T nlpComplError;
  nlpComplError = 0.0;
  if ((mIneq + mLB) + mUB > 0) {
    real_T lbLambda;
    real_T ubLambda;
    int32_T iLineq0;
    int32_T lbOffset;
    int32_T mLinIneq;
    for (iLineq0 = 0; iLineq0 < *fscales_lineq_constraint_size; iLineq0++) {
      lbLambda = lambda_data[(iL0 + iLineq0) - 1];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(lbLambda *
        cIneq_data[iLineq0]), std::fmin(std::abs(cIneq_data[iLineq0]), lbLambda)));
    }

    iLineq0 = (iL0 + *fscales_lineq_constraint_size) - 2;
    for (lbOffset = 1; lbOffset - 1 < *fscales_cineq_constraint_size; lbOffset++)
    {
      lbLambda = lambda_data[iLineq0 + lbOffset];
      ubLambda = cIneq_data[(*fscales_lineq_constraint_size - 1) + lbOffset];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(ubLambda *
        lbLambda), std::fmin(std::abs(ubLambda), lbLambda)));
    }

    lbOffset = (iL0 + mIneq) - 1;
    mLinIneq = lbOffset + mLB;
    for (iLineq0 = 0; iLineq0 < mLB; iLineq0++) {
      ubLambda = xCurrent[finiteLB_data[iLineq0] - 1] - lb[finiteLB_data[iLineq0]
        - 1];
      lbLambda = lambda_data[lbOffset + iLineq0];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(ubLambda *
        lbLambda), std::fmin(std::abs(ubLambda), lbLambda)));
    }

    for (lbOffset = 0; lbOffset < mUB; lbOffset++) {
      ubLambda = lambda_data[mLinIneq + lbOffset];
      lbLambda = (rtInf) - xCurrent[finiteUB_data[lbOffset] - 1];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(lbLambda *
        ubLambda), std::fmin(lbLambda, ubLambda)));
    }
  }

  return nlpComplError;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mt(int32_T m, int32_T
  n, const real_T A_data[], int32_T lda, const real_T x_data[], int32_T ix0,
  real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    ix = ix0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_computeGradLag_b(real_T
  workspace_data[], int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T
  mIneq, const real_T AineqTrans_data[], const real_T AeqTrans_data[], const
  int32_T finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[],
  int32_T mLB, const int32_T finiteUB_data[], int32_T mUB, const real_T
  lambda_data[])
{
  int32_T c_idx;
  int32_T iL0;
  for (iL0 = 0; iL0 < nVar; iL0++) {
    workspace_data[iL0] = grad_data[iL0];
  }

  for (iL0 = 0; iL0 < mFixed; iL0++) {
    workspace_data[finiteFixed_data[iL0] - 1] += lambda_data[iL0];
  }

  proc_control_node_xgemv_mt(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed
    + 1, workspace_data);
  proc_control_node_xgemv_mt(nVar, mIneq, AineqTrans_data, ldA, lambda_data,
    mFixed + 131, workspace_data);
  iL0 = (mFixed + mIneq) + 130;
  for (c_idx = 0; c_idx < mLB; c_idx++) {
    workspace_data[finiteLB_data[c_idx] - 1] -= lambda_data[iL0];
    iL0++;
  }

  for (c_idx = 0; c_idx < mUB; c_idx++) {
    workspace_data[finiteUB_data[c_idx] - 1] += lambda_data[iL0];
    iL0++;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_con_computeDualFeasError_b(int32_T nVar,
  const real_T gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!std::isinf(gradLag_data[b_idx])) && (!std::isnan
                (gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      *val = std::fmax(*val, std::abs(gradLag_data[b_idx]));
      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_updateWorkingSetForNewQP_l(const real_T
  xk[147], s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[130], int32_T mLB,
  const real_T lb[147], int32_T mUB, int32_T mFixed)
{
  int32_T b_idx;
  int32_T i;
  int32_T iEq0;
  int32_T iw0;
  int32_T nVar;
  nVar = WorkingSet->nVar - 1;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (b_idx = 0; b_idx < 130; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    for (i = 0; i <= nVar; i++) {
      WorkingSet->ATwset.data[iw0 + i] = WorkingSet->Aeq.data[iEq0 + i];
    }

    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (iw0 = 0; iw0 < mIneq; iw0++) {
    WorkingSet->bineq.data[iw0] = -cIneq_data[iw0];
  }

  for (iw0 = 0; iw0 < mLB; iw0++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[iw0] - 1] = -lb
      [WorkingSet->indexLB.data[iw0] - 1] + xk[WorkingSet->indexLB.data[iw0] - 1];
  }

  for (iw0 = 0; iw0 < mUB; iw0++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[iw0] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[iw0] - 1];
  }

  for (iw0 = 0; iw0 < mFixed; iw0++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[iw0] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[iw0] - 1];
    WorkingSet->bwset.data[iw0] = (rtInf) - xk[WorkingSet->indexFixed.data[iw0]
      - 1];
  }

  if (WorkingSet->nActiveConstr > mFixed + 130) {
    for (b_idx = mFixed + 130; b_idx < WorkingSet->nActiveConstr; b_idx++) {
      switch (WorkingSet->Wid.data[b_idx]) {
       case 4:
        WorkingSet->bwset.data[b_idx] = WorkingSet->lb.data
          [WorkingSet->indexLB.data[WorkingSet->Wlocalidx.data[b_idx] - 1] - 1];
        break;

       case 5:
        WorkingSet->bwset.data[b_idx] = WorkingSet->ub.data
          [WorkingSet->indexUB.data[WorkingSet->Wlocalidx.data[b_idx] - 1] - 1];
        break;

       default:
        WorkingSet->bwset.data[b_idx] = WorkingSet->bineq.data
          [WorkingSet->Wlocalidx.data[b_idx] - 1];
        if ((mNonlinIneq > 0) && (WorkingSet->Wlocalidx.data[b_idx] >=
             mNonlinIneq)) {
          iw0 = WorkingSet->ldA * b_idx;
          iEq0 = (WorkingSet->Wlocalidx.data[b_idx] - 1) * WorkingSet->ldA;
          for (i = 1; i - 1 <= nVar; i++) {
            WorkingSet->ATwset.data[(iw0 + i) - 1] = WorkingSet->Aineq.data
              [(iEq0 + i) - 1];
          }
        }
        break;
      }
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_m(int32_T n, const
  real_T x_data[], int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_node_B.scale_m = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_node_B.absxk_d = std::abs(x_data[k - 1]);
        if (proc_control_node_B.absxk_d > proc_control_node_B.scale_m) {
          proc_control_node_B.t_j = proc_control_node_B.scale_m /
            proc_control_node_B.absxk_d;
          y = y * proc_control_node_B.t_j * proc_control_node_B.t_j + 1.0;
          proc_control_node_B.scale_m = proc_control_node_B.absxk_d;
        } else {
          proc_control_node_B.t_j = proc_control_node_B.absxk_d /
            proc_control_node_B.scale_m;
          y += proc_control_node_B.t_j * proc_control_node_B.t_j;
        }
      }

      y = proc_control_node_B.scale_m * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_xzlarfg(int32_T n, real_T *
  alpha1, real_T x_data[], int32_T ix0)
{
  real_T tau;
  tau = 0.0;
  if (n > 0) {
    proc_control_node_B.xnorm = proc_control_node_xnrm2_m(n - 1, x_data, ix0);
    if (proc_control_node_B.xnorm != 0.0) {
      proc_control_node_B.xnorm = rt_hypotd_snf(*alpha1,
        proc_control_node_B.xnorm);
      if (*alpha1 >= 0.0) {
        proc_control_node_B.xnorm = -proc_control_node_B.xnorm;
      }

      if (std::abs(proc_control_node_B.xnorm) < 1.0020841800044864E-292) {
        int32_T b_k;
        int32_T c_k;
        int32_T knt;
        knt = -1;
        c_k = (ix0 + n) - 2;
        do {
          knt++;
          for (b_k = ix0; b_k <= c_k; b_k++) {
            x_data[b_k - 1] *= 9.9792015476736E+291;
          }

          proc_control_node_B.xnorm *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while (!(std::abs(proc_control_node_B.xnorm) >=
                   1.0020841800044864E-292));

        proc_control_node_B.xnorm = rt_hypotd_snf(*alpha1,
          proc_control_node_xnrm2_m(n - 1, x_data, ix0));
        if (*alpha1 >= 0.0) {
          proc_control_node_B.xnorm = -proc_control_node_B.xnorm;
        }

        tau = (proc_control_node_B.xnorm - *alpha1) / proc_control_node_B.xnorm;
        proc_control_node_B.a_i = 1.0 / (*alpha1 - proc_control_node_B.xnorm);
        for (b_k = ix0; b_k <= c_k; b_k++) {
          x_data[b_k - 1] *= proc_control_node_B.a_i;
        }

        for (c_k = 0; c_k <= knt; c_k++) {
          proc_control_node_B.xnorm *= 1.0020841800044864E-292;
        }

        *alpha1 = proc_control_node_B.xnorm;
      } else {
        int32_T knt;
        tau = (proc_control_node_B.xnorm - *alpha1) / proc_control_node_B.xnorm;
        proc_control_node_B.a_i = 1.0 / (*alpha1 - proc_control_node_B.xnorm);
        knt = (ix0 + n) - 2;
        for (int32_T c_k{ix0}; c_k <= knt; c_k++) {
          x_data[c_k - 1] *= proc_control_node_B.a_i;
        }

        *alpha1 = proc_control_node_B.xnorm;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtm(int32_T m, int32_T
  n, const real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[],
  int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T b_iy;
    int32_T iac;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_node_B.c_d = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_d += A_data[ia - 1] * x_data[ix - 1];
        ix++;
      }

      y_data[b_iy] += proc_control_node_B.c_d;
      b_iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgerc_e(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y_data[], real_T A_data[], int32_T
  ia0, int32_T lda)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y_data[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_node_B.temp_f = y_data[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A_data[ijA] += A_data[ix - 1] * proc_control_node_B.temp_f;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xzlarf(int32_T m, int32_T n,
  int32_T iv0, real_T tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T
  work_data[])
{
  if (tau != 0.0) {
    boolean_T exitg2;
    proc_control_node_B.lastv = m;
    proc_control_node_B.lastc = iv0 + m;
    while ((proc_control_node_B.lastv > 0) && (C_data[proc_control_node_B.lastc
            - 2] == 0.0)) {
      proc_control_node_B.lastv--;
      proc_control_node_B.lastc--;
    }

    proc_control_node_B.lastc = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc > 0)) {
      int32_T coltop;
      int32_T exitg1;
      int32_T ia;
      coltop = (proc_control_node_B.lastc - 1) * ldc + ic0;
      ia = coltop;
      do {
        exitg1 = 0;
        if (ia <= (coltop + proc_control_node_B.lastv) - 1) {
          if (C_data[ia - 1] != 0.0) {
            exitg1 = 1;
          } else {
            ia++;
          }
        } else {
          proc_control_node_B.lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv = 0;
    proc_control_node_B.lastc = 0;
  }

  if (proc_control_node_B.lastv > 0) {
    proc_control_node_xgemv_mtm(proc_control_node_B.lastv,
      proc_control_node_B.lastc, C_data, ic0, ldc, C_data, iv0, work_data);
    proc_control_node_xgerc_e(proc_control_node_B.lastv,
      proc_control_node_B.lastc, -tau, iv0, work_data, C_data, ic0, ldc);
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_qrf(real_T A_data[], const
  int32_T A_size[2], int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
  proc_control_node_B.lda = A_size[0];
  proc_control_node_B.ii_p = A_size[1];
  if (0 <= proc_control_node_B.ii_p - 1) {
    std::memset(&proc_control_node_B.work_data[0], 0, proc_control_node_B.ii_p *
                sizeof(real_T));
  }

  proc_control_node_B.i_ei = 0;
  while (proc_control_node_B.i_ei <= nfxd - 1) {
    proc_control_node_B.ii_p = proc_control_node_B.i_ei *
      proc_control_node_B.lda + proc_control_node_B.i_ei;
    proc_control_node_B.mmi_h = m - proc_control_node_B.i_ei;
    if (proc_control_node_B.i_ei + 1 < m) {
      proc_control_node_B.b_atmp = A_data[proc_control_node_B.ii_p];
      tau_data[proc_control_node_B.i_ei] = proc_control_node_xzlarfg
        (proc_control_node_B.mmi_h, &proc_control_node_B.b_atmp, A_data,
         proc_control_node_B.ii_p + 2);
      A_data[proc_control_node_B.ii_p] = proc_control_node_B.b_atmp;
    } else {
      tau_data[proc_control_node_B.i_ei] = 0.0;
    }

    if (proc_control_node_B.i_ei + 1 < n) {
      proc_control_node_B.b_atmp = A_data[proc_control_node_B.ii_p];
      A_data[proc_control_node_B.ii_p] = 1.0;
      proc_control_node_xzlarf(proc_control_node_B.mmi_h, (n -
        proc_control_node_B.i_ei) - 1, proc_control_node_B.ii_p + 1,
        tau_data[proc_control_node_B.i_ei], A_data, (proc_control_node_B.ii_p +
        proc_control_node_B.lda) + 1, proc_control_node_B.lda,
        proc_control_node_B.work_data);
      A_data[proc_control_node_B.ii_p] = proc_control_node_B.b_atmp;
    }

    proc_control_node_B.i_ei++;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xswap(int32_T n, real_T
  x_data[], int32_T ix0, int32_T iy0)
{
  int32_T ix;
  int32_T iy;
  ix = ix0 - 1;
  iy = iy0 - 1;
  for (int32_T k{0}; k < n; k++) {
    real_T temp;
    temp = x_data[ix];
    x_data[ix] = x_data[iy];
    x_data[iy] = temp;
    ix++;
    iy++;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_qrpf(real_T A_data[], const
  int32_T A_size[2], int32_T m, int32_T n, int32_T nfxd, real_T tau_data[],
  int32_T jpvt_data[])
{
  proc_control_node_B.ma_e = A_size[0];
  if (m <= n) {
    proc_control_node_B.minmn_c = m;
  } else {
    proc_control_node_B.minmn_c = n;
  }

  proc_control_node_B.loop_ub_mj = A_size[1];
  if (0 <= proc_control_node_B.loop_ub_mj - 1) {
    std::memset(&proc_control_node_B.work_data_j[0], 0,
                proc_control_node_B.loop_ub_mj * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_mj = A_size[1];
  if (0 <= proc_control_node_B.loop_ub_mj - 1) {
    std::memset(&proc_control_node_B.vn1_data[0], 0,
                proc_control_node_B.loop_ub_mj * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_mj = A_size[1];
  if (0 <= proc_control_node_B.loop_ub_mj - 1) {
    std::memset(&proc_control_node_B.vn2_data[0], 0,
                proc_control_node_B.loop_ub_mj * sizeof(real_T));
  }

  proc_control_node_B.j_m = nfxd;
  while (proc_control_node_B.j_m + 1 <= n) {
    proc_control_node_B.vn1_data[proc_control_node_B.j_m] =
      proc_control_node_xnrm2_m(m - nfxd, A_data, (proc_control_node_B.j_m *
      proc_control_node_B.ma_e + nfxd) + 1);
    proc_control_node_B.vn2_data[proc_control_node_B.j_m] =
      proc_control_node_B.vn1_data[proc_control_node_B.j_m];
    proc_control_node_B.j_m++;
  }

  proc_control_node_B.j_m = nfxd;
  while (proc_control_node_B.j_m + 1 <= proc_control_node_B.minmn_c) {
    proc_control_node_B.loop_ub_mj = proc_control_node_B.j_m + 1;
    proc_control_node_B.ii_a = proc_control_node_B.j_m *
      proc_control_node_B.ma_e + proc_control_node_B.j_m;
    proc_control_node_B.nmi = n - proc_control_node_B.j_m;
    proc_control_node_B.mmi = m - proc_control_node_B.j_m;
    if (proc_control_node_B.nmi < 1) {
      proc_control_node_B.pvt = -1;
    } else {
      proc_control_node_B.pvt = 0;
      if (proc_control_node_B.nmi > 1) {
        proc_control_node_B.ix_c = proc_control_node_B.j_m;
        proc_control_node_B.smax_g = std::abs
          (proc_control_node_B.vn1_data[proc_control_node_B.j_m]);
        proc_control_node_B.k_f = 2;
        while (proc_control_node_B.k_f <= proc_control_node_B.nmi) {
          proc_control_node_B.ix_c++;
          proc_control_node_B.s_j = std::abs
            (proc_control_node_B.vn1_data[proc_control_node_B.ix_c]);
          if (proc_control_node_B.s_j > proc_control_node_B.smax_g) {
            proc_control_node_B.pvt = proc_control_node_B.k_f - 1;
            proc_control_node_B.smax_g = proc_control_node_B.s_j;
          }

          proc_control_node_B.k_f++;
        }
      }
    }

    proc_control_node_B.pvt += proc_control_node_B.j_m;
    if (proc_control_node_B.pvt + 1 != proc_control_node_B.j_m + 1) {
      proc_control_node_xswap(m, A_data, proc_control_node_B.pvt *
        proc_control_node_B.ma_e + 1, proc_control_node_B.j_m *
        proc_control_node_B.ma_e + 1);
      proc_control_node_B.ix_c = jpvt_data[proc_control_node_B.pvt];
      jpvt_data[proc_control_node_B.pvt] = jpvt_data[proc_control_node_B.j_m];
      jpvt_data[proc_control_node_B.j_m] = proc_control_node_B.ix_c;
      proc_control_node_B.vn1_data[proc_control_node_B.pvt] =
        proc_control_node_B.vn1_data[proc_control_node_B.j_m];
      proc_control_node_B.vn2_data[proc_control_node_B.pvt] =
        proc_control_node_B.vn2_data[proc_control_node_B.j_m];
    }

    if (proc_control_node_B.j_m + 1 < m) {
      proc_control_node_B.smax_g = A_data[proc_control_node_B.ii_a];
      tau_data[proc_control_node_B.j_m] = proc_control_node_xzlarfg
        (proc_control_node_B.mmi, &proc_control_node_B.smax_g, A_data,
         proc_control_node_B.ii_a + 2);
      A_data[proc_control_node_B.ii_a] = proc_control_node_B.smax_g;
    } else {
      tau_data[proc_control_node_B.j_m] = 0.0;
    }

    if (proc_control_node_B.j_m + 1 < n) {
      proc_control_node_B.smax_g = A_data[proc_control_node_B.ii_a];
      A_data[proc_control_node_B.ii_a] = 1.0;
      proc_control_node_xzlarf(proc_control_node_B.mmi, proc_control_node_B.nmi
        - 1, proc_control_node_B.ii_a + 1, tau_data[proc_control_node_B.j_m],
        A_data, (proc_control_node_B.ii_a + proc_control_node_B.ma_e) + 1,
        proc_control_node_B.ma_e, proc_control_node_B.work_data_j);
      A_data[proc_control_node_B.ii_a] = proc_control_node_B.smax_g;
    }

    while (proc_control_node_B.loop_ub_mj + 1 <= n) {
      proc_control_node_B.ii_a = proc_control_node_B.loop_ub_mj *
        proc_control_node_B.ma_e + proc_control_node_B.j_m;
      if (proc_control_node_B.vn1_data[proc_control_node_B.loop_ub_mj] != 0.0) {
        proc_control_node_B.smax_g = std::abs(A_data[proc_control_node_B.ii_a]) /
          proc_control_node_B.vn1_data[proc_control_node_B.loop_ub_mj];
        proc_control_node_B.smax_g = 1.0 - proc_control_node_B.smax_g *
          proc_control_node_B.smax_g;
        if (proc_control_node_B.smax_g < 0.0) {
          proc_control_node_B.smax_g = 0.0;
        }

        proc_control_node_B.s_j =
          proc_control_node_B.vn1_data[proc_control_node_B.loop_ub_mj] /
          proc_control_node_B.vn2_data[proc_control_node_B.loop_ub_mj];
        proc_control_node_B.s_j = proc_control_node_B.s_j *
          proc_control_node_B.s_j * proc_control_node_B.smax_g;
        if (proc_control_node_B.s_j <= 1.4901161193847656E-8) {
          if (proc_control_node_B.j_m + 1 < m) {
            proc_control_node_B.vn1_data[proc_control_node_B.loop_ub_mj] =
              proc_control_node_xnrm2_m(proc_control_node_B.mmi - 1, A_data,
              proc_control_node_B.ii_a + 2);
            proc_control_node_B.vn2_data[proc_control_node_B.loop_ub_mj] =
              proc_control_node_B.vn1_data[proc_control_node_B.loop_ub_mj];
          } else {
            proc_control_node_B.vn1_data[proc_control_node_B.loop_ub_mj] = 0.0;
            proc_control_node_B.vn2_data[proc_control_node_B.loop_ub_mj] = 0.0;
          }
        } else {
          proc_control_node_B.vn1_data[proc_control_node_B.loop_ub_mj] *= std::
            sqrt(proc_control_node_B.smax_g);
        }
      }

      proc_control_node_B.loop_ub_mj++;
    }

    proc_control_node_B.j_m++;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgeqp3(real_T A_data[],
  const int32_T A_size[2], int32_T m, int32_T n, int32_T jpvt_data[], real_T
  tau_data[], int32_T *tau_size)
{
  proc_control_node_B.ma = A_size[0];
  if (A_size[0] <= A_size[1]) {
    proc_control_node_B.minmana_e = A_size[0];
  } else {
    proc_control_node_B.minmana_e = A_size[1];
  }

  if (m <= n) {
    proc_control_node_B.minmn_l = m;
  } else {
    proc_control_node_B.minmn_l = n;
  }

  *tau_size = proc_control_node_B.minmana_e;
  if (0 <= proc_control_node_B.minmana_e - 1) {
    std::memset(&tau_data[0], 0, proc_control_node_B.minmana_e * sizeof(real_T));
  }

  if (proc_control_node_B.minmn_l < 1) {
    proc_control_node_B.ma = 0;
    while (proc_control_node_B.ma <= n - 1) {
      jpvt_data[proc_control_node_B.ma] = proc_control_node_B.ma + 1;
      proc_control_node_B.ma++;
    }
  } else {
    proc_control_node_B.minmana_e = -1;
    proc_control_node_B.c_j_n = 0;
    while (proc_control_node_B.c_j_n <= n - 1) {
      if (jpvt_data[proc_control_node_B.c_j_n] != 0) {
        proc_control_node_B.minmana_e++;
        if (proc_control_node_B.c_j_n + 1 != proc_control_node_B.minmana_e + 1)
        {
          proc_control_node_xswap(m, A_data, proc_control_node_B.c_j_n *
            proc_control_node_B.ma + 1, proc_control_node_B.minmana_e *
            proc_control_node_B.ma + 1);
          jpvt_data[proc_control_node_B.c_j_n] =
            jpvt_data[proc_control_node_B.minmana_e];
          jpvt_data[proc_control_node_B.minmana_e] = proc_control_node_B.c_j_n +
            1;
        } else {
          jpvt_data[proc_control_node_B.c_j_n] = proc_control_node_B.c_j_n + 1;
        }
      } else {
        jpvt_data[proc_control_node_B.c_j_n] = proc_control_node_B.c_j_n + 1;
      }

      proc_control_node_B.c_j_n++;
    }

    if (proc_control_node_B.minmana_e + 1 <= proc_control_node_B.minmn_l) {
      proc_control_node_B.minmana_e++;
    } else {
      proc_control_node_B.minmana_e = proc_control_node_B.minmn_l;
    }

    proc_control_node_qrf(A_data, A_size, m, n, proc_control_node_B.minmana_e,
                          tau_data);
    if (proc_control_node_B.minmana_e < proc_control_node_B.minmn_l) {
      proc_control_node_qrpf(A_data, A_size, m, n, proc_control_node_B.minmana_e,
        tau_data, jpvt_data);
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQRE
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, const real_T A_data[], int32_T mrows,
   int32_T ncols, int32_T ldA)
{
  proc_control_node_B.b_idx_i = 0;
  while (proc_control_node_B.b_idx_i <= ncols - 1) {
    proc_control_node_B.ix0_o = ldA * proc_control_node_B.b_idx_i;
    proc_control_node_B.idx_e = obj->ldq * proc_control_node_B.b_idx_i;
    for (int32_T k{1}; k - 1 < mrows; k++) {
      obj->QR.data[(proc_control_node_B.idx_e + k) - 1] = A_data
        [(proc_control_node_B.ix0_o + k) - 1];
    }

    proc_control_node_B.b_idx_i++;
  }

  obj->usedPivoting = true;
  obj->mrows = mrows;
  obj->ncols = ncols;
  if (mrows <= ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_node_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols,
    obj->jpvt.data, obj->tau.data, &obj->tau.size);
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xorgqr(int32_T m, int32_T n,
  int32_T k, real_T A_data[], const int32_T A_size[2], int32_T lda, const real_T
  tau_data[])
{
  if (n >= 1) {
    proc_control_node_B.itau_i = k;
    while (proc_control_node_B.itau_i <= n - 1) {
      proc_control_node_B.i_b = proc_control_node_B.itau_i * lda;
      proc_control_node_B.iaii = 0;
      while (proc_control_node_B.iaii <= m - 1) {
        A_data[proc_control_node_B.i_b + proc_control_node_B.iaii] = 0.0;
        proc_control_node_B.iaii++;
      }

      A_data[proc_control_node_B.i_b + proc_control_node_B.itau_i] = 1.0;
      proc_control_node_B.itau_i++;
    }

    proc_control_node_B.itau_i = k - 1;
    proc_control_node_B.iaii = static_cast<int16_T>(A_size[1]);
    if (0 <= proc_control_node_B.iaii - 1) {
      std::memset(&proc_control_node_B.work_data_d[0], 0,
                  proc_control_node_B.iaii * sizeof(real_T));
    }

    proc_control_node_B.i_b = k;
    while (proc_control_node_B.i_b >= 1) {
      proc_control_node_B.iaii = (proc_control_node_B.i_b - 1) * lda +
        proc_control_node_B.i_b;
      if (proc_control_node_B.i_b < n) {
        A_data[proc_control_node_B.iaii - 1] = 1.0;
        proc_control_node_xzlarf((m - proc_control_node_B.i_b) + 1, n -
          proc_control_node_B.i_b, proc_control_node_B.iaii,
          tau_data[proc_control_node_B.itau_i], A_data, proc_control_node_B.iaii
          + lda, lda, proc_control_node_B.work_data_d);
      }

      if (proc_control_node_B.i_b < m) {
        proc_control_node_B.c_gv = (proc_control_node_B.iaii + m) -
          proc_control_node_B.i_b;
        proc_control_node_B.b_k_p = proc_control_node_B.iaii;
        while (proc_control_node_B.b_k_p + 1 <= proc_control_node_B.c_gv) {
          A_data[proc_control_node_B.b_k_p] *=
            -tau_data[proc_control_node_B.itau_i];
          proc_control_node_B.b_k_p++;
        }
      }

      A_data[proc_control_node_B.iaii - 1] = 1.0 -
        tau_data[proc_control_node_B.itau_i];
      proc_control_node_B.c_gv = 0;
      while (proc_control_node_B.c_gv <= proc_control_node_B.i_b - 2) {
        A_data[(proc_control_node_B.iaii - proc_control_node_B.c_gv) - 2] = 0.0;
        proc_control_node_B.c_gv++;
      }

      proc_control_node_B.itau_i--;
      proc_control_node_B.i_b--;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_computeQ_
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, int32_T nrows)
{
  proc_control_node_B.idx_l = 0;
  while (proc_control_node_B.idx_l <= obj->minRowCol - 1) {
    proc_control_node_B.iQR0 = obj->ldq * proc_control_node_B.idx_l +
      proc_control_node_B.idx_l;
    proc_control_node_B.n_i5 = obj->mrows - proc_control_node_B.idx_l;
    proc_control_node_B.k_o = 1;
    while (proc_control_node_B.k_o - 1 <= proc_control_node_B.n_i5 - 2) {
      proc_control_node_B.i18 = proc_control_node_B.iQR0 +
        proc_control_node_B.k_o;
      obj->Q.data[proc_control_node_B.i18] = obj->
        QR.data[proc_control_node_B.i18];
      proc_control_node_B.k_o++;
    }

    proc_control_node_B.idx_l++;
  }

  proc_control_node_xorgqr(obj->mrows, nrows, obj->minRowCol, obj->Q.data,
    obj->Q.size, obj->ldq, obj->tau.data);
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmc(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  if (m != 0) {
    int32_T b;
    int32_T b_iy;
    int32_T iac;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      real_T c;
      int32_T d;
      int32_T ix;
      ix = 0;
      c = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[b_iy] += c;
      b_iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xtrsv(int32_T n, const
  real_T A_data[], int32_T lda, real_T x_data[])
{
  if (n != 0) {
    for (int32_T j{n - 1}; j + 1 > 0; j--) {
      int32_T jjA;
      jjA = j * lda + j;
      x_data[j] /= A_data[jjA];
      for (int32_T i{1}; i - 1 < j; i++) {
        int32_T ix;
        ix = j - i;
        x_data[ix] -= A_data[jjA - i] * x_data[j];
      }
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_sortLambdaQP(real_T
  lambda_data[], int32_T WorkingSet_nActiveConstr, const int32_T
  WorkingSet_sizes[5], const int32_T WorkingSet_isActiveIdx[6], const int32_T
  WorkingSet_Wid_data[], const int32_T WorkingSet_Wlocalidx_data[], real_T
  workspace_data[])
{
  if (WorkingSet_nActiveConstr != 0) {
    int32_T idx;
    int32_T idxOffset;
    int32_T mAll;
    mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) + WorkingSet_sizes[4])
            + WorkingSet_sizes[2]) + 129;
    for (idx = 0; idx <= mAll; idx++) {
      workspace_data[idx] = lambda_data[idx];
    }

    for (idx = 0; idx <= mAll; idx++) {
      lambda_data[idx] = 0.0;
    }

    mAll = 0;
    idx = 0;
    while ((idx + 1 <= WorkingSet_nActiveConstr) && (WorkingSet_Wid_data[idx] <=
            2)) {
      if (WorkingSet_Wid_data[idx] == 1) {
        idxOffset = 1;
      } else {
        idxOffset = WorkingSet_isActiveIdx[1];
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }

    while (idx + 1 <= WorkingSet_nActiveConstr) {
      switch (WorkingSet_Wid_data[idx]) {
       case 3:
        idxOffset = WorkingSet_isActiveIdx[2];
        break;

       case 4:
        idxOffset = WorkingSet_isActiveIdx[3];
        break;

       default:
        idxOffset = WorkingSet_isActiveIdx[4];
        break;
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_node_ixamax(int32_T n, const
  real_T x_data[])
{
  int32_T idxmax;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      real_T smax;
      int32_T ix;
      ix = 0;
      smax = std::abs(x_data[0]);
      for (int32_T k{2}; k <= n; k++) {
        real_T s;
        ix++;
        s = std::abs(x_data[ix]);
        if (s > smax) {
          idxmax = k;
          smax = s;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_test_exit
  (s7RdrPWkr8UPAUyTdDJkLaG_proc__T *Flags, s_OnOuVjEActeQRN4FyNqSwB_proc_T
   *memspace, sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const int32_T
   *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
   s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, s_UjlJWoQEHmSUKFcPTad7eC_proc_T *
   TrialState, s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager, const real_T lb[147])
{
  boolean_T dxTooSmall;
  boolean_T isFeasible;
  proc_control_node_B.nVar_lo = WorkingSet->nVar;
  proc_control_node_B.mFixed_j = WorkingSet->sizes[0];
  proc_control_node_B.mIneq_bi = WorkingSet->sizes[2];
  proc_control_node_B.mLB_f = WorkingSet->sizes[3];
  proc_control_node_B.mUB_p = WorkingSet->sizes[4];
  proc_control_node_B.mLambda_l = (((WorkingSet->sizes[0] + WorkingSet->sizes[2])
    + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_node_B.nActiveConstr = 0;
  while (proc_control_node_B.nActiveConstr <= proc_control_node_B.mLambda_l) {
    TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr] =
      TrialState->lambdasqp.data[proc_control_node_B.nActiveConstr];
    proc_control_node_B.nActiveConstr++;
  }

  proc_control_nod_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_node_B.optimRelativeFactor_e = std::fmax(1.0, std::abs
    (TrialState->grad.data[proc_control_node_ixamax(WorkingSet->nVar,
    TrialState->grad.data) - 1]));
  if (std::isinf(proc_control_node_B.optimRelativeFactor_e)) {
    proc_control_node_B.optimRelativeFactor_e = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if (TrialState->sqpIterations == 0) {
    MeritFunction->feasRelativeFactor = std::fmax(1.0,
      MeritFunction->nlpPrimalFeasError);
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &Flags->gradOK, &MeritFunction->nlpDualFeasError);
  if (!Flags->gradOK) {
    Flags->done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = proc_control__computeComplError
      (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
       TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
       WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
       WorkingSet->indexUB.data, WorkingSet->sizes[4],
       TrialState->lambdaStopTest.data, WorkingSet->sizes[0] + 131);
    MeritFunction->firstOrderOpt = std::fmax(MeritFunction->nlpDualFeasError,
      MeritFunction->nlpComplError);
    if (TrialState->sqpIterations > 1) {
      proc_control_n_computeGradLag_b(memspace->workspace_double.data,
        WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->Aeq.data,
        WorkingSet->indexFixed.data, WorkingSet->sizes[0],
        WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdaStopTestPrev.data);
      proc_con_computeDualFeasError_b(WorkingSet->nVar,
        memspace->workspace_double.data, &dxTooSmall, &proc_control_node_B.tol_p);
      proc_control_node_B.nlpComplErrorTmp = proc_control__computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
         TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
         WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
         WorkingSet->indexUB.data, WorkingSet->sizes[4],
         TrialState->lambdaStopTestPrev.data, WorkingSet->sizes[0] + 131);
      proc_control_node_B.d40 = std::fmax(proc_control_node_B.tol_p,
        proc_control_node_B.nlpComplErrorTmp);
      if (proc_control_node_B.d40 < std::fmax(MeritFunction->nlpDualFeasError,
           MeritFunction->nlpComplError)) {
        MeritFunction->nlpDualFeasError = proc_control_node_B.tol_p;
        MeritFunction->nlpComplError = proc_control_node_B.nlpComplErrorTmp;
        MeritFunction->firstOrderOpt = proc_control_node_B.d40;
        proc_control_node_B.nActiveConstr = 0;
        while (proc_control_node_B.nActiveConstr <=
               proc_control_node_B.mLambda_l) {
          TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr] =
            TrialState->
            lambdaStopTestPrev.data[proc_control_node_B.nActiveConstr];
          proc_control_node_B.nActiveConstr++;
        }
      } else {
        proc_control_node_B.nActiveConstr = 0;
        while (proc_control_node_B.nActiveConstr <=
               proc_control_node_B.mLambda_l) {
          TrialState->lambdaStopTestPrev.data[proc_control_node_B.nActiveConstr]
            = TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr];
          proc_control_node_B.nActiveConstr++;
        }
      }
    } else {
      proc_control_node_B.nActiveConstr = 0;
      while (proc_control_node_B.nActiveConstr <= proc_control_node_B.mLambda_l)
      {
        TrialState->lambdaStopTestPrev.data[proc_control_node_B.nActiveConstr] =
          TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr];
        proc_control_node_B.nActiveConstr++;
      }
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_node_B.optimRelativeFactor_e) &&
        (MeritFunction->nlpComplError <= 0.02 *
         proc_control_node_B.optimRelativeFactor_e)) {
      Flags->done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      Flags->done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        Flags->done = true;
        TrialState->sqpExitFlag = -3;
      } else {
        boolean_T guard1{ false };

        guard1 = false;
        if (TrialState->sqpIterations > 0) {
          boolean_T exitg1;
          dxTooSmall = true;
          proc_control_node_B.nActiveConstr = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_node_B.nActiveConstr <=
                               proc_control_node_B.nVar_lo - 1)) {
            if (0.1 * std::fmax(1.0, std::abs(TrialState->
                  xstarsqp[proc_control_node_B.nActiveConstr])) <= std::abs
                (TrialState->delta_x.data[proc_control_node_B.nActiveConstr])) {
              dxTooSmall = false;
              exitg1 = true;
            } else {
              proc_control_node_B.nActiveConstr++;
            }
          }

          if (dxTooSmall) {
            if (!isFeasible) {
              if (Flags->stepType != 2) {
                Flags->stepType = 2;
                Flags->failedLineSearch = false;
                Flags->stepAccepted = false;
                guard1 = true;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = -2;
              }
            } else {
              proc_control_node_B.nActiveConstr = WorkingSet->nActiveConstr;
              if (WorkingSet->nActiveConstr > 0) {
                proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
                  WorkingSet->sizes[2], TrialState->mNonlinIneq,
                  TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                  lb, WorkingSet->sizes[4], WorkingSet->sizes[0]);
                proc_control_node_B.fullRank_R = 0;
                while (proc_control_node_B.fullRank_R <=
                       proc_control_node_B.nActiveConstr - 1) {
                  TrialState->lambda.data[proc_control_node_B.fullRank_R] = 0.0;
                  proc_control_node_B.fullRank_R++;
                }

                proc_control_node_factorQRE(QRManager, WorkingSet->ATwset.data,
                  proc_control_node_B.nVar_lo, proc_control_node_B.nActiveConstr,
                  WorkingSet->ldA);
                proc_control_node_computeQ_(QRManager, QRManager->mrows);
                if (proc_control_node_B.nVar_lo >=
                    proc_control_node_B.nActiveConstr) {
                  proc_control_node_B.iQR_diag = proc_control_node_B.nVar_lo;
                } else {
                  proc_control_node_B.iQR_diag =
                    proc_control_node_B.nActiveConstr;
                }

                proc_control_node_B.tol_p = std::fmin(1.4901161193847656E-8,
                  static_cast<real_T>(proc_control_node_B.iQR_diag) *
                  2.2204460492503131E-16) * std::abs(QRManager->QR.data[0]);
                if (proc_control_node_B.nVar_lo <=
                    proc_control_node_B.nActiveConstr) {
                  proc_control_node_B.fullRank_R = proc_control_node_B.nVar_lo;
                } else {
                  proc_control_node_B.fullRank_R =
                    proc_control_node_B.nActiveConstr;
                }

                proc_control_node_B.rankR = 0;
                proc_control_node_B.iQR_diag = 0;
                while ((proc_control_node_B.rankR <
                        proc_control_node_B.fullRank_R) && (std::abs
                        (QRManager->QR.data[proc_control_node_B.iQR_diag]) >
                        proc_control_node_B.tol_p)) {
                  proc_control_node_B.rankR++;
                  proc_control_node_B.iQR_diag = (proc_control_node_B.iQR_diag +
                    QRManager->ldq) + 1;
                }

                proc_control_node_B.c_size[0] = memspace->workspace_double.size
                  [0];
                proc_control_node_B.c_size[1] = memspace->workspace_double.size
                  [1];
                proc_control_node_B.iQR_diag = memspace->workspace_double.size[0]
                  * memspace->workspace_double.size[1];
                if (0 <= proc_control_node_B.iQR_diag - 1) {
                  std::memcpy(&proc_control_node_B.c_data[0],
                              &memspace->workspace_double.data[0],
                              proc_control_node_B.iQR_diag * sizeof(real_T));
                }

                proc_control_node_xgemv_mtmc(proc_control_node_B.nVar_lo,
                  proc_control_node_B.nVar_lo, QRManager->Q.data, QRManager->ldq,
                  TrialState->grad.data, proc_control_node_B.c_data);
                proc_control_node_xtrsv(proc_control_node_B.rankR,
                  QRManager->QR.data, QRManager->ldq, proc_control_node_B.c_data);
                if (proc_control_node_B.nActiveConstr >
                    proc_control_node_B.fullRank_R) {
                  proc_control_node_B.nActiveConstr =
                    proc_control_node_B.fullRank_R;
                }

                proc_control_node_B.fullRank_R = 0;
                while (proc_control_node_B.fullRank_R <=
                       proc_control_node_B.nActiveConstr - 1) {
                  TrialState->lambda.data[QRManager->
                    jpvt.data[proc_control_node_B.fullRank_R] - 1] =
                    proc_control_node_B.c_data[proc_control_node_B.fullRank_R];
                  proc_control_node_B.fullRank_R++;
                }

                proc_control_node_B.nActiveConstr = proc_control_node_B.mFixed_j;
                while (proc_control_node_B.nActiveConstr + 1 <=
                       proc_control_node_B.mFixed_j + 130) {
                  TrialState->lambda.data[proc_control_node_B.nActiveConstr] =
                    -TrialState->lambda.data[proc_control_node_B.nActiveConstr];
                  proc_control_node_B.nActiveConstr++;
                }

                memspace->workspace_double.size[0] = proc_control_node_B.c_size
                  [0];
                memspace->workspace_double.size[1] = proc_control_node_B.c_size
                  [1];
                proc_control_node_B.iQR_diag = proc_control_node_B.c_size[0] *
                  proc_control_node_B.c_size[1];
                if (0 <= proc_control_node_B.iQR_diag - 1) {
                  std::memcpy(&memspace->workspace_double.data[0],
                              &proc_control_node_B.c_data[0],
                              proc_control_node_B.iQR_diag * sizeof(real_T));
                }

                proc_control_node_sortLambdaQP(TrialState->lambda.data,
                  WorkingSet->nActiveConstr, WorkingSet->sizes,
                  WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                  WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
                proc_control_n_computeGradLag_b(memspace->workspace_double.data,
                  WorkingSet->ldA, proc_control_node_B.nVar_lo,
                  TrialState->grad.data, proc_control_node_B.mIneq_bi,
                  WorkingSet->Aineq.data, WorkingSet->Aeq.data,
                  WorkingSet->indexFixed.data, proc_control_node_B.mFixed_j,
                  WorkingSet->indexLB.data, proc_control_node_B.mLB_f,
                  WorkingSet->indexUB.data, proc_control_node_B.mUB_p,
                  TrialState->lambda.data);
                proc_con_computeDualFeasError_b(proc_control_node_B.nVar_lo,
                  memspace->workspace_double.data, &isFeasible,
                  &proc_control_node_B.tol_p);
                proc_control_node_B.nlpComplErrorTmp =
                  proc_control__computeComplError(fscales_lineq_constraint_size,
                  fscales_cineq_constraint_size, TrialState->xstarsqp,
                  proc_control_node_B.mIneq_bi, TrialState->cIneq.data,
                  WorkingSet->indexLB.data, proc_control_node_B.mLB_f, lb,
                  WorkingSet->indexUB.data, proc_control_node_B.mUB_p,
                  TrialState->lambda.data, proc_control_node_B.mFixed_j + 1);
                if ((proc_control_node_B.tol_p <= 0.02 *
                     proc_control_node_B.optimRelativeFactor_e) &&
                    (proc_control_node_B.nlpComplErrorTmp <= 0.02 *
                     proc_control_node_B.optimRelativeFactor_e)) {
                  MeritFunction->nlpDualFeasError = proc_control_node_B.tol_p;
                  MeritFunction->nlpComplError =
                    proc_control_node_B.nlpComplErrorTmp;
                  MeritFunction->firstOrderOpt = std::fmax
                    (proc_control_node_B.tol_p,
                     proc_control_node_B.nlpComplErrorTmp);
                  proc_control_node_B.nVar_lo = 0;
                  while (proc_control_node_B.nVar_lo <=
                         proc_control_node_B.mLambda_l) {
                    TrialState->lambdaStopTest.data[proc_control_node_B.nVar_lo]
                      = TrialState->lambda.data[proc_control_node_B.nVar_lo];
                    proc_control_node_B.nVar_lo++;
                  }

                  Flags->done = true;
                  TrialState->sqpExitFlag = 1;
                } else {
                  Flags->done = true;
                  TrialState->sqpExitFlag = 2;
                }
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = 2;
              }
            }
          } else {
            guard1 = true;
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (TrialState->sqpIterations >= 400) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          } else if (TrialState->FunctionEvaluations >= 14700) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_contro_xgemv_mtmcjbiadz2ic(int32_T m,
  int32_T n, const real_T A_data[], int32_T ia0, int32_T lda, const real_T
  x_data[], int32_T ix0, real_T y_data[])
{
  int32_T b;
  int32_T iac;
  int32_T ix;
  ix = ix0;
  b = (n - 1) * lda + ia0;
  iac = ia0;
  while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
    int32_T c;
    int32_T iy;
    iy = 0;
    c = (iac + m) - 1;
    for (int32_T ia{iac}; ia <= c; ia++) {
      y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
      iy++;
    }

    ix++;
    iac += lda;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_BFGSUpdate(int32_T nvar,
  real_T Bk[21609], const real_T sk_data[], real_T yk_data[], real_T
  workspace_data[])
{
  int32_T b_ix;
  int32_T b_jA;
  int32_T c_ix;
  int32_T ijA;
  int32_T ix;
  int32_T jy;
  boolean_T success;
  proc_control_node_B.dotSY = 0.0;
  if (nvar >= 1) {
    for (b_jA = 0; b_jA < nvar; b_jA++) {
      proc_control_node_B.dotSY += sk_data[b_jA] * yk_data[b_jA];
    }
  }

  for (b_jA = 0; b_jA < nvar; b_jA++) {
    workspace_data[b_jA] = 0.0;
  }

  ix = 0;
  jy = (nvar - 1) * 147 + 1;
  for (c_ix = 1; c_ix <= jy; c_ix += 147) {
    b_ix = 0;
    ijA = (c_ix + nvar) - 1;
    for (b_jA = c_ix; b_jA <= ijA; b_jA++) {
      workspace_data[b_ix] += Bk[b_jA - 1] * sk_data[ix];
      b_ix++;
    }

    ix++;
  }

  proc_control_node_B.curvatureS = 0.0;
  if (nvar >= 1) {
    for (ix = 0; ix < nvar; ix++) {
      proc_control_node_B.curvatureS += workspace_data[ix] * sk_data[ix];
    }
  }

  if (proc_control_node_B.dotSY < 0.2 * proc_control_node_B.curvatureS) {
    proc_control_node_B.dotSY = 0.8 * proc_control_node_B.curvatureS /
      (proc_control_node_B.curvatureS - proc_control_node_B.dotSY);
    for (b_jA = 0; b_jA < nvar; b_jA++) {
      yk_data[b_jA] *= proc_control_node_B.dotSY;
    }

    if (!(1.0 - proc_control_node_B.dotSY == 0.0)) {
      for (ix = 0; ix < nvar; ix++) {
        yk_data[ix] += (1.0 - proc_control_node_B.dotSY) * workspace_data[ix];
      }
    }

    proc_control_node_B.dotSY = 0.0;
    if (nvar >= 1) {
      for (b_jA = 0; b_jA < nvar; b_jA++) {
        proc_control_node_B.dotSY += sk_data[b_jA] * yk_data[b_jA];
      }
    }
  }

  success = ((proc_control_node_B.curvatureS > 2.2204460492503131E-16) &&
             (proc_control_node_B.dotSY > 2.2204460492503131E-16));
  if (success) {
    proc_control_node_B.curvatureS = -1.0 / proc_control_node_B.curvatureS;
    if (!(proc_control_node_B.curvatureS == 0.0)) {
      ix = 0;
      jy = 0;
      for (c_ix = 0; c_ix < nvar; c_ix++) {
        if (workspace_data[jy] != 0.0) {
          real_T temp;
          temp = workspace_data[jy] * proc_control_node_B.curvatureS;
          b_ix = 0;
          ijA = ix;
          b_jA = nvar + ix;
          while (ijA + 1 <= b_jA) {
            Bk[ijA] += workspace_data[b_ix] * temp;
            b_ix++;
            ijA++;
          }
        }

        jy++;
        ix += 147;
      }
    }

    proc_control_node_B.dotSY = 1.0 / proc_control_node_B.dotSY;
    if (!(proc_control_node_B.dotSY == 0.0)) {
      b_jA = 0;
      ix = 0;
      for (jy = 0; jy < nvar; jy++) {
        if (yk_data[ix] != 0.0) {
          proc_control_node_B.curvatureS = yk_data[ix] *
            proc_control_node_B.dotSY;
          c_ix = 0;
          b_ix = b_jA;
          ijA = nvar + b_jA;
          while (b_ix + 1 <= ijA) {
            Bk[b_ix] += yk_data[c_ix] * proc_control_node_B.curvatureS;
            c_ix++;
            b_ix++;
          }
        }

        ix++;
        b_jA += 147;
      }
    }
  }

  return success;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQRE_f
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, int32_T mrows, int32_T ncols)
{
  if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_node_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols,
      obj->jpvt.data, obj->tau.data, &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_countsort(int32_T x_data[],
  int32_T xLen, int32_T workspace_data[], int32_T xMin, int32_T xMax)
{
  if ((xLen > 1) && (xMax > xMin)) {
    int32_T idxEnd;
    int32_T idxStart;
    int32_T maxOffset_tmp;
    maxOffset_tmp = xMax - xMin;
    for (idxStart = 0; idxStart <= maxOffset_tmp; idxStart++) {
      workspace_data[idxStart] = 0;
    }

    for (idxStart = 0; idxStart < xLen; idxStart++) {
      idxEnd = x_data[idxStart] - xMin;
      workspace_data[idxEnd]++;
    }

    for (idxStart = 1; idxStart < maxOffset_tmp + 1; idxStart++) {
      workspace_data[idxStart] += workspace_data[idxStart - 1];
    }

    idxStart = 0;
    idxEnd = workspace_data[0];
    for (int32_T b_idxW{0}; b_idxW < maxOffset_tmp; b_idxW++) {
      while (idxStart + 1 <= idxEnd) {
        x_data[idxStart] = b_idxW + xMin;
        idxStart++;
      }

      idxStart = workspace_data[b_idxW];
      idxEnd = workspace_data[b_idxW + 1];
    }

    while (idxStart + 1 <= idxEnd) {
      x_data[idxStart] = xMax;
      idxStart++;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_removeConstr
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T idx_global)
{
  int32_T TYPE_tmp;
  int32_T idx_global_start_tmp_tmp;
  TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE_tmp] + obj->
    Wlocalidx.data[idx_global - 1]) - 2] = false;
  idx_global_start_tmp_tmp = obj->nActiveConstr - 1;
  obj->Wid.data[idx_global - 1] = obj->Wid.data[obj->nActiveConstr - 1];
  obj->Wlocalidx.data[idx_global - 1] = obj->
    Wlocalidx.data[idx_global_start_tmp_tmp];
  for (int32_T b_idx{0}; b_idx < obj->nVar; b_idx++) {
    obj->ATwset.data[b_idx + obj->ldA * (idx_global - 1)] = obj->ATwset.data
      [obj->ldA * idx_global_start_tmp_tmp + b_idx];
  }

  obj->bwset.data[idx_global - 1] = obj->bwset.data[idx_global_start_tmp_tmp];
  obj->nActiveConstr--;
  obj->nWConstr[TYPE_tmp]--;
}

// Function for MATLAB Function: '<S268>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_RemoveDependentEq_
  (s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
   *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager)
{
  int32_T nDepInd;
  proc_control_node_B.nVar_l = workingset->nVar - 1;
  proc_control_node_B.mTotalWorkingEq = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  nDepInd = 0;
  if (proc_control_node_B.mTotalWorkingEq > 0) {
    proc_control_node_B.totalRank = 0;
    while (proc_control_node_B.totalRank <= proc_control_node_B.mTotalWorkingEq
           - 1) {
      proc_control_node_B.ix_l = 0;
      while (proc_control_node_B.ix_l <= proc_control_node_B.nVar_l) {
        qrmanager->QR.data[proc_control_node_B.totalRank + qrmanager->ldq *
          proc_control_node_B.ix_l] = workingset->ATwset.data[workingset->ldA *
          proc_control_node_B.totalRank + proc_control_node_B.ix_l];
        proc_control_node_B.ix_l++;
      }

      proc_control_node_B.totalRank++;
    }

    proc_control_node_B.iy_o = proc_control_node_B.mTotalWorkingEq -
      workingset->nVar;
    if (0 < proc_control_node_B.iy_o) {
      nDepInd = proc_control_node_B.iy_o;
    }

    proc_control_node_B.totalRank = 0;
    while (proc_control_node_B.totalRank <= proc_control_node_B.nVar_l) {
      qrmanager->jpvt.data[proc_control_node_B.totalRank] = 0;
      proc_control_node_B.totalRank++;
    }

    proc_control_node_factorQRE_f(qrmanager, proc_control_node_B.mTotalWorkingEq,
      workingset->nVar);
    proc_control_node_B.tol = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    if (workingset->nVar <= proc_control_node_B.mTotalWorkingEq) {
      proc_control_node_B.totalRank = workingset->nVar;
    } else {
      proc_control_node_B.totalRank = proc_control_node_B.mTotalWorkingEq;
    }

    proc_control_node_B.totalRank += (proc_control_node_B.totalRank - 1) *
      qrmanager->ldq;
    while ((proc_control_node_B.totalRank > 0) && (std::abs(qrmanager->
             QR.data[proc_control_node_B.totalRank - 1]) <
            proc_control_node_B.tol)) {
      proc_control_node_B.totalRank = (proc_control_node_B.totalRank -
        qrmanager->ldq) - 1;
      nDepInd++;
    }

    if (nDepInd > 0) {
      boolean_T exitg1;
      proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_node_B.totalRank = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.totalRank <= nDepInd - 1)) {
        proc_control_node_B.ix_l = ((proc_control_node_B.mTotalWorkingEq -
          proc_control_node_B.totalRank) - 1) * qrmanager->ldq;
        proc_control_node_B.qtb = 0.0;
        proc_control_node_B.iy_o = 0;
        proc_control_node_B.b_k_i = 0;
        while (proc_control_node_B.b_k_i <= proc_control_node_B.mTotalWorkingEq
               - 1) {
          proc_control_node_B.qtb += qrmanager->Q.data[proc_control_node_B.ix_l]
            * workingset->bwset.data[proc_control_node_B.iy_o];
          proc_control_node_B.ix_l++;
          proc_control_node_B.iy_o++;
          proc_control_node_B.b_k_i++;
        }

        if (std::abs(proc_control_node_B.qtb) >= proc_control_node_B.tol) {
          nDepInd = -1;
          exitg1 = true;
        } else {
          proc_control_node_B.totalRank++;
        }
      }
    }

    if (nDepInd > 0) {
      proc_control_node_B.totalRank = 0;
      while (proc_control_node_B.totalRank <=
             proc_control_node_B.mTotalWorkingEq - 1) {
        proc_control_node_B.ix_l = qrmanager->ldq *
          proc_control_node_B.totalRank;
        proc_control_node_B.iy_o = workingset->ldA *
          proc_control_node_B.totalRank;
        proc_control_node_B.b_k_i = 1;
        while (proc_control_node_B.b_k_i - 1 <= proc_control_node_B.nVar_l) {
          qrmanager->QR.data[(proc_control_node_B.ix_l +
                              proc_control_node_B.b_k_i) - 1] =
            workingset->ATwset.data[(proc_control_node_B.iy_o +
            proc_control_node_B.b_k_i) - 1];
          proc_control_node_B.b_k_i++;
        }

        proc_control_node_B.totalRank++;
      }

      proc_control_node_B.nVar_l = 0;
      while (proc_control_node_B.nVar_l <= workingset->nWConstr[0] - 1) {
        qrmanager->jpvt.data[proc_control_node_B.nVar_l] = 1;
        proc_control_node_B.nVar_l++;
      }

      proc_control_node_B.nVar_l = workingset->nWConstr[0];
      while (proc_control_node_B.nVar_l + 1 <=
             proc_control_node_B.mTotalWorkingEq) {
        qrmanager->jpvt.data[proc_control_node_B.nVar_l] = 0;
        proc_control_node_B.nVar_l++;
      }

      proc_control_node_factorQRE_f(qrmanager, workingset->nVar,
        proc_control_node_B.mTotalWorkingEq);
      proc_control_node_B.nVar_l = 0;
      while (proc_control_node_B.nVar_l <= nDepInd - 1) {
        memspace->workspace_int.data[proc_control_node_B.nVar_l] =
          qrmanager->jpvt.data[(proc_control_node_B.mTotalWorkingEq - nDepInd) +
          proc_control_node_B.nVar_l];
        proc_control_node_B.nVar_l++;
      }

      proc_control_node_countsort(memspace->workspace_int.data, nDepInd,
        memspace->workspace_sort.data, 1, proc_control_node_B.mTotalWorkingEq);
      proc_control_node_B.mTotalWorkingEq = nDepInd - 1;
      while (proc_control_node_B.mTotalWorkingEq + 1 > 0) {
        proc_control_node_B.nVar_l = (workingset->nWConstr[0] +
          workingset->nWConstr[1]) - 1;
        if ((proc_control_node_B.nVar_l + 1 != 0) &&
            (memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq] <=
             proc_control_node_B.nVar_l + 1)) {
          if ((proc_control_node_B.nVar_l + 1 == workingset->nActiveConstr) ||
              (proc_control_node_B.nVar_l + 1 == memspace->
               workspace_int.data[proc_control_node_B.mTotalWorkingEq])) {
            workingset->mEqRemoved++;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1];
            proc_control_node_removeConstr(workingset,
              memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq]);
          } else {
            workingset->mEqRemoved++;
            proc_control_node_B.totalRank = workingset->Wid.data
              [memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq]
              - 1] - 1;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1];
            workingset->isActiveConstr.data[(workingset->isActiveIdx
              [workingset->Wid.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] - 1]
              + workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1]) - 2]
              = false;
            workingset->Wid.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->Wid.data[proc_control_node_B.nVar_l];
            workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->Wlocalidx.data[proc_control_node_B.nVar_l];
            proc_control_node_B.ix_l = 0;
            while (proc_control_node_B.ix_l <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_node_B.ix_l + workingset->ldA
                * (memspace->
                   workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1)]
                = workingset->ATwset.data[workingset->ldA *
                proc_control_node_B.nVar_l + proc_control_node_B.ix_l];
              proc_control_node_B.ix_l++;
            }

            workingset->bwset.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->bwset.data[proc_control_node_B.nVar_l];
            proc_control_node_B.ix_l = workingset->nActiveConstr - 1;
            workingset->Wid.data[proc_control_node_B.nVar_l] =
              workingset->Wid.data[workingset->nActiveConstr - 1];
            workingset->Wlocalidx.data[proc_control_node_B.nVar_l] =
              workingset->Wlocalidx.data[proc_control_node_B.ix_l];
            proc_control_node_B.iy_o = 0;
            while (proc_control_node_B.iy_o <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_node_B.iy_o + workingset->ldA
                * proc_control_node_B.nVar_l] = workingset->
                ATwset.data[workingset->ldA * proc_control_node_B.ix_l +
                proc_control_node_B.iy_o];
              proc_control_node_B.iy_o++;
            }

            workingset->bwset.data[proc_control_node_B.nVar_l] =
              workingset->bwset.data[proc_control_node_B.ix_l];
            workingset->nActiveConstr--;
            workingset->nWConstr[proc_control_node_B.totalRank]--;
          }
        }

        proc_control_node_B.mTotalWorkingEq--;
      }
    }
  }

  return nDepInd;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_contro_removeAllIneqConstr
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj)
{
  for (int32_T idx_global{obj->nWConstr[0] + obj->nWConstr[1]}; idx_global <
       obj->nActiveConstr; idx_global++) {
    obj->isActiveConstr.data[(obj->isActiveIdx[obj->Wid.data[idx_global] - 1] +
      obj->Wlocalidx.data[idx_global]) - 2] = false;
  }

  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + obj->nWConstr[1];
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_contr_RemoveDependentIneq_
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *
   qrmanager, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace)
{
  proc_control_node_B.nFixedConstr_b = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  proc_control_node_B.nVar_o = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_node_B.tol_k = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_node_B.nDepIneq_g = 0;
    while (proc_control_node_B.nDepIneq_g <= proc_control_node_B.nFixedConstr_b
           - 1) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq_g] = 1;
      proc_control_node_B.nDepIneq_g++;
    }

    proc_control_node_B.nDepIneq_g = proc_control_node_B.nFixedConstr_b + 1;
    while (proc_control_node_B.nDepIneq_g <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq_g - 1] = 0;
      proc_control_node_B.nDepIneq_g++;
    }

    proc_control_node_B.nDepIneq_g = 0;
    while (proc_control_node_B.nDepIneq_g <= workingset->nActiveConstr - 1) {
      proc_control_node_B.idx_ni = qrmanager->ldq *
        proc_control_node_B.nDepIneq_g;
      proc_control_node_B.idx_col_f = workingset->ldA *
        proc_control_node_B.nDepIneq_g;
      proc_control_node_B.k_d = 1;
      while (proc_control_node_B.k_d - 1 <= proc_control_node_B.nVar_o - 1) {
        qrmanager->QR.data[(proc_control_node_B.idx_ni + proc_control_node_B.k_d)
          - 1] = workingset->ATwset.data[(proc_control_node_B.idx_col_f +
          proc_control_node_B.k_d) - 1];
        proc_control_node_B.k_d++;
      }

      proc_control_node_B.nDepIneq_g++;
    }

    proc_control_node_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_node_B.nDepIneq_g = 0;
    proc_control_node_B.idx_ni = workingset->nActiveConstr - 1;
    while (proc_control_node_B.idx_ni + 1 > proc_control_node_B.nVar_o) {
      proc_control_node_B.nDepIneq_g++;
      memspace->workspace_int.data[proc_control_node_B.nDepIneq_g - 1] =
        qrmanager->jpvt.data[proc_control_node_B.idx_ni];
      proc_control_node_B.idx_ni--;
    }

    if (proc_control_node_B.idx_ni + 1 <= workingset->nVar) {
      proc_control_node_B.nVar_o = qrmanager->ldq * proc_control_node_B.idx_ni +
        proc_control_node_B.idx_ni;
      while ((proc_control_node_B.idx_ni + 1 >
              proc_control_node_B.nFixedConstr_b) && (std::abs
              (qrmanager->QR.data[proc_control_node_B.nVar_o]) <
              proc_control_node_B.tol_k)) {
        proc_control_node_B.nDepIneq_g++;
        memspace->workspace_int.data[proc_control_node_B.nDepIneq_g - 1] =
          qrmanager->jpvt.data[proc_control_node_B.idx_ni];
        proc_control_node_B.idx_ni--;
        proc_control_node_B.nVar_o = (proc_control_node_B.nVar_o -
          qrmanager->ldq) - 1;
      }
    }

    proc_control_node_countsort(memspace->workspace_int.data,
      proc_control_node_B.nDepIneq_g, memspace->workspace_sort.data,
      proc_control_node_B.nFixedConstr_b + 1, workingset->nActiveConstr);
    proc_control_node_B.nFixedConstr_b = proc_control_node_B.nDepIneq_g;
    while (proc_control_node_B.nFixedConstr_b > 0) {
      proc_control_node_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_node_B.nFixedConstr_b - 1]);
      proc_control_node_B.nFixedConstr_b--;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgeqrf(real_T A_data[],
  const int32_T A_size[2], int32_T m, int32_T n, real_T tau_data[], int32_T
  *tau_size)
{
  if (A_size[0] <= A_size[1]) {
    proc_control_node_B.minmana = A_size[0];
  } else {
    proc_control_node_B.minmana = A_size[1];
  }

  if (m <= n) {
    proc_control_node_B.minmn = m;
  } else {
    proc_control_node_B.minmn = n;
  }

  *tau_size = proc_control_node_B.minmana;
  if (0 <= proc_control_node_B.minmana - 1) {
    std::memset(&tau_data[0], 0, proc_control_node_B.minmana * sizeof(real_T));
  }

  if (proc_control_node_B.minmn >= 1) {
    proc_control_node_qrf(A_data, A_size, m, n, proc_control_node_B.minmn,
                          tau_data);
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQR_h
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, const real_T A_data[], int32_T mrows,
   int32_T ncols, int32_T ldA)
{
  boolean_T guard1{ false };

  proc_control_node_B.b_idx_c = mrows * ncols;
  guard1 = false;
  if (proc_control_node_B.b_idx_c > 0) {
    proc_control_node_B.b_idx_c = 0;
    while (proc_control_node_B.b_idx_c <= ncols - 1) {
      proc_control_node_B.ix0 = ldA * proc_control_node_B.b_idx_c;
      proc_control_node_B.idx_n = obj->ldq * proc_control_node_B.b_idx_c;
      proc_control_node_B.k_j = 1;
      while (proc_control_node_B.k_j - 1 <= mrows - 1) {
        obj->QR.data[(proc_control_node_B.idx_n + proc_control_node_B.k_j) - 1] =
          A_data[(proc_control_node_B.ix0 + proc_control_node_B.k_j) - 1];
        proc_control_node_B.k_j++;
      }

      proc_control_node_B.b_idx_c++;
    }

    guard1 = true;
  } else if (proc_control_node_B.b_idx_c == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    proc_control_node_B.b_idx_c = 0;
    while (proc_control_node_B.b_idx_c <= ncols - 1) {
      obj->jpvt.data[proc_control_node_B.b_idx_c] = proc_control_node_B.b_idx_c
        + 1;
      proc_control_node_B.b_idx_c++;
    }

    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_node_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols,
      obj->tau.data, &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQR
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, int32_T mrows, int32_T ncols)
{
  obj->usedPivoting = false;
  obj->mrows = mrows;
  obj->ncols = ncols;
  proc_control_node_B.idx_jo = 0;
  while (proc_control_node_B.idx_jo <= ncols - 1) {
    obj->jpvt.data[proc_control_node_B.idx_jo] = proc_control_node_B.idx_jo + 1;
    proc_control_node_B.idx_jo++;
  }

  if (mrows <= ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_node_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols,
    obj->tau.data, &obj->tau.size);
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmcjb(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T d;
      int32_T ix;
      ix = 0;
      proc_control_node_B.c_lb = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_lb += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += proc_control_node_B.c_lb;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmcj(int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T ix;
      ix = 0;
      proc_control_node_B.c_fv = 0.0;
      for (int32_T ia{iac}; ia <= iac + 146; ia++) {
        proc_control_node_B.c_fv += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += proc_control_node_B.c_fv;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc_con_maxConstraintViolation
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, const real_T x_data[])
{
  real_T v;
  int32_T mIneq;
  proc_control_node_B.mLB_n = obj->sizes[3];
  proc_control_node_B.mUB_hg = obj->sizes[4];
  proc_control_node_B.mFixed_o = obj->sizes[0];
  if (obj->probType == 2) {
    int32_T b_k;
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (b_k = 0; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_node_xgemv_mtmcj(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      for (b_k = 0; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] -= x_data[b_k + 147];
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_node_xgemv_mtmcj(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (b_k = 0; b_k < 130; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
        x_data[(mIneq + b_k) + 148]) + x_data[(obj->sizes[2] + b_k) + 277];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[b_k]));
    }
  } else {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      int32_T b_k;
      for (b_k = 0; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_node_xgemv_mtmcjb(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      for (b_k = 0; b_k <= mIneq; b_k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_node_xgemv_mtmcjb(obj->nVar, 130, obj->Aeq.data, obj->ldA,
      x_data, obj->maxConstrWorkspace.data);
    for (mIneq = 0; mIneq < 130; mIneq++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[mIneq]));
    }
  }

  if (proc_control_node_B.mLB_n > 0) {
    for (mIneq = 0; mIneq < proc_control_node_B.mLB_n; mIneq++) {
      v = std::fmax(v, -x_data[obj->indexLB.data[mIneq] - 1] - obj->lb.data
                    [obj->indexLB.data[mIneq] - 1]);
    }
  }

  if (proc_control_node_B.mUB_hg > 0) {
    proc_control_node_B.mLB_n = 0;
    while (proc_control_node_B.mLB_n <= proc_control_node_B.mUB_hg - 1) {
      v = std::fmax(v, x_data[obj->indexUB.data[proc_control_node_B.mLB_n] - 1]
                    - obj->ub.data[obj->indexUB.data[proc_control_node_B.mLB_n]
                    - 1]);
      proc_control_node_B.mLB_n++;
    }
  }

  if (proc_control_node_B.mFixed_o > 0) {
    proc_control_node_B.mUB_hg = 0;
    while (proc_control_node_B.mUB_hg <= proc_control_node_B.mFixed_o - 1) {
      v = std::fmax(v, std::abs(x_data[obj->
        indexFixed.data[proc_control_node_B.mUB_hg] - 1] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_hg] - 1]));
      proc_control_node_B.mUB_hg++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmcjbi(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], int32_T
  ix0, real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_node_B.c_pm = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_pm += x_data[ix - 1] * A_data[ia - 1];
        ix++;
      }

      y_data[iy] += proc_control_node_B.c_pm;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc_c_maxConstraintViolation_d
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  int32_T mIneq;
  proc_control_node_B.mLB_a = obj->sizes[3];
  proc_control_node_B.mUB_h = obj->sizes[4];
  proc_control_node_B.mFixed_e = obj->sizes[0];
  if (obj->probType == 2) {
    int32_T b_k;
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (b_k = 0; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_node_xgemv_mtmcjbi(147, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      for (b_k = 0; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] -= x_data[(ix0 + b_k) + 146];
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_node_xgemv_mtmcjbi(147, 130, obj->Aeq.data, obj->ldA, x_data,
      ix0, obj->maxConstrWorkspace.data);
    for (b_k = 0; b_k < 130; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
        x_data[((ix0 + mIneq) + b_k) + 147]) + x_data[((ix0 + obj->sizes[2]) +
        b_k) + 276];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[b_k]));
    }
  } else {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      int32_T b_k;
      for (b_k = 0; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_node_xgemv_mtmcjbi(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      for (b_k = 0; b_k <= mIneq; b_k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_node_xgemv_mtmcjbi(obj->nVar, 130, obj->Aeq.data, obj->ldA,
      x_data, ix0, obj->maxConstrWorkspace.data);
    for (mIneq = 0; mIneq < 130; mIneq++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[mIneq]));
    }
  }

  if (proc_control_node_B.mLB_a > 0) {
    for (mIneq = 0; mIneq < proc_control_node_B.mLB_a; mIneq++) {
      v = std::fmax(v, -x_data[(ix0 + obj->indexLB.data[mIneq]) - 2] -
                    obj->lb.data[obj->indexLB.data[mIneq] - 1]);
    }
  }

  if (proc_control_node_B.mUB_h > 0) {
    proc_control_node_B.mLB_a = 0;
    while (proc_control_node_B.mLB_a <= proc_control_node_B.mUB_h - 1) {
      v = std::fmax(v, x_data[(ix0 + obj->indexUB.data[proc_control_node_B.mLB_a])
                    - 2] - obj->ub.data[obj->
                    indexUB.data[proc_control_node_B.mLB_a] - 1]);
      proc_control_node_B.mLB_a++;
    }
  }

  if (proc_control_node_B.mFixed_e > 0) {
    proc_control_node_B.mUB_h = 0;
    while (proc_control_node_B.mUB_h <= proc_control_node_B.mFixed_e - 1) {
      v = std::fmax(v, std::abs(x_data[(ix0 + obj->
        indexFixed.data[proc_control_node_B.mUB_h]) - 2] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_h] - 1]));
      proc_control_node_B.mUB_h++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S268>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_co_feasibleX0ForWorkingSet(real_T
  workspace_data[], const int32_T workspace_size[2], real_T xCurrent_data[],
  s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T
  *qrmanager)
{
  boolean_T nonDegenerateWset;
  proc_control_node_B.mWConstr_tmp_tmp = workingset->nActiveConstr - 1;
  proc_control_node_B.nVar_m = workingset->nVar;
  nonDegenerateWset = true;
  if (workingset->nActiveConstr != 0) {
    proc_control_node_B.iy_i = 0;
    while (proc_control_node_B.iy_i <= proc_control_node_B.mWConstr_tmp_tmp) {
      workspace_data[proc_control_node_B.iy_i] = workingset->
        bwset.data[proc_control_node_B.iy_i];
      workspace_data[proc_control_node_B.iy_i + workspace_size[0]] =
        workingset->bwset.data[proc_control_node_B.iy_i];
      proc_control_node_B.iy_i++;
    }

    proc_control_node_B.ldq = workingset->ldA;
    if (workingset->nActiveConstr != 0) {
      proc_control_node_B.iy_i = 0;
      proc_control_node_B.iAcol = (workingset->nActiveConstr - 1) *
        workingset->ldA + 1;
      proc_control_node_B.b_br = 1;
      while (((proc_control_node_B.ldq > 0) && (proc_control_node_B.b_br <=
               proc_control_node_B.iAcol)) || ((proc_control_node_B.ldq < 0) &&
              (proc_control_node_B.b_br >= proc_control_node_B.iAcol))) {
        proc_control_node_B.ix_ii = 0;
        proc_control_node_B.c_eb = 0.0;
        proc_control_node_B.jBcol = (proc_control_node_B.b_br +
          proc_control_node_B.nVar_m) - 1;
        proc_control_node_B.b_ar = proc_control_node_B.b_br;
        while (proc_control_node_B.b_ar <= proc_control_node_B.jBcol) {
          proc_control_node_B.c_eb += workingset->
            ATwset.data[proc_control_node_B.b_ar - 1] *
            xCurrent_data[proc_control_node_B.ix_ii];
          proc_control_node_B.ix_ii++;
          proc_control_node_B.b_ar++;
        }

        workspace_data[proc_control_node_B.iy_i] += -proc_control_node_B.c_eb;
        proc_control_node_B.iy_i++;
        proc_control_node_B.b_br += proc_control_node_B.ldq;
      }
    }

    if (workingset->nActiveConstr >= workingset->nVar) {
      proc_control_node_B.ldq = 0;
      while (proc_control_node_B.ldq <= proc_control_node_B.nVar_m - 1) {
        proc_control_node_B.ix_ii = qrmanager->ldq * proc_control_node_B.ldq;
        proc_control_node_B.iAcol = 0;
        while (proc_control_node_B.iAcol <= proc_control_node_B.mWConstr_tmp_tmp)
        {
          qrmanager->QR.data[proc_control_node_B.iAcol +
            proc_control_node_B.ix_ii] = workingset->ATwset.data[workingset->ldA
            * proc_control_node_B.iAcol + proc_control_node_B.ldq];
          proc_control_node_B.iAcol++;
        }

        proc_control_node_B.ldq++;
      }

      proc_control_node_factorQR(qrmanager, workingset->nActiveConstr,
        workingset->nVar);
      proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_node_B.ldq = qrmanager->ldq;
      proc_control_node_B.iy_i = workspace_size[0];
      proc_control_node_B.b_ar = workspace_size[0] * workspace_size[1];
      if (0 <= proc_control_node_B.b_ar - 1) {
        std::memcpy(&proc_control_node_B.B_data[0], &workspace_data[0],
                    proc_control_node_B.b_ar * sizeof(real_T));
      }

      proc_control_node_B.ix_ii = 0;
      while ((proc_control_node_B.iy_i > 0) && (proc_control_node_B.ix_ii <=
              proc_control_node_B.iy_i)) {
        proc_control_node_B.iAcol = proc_control_node_B.ix_ii;
        proc_control_node_B.b_br = proc_control_node_B.ix_ii +
          proc_control_node_B.nVar_m;
        while (proc_control_node_B.iAcol + 1 <= proc_control_node_B.b_br) {
          workspace_data[proc_control_node_B.iAcol] = 0.0;
          proc_control_node_B.iAcol++;
        }

        proc_control_node_B.ix_ii += proc_control_node_B.iy_i;
      }

      proc_control_node_B.b_br = -1;
      proc_control_node_B.jBcol = 0;
      while ((proc_control_node_B.iy_i > 0) && (proc_control_node_B.jBcol <=
              proc_control_node_B.iy_i)) {
        proc_control_node_B.b_ar = -1;
        proc_control_node_B.iAcol = proc_control_node_B.jBcol;
        proc_control_node_B.ix_ii = proc_control_node_B.jBcol +
          proc_control_node_B.nVar_m;
        while (proc_control_node_B.iAcol + 1 <= proc_control_node_B.ix_ii) {
          proc_control_node_B.c_eb = 0.0;
          proc_control_node_B.f_g = 1;
          while (proc_control_node_B.f_g - 1 <=
                 proc_control_node_B.mWConstr_tmp_tmp) {
            proc_control_node_B.c_eb += qrmanager->
              Q.data[proc_control_node_B.f_g + proc_control_node_B.b_ar] *
              proc_control_node_B.B_data[proc_control_node_B.f_g +
              proc_control_node_B.b_br];
            proc_control_node_B.f_g++;
          }

          workspace_data[proc_control_node_B.iAcol] += proc_control_node_B.c_eb;
          proc_control_node_B.b_ar += proc_control_node_B.ldq;
          proc_control_node_B.iAcol++;
        }

        proc_control_node_B.b_br += proc_control_node_B.iy_i;
        proc_control_node_B.jBcol += proc_control_node_B.iy_i;
      }

      proc_control_node_B.b_ar = workingset->nVar;
      while (proc_control_node_B.b_ar > 0) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.c_eb = workspace_data[proc_control_node_B.b_ar + -1];
        if (proc_control_node_B.c_eb != 0.0) {
          workspace_data[proc_control_node_B.b_ar + -1] =
            proc_control_node_B.c_eb / qrmanager->
            QR.data[proc_control_node_B.b_ar + proc_control_node_B.iAcol];
          proc_control_node_B.ix_ii = 1;
          while (proc_control_node_B.ix_ii - 1 <= proc_control_node_B.b_ar - 2)
          {
            workspace_data[proc_control_node_B.ix_ii + -1] -=
              workspace_data[proc_control_node_B.b_ar + -1] * qrmanager->
              QR.data[proc_control_node_B.ix_ii + proc_control_node_B.iAcol];
            proc_control_node_B.ix_ii++;
          }
        }

        proc_control_node_B.b_ar--;
      }

      proc_control_node_B.b_ar = workingset->nVar;
      while (proc_control_node_B.b_ar > 0) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.jBcol = (proc_control_node_B.iy_i +
          proc_control_node_B.b_ar) - 1;
        if (workspace_data[proc_control_node_B.jBcol] != 0.0) {
          workspace_data[proc_control_node_B.jBcol] /= qrmanager->
            QR.data[proc_control_node_B.b_ar + proc_control_node_B.iAcol];
          proc_control_node_B.ix_ii = 1;
          while (proc_control_node_B.ix_ii - 1 <= proc_control_node_B.b_ar - 2)
          {
            proc_control_node_B.mWConstr_tmp_tmp = (proc_control_node_B.iy_i +
              proc_control_node_B.ix_ii) - 1;
            workspace_data[proc_control_node_B.mWConstr_tmp_tmp] -=
              qrmanager->QR.data[proc_control_node_B.ix_ii +
              proc_control_node_B.iAcol] *
              workspace_data[proc_control_node_B.jBcol];
            proc_control_node_B.ix_ii++;
          }
        }

        proc_control_node_B.b_ar--;
      }
    } else {
      proc_control_node_factorQR_h(qrmanager, workingset->ATwset.data,
        workingset->nVar, workingset->nActiveConstr, workingset->ldA);
      proc_control_node_computeQ_(qrmanager, qrmanager->minRowCol);
      proc_control_node_B.ldq = qrmanager->ldq;
      proc_control_node_B.iy_i = workspace_size[0];
      proc_control_node_B.b_ar = 1;
      while (proc_control_node_B.b_ar - 1 <=
             proc_control_node_B.mWConstr_tmp_tmp) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.c_eb = workspace_data[proc_control_node_B.b_ar + -1];
        proc_control_node_B.ix_ii = 1;
        while (proc_control_node_B.ix_ii - 1 <= proc_control_node_B.b_ar - 2) {
          proc_control_node_B.c_eb -= qrmanager->
            QR.data[proc_control_node_B.ix_ii + proc_control_node_B.iAcol] *
            workspace_data[proc_control_node_B.ix_ii + -1];
          proc_control_node_B.ix_ii++;
        }

        workspace_data[proc_control_node_B.b_ar + -1] = proc_control_node_B.c_eb
          / qrmanager->QR.data[proc_control_node_B.b_ar +
          proc_control_node_B.iAcol];
        proc_control_node_B.b_ar++;
      }

      proc_control_node_B.b_ar = 1;
      while (proc_control_node_B.b_ar - 1 <=
             proc_control_node_B.mWConstr_tmp_tmp) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.jBcol = (proc_control_node_B.iy_i +
          proc_control_node_B.b_ar) - 1;
        proc_control_node_B.c_eb = workspace_data[proc_control_node_B.jBcol];
        proc_control_node_B.ix_ii = 1;
        while (proc_control_node_B.ix_ii - 1 <= proc_control_node_B.b_ar - 2) {
          proc_control_node_B.c_eb -= workspace_data[(proc_control_node_B.iy_i +
            proc_control_node_B.ix_ii) - 1] * qrmanager->
            QR.data[proc_control_node_B.ix_ii + proc_control_node_B.iAcol];
          proc_control_node_B.ix_ii++;
        }

        workspace_data[proc_control_node_B.jBcol] = proc_control_node_B.c_eb /
          qrmanager->QR.data[proc_control_node_B.b_ar +
          proc_control_node_B.iAcol];
        proc_control_node_B.b_ar++;
      }

      proc_control_node_B.b_ar = workspace_size[0] * workspace_size[1];
      if (0 <= proc_control_node_B.b_ar - 1) {
        std::memcpy(&proc_control_node_B.B_data[0], &workspace_data[0],
                    proc_control_node_B.b_ar * sizeof(real_T));
      }

      proc_control_node_B.ix_ii = 0;
      while ((proc_control_node_B.iy_i > 0) && (proc_control_node_B.ix_ii <=
              proc_control_node_B.iy_i)) {
        proc_control_node_B.iAcol = proc_control_node_B.ix_ii;
        proc_control_node_B.b_br = proc_control_node_B.ix_ii +
          proc_control_node_B.nVar_m;
        while (proc_control_node_B.iAcol + 1 <= proc_control_node_B.b_br) {
          workspace_data[proc_control_node_B.iAcol] = 0.0;
          proc_control_node_B.iAcol++;
        }

        proc_control_node_B.ix_ii += proc_control_node_B.iy_i;
      }

      proc_control_node_B.jBcol = 1;
      proc_control_node_B.b_ar = 0;
      while ((proc_control_node_B.iy_i > 0) && (proc_control_node_B.b_ar <=
              proc_control_node_B.iy_i)) {
        proc_control_node_B.iAcol = -1;
        proc_control_node_B.ix_ii = proc_control_node_B.jBcol;
        proc_control_node_B.f_g = proc_control_node_B.jBcol +
          proc_control_node_B.mWConstr_tmp_tmp;
        while (proc_control_node_B.ix_ii <= proc_control_node_B.f_g) {
          proc_control_node_B.b_br = proc_control_node_B.iAcol;
          proc_control_node_B.b_ic = proc_control_node_B.b_ar;
          proc_control_node_B.g_m = proc_control_node_B.b_ar +
            proc_control_node_B.nVar_m;
          while (proc_control_node_B.b_ic + 1 <= proc_control_node_B.g_m) {
            proc_control_node_B.b_br++;
            workspace_data[proc_control_node_B.b_ic] +=
              proc_control_node_B.B_data[proc_control_node_B.ix_ii - 1] *
              qrmanager->Q.data[proc_control_node_B.b_br];
            proc_control_node_B.b_ic++;
          }

          proc_control_node_B.iAcol += proc_control_node_B.ldq;
          proc_control_node_B.ix_ii++;
        }

        proc_control_node_B.jBcol += proc_control_node_B.iy_i;
        proc_control_node_B.b_ar += proc_control_node_B.iy_i;
      }
    }

    proc_control_node_B.iy_i = 0;
    int32_T exitg1;
    do {
      exitg1 = 0;
      if (proc_control_node_B.iy_i <= proc_control_node_B.nVar_m - 1) {
        proc_control_node_B.c_eb = workspace_data[proc_control_node_B.iy_i];
        if (std::isinf(proc_control_node_B.c_eb) || std::isnan
            (proc_control_node_B.c_eb)) {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else {
          proc_control_node_B.c_eb = workspace_data[proc_control_node_B.iy_i +
            workspace_size[0]];
          if (std::isinf(proc_control_node_B.c_eb) || std::isnan
              (proc_control_node_B.c_eb)) {
            nonDegenerateWset = false;
            exitg1 = 1;
          } else {
            proc_control_node_B.iy_i++;
          }
        }
      } else {
        proc_control_node_B.iy_i = 0;
        while (proc_control_node_B.iy_i <= proc_control_node_B.nVar_m - 1) {
          workspace_data[proc_control_node_B.iy_i] +=
            xCurrent_data[proc_control_node_B.iy_i];
          proc_control_node_B.iy_i++;
        }

        proc_control_node_B.c_eb = proc_con_maxConstraintViolation(workingset,
          workspace_data);
        proc_control_node_B.constrViolation_basicX =
          proc_c_maxConstraintViolation_d(workingset, workspace_data,
          workspace_size[0] + 1);
        if ((proc_control_node_B.c_eb <= 2.2204460492503131E-16) ||
            (proc_control_node_B.c_eb <
             proc_control_node_B.constrViolation_basicX)) {
          proc_control_node_B.iy_i = 0;
          while (proc_control_node_B.iy_i <= proc_control_node_B.nVar_m - 1) {
            xCurrent_data[proc_control_node_B.iy_i] =
              workspace_data[proc_control_node_B.iy_i];
            proc_control_node_B.iy_i++;
          }
        } else {
          proc_control_node_B.iy_i = 0;
          while (proc_control_node_B.iy_i <= proc_control_node_B.nVar_m - 1) {
            xCurrent_data[proc_control_node_B.iy_i] =
              workspace_data[workspace_size[0] + proc_control_node_B.iy_i];
            proc_control_node_B.iy_i++;
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  return nonDegenerateWset;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_con_RemoveDependentIneq__f
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *
   qrmanager, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace)
{
  proc_control_node_B.nFixedConstr = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  proc_control_node_B.nVar_c = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_node_B.tol_d = 1000.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_node_B.nDepIneq = 0;
    while (proc_control_node_B.nDepIneq <= proc_control_node_B.nFixedConstr - 1)
    {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq] = 1;
      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_B.nDepIneq = proc_control_node_B.nFixedConstr + 1;
    while (proc_control_node_B.nDepIneq <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq - 1] = 0;
      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_B.nDepIneq = 0;
    while (proc_control_node_B.nDepIneq <= workingset->nActiveConstr - 1) {
      proc_control_node_B.idx_dk = qrmanager->ldq * proc_control_node_B.nDepIneq;
      proc_control_node_B.idx_col_c = workingset->ldA *
        proc_control_node_B.nDepIneq;
      proc_control_node_B.k_b = 1;
      while (proc_control_node_B.k_b - 1 <= proc_control_node_B.nVar_c - 1) {
        qrmanager->QR.data[(proc_control_node_B.idx_dk + proc_control_node_B.k_b)
          - 1] = workingset->ATwset.data[(proc_control_node_B.idx_col_c +
          proc_control_node_B.k_b) - 1];
        proc_control_node_B.k_b++;
      }

      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_node_B.nDepIneq = 0;
    proc_control_node_B.idx_dk = workingset->nActiveConstr - 1;
    while (proc_control_node_B.idx_dk + 1 > proc_control_node_B.nVar_c) {
      proc_control_node_B.nDepIneq++;
      memspace->workspace_int.data[proc_control_node_B.nDepIneq - 1] =
        qrmanager->jpvt.data[proc_control_node_B.idx_dk];
      proc_control_node_B.idx_dk--;
    }

    if (proc_control_node_B.idx_dk + 1 <= workingset->nVar) {
      proc_control_node_B.nVar_c = qrmanager->ldq * proc_control_node_B.idx_dk +
        proc_control_node_B.idx_dk;
      while ((proc_control_node_B.idx_dk + 1 > proc_control_node_B.nFixedConstr)
             && (std::abs(qrmanager->QR.data[proc_control_node_B.nVar_c]) <
                 proc_control_node_B.tol_d)) {
        proc_control_node_B.nDepIneq++;
        memspace->workspace_int.data[proc_control_node_B.nDepIneq - 1] =
          qrmanager->jpvt.data[proc_control_node_B.idx_dk];
        proc_control_node_B.idx_dk--;
        proc_control_node_B.nVar_c = (proc_control_node_B.nVar_c -
          qrmanager->ldq) - 1;
      }
    }

    proc_control_node_countsort(memspace->workspace_int.data,
      proc_control_node_B.nDepIneq, memspace->workspace_sort.data,
      proc_control_node_B.nFixedConstr + 1, workingset->nActiveConstr);
    proc_control_node_B.nFixedConstr = proc_control_node_B.nDepIneq;
    while (proc_control_node_B.nFixedConstr > 0) {
      proc_control_node_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_node_B.nFixedConstr - 1]);
      proc_control_node_B.nFixedConstr--;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_no_xgemv_mtmcjbiad(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T d;
      int32_T ix;
      ix = 0;
      proc_control_node_B.c_i3 = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_i3 += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += proc_control_node_B.c_i3;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_xgemv_mtmcjbia(int32_T n,
  const real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T ix;
      ix = 0;
      proc_control_node_B.c_m = 0.0;
      for (int32_T ia{iac}; ia <= iac + 146; ia++) {
        proc_control_node_B.c_m += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += proc_control_node_B.c_m;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc__maxConstraintViolation_du
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, const real_T x_data[])
{
  real_T v;
  int32_T mIneq;
  proc_control_node_B.mLB_d = obj->sizes[3];
  proc_control_node_B.mUB_e = obj->sizes[4];
  proc_control_node_B.mFixed_c = obj->sizes[0];
  if (obj->probType == 2) {
    int32_T b_k;
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (b_k = 0; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_nod_xgemv_mtmcjbia(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      for (b_k = 0; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] -= x_data[b_k + 147];
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_nod_xgemv_mtmcjbia(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (b_k = 0; b_k < 130; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
        x_data[(mIneq + b_k) + 148]) + x_data[(obj->sizes[2] + b_k) + 277];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[b_k]));
    }
  } else {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      int32_T b_k;
      for (b_k = 0; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_no_xgemv_mtmcjbiad(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      for (b_k = 0; b_k <= mIneq; b_k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_no_xgemv_mtmcjbiad(obj->nVar, 130, obj->Aeq.data, obj->ldA,
      x_data, obj->maxConstrWorkspace.data);
    for (mIneq = 0; mIneq < 130; mIneq++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[mIneq]));
    }
  }

  if (proc_control_node_B.mLB_d > 0) {
    for (mIneq = 0; mIneq < proc_control_node_B.mLB_d; mIneq++) {
      v = std::fmax(v, -x_data[obj->indexLB.data[mIneq] - 1] - obj->lb.data
                    [obj->indexLB.data[mIneq] - 1]);
    }
  }

  if (proc_control_node_B.mUB_e > 0) {
    proc_control_node_B.mLB_d = 0;
    while (proc_control_node_B.mLB_d <= proc_control_node_B.mUB_e - 1) {
      v = std::fmax(v, x_data[obj->indexUB.data[proc_control_node_B.mLB_d] - 1]
                    - obj->ub.data[obj->indexUB.data[proc_control_node_B.mLB_d]
                    - 1]);
      proc_control_node_B.mLB_d++;
    }
  }

  if (proc_control_node_B.mFixed_c > 0) {
    proc_control_node_B.mUB_e = 0;
    while (proc_control_node_B.mUB_e <= proc_control_node_B.mFixed_c - 1) {
      v = std::fmax(v, std::abs(x_data[obj->
        indexFixed.data[proc_control_node_B.mUB_e] - 1] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_e] - 1]));
      proc_control_node_B.mUB_e++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_PresolveWorkingSet
  (s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution, s_OnOuVjEActeQRN4FyNqSwB_proc_T
   *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset,
   s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager)
{
  solution->state = 82;
  proc_control_node_B.b_l = proc_control_RemoveDependentEq_(memspace, workingset,
    qrmanager);
  if ((proc_control_node_B.b_l != -1) && (workingset->nActiveConstr <=
       qrmanager->ldq)) {
    boolean_T guard1{ false };

    boolean_T okWorkingSet;
    proc_contr_RemoveDependentIneq_(workingset, qrmanager, memspace);
    okWorkingSet = proc_co_feasibleX0ForWorkingSet
      (memspace->workspace_double.data, memspace->workspace_double.size,
       solution->xstar.data, workingset, qrmanager);
    guard1 = false;
    if (!okWorkingSet) {
      proc_con_RemoveDependentIneq__f(workingset, qrmanager, memspace);
      okWorkingSet = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->xstar.data, workingset, qrmanager);
      if (!okWorkingSet) {
        solution->state = -7;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
      {
        proc_control_node_B.constrViolation = proc__maxConstraintViolation_du
          (workingset, solution->xstar.data);
        if (proc_control_node_B.constrViolation > 0.02) {
          solution->state = -2;
        }
      }
    }
  } else {
    solution->state = -3;
    proc_contro_removeAllIneqConstr(workingset);
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_xgemv_mtmcjbiadz(int32_T m,
  int32_T n, const real_T A[21609], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    for (ix = 0; ix < m; ix++) {
      y_data[ix] = 0.0;
    }

    ix = 0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A[ia - 1] * x_data[ix];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_contro_computeGrad_StoreHx
  (s_oZGbvi5mjKKebHB9aR5DoG_proc_T *obj, const real_T H[21609], const real_T
   f_data[], const real_T x_data[])
{
  switch (obj->objtype) {
   case 5:
    proc_control_node_B.maxRegVar = 0;
    while (proc_control_node_B.maxRegVar <= obj->nvar - 2) {
      obj->grad.data[proc_control_node_B.maxRegVar] = 0.0;
      proc_control_node_B.maxRegVar++;
    }

    obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
    break;

   case 3:
    proc_control_n_xgemv_mtmcjbiadz(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    proc_control_node_B.maxRegVar = 0;
    while (proc_control_node_B.maxRegVar <= obj->nvar - 1) {
      obj->grad.data[proc_control_node_B.maxRegVar] = obj->
        Hx.data[proc_control_node_B.maxRegVar];
      proc_control_node_B.maxRegVar++;
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      proc_control_node_B.maxRegVar = obj->nvar - 1;
      for (int32_T iy{0}; iy <= proc_control_node_B.maxRegVar; iy++) {
        obj->grad.data[iy] += f_data[iy];
      }
    }
    break;

   default:
    {
      int32_T d_i;
      int32_T iy;
      proc_control_node_B.maxRegVar = obj->maxVar - 1;
      proc_control_n_xgemv_mtmcjbiadz(obj->nvar, obj->nvar, H, obj->nvar, x_data,
        obj->Hx.data);
      for (iy = obj->nvar; iy < proc_control_node_B.maxRegVar; iy++) {
        obj->Hx.data[iy] = obj->beta * x_data[iy];
      }

      for (d_i = 0; d_i < proc_control_node_B.maxRegVar; d_i++) {
        obj->grad.data[d_i] = obj->Hx.data[d_i];
      }

      if (obj->hasLinear && (obj->nvar >= 1)) {
        proc_control_node_B.maxRegVar = obj->nvar - 1;
        for (iy = 0; iy <= proc_control_node_B.maxRegVar; iy++) {
          obj->grad.data[iy] += f_data[iy];
        }
      }

      proc_control_node_B.maxRegVar = (obj->maxVar - obj->nvar) - 1;
      if (proc_control_node_B.maxRegVar >= 1) {
        iy = obj->nvar;
        for (d_i = 0; d_i < proc_control_node_B.maxRegVar; d_i++) {
          obj->grad.data[iy] += obj->rho;
          iy++;
        }
      }
    }
    break;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc_contro_computeFval_ReuseHx(const
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    {
      if (obj->hasLinear) {
        int32_T maxRegVar;
        for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
          workspace_data[maxRegVar] = 0.5 * obj->Hx.data[maxRegVar] +
            f_data[maxRegVar];
        }

        val = 0.0;
        if (obj->nvar >= 1) {
          for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
            val += workspace_data[maxRegVar] * x_data[maxRegVar];
          }
        }
      } else {
        val = 0.0;
        if (obj->nvar >= 1) {
          for (int32_T maxRegVar{0}; maxRegVar < obj->nvar; maxRegVar++) {
            val += x_data[maxRegVar] * obj->Hx.data[maxRegVar];
          }
        }

        val *= 0.5;
      }
    }
    break;

   default:
    {
      int32_T maxRegVar;
      maxRegVar = obj->maxVar - 1;
      if (obj->hasLinear) {
        int32_T d_k;
        for (d_k = 0; d_k < obj->nvar; d_k++) {
          workspace_data[d_k] = f_data[d_k];
        }

        d_k = obj->maxVar - obj->nvar;
        for (int32_T c_k{0}; c_k <= d_k - 2; c_k++) {
          workspace_data[obj->nvar + c_k] = obj->rho;
        }

        for (d_k = 0; d_k < maxRegVar; d_k++) {
          workspace_data[d_k] += 0.5 * obj->Hx.data[d_k];
        }

        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
          for (maxRegVar = 0; maxRegVar <= obj->maxVar - 2; maxRegVar++) {
            val += workspace_data[maxRegVar] * x_data[maxRegVar];
          }
        }
      } else {
        int32_T d_k;
        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
          for (d_k = 0; d_k <= obj->maxVar - 2; d_k++) {
            val += x_data[d_k] * obj->Hx.data[d_k];
          }
        }

        val *= 0.5;
        for (d_k = obj->nvar; d_k < maxRegVar; d_k++) {
          val += x_data[d_k] * obj->rho;
        }
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xrotg(real_T *a, real_T *b,
  real_T *c, real_T *s)
{
  proc_control_node_B.roe = *b;
  proc_control_node_B.absa = std::abs(*a);
  proc_control_node_B.absb = std::abs(*b);
  if (proc_control_node_B.absa > proc_control_node_B.absb) {
    proc_control_node_B.roe = *a;
  }

  proc_control_node_B.scale_o5 = proc_control_node_B.absa +
    proc_control_node_B.absb;
  if (proc_control_node_B.scale_o5 == 0.0) {
    *s = 0.0;
    *c = 1.0;
    *a = 0.0;
    *b = 0.0;
  } else {
    proc_control_node_B.ads = proc_control_node_B.absa /
      proc_control_node_B.scale_o5;
    proc_control_node_B.bds = proc_control_node_B.absb /
      proc_control_node_B.scale_o5;
    proc_control_node_B.scale_o5 *= std::sqrt(proc_control_node_B.ads *
      proc_control_node_B.ads + proc_control_node_B.bds *
      proc_control_node_B.bds);
    if (proc_control_node_B.roe < 0.0) {
      proc_control_node_B.scale_o5 = -proc_control_node_B.scale_o5;
    }

    *c = *a / proc_control_node_B.scale_o5;
    *s = *b / proc_control_node_B.scale_o5;
    if (proc_control_node_B.absa > proc_control_node_B.absb) {
      *b = *s;
    } else if (*c != 0.0) {
      *b = 1.0 / *c;
    } else {
      *b = 1.0;
    }

    *a = proc_control_node_B.scale_o5;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_deleteColMoveEnd
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, int32_T idx)
{
  int32_T i;
  if (obj->usedPivoting) {
    i = 1;
    while ((i <= obj->ncols) && (obj->jpvt.data[i - 1] != idx)) {
      i++;
    }

    idx = i;
  }

  if (idx >= obj->ncols) {
    obj->ncols--;
  } else {
    obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
    for (i = 0; i < obj->minRowCol; i++) {
      obj->QR.data[i + obj->ldq * (idx - 1)] = obj->QR.data[(obj->ncols - 1) *
        obj->ldq + i];
    }

    obj->ncols--;
    if (obj->mrows <= obj->ncols) {
      obj->minRowCol = obj->mrows;
    } else {
      obj->minRowCol = obj->ncols;
    }

    if (idx < obj->mrows) {
      int32_T QRk0;
      int32_T b_ix;
      int32_T idxRotGCol;
      int32_T ix;
      int32_T k;
      if (obj->mrows - 1 <= obj->ncols) {
        i = obj->mrows - 1;
      } else {
        i = obj->ncols;
      }

      k = i;
      idxRotGCol = (idx - 1) * obj->ldq;
      while (k >= idx) {
        QRk0 = k + idxRotGCol;
        proc_control_node_B.b_temp = obj->QR.data[QRk0];
        proc_control_node_xrotg(&obj->QR.data[(k + idxRotGCol) - 1],
          &proc_control_node_B.b_temp, &proc_control_node_B.c_c,
          &proc_control_node_B.b_s);
        obj->QR.data[QRk0] = proc_control_node_B.b_temp;
        obj->QR.data[k + obj->ldq * (k - 1)] = 0.0;
        QRk0 = obj->ldq * idx + k;
        b_ix = obj->ncols - idx;
        if (b_ix >= 1) {
          ix = QRk0 - 1;
          for (int32_T d_k{0}; d_k < b_ix; d_k++) {
            proc_control_node_B.b_temp = obj->QR.data[ix] *
              proc_control_node_B.c_c + obj->QR.data[QRk0] *
              proc_control_node_B.b_s;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_node_B.c_c -
              obj->QR.data[ix] * proc_control_node_B.b_s;
            obj->QR.data[ix] = proc_control_node_B.b_temp;
            QRk0 += obj->ldq;
            ix += obj->ldq;
          }
        }

        QRk0 = (k - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          b_ix = obj->ldq + QRk0;
          for (ix = 0; ix < obj->mrows; ix++) {
            proc_control_node_B.b_temp = obj->Q.data[QRk0] *
              proc_control_node_B.c_c + obj->Q.data[b_ix] *
              proc_control_node_B.b_s;
            obj->Q.data[b_ix] = obj->Q.data[b_ix] * proc_control_node_B.c_c -
              obj->Q.data[QRk0] * proc_control_node_B.b_s;
            obj->Q.data[QRk0] = proc_control_node_B.b_temp;
            b_ix++;
            QRk0++;
          }
        }

        k--;
      }

      for (k = idx + 1; k <= i; k++) {
        idxRotGCol = (k - 1) * obj->ldq;
        QRk0 = k + idxRotGCol;
        proc_control_node_B.b_temp = obj->QR.data[QRk0];
        proc_control_node_xrotg(&obj->QR.data[(k + idxRotGCol) - 1],
          &proc_control_node_B.b_temp, &proc_control_node_B.c_c,
          &proc_control_node_B.b_s);
        obj->QR.data[QRk0] = proc_control_node_B.b_temp;
        QRk0 = (obj->ldq + 1) * k;
        idxRotGCol = obj->ncols - k;
        if (idxRotGCol >= 1) {
          b_ix = QRk0 - 1;
          for (ix = 0; ix < idxRotGCol; ix++) {
            proc_control_node_B.b_temp = obj->QR.data[b_ix] *
              proc_control_node_B.c_c + obj->QR.data[QRk0] *
              proc_control_node_B.b_s;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_node_B.c_c -
              obj->QR.data[b_ix] * proc_control_node_B.b_s;
            obj->QR.data[b_ix] = proc_control_node_B.b_temp;
            QRk0 += obj->ldq;
            b_ix += obj->ldq;
          }
        }

        idxRotGCol = (k - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          QRk0 = obj->ldq + idxRotGCol;
          for (b_ix = 0; b_ix < obj->mrows; b_ix++) {
            proc_control_node_B.b_temp = obj->Q.data[idxRotGCol] *
              proc_control_node_B.c_c + obj->Q.data[QRk0] *
              proc_control_node_B.b_s;
            obj->Q.data[QRk0] = obj->Q.data[QRk0] * proc_control_node_B.c_c -
              obj->Q.data[idxRotGCol] * proc_control_node_B.b_s;
            obj->Q.data[idxRotGCol] = proc_control_node_B.b_temp;
            QRk0++;
            idxRotGCol++;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_strcmp(const char_T a[7])
{
  static const char_T b[7]{ 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  int32_T ret;
  ret = memcmp(&a[0], &b[0], 7);
  return ret == 0;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemm(int32_T m, int32_T n,
  int32_T k, const real_T A[21609], int32_T lda, const real_T B_data[], int32_T
  ib0, int32_T ldb, real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    int32_T ar;
    int32_T br;
    int32_T cr;
    int32_T ib;
    br = ib0;
    proc_control_node_B.lastColC = (n - 1) * ldc;
    cr = 0;
    while (((ldc > 0) && (cr <= proc_control_node_B.lastColC)) || ((ldc < 0) &&
            (cr >= proc_control_node_B.lastColC))) {
      ar = cr;
      ib = cr + m;
      while (ar + 1 <= ib) {
        C_data[ar] = 0.0;
        ar++;
      }

      cr += ldc;
    }

    cr = 0;
    while (((ldc > 0) && (cr <= proc_control_node_B.lastColC)) || ((ldc < 0) &&
            (cr >= proc_control_node_B.lastColC))) {
      int32_T c;
      ar = -1;
      ib = br;
      c = br + k;
      while (ib <= c - 1) {
        int32_T b_ic;
        int32_T d;
        int32_T ia;
        ia = ar;
        b_ic = cr;
        d = cr + m;
        while (b_ic + 1 <= d) {
          ia++;
          C_data[b_ic] += B_data[ib - 1] * A[ia];
          b_ic++;
        }

        ar += lda;
        ib++;
      }

      br += ldb;
      cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemm_m(int32_T m, int32_T n,
  int32_T k, const real_T A_data[], int32_T ia0, int32_T lda, const real_T
  B_data[], int32_T ldb, real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    int32_T ar;
    int32_T b_cr;
    int32_T br;
    int32_T lastColC;
    lastColC = (n - 1) * ldc;
    br = 0;
    while (((ldc > 0) && (br <= lastColC)) || ((ldc < 0) && (br >= lastColC))) {
      b_cr = br;
      ar = br + m;
      while (b_cr + 1 <= ar) {
        C_data[b_cr] = 0.0;
        b_cr++;
      }

      br += ldc;
    }

    br = -1;
    b_cr = 0;
    while (((ldc > 0) && (b_cr <= lastColC)) || ((ldc < 0) && (b_cr >= lastColC)))
    {
      int32_T b_ic;
      int32_T c;
      ar = ia0;
      b_ic = b_cr;
      c = b_cr + m;
      while (b_ic + 1 <= c) {
        proc_control_node_B.temp_n = 0.0;
        for (int32_T w{1}; w - 1 < k; w++) {
          proc_control_node_B.temp_n += A_data[(w + ar) - 2] * B_data[w + br];
        }

        C_data[b_ic] += proc_control_node_B.temp_n;
        ar += lda;
        b_ic++;
      }

      br += ldb;
      b_cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_node_ixamax_k(int32_T n, const
  real_T x_data[], int32_T incx)
{
  int32_T idxmax;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      real_T smax;
      int32_T ix;
      ix = 0;
      smax = std::abs(x_data[0]);
      for (int32_T k{2}; k <= n; k++) {
        real_T s;
        ix += incx;
        s = std::abs(x_data[ix]);
        if (s > smax) {
          idxmax = k;
          smax = s;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_fullColLDL2_
  (s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T LDimSizeP1;
  LDimSizeP1 = obj->ldm;
  for (int32_T k{0}; k < NColsRemain; k++) {
    int32_T LD_diagOffset;
    int32_T j;
    int32_T jA;
    int32_T subMatrixDim;
    LD_diagOffset = ((LDimSizeP1 + 1) * k + LD_offset) - 1;
    proc_control_node_B.alpha1 = -1.0 / obj->FMat.data[LD_diagOffset];
    subMatrixDim = (NColsRemain - k) - 2;
    for (jA = 1; jA - 1 <= subMatrixDim; jA++) {
      obj->workspace_ = obj->FMat.data[LD_diagOffset + jA];
    }

    proc_control_node_B.y_px = obj->workspace_;
    if (!(proc_control_node_B.alpha1 == 0.0)) {
      jA = (LD_diagOffset + LDimSizeP1) + 1;
      for (j = 0; j <= subMatrixDim; j++) {
        if (proc_control_node_B.y_px != 0.0) {
          int32_T b;
          int32_T ijA;
          proc_control_node_B.temp_b = proc_control_node_B.y_px *
            proc_control_node_B.alpha1;
          ijA = jA;
          b = subMatrixDim + jA;
          while (ijA + 1 <= b + 1) {
            obj->FMat.data[ijA] += obj->workspace_ * proc_control_node_B.temp_b;
            ijA++;
          }
        }

        jA += obj->ldm;
      }
    }

    for (jA = 1; jA - 1 <= subMatrixDim; jA++) {
      j = LD_diagOffset + jA;
      obj->FMat.data[j] /= obj->FMat.data[LD_diagOffset];
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_no_partialColLDL3_
  (s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T br;
  int32_T d;
  int32_T ia;
  int32_T ix;
  proc_control_node_B.LDimSizeP1_b = obj->ldm + 1;
  for (proc_control_node_B.k_jd = 0; proc_control_node_B.k_jd < 48;
       proc_control_node_B.k_jd++) {
    proc_control_node_B.subRows = (NColsRemain - proc_control_node_B.k_jd) - 1;
    proc_control_node_B.LD_diagOffset_d = (proc_control_node_B.LDimSizeP1_b *
      proc_control_node_B.k_jd + LD_offset) - 1;
    proc_control_node_B.idx_dl = 0;
    while (proc_control_node_B.idx_dl <= proc_control_node_B.subRows) {
      obj->workspace_ = obj->FMat.data[proc_control_node_B.LD_diagOffset_d +
        proc_control_node_B.idx_dl];
      proc_control_node_B.idx_dl++;
    }

    proc_control_node_B.idx_dl = 0;
    while (proc_control_node_B.idx_dl <= NColsRemain - 1) {
      obj->workspace2_ = obj->workspace_;
      proc_control_node_B.idx_dl++;
    }

    proc_control_node_B.idx_dl = obj->ldm;
    proc_control_node_B.y_ey = obj->workspace2_;
    if ((NColsRemain != 0) && (proc_control_node_B.k_jd != 0)) {
      ix = LD_offset + proc_control_node_B.k_jd;
      proc_control_node_B.FMat_offset = (proc_control_node_B.k_jd - 1) *
        obj->ldm + 1;
      br = 1;
      while (((proc_control_node_B.idx_dl > 0) && (br <=
               proc_control_node_B.FMat_offset)) || ((proc_control_node_B.idx_dl
               < 0) && (br >= proc_control_node_B.FMat_offset))) {
        d = (br + NColsRemain) - 1;
        for (ia = br; ia <= d; ia++) {
          proc_control_node_B.y_ey += -obj->FMat.data[ix - 1] * obj->workspace_;
        }

        ix += obj->ldm;
        br += proc_control_node_B.idx_dl;
      }
    }

    obj->workspace2_ = proc_control_node_B.y_ey;
    proc_control_node_B.idx_dl = 0;
    while (proc_control_node_B.idx_dl <= NColsRemain - 1) {
      obj->workspace_ = proc_control_node_B.y_ey;
      proc_control_node_B.idx_dl++;
    }

    proc_control_node_B.idx_dl = 0;
    while (proc_control_node_B.idx_dl <= proc_control_node_B.subRows) {
      obj->FMat.data[proc_control_node_B.LD_diagOffset_d +
        proc_control_node_B.idx_dl] = obj->workspace_;
      proc_control_node_B.idx_dl++;
    }

    proc_control_node_B.idx_dl = 1;
    while (proc_control_node_B.idx_dl - 1 <= proc_control_node_B.subRows - 1) {
      ix = proc_control_node_B.LD_diagOffset_d + proc_control_node_B.idx_dl;
      obj->FMat.data[ix] /= obj->FMat.data[proc_control_node_B.LD_diagOffset_d];
      proc_control_node_B.idx_dl++;
    }
  }

  proc_control_node_B.k_jd = 48;
  while (proc_control_node_B.k_jd <= NColsRemain - 1) {
    int32_T LD_diagOffset_tmp;
    int32_T h;
    int32_T iy;
    proc_control_node_B.LD_diagOffset_d = NColsRemain - proc_control_node_B.k_jd;
    if (48 <= proc_control_node_B.LD_diagOffset_d) {
      proc_control_node_B.subRows = 48;
    } else {
      proc_control_node_B.subRows = proc_control_node_B.LD_diagOffset_d;
    }

    LD_diagOffset_tmp = proc_control_node_B.k_jd + proc_control_node_B.subRows;
    proc_control_node_B.idx_dl = proc_control_node_B.k_jd;
    while (proc_control_node_B.idx_dl <= LD_diagOffset_tmp - 1) {
      ix = LD_diagOffset_tmp - proc_control_node_B.idx_dl;
      proc_control_node_B.FMat_offset = (proc_control_node_B.LDimSizeP1_b *
        proc_control_node_B.idx_dl + LD_offset) - 1;
      for (br = 0; br < 48; br++) {
        obj->workspace2_ = obj->FMat.data[((LD_offset +
          proc_control_node_B.idx_dl) + br * obj->ldm) - 1];
      }

      br = obj->ldm;
      if (ix != 0) {
        d = (obj->ldm * 47 + proc_control_node_B.idx_dl) + 1;
        ia = proc_control_node_B.idx_dl + 1;
        while (((br > 0) && (ia <= d)) || ((br < 0) && (ia >= d))) {
          iy = proc_control_node_B.FMat_offset;
          h = (ia + ix) - 1;
          for (int32_T b_ia{ia}; b_ia <= h; b_ia++) {
            obj->FMat.data[iy] += obj->workspace_ * -obj->workspace2_;
            iy++;
          }

          ia += br;
        }
      }

      proc_control_node_B.idx_dl++;
    }

    if (LD_diagOffset_tmp < NColsRemain) {
      proc_control_node_B.LD_diagOffset_d -= proc_control_node_B.subRows;
      proc_control_node_B.idx_dl = ((LD_offset + proc_control_node_B.subRows) +
        proc_control_node_B.LDimSizeP1_b * proc_control_node_B.k_jd) - 1;
      for (ix = 0; ix < 48; ix++) {
        proc_control_node_B.FMat_offset = (LD_offset + proc_control_node_B.k_jd)
          + ix * obj->ldm;
        for (br = 0; br < proc_control_node_B.subRows; br++) {
          obj->workspace2_ = obj->FMat.data[(proc_control_node_B.FMat_offset +
            br) - 1];
        }
      }

      ix = obj->ldm;
      proc_control_node_B.FMat_offset = obj->ldm;
      if ((proc_control_node_B.LD_diagOffset_d != 0) &&
          (proc_control_node_B.subRows != 0)) {
        proc_control_node_B.subRows = (proc_control_node_B.subRows - 1) *
          obj->ldm + proc_control_node_B.idx_dl;
        br = 0;
        while (((proc_control_node_B.FMat_offset > 0) &&
                (proc_control_node_B.idx_dl <= proc_control_node_B.subRows)) ||
               ((proc_control_node_B.FMat_offset < 0) &&
                (proc_control_node_B.idx_dl >= proc_control_node_B.subRows))) {
          br++;
          d = ix * 47 + br;
          ia = br;
          while (((ix > 0) && (ia <= d)) || ((ix < 0) && (ia >= d))) {
            iy = proc_control_node_B.idx_dl;
            h = proc_control_node_B.idx_dl + proc_control_node_B.LD_diagOffset_d;
            while (iy + 1 <= h) {
              obj->FMat.data[iy] += -obj->workspace2_ * obj->workspace_;
              iy++;
            }

            ia += ix;
          }

          proc_control_node_B.idx_dl += proc_control_node_B.FMat_offset;
        }
      }
    }

    proc_control_node_B.k_jd += 48;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_node_xpotrf_h(int32_T n,
  real_T A_data[], int32_T lda)
{
  int32_T b_j;
  int32_T info;
  boolean_T exitg1;
  info = 0;
  b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (b_j <= n - 1)) {
    int32_T b_ix;
    int32_T b_iy;
    int32_T iy;
    proc_control_node_B.idxA1j = b_j * lda;
    proc_control_node_B.idxAjj = proc_control_node_B.idxA1j + b_j;
    proc_control_node_B.ssq_g = 0.0;
    if (b_j >= 1) {
      b_ix = proc_control_node_B.idxA1j;
      b_iy = proc_control_node_B.idxA1j;
      for (iy = 0; iy < b_j; iy++) {
        proc_control_node_B.ssq_g += A_data[b_ix] * A_data[b_iy];
        b_ix++;
        b_iy++;
      }
    }

    proc_control_node_B.ssq_g = A_data[proc_control_node_B.idxAjj] -
      proc_control_node_B.ssq_g;
    if (proc_control_node_B.ssq_g > 0.0) {
      proc_control_node_B.ssq_g = std::sqrt(proc_control_node_B.ssq_g);
      A_data[proc_control_node_B.idxAjj] = proc_control_node_B.ssq_g;
      if (b_j + 1 < n) {
        b_ix = (n - b_j) - 2;
        b_iy = (proc_control_node_B.idxA1j + lda) + 1;
        proc_control_node_B.idxAjj += lda;
        if ((b_j != 0) && (b_ix + 1 != 0)) {
          int32_T b;
          iy = proc_control_node_B.idxAjj;
          b = lda * b_ix + b_iy;
          while (((lda > 0) && (b_iy <= b)) || ((lda < 0) && (b_iy >= b))) {
            int32_T d;
            int32_T ix;
            ix = proc_control_node_B.idxA1j;
            proc_control_node_B.c_l = 0.0;
            d = (b_iy + b_j) - 1;
            for (int32_T ia{b_iy}; ia <= d; ia++) {
              proc_control_node_B.c_l += A_data[ia - 1] * A_data[ix];
              ix++;
            }

            A_data[iy] += -proc_control_node_B.c_l;
            iy += lda;
            b_iy += lda;
          }
        }

        proc_control_node_B.ssq_g = 1.0 / proc_control_node_B.ssq_g;
        proc_control_node_B.idxA1j = (lda * b_ix + proc_control_node_B.idxAjj) +
          1;
        while (((lda > 0) && (proc_control_node_B.idxAjj + 1 <=
                              proc_control_node_B.idxA1j)) || ((lda < 0) &&
                (proc_control_node_B.idxAjj + 1 >= proc_control_node_B.idxA1j)))
        {
          A_data[proc_control_node_B.idxAjj] *= proc_control_node_B.ssq_g;
          proc_control_node_B.idxAjj += lda;
        }
      }

      b_j++;
    } else {
      A_data[proc_control_node_B.idxAjj] = proc_control_node_B.ssq_g;
      info = b_j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control__xgemv_mtmcjbiadz2(int32_T m,
  int32_T n, const real_T A_data[], int32_T ia0, int32_T lda, const real_T
  x_data[], real_T y_data[])
{
  if (m != 0) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    for (ix = 0; ix < m; ix++) {
      y_data[ix] = 0.0;
    }

    ix = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factor
  (s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, const real_T A[21609], int32_T ndims,
   int32_T ldA)
{
  obj->ndims = ndims;
  proc_control_node_B.b_idx_h = 0;
  while (proc_control_node_B.b_idx_h <= ndims - 1) {
    proc_control_node_B.ix0_n = ldA * proc_control_node_B.b_idx_h;
    proc_control_node_B.idx_lb = obj->ldm * proc_control_node_B.b_idx_h;
    proc_control_node_B.k_kr = 1;
    while (proc_control_node_B.k_kr - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_node_B.idx_lb + proc_control_node_B.k_kr) - 1]
        = A[(proc_control_node_B.ix0_n + proc_control_node_B.k_kr) - 1];
      proc_control_node_B.k_kr++;
    }

    proc_control_node_B.b_idx_h++;
  }

  obj->info = proc_control_node_xpotrf_h(ndims, obj->FMat.data, obj->ldm);
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_solve(const
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, real_T rhs_data[])
{
  if (obj->ndims != 0) {
    int32_T b_j;
    int32_T ix;
    int32_T jA;
    for (b_j = 0; b_j < obj->ndims; b_j++) {
      real_T temp;
      jA = b_j * obj->ldm;
      temp = rhs_data[b_j];
      for (ix = 0; ix < b_j; ix++) {
        temp -= obj->FMat.data[jA + ix] * rhs_data[ix];
      }

      rhs_data[b_j] = temp / obj->FMat.data[jA + b_j];
    }

    for (b_j = obj->ndims - 1; b_j + 1 > 0; b_j--) {
      int32_T jjA;
      jjA = b_j * obj->ldm + b_j;
      rhs_data[b_j] /= obj->FMat.data[jjA];
      for (jA = 1; jA - 1 < b_j; jA++) {
        ix = b_j - jA;
        rhs_data[ix] -= obj->FMat.data[jjA - jA] * rhs_data[b_j];
      }
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factor_p
  (s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, const real_T A[21609], int32_T ndims,
   int32_T ldA)
{
  proc_control_node_B.LDimSizeP1 = obj->ldm + 1;
  obj->ndims = ndims;
  proc_control_node_B.A_maxDiag_idx = 0;
  while (proc_control_node_B.A_maxDiag_idx <= ndims - 1) {
    proc_control_node_B.LD_diagOffset = ldA * proc_control_node_B.A_maxDiag_idx;
    proc_control_node_B.order_h = obj->ldm * proc_control_node_B.A_maxDiag_idx;
    proc_control_node_B.b_k_b = 1;
    while (proc_control_node_B.b_k_b - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_node_B.order_h + proc_control_node_B.b_k_b) -
        1] = A[(proc_control_node_B.LD_diagOffset + proc_control_node_B.b_k_b) -
        1];
      proc_control_node_B.b_k_b++;
    }

    proc_control_node_B.A_maxDiag_idx++;
  }

  proc_control_node_B.A_maxDiag_idx = proc_control_node_ixamax_k(ndims,
    obj->FMat.data, obj->ldm + 1) - 1;
  obj->regTol_ = std::fmax(std::abs(obj->FMat.data[obj->ldm *
    proc_control_node_B.A_maxDiag_idx + proc_control_node_B.A_maxDiag_idx]) *
    2.2204460492503131E-16, 0.0);
  if (ndims > 128) {
    boolean_T exitg1;
    proc_control_node_B.A_maxDiag_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.A_maxDiag_idx < ndims)) {
      proc_control_node_B.LD_diagOffset = proc_control_node_B.LDimSizeP1 *
        proc_control_node_B.A_maxDiag_idx + 1;
      proc_control_node_B.order_h = ndims - proc_control_node_B.A_maxDiag_idx;
      if (proc_control_node_B.A_maxDiag_idx + 48 <= ndims) {
        proc_control_no_partialColLDL3_(obj, proc_control_node_B.LD_diagOffset,
          proc_control_node_B.order_h);
        proc_control_node_B.A_maxDiag_idx += 48;
      } else {
        proc_control_node_fullColLDL2_(obj, proc_control_node_B.LD_diagOffset,
          proc_control_node_B.order_h);
        exitg1 = true;
      }
    }
  } else {
    proc_control_node_fullColLDL2_(obj, 1, ndims);
  }

  if (obj->ConvexCheck) {
    proc_control_node_B.LDimSizeP1 = 0;
    int32_T exitg2;
    do {
      exitg2 = 0;
      if (proc_control_node_B.LDimSizeP1 <= ndims - 1) {
        if (obj->FMat.data[obj->ldm * proc_control_node_B.LDimSizeP1 +
            proc_control_node_B.LDimSizeP1] <= 0.0) {
          obj->info = -proc_control_node_B.LDimSizeP1 - 1;
          exitg2 = 1;
        } else {
          proc_control_node_B.LDimSizeP1++;
        }
      } else {
        obj->ConvexCheck = false;
        exitg2 = 1;
      }
    } while (exitg2 == 0);
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_solve_l(const
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, real_T rhs_data[])
{
  int32_T b;
  int32_T jA;
  int32_T jjA;
  int32_T n_tmp;
  n_tmp = obj->ndims - 1;
  if (obj->ndims != 0) {
    for (jA = 0; jA <= n_tmp; jA++) {
      jjA = jA * obj->ldm + jA;
      b = n_tmp - jA;
      for (int32_T i{1}; i - 1 < b; i++) {
        int32_T ix;
        ix = jA + i;
        rhs_data[ix] -= obj->FMat.data[jjA + i] * rhs_data[jA];
      }
    }
  }

  for (b = 0; b <= n_tmp; b++) {
    rhs_data[b] /= obj->FMat.data[obj->ldm * b + b];
  }

  if (obj->ndims != 0) {
    for (b = obj->ndims - 1; b + 1 > 0; b--) {
      real_T temp;
      jA = b * obj->ldm;
      temp = rhs_data[b];
      for (jjA = obj->ndims; jjA >= b + 2; jjA--) {
        temp -= obj->FMat.data[(jA + jjA) - 1] * rhs_data[jjA - 1];
      }

      rhs_data[b] = temp;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_compute_deltax(const real_T
  H[21609], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, const
  s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager, s_TNXzMnREVvDmNpLFpsTLBC_proc_T
  *cholmanager, const s_oZGbvi5mjKKebHB9aR5DoG_proc_T *objective, boolean_T
  alwaysPositiveDef)
{
  proc_control_node_B.nVar_b = qrmanager->mrows - 1;
  proc_control_node_B.mNull = qrmanager->mrows - qrmanager->ncols;
  if (proc_control_node_B.mNull <= 0) {
    proc_control_node_B.mNull = 0;
    while (proc_control_node_B.mNull <= proc_control_node_B.nVar_b) {
      solution->searchDir.data[proc_control_node_B.mNull] = 0.0;
      proc_control_node_B.mNull++;
    }
  } else {
    proc_control_node_B.nullStartIdx = 0;
    while (proc_control_node_B.nullStartIdx <= proc_control_node_B.nVar_b) {
      solution->searchDir.data[proc_control_node_B.nullStartIdx] =
        -objective->grad.data[proc_control_node_B.nullStartIdx];
      proc_control_node_B.nullStartIdx++;
    }

    if (qrmanager->ncols <= 0) {
      switch (objective->objtype) {
       case 5:
        break;

       case 3:
        if (alwaysPositiveDef) {
          proc_control_node_factor(cholmanager, H, qrmanager->mrows,
            qrmanager->mrows);
        } else {
          proc_control_node_factor_p(cholmanager, H, qrmanager->mrows,
            qrmanager->mrows);
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else if (alwaysPositiveDef) {
          proc_control_node_solve(cholmanager, solution->searchDir.data);
        } else {
          proc_control_node_solve_l(cholmanager, solution->searchDir.data);
        }
        break;

       default:
        if (alwaysPositiveDef) {
          proc_control_node_factor(cholmanager, H, objective->nvar,
            objective->nvar);
          if (cholmanager->info != 0) {
            solution->state = -6;
          } else {
            proc_control_node_solve(cholmanager, solution->searchDir.data);
            proc_control_node_B.c_ef = 1.0 / objective->beta;
            proc_control_node_B.mNull = objective->nvar;
            while (proc_control_node_B.mNull + 1 <= qrmanager->mrows) {
              solution->searchDir.data[proc_control_node_B.mNull] *=
                proc_control_node_B.c_ef;
              proc_control_node_B.mNull++;
            }
          }
        }
        break;
      }
    } else {
      proc_control_node_B.nullStartIdx = qrmanager->ldq * qrmanager->ncols + 1;
      if (objective->objtype == 5) {
        proc_control_node_B.b_ldw = 0;
        while (proc_control_node_B.b_ldw <= proc_control_node_B.mNull - 1) {
          memspace->workspace_double.data[proc_control_node_B.b_ldw] =
            -qrmanager->Q.data[(qrmanager->ncols + proc_control_node_B.b_ldw) *
            qrmanager->ldq + proc_control_node_B.nVar_b];
          proc_control_node_B.b_ldw++;
        }

        proc_control__xgemv_mtmcjbiadz2(qrmanager->mrows,
          proc_control_node_B.mNull, qrmanager->Q.data,
          proc_control_node_B.nullStartIdx, qrmanager->ldq,
          memspace->workspace_double.data, solution->searchDir.data);
      } else {
        if (objective->objtype == 3) {
          proc_control_node_B.b_ldw = memspace->workspace_double.size[0];
          proc_control_node_xgemm(qrmanager->mrows, proc_control_node_B.mNull,
            qrmanager->mrows, H, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, memspace->workspace_double.size[0]);
          proc_control_node_xgemm_m(proc_control_node_B.mNull,
            proc_control_node_B.mNull, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, proc_control_node_B.b_ldw,
            cholmanager->FMat.data, cholmanager->ldm);
        } else if (alwaysPositiveDef) {
          proc_control_node_B.b_ldw = memspace->workspace_double.size[0];
          proc_control_node_xgemm(objective->nvar, proc_control_node_B.mNull,
            objective->nvar, H, objective->nvar, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, memspace->workspace_double.size[0]);
          proc_control_node_B.order = 0;
          while (proc_control_node_B.order <= proc_control_node_B.mNull - 1) {
            proc_control_node_B.ix_h = objective->nvar;
            while (proc_control_node_B.ix_h + 1 <= qrmanager->mrows) {
              memspace->workspace_double.data[proc_control_node_B.ix_h +
                memspace->workspace_double.size[0] * proc_control_node_B.order] =
                qrmanager->Q.data[(proc_control_node_B.order + qrmanager->ncols)
                * qrmanager->Q.size[0] + proc_control_node_B.ix_h] *
                objective->beta;
              proc_control_node_B.ix_h++;
            }

            proc_control_node_B.order++;
          }

          proc_control_node_xgemm_m(proc_control_node_B.mNull,
            proc_control_node_B.mNull, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, proc_control_node_B.b_ldw,
            cholmanager->FMat.data, cholmanager->ldm);
        }

        if (alwaysPositiveDef) {
          cholmanager->ndims = proc_control_node_B.mNull;
          cholmanager->info = proc_control_node_xpotrf_h
            (proc_control_node_B.mNull, cholmanager->FMat.data, cholmanager->ldm);
        } else {
          proc_control_node_B.b_ldw = cholmanager->ldm + 1;
          cholmanager->ndims = proc_control_node_B.mNull;
          proc_control_node_B.b_nullStart = proc_control_node_ixamax_k
            (proc_control_node_B.mNull, cholmanager->FMat.data, cholmanager->ldm
             + 1) - 1;
          cholmanager->regTol_ = std::fmax(std::abs(cholmanager->
            FMat.data[cholmanager->ldm * proc_control_node_B.b_nullStart +
            proc_control_node_B.b_nullStart]) * 2.2204460492503131E-16, 0.0);
          if (proc_control_node_B.mNull > 128) {
            boolean_T exitg1;
            proc_control_node_B.ix_h = 0;
            exitg1 = false;
            while ((!exitg1) && (proc_control_node_B.ix_h <
                                 proc_control_node_B.mNull)) {
              proc_control_node_B.b_nullStart = proc_control_node_B.b_ldw *
                proc_control_node_B.ix_h + 1;
              proc_control_node_B.order = proc_control_node_B.mNull -
                proc_control_node_B.ix_h;
              if (proc_control_node_B.ix_h + 48 <= proc_control_node_B.mNull) {
                proc_control_no_partialColLDL3_(cholmanager,
                  proc_control_node_B.b_nullStart, proc_control_node_B.order);
                proc_control_node_B.ix_h += 48;
              } else {
                proc_control_node_fullColLDL2_(cholmanager,
                  proc_control_node_B.b_nullStart, proc_control_node_B.order);
                exitg1 = true;
              }
            }
          } else {
            proc_control_node_fullColLDL2_(cholmanager, 1,
              proc_control_node_B.mNull);
          }

          if (cholmanager->ConvexCheck) {
            proc_control_node_B.ix_h = 0;
            int32_T exitg2;
            do {
              exitg2 = 0;
              if (proc_control_node_B.ix_h <= proc_control_node_B.mNull - 1) {
                if (cholmanager->FMat.data[cholmanager->ldm *
                    proc_control_node_B.ix_h + proc_control_node_B.ix_h] <= 0.0)
                {
                  cholmanager->info = -proc_control_node_B.ix_h - 1;
                  exitg2 = 1;
                } else {
                  proc_control_node_B.ix_h++;
                }
              } else {
                cholmanager->ConvexCheck = false;
                exitg2 = 1;
              }
            } while (exitg2 == 0);
          }
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          proc_control_node_B.b_ldw = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_node_B.ix_h = 0;
            while (proc_control_node_B.ix_h <= proc_control_node_B.mNull - 1) {
              memspace->workspace_double.data[proc_control_node_B.ix_h] = 0.0;
              proc_control_node_B.ix_h++;
            }

            proc_control_node_B.b_nullStart = 0;
            proc_control_node_B.order = (proc_control_node_B.mNull - 1) *
              qrmanager->ldq + proc_control_node_B.nullStartIdx;
            proc_control_node_B.idx_col = proc_control_node_B.nullStartIdx;
            while (((proc_control_node_B.b_ldw > 0) &&
                    (proc_control_node_B.idx_col <= proc_control_node_B.order)) ||
                   ((proc_control_node_B.b_ldw < 0) &&
                    (proc_control_node_B.idx_col >= proc_control_node_B.order)))
            {
              proc_control_node_B.ix_h = 0;
              proc_control_node_B.c_ef = 0.0;
              proc_control_node_B.b_ix_h = proc_control_node_B.idx_col +
                proc_control_node_B.nVar_b;
              proc_control_node_B.b_ldw_tmp = proc_control_node_B.idx_col;
              while (proc_control_node_B.b_ldw_tmp <= proc_control_node_B.b_ix_h)
              {
                proc_control_node_B.c_ef += qrmanager->
                  Q.data[proc_control_node_B.b_ldw_tmp - 1] *
                  objective->grad.data[proc_control_node_B.ix_h];
                proc_control_node_B.ix_h++;
                proc_control_node_B.b_ldw_tmp++;
              }

              memspace->workspace_double.data[proc_control_node_B.b_nullStart] +=
                -proc_control_node_B.c_ef;
              proc_control_node_B.b_nullStart++;
              proc_control_node_B.idx_col += proc_control_node_B.b_ldw;
            }
          }

          if (alwaysPositiveDef) {
            proc_control_node_B.nVar_b = memspace->workspace_double.size[0];
            proc_control_node_B.rhs_size_idx_1 = memspace->
              workspace_double.size[1];
            proc_control_node_B.b_ldw = memspace->workspace_double.size[0] *
              memspace->workspace_double.size[1];
            if (0 <= proc_control_node_B.b_ldw - 1) {
              std::memcpy(&proc_control_node_B.rhs_data[0],
                          &memspace->workspace_double.data[0],
                          proc_control_node_B.b_ldw * sizeof(real_T));
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.b_ldw = 0;
              while (proc_control_node_B.b_ldw <= cholmanager->ndims - 1) {
                proc_control_node_B.order = proc_control_node_B.b_ldw *
                  cholmanager->ldm;
                proc_control_node_B.c_ef =
                  proc_control_node_B.rhs_data[proc_control_node_B.b_ldw];
                proc_control_node_B.idx_col = 0;
                while (proc_control_node_B.idx_col <= proc_control_node_B.b_ldw
                       - 1) {
                  proc_control_node_B.c_ef -= cholmanager->
                    FMat.data[proc_control_node_B.order +
                    proc_control_node_B.idx_col] *
                    proc_control_node_B.rhs_data[proc_control_node_B.idx_col];
                  proc_control_node_B.idx_col++;
                }

                proc_control_node_B.rhs_data[proc_control_node_B.b_ldw] =
                  proc_control_node_B.c_ef / cholmanager->
                  FMat.data[proc_control_node_B.order +
                  proc_control_node_B.b_ldw];
                proc_control_node_B.b_ldw++;
              }
            }

            memspace->workspace_double.size[1] =
              proc_control_node_B.rhs_size_idx_1;
            proc_control_node_B.b_ldw = proc_control_node_B.nVar_b *
              proc_control_node_B.rhs_size_idx_1;
            if (0 <= proc_control_node_B.b_ldw - 1) {
              std::memcpy(&memspace->workspace_double.data[0],
                          &proc_control_node_B.rhs_data[0],
                          proc_control_node_B.b_ldw * sizeof(real_T));
            }

            proc_control_node_xtrsv(cholmanager->ndims, cholmanager->FMat.data,
              cholmanager->ldm, memspace->workspace_double.data);
          } else {
            proc_control_node_B.nVar_b = memspace->workspace_double.size[0];
            proc_control_node_B.rhs_size_idx_1 = memspace->
              workspace_double.size[1];
            proc_control_node_B.b_ldw = memspace->workspace_double.size[0] *
              memspace->workspace_double.size[1];
            if (0 <= proc_control_node_B.b_ldw - 1) {
              std::memcpy(&proc_control_node_B.rhs_data[0],
                          &memspace->workspace_double.data[0],
                          proc_control_node_B.b_ldw * sizeof(real_T));
            }

            proc_control_node_B.b_ldw_tmp = cholmanager->ndims - 1;
            if (cholmanager->ndims != 0) {
              proc_control_node_B.b_nullStart = 0;
              while (proc_control_node_B.b_nullStart <=
                     proc_control_node_B.b_ldw_tmp) {
                proc_control_node_B.order = proc_control_node_B.b_nullStart *
                  cholmanager->ldm + proc_control_node_B.b_nullStart;
                proc_control_node_B.idx_col = proc_control_node_B.b_ldw_tmp -
                  proc_control_node_B.b_nullStart;
                proc_control_node_B.ix_h = 1;
                while (proc_control_node_B.ix_h - 1 <=
                       proc_control_node_B.idx_col - 1) {
                  proc_control_node_B.b_ix_h = proc_control_node_B.b_nullStart +
                    proc_control_node_B.ix_h;
                  proc_control_node_B.rhs_data[proc_control_node_B.b_ix_h] -=
                    cholmanager->FMat.data[proc_control_node_B.order +
                    proc_control_node_B.ix_h] *
                    proc_control_node_B.rhs_data[proc_control_node_B.b_nullStart];
                  proc_control_node_B.ix_h++;
                }

                proc_control_node_B.b_nullStart++;
              }
            }

            proc_control_node_B.b_ldw = 0;
            while (proc_control_node_B.b_ldw <= proc_control_node_B.b_ldw_tmp) {
              proc_control_node_B.rhs_data[proc_control_node_B.b_ldw] /=
                cholmanager->FMat.data[cholmanager->ldm *
                proc_control_node_B.b_ldw + proc_control_node_B.b_ldw];
              proc_control_node_B.b_ldw++;
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.b_ldw = cholmanager->ndims - 1;
              while (proc_control_node_B.b_ldw + 1 > 0) {
                proc_control_node_B.b_nullStart = proc_control_node_B.b_ldw *
                  cholmanager->ldm;
                proc_control_node_B.c_ef =
                  proc_control_node_B.rhs_data[proc_control_node_B.b_ldw];
                proc_control_node_B.order = cholmanager->ndims;
                while (proc_control_node_B.order >= proc_control_node_B.b_ldw +
                       2) {
                  proc_control_node_B.c_ef -= cholmanager->FMat.data
                    [(proc_control_node_B.b_nullStart +
                      proc_control_node_B.order) - 1] *
                    proc_control_node_B.rhs_data[proc_control_node_B.order - 1];
                  proc_control_node_B.order--;
                }

                proc_control_node_B.rhs_data[proc_control_node_B.b_ldw] =
                  proc_control_node_B.c_ef;
                proc_control_node_B.b_ldw--;
              }
            }

            memspace->workspace_double.size[1] =
              proc_control_node_B.rhs_size_idx_1;
            proc_control_node_B.b_ldw = proc_control_node_B.nVar_b *
              proc_control_node_B.rhs_size_idx_1;
            if (0 <= proc_control_node_B.b_ldw - 1) {
              std::memcpy(&memspace->workspace_double.data[0],
                          &proc_control_node_B.rhs_data[0],
                          proc_control_node_B.b_ldw * sizeof(real_T));
            }
          }

          proc_control__xgemv_mtmcjbiadz2(qrmanager->mrows,
            proc_control_node_B.mNull, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, solution->searchDir.data);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_md(int32_T n, const
  real_T x_data[])
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[0]);
    } else {
      proc_control_node_B.scale_m4 = 3.3121686421112381E-170;
      for (int32_T k{0}; k < n; k++) {
        real_T absxk;
        absxk = std::abs(x_data[k]);
        if (absxk > proc_control_node_B.scale_m4) {
          real_T t;
          t = proc_control_node_B.scale_m4 / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_m4 = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_node_B.scale_m4;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_m4 * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_xgemv_mtmcjbiadz2i(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T d;
      int32_T ix;
      ix = 0;
      proc_control_node_B.c_n = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_node_B.c_n += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += proc_control_node_B.c_n;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control__feasibleratiotest(const real_T
  solution_xstar_data[], const real_T solution_searchDir_data[], real_T
  workspace_data[], const int32_T workspace_size[2], int32_T workingset_nVar,
  int32_T workingset_ldA, const real_T workingset_Aineq_data[], const real_T
  workingset_bineq_data[], const real_T workingset_lb_data[], const int32_T
  workingset_indexLB_data[], const int32_T workingset_sizes[5], const int32_T
  workingset_isActiveIdx[6], const boolean_T workingset_isActiveConstr_data[],
  const int32_T workingset_nWConstr[5], boolean_T isPhaseOne, real_T *alpha,
  boolean_T *newBlocking, int32_T *constrType, int32_T *constrIdx)
{
  proc_control_node_B.totalIneq = workingset_sizes[2] - 1;
  *alpha = 1.0E+30;
  *newBlocking = false;
  *constrType = 0;
  *constrIdx = 0;
  proc_control_node_B.denomTol = 2.2204460492503131E-13 *
    proc_control_node_xnrm2_md(workingset_nVar, solution_searchDir_data);
  if (workingset_nWConstr[2] < workingset_sizes[2]) {
    proc_control_node_B.ldw = 0;
    while (proc_control_node_B.ldw <= proc_control_node_B.totalIneq) {
      workspace_data[proc_control_node_B.ldw] =
        workingset_bineq_data[proc_control_node_B.ldw];
      proc_control_node_B.ldw++;
    }

    proc_control_xgemv_mtmcjbiadz2i(workingset_nVar, workingset_sizes[2],
      workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
    proc_control_node_B.ldw = workspace_size[0];
    if (workingset_sizes[2] != 0) {
      proc_control_node_B.iyend_h = workspace_size[0] + workingset_sizes[2];
      proc_control_node_B.b_iy_f = workspace_size[0];
      while (proc_control_node_B.b_iy_f + 1 <= proc_control_node_B.iyend_h) {
        workspace_data[proc_control_node_B.b_iy_f] = 0.0;
        proc_control_node_B.b_iy_f++;
      }

      proc_control_node_B.iyend_h = workspace_size[0];
      proc_control_node_B.b_iy_f = (workingset_sizes[2] - 1) * workingset_ldA +
        1;
      proc_control_node_B.iac_f = 1;
      while (((workingset_ldA > 0) && (proc_control_node_B.iac_f <=
               proc_control_node_B.b_iy_f)) || ((workingset_ldA < 0) &&
              (proc_control_node_B.iac_f >= proc_control_node_B.b_iy_f))) {
        int32_T d;
        proc_control_node_B.ix_d = 0;
        proc_control_node_B.c_f = 0.0;
        d = (proc_control_node_B.iac_f + workingset_nVar) - 1;
        for (int32_T ia{proc_control_node_B.iac_f}; ia <= d; ia++) {
          proc_control_node_B.c_f += workingset_Aineq_data[ia - 1] *
            solution_searchDir_data[proc_control_node_B.ix_d];
          proc_control_node_B.ix_d++;
        }

        workspace_data[proc_control_node_B.iyend_h] += proc_control_node_B.c_f;
        proc_control_node_B.iyend_h++;
        proc_control_node_B.iac_f += workingset_ldA;
      }
    }

    proc_control_node_B.iyend_h = 0;
    while (proc_control_node_B.iyend_h <= proc_control_node_B.totalIneq) {
      proc_control_node_B.b_iy_f = proc_control_node_B.ldw +
        proc_control_node_B.iyend_h;
      if ((workspace_data[proc_control_node_B.b_iy_f] >
           proc_control_node_B.denomTol) && (!workingset_isActiveConstr_data
           [(workingset_isActiveIdx[2] + proc_control_node_B.iyend_h) - 1])) {
        proc_control_node_B.ratio = std::fmin(std::abs
          (workspace_data[proc_control_node_B.iyend_h]), 0.02 -
          workspace_data[proc_control_node_B.iyend_h]) /
          workspace_data[proc_control_node_B.b_iy_f];
        if (proc_control_node_B.ratio < *alpha) {
          *alpha = proc_control_node_B.ratio;
          *constrType = 3;
          *constrIdx = proc_control_node_B.iyend_h + 1;
          *newBlocking = true;
        }
      }

      proc_control_node_B.iyend_h++;
    }
  }

  if (workingset_nWConstr[3] < workingset_sizes[3]) {
    proc_control_node_B.c_f = solution_xstar_data[workingset_nVar - 1] *
      static_cast<real_T>(isPhaseOne);
    proc_control_node_B.phaseOneCorrectionP =
      solution_searchDir_data[workingset_nVar - 1] * static_cast<real_T>
      (isPhaseOne);
    proc_control_node_B.totalIneq = 0;
    while (proc_control_node_B.totalIneq <= workingset_sizes[3] - 2) {
      proc_control_node_B.pk_corrected =
        -solution_searchDir_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
        - 1] - proc_control_node_B.phaseOneCorrectionP;
      if ((proc_control_node_B.pk_corrected > proc_control_node_B.denomTol) && (
           !workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
            proc_control_node_B.totalIneq) - 1])) {
        proc_control_node_B.ratio =
          (-solution_xstar_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
           - 1] -
           workingset_lb_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
           - 1]) - proc_control_node_B.c_f;
        proc_control_node_B.ratio = std::fmin(std::abs(proc_control_node_B.ratio),
          0.02 - proc_control_node_B.ratio) / proc_control_node_B.pk_corrected;
        if (proc_control_node_B.ratio < *alpha) {
          *alpha = proc_control_node_B.ratio;
          *constrType = 4;
          *constrIdx = proc_control_node_B.totalIneq + 1;
          *newBlocking = true;
        }
      }

      proc_control_node_B.totalIneq++;
    }

    proc_control_node_B.b_iy_f = workingset_indexLB_data[workingset_sizes[3] - 1]
      - 1;
    proc_control_node_B.c_f =
      -solution_searchDir_data[proc_control_node_B.b_iy_f];
    if ((proc_control_node_B.c_f > proc_control_node_B.denomTol) &&
        (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
          workingset_sizes[3]) - 2])) {
      proc_control_node_B.ratio =
        -solution_xstar_data[proc_control_node_B.b_iy_f] -
        workingset_lb_data[proc_control_node_B.b_iy_f];
      proc_control_node_B.ratio = std::fmin(std::abs(proc_control_node_B.ratio),
        0.02 - proc_control_node_B.ratio) / proc_control_node_B.c_f;
      if (proc_control_node_B.ratio < *alpha) {
        *alpha = proc_control_node_B.ratio;
        *constrType = 4;
        *constrIdx = workingset_sizes[3];
        *newBlocking = true;
      }
    }
  }

  if (!isPhaseOne) {
    *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
    *alpha = std::fmin(*alpha, 1.0);
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_c_checkUnboundedOrIllPosed
  (s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution, const
   s_oZGbvi5mjKKebHB9aR5DoG_proc_T *objective)
{
  if (objective->objtype == 5) {
    if (proc_control_node_xnrm2_md(objective->nvar, solution->searchDir.data) >
        100.0 * static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
      solution->state = 3;
    } else {
      solution->state = 4;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_addBoundToActiveSetMatrix_
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T TYPE, int32_T idx_local)
{
  int32_T colOffset;
  int32_T idx_bnd_local;
  obj->nWConstr[TYPE - 1]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  colOffset = (obj->nActiveConstr - 1) * obj->ldA - 1;
  if (TYPE == 5) {
    idx_bnd_local = obj->indexUB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->ub.data[idx_bnd_local - 1];
  } else {
    idx_bnd_local = obj->indexLB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->lb.data[idx_bnd_local - 1];
  }

  for (int32_T idx{0}; idx <= idx_bnd_local - 2; idx++) {
    obj->ATwset.data[(idx + colOffset) + 1] = 0.0;
  }

  obj->ATwset.data[idx_bnd_local + colOffset] = static_cast<real_T>(TYPE == 5) *
    2.0 - 1.0;
  for (idx_bnd_local++; idx_bnd_local <= obj->nVar; idx_bnd_local++) {
    obj->ATwset.data[idx_bnd_local + colOffset] = 0.0;
  }

  switch (obj->probType) {
   case 3:
   case 2:
    break;

   default:
    obj->ATwset.data[obj->nVar + colOffset] = -1.0;
    break;
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_addAineqConstr
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T idx_local)
{
  int32_T iAineq0;
  int32_T iAw0;
  obj->nWConstr[2]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = 3;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  iAineq0 = (idx_local - 1) * obj->ldA;
  iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
  for (int32_T idx{0}; idx < obj->nVar; idx++) {
    obj->ATwset.data[iAw0 + idx] = obj->Aineq.data[iAineq0 + idx];
  }

  obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_checkStoppingAndUpdateFval(int32_T
  *activeSetChangeID, const real_T f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T
  *solution, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, const
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *objective, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  updateFval)
{
  solution->iterations++;
  proc_control_node_B.nVar_tmp_tmp_b = objective->nvar - 1;
  if ((solution->iterations >= runTimeOptions_MaxIterations) &&
      ((solution->state != 1) || (objective->objtype == 5))) {
    solution->state = 0;
  }

  if (solution->iterations - solution->iterations / 50 * 50 == 0) {
    solution->maxConstr = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    proc_control_node_B.tempMaxConstr = solution->maxConstr;
    if (objective->objtype == 5) {
      proc_control_node_B.tempMaxConstr = solution->maxConstr -
        solution->xstar.data[objective->nvar - 1];
    }

    if (proc_control_node_B.tempMaxConstr > 0.02) {
      boolean_T nonDegenerateWset;
      proc_control_node_B.y_size_idx_0_o = solution->searchDir.size;
      proc_control_node_B.loop_ub_m = solution->searchDir.size;
      if (0 <= proc_control_node_B.loop_ub_m - 1) {
        std::memcpy(&proc_control_node_B.y_data_lx[0], &solution->
                    searchDir.data[0], proc_control_node_B.loop_ub_m * sizeof
                    (real_T));
      }

      proc_control_node_B.loop_ub_m = 0;
      while (proc_control_node_B.loop_ub_m <= proc_control_node_B.nVar_tmp_tmp_b)
      {
        proc_control_node_B.y_data_lx[proc_control_node_B.loop_ub_m] =
          solution->xstar.data[proc_control_node_B.loop_ub_m];
        proc_control_node_B.loop_ub_m++;
      }

      if (0 <= proc_control_node_B.y_size_idx_0_o - 1) {
        std::memcpy(&solution->searchDir.data[0],
                    &proc_control_node_B.y_data_lx[0],
                    proc_control_node_B.y_size_idx_0_o * sizeof(real_T));
      }

      nonDegenerateWset = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->searchDir.data, workingset, qrmanager);
      if ((!nonDegenerateWset) && (solution->state != 0)) {
        solution->state = -2;
      }

      *activeSetChangeID = 0;
      proc_control_node_B.tempMaxConstr = proc__maxConstraintViolation_du
        (workingset, solution->searchDir.data);
      if (proc_control_node_B.tempMaxConstr < solution->maxConstr) {
        proc_control_node_B.loop_ub_m = 0;
        while (proc_control_node_B.loop_ub_m <=
               proc_control_node_B.nVar_tmp_tmp_b) {
          solution->xstar.data[proc_control_node_B.loop_ub_m] =
            solution->searchDir.data[proc_control_node_B.loop_ub_m];
          proc_control_node_B.loop_ub_m++;
        }

        solution->maxConstr = proc_control_node_B.tempMaxConstr;
      }
    }
  }

  if (updateFval && (options_ObjectiveLimit > (rtMinusInf))) {
    solution->fstar = proc_contro_computeFval_ReuseHx(objective,
      memspace->workspace_double.data, f_data, solution->xstar.data);
    if ((solution->fstar < options_ObjectiveLimit) && ((solution->state != 0) ||
         (objective->objtype != 5))) {
      solution->state = 2;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_iterate(const real_T H[21609],
  const real_T f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *cholmanager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  objective, const char_T options_SolverName[7], real_T options_StepTolerance,
  real_T options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations)
{
  boolean_T subProblemChanged;
  boolean_T updateFval;
  subProblemChanged = true;
  updateFval = true;
  proc_control_node_B.activeSetChangeID = 0;
  proc_control_node_B.TYPE = objective->objtype;
  proc_control_node_B.nVar_f = workingset->nVar;
  proc_control_node_B.globalActiveConstrIdx = 0;
  proc_contro_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
  solution->fstar = proc_contro_computeFval_ReuseHx(objective,
    memspace->workspace_double.data, f_data, solution->xstar.data);
  if (solution->iterations < runTimeOptions_MaxIterations) {
    solution->state = -5;
  } else {
    solution->state = 0;
  }

  proc_control_node_B.iyend = 0;
  while (proc_control_node_B.iyend <= workingset->mConstrMax - 1) {
    solution->lambda.data[proc_control_node_B.iyend] = 0.0;
    proc_control_node_B.iyend++;
  }

  int32_T exitg1;
  do {
    exitg1 = 0;
    if (solution->state == -5) {
      boolean_T guard11{ false };

      guard11 = false;
      if (subProblemChanged) {
        switch (proc_control_node_B.activeSetChangeID) {
         case 1:
          proc_control_node_B.idx_aq = (workingset->nActiveConstr - 1) *
            workingset->ldA;
          if (qrmanager->mrows <= qrmanager->ncols + 1) {
            qrmanager->minRowCol = qrmanager->mrows;
          } else {
            qrmanager->minRowCol = qrmanager->ncols + 1;
          }

          proc_control_node_B.b_iy_o = qrmanager->ldq * qrmanager->ncols;
          proc_control_node_B.ix_e = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_node_B.iyend = proc_control_node_B.b_iy_o +
              qrmanager->mrows;
            proc_control_node_B.c_iy = proc_control_node_B.b_iy_o;
            while (proc_control_node_B.c_iy + 1 <= proc_control_node_B.iyend) {
              qrmanager->QR.data[proc_control_node_B.c_iy] = 0.0;
              proc_control_node_B.c_iy++;
            }

            proc_control_node_B.c_iy = (qrmanager->mrows - 1) * qrmanager->ldq +
              1;
            proc_control_node_B.iyend = 1;
            while (((proc_control_node_B.ix_e > 0) && (proc_control_node_B.iyend
                     <= proc_control_node_B.c_iy)) || ((proc_control_node_B.ix_e
                     < 0) && (proc_control_node_B.iyend >=
                              proc_control_node_B.c_iy))) {
              proc_control_node_B.b_ix_n = proc_control_node_B.idx_aq;
              proc_control_node_B.normDelta = 0.0;
              proc_control_node_B.g_d = (proc_control_node_B.iyend +
                qrmanager->mrows) - 1;
              proc_control_node_B.ia_c = proc_control_node_B.iyend;
              while (proc_control_node_B.ia_c <= proc_control_node_B.g_d) {
                proc_control_node_B.normDelta += qrmanager->
                  Q.data[proc_control_node_B.ia_c - 1] * workingset->
                  ATwset.data[proc_control_node_B.b_ix_n];
                proc_control_node_B.b_ix_n++;
                proc_control_node_B.ia_c++;
              }

              qrmanager->QR.data[proc_control_node_B.b_iy_o] +=
                proc_control_node_B.normDelta;
              proc_control_node_B.b_iy_o++;
              proc_control_node_B.iyend += proc_control_node_B.ix_e;
            }
          }

          qrmanager->ncols++;
          qrmanager->jpvt.data[qrmanager->ncols - 1] = qrmanager->ncols;
          proc_control_node_B.idx_aq = qrmanager->mrows - 2;
          while (proc_control_node_B.idx_aq + 2 > qrmanager->ncols) {
            proc_control_node_B.iyend = (qrmanager->ncols - 1) * qrmanager->ldq;
            proc_control_node_B.temp_i = qrmanager->QR.data
              [(proc_control_node_B.idx_aq + proc_control_node_B.iyend) + 1];
            proc_control_node_xrotg(&qrmanager->
              QR.data[proc_control_node_B.idx_aq + proc_control_node_B.iyend],
              &proc_control_node_B.temp_i, &proc_control_node_B.normDelta,
              &proc_control_node_B.s_e);
            qrmanager->QR.data[(proc_control_node_B.idx_aq +
                                proc_control_node_B.iyend) + 1] =
              proc_control_node_B.temp_i;
            proc_control_node_B.iyend = qrmanager->ldq *
              proc_control_node_B.idx_aq;
            if (qrmanager->mrows >= 1) {
              proc_control_node_B.ix_e = proc_control_node_B.iyend;
              proc_control_node_B.b_iy_o = qrmanager->ldq +
                proc_control_node_B.iyend;
              proc_control_node_B.c_iy = 0;
              while (proc_control_node_B.c_iy <= qrmanager->mrows - 1) {
                proc_control_node_B.temp_i = qrmanager->
                  Q.data[proc_control_node_B.ix_e] *
                  proc_control_node_B.normDelta + qrmanager->
                  Q.data[proc_control_node_B.b_iy_o] * proc_control_node_B.s_e;
                qrmanager->Q.data[proc_control_node_B.b_iy_o] =
                  qrmanager->Q.data[proc_control_node_B.b_iy_o] *
                  proc_control_node_B.normDelta - qrmanager->
                  Q.data[proc_control_node_B.ix_e] * proc_control_node_B.s_e;
                qrmanager->Q.data[proc_control_node_B.ix_e] =
                  proc_control_node_B.temp_i;
                proc_control_node_B.b_iy_o++;
                proc_control_node_B.ix_e++;
                proc_control_node_B.c_iy++;
              }
            }

            proc_control_node_B.idx_aq--;
          }
          break;

         case -1:
          proc_control_n_deleteColMoveEnd(qrmanager,
            proc_control_node_B.globalActiveConstrIdx);
          break;

         default:
          proc_control_node_factorQR_h(qrmanager, workingset->ATwset.data,
            proc_control_node_B.nVar_f, workingset->nActiveConstr,
            workingset->ldA);
          proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
          break;
        }

        proc_control_nod_compute_deltax(H, solution, memspace, qrmanager,
          cholmanager, objective, proc_control_node_strcmp(options_SolverName));
        if (solution->state != -5) {
          exitg1 = 1;
        } else {
          proc_control_node_B.normDelta = proc_control_node_xnrm2_md
            (proc_control_node_B.nVar_f, solution->searchDir.data);
          guard11 = true;
        }
      } else {
        proc_control_node_B.idx_aq = solution->searchDir.size;
        proc_control_node_B.b_iy_o = solution->searchDir.size;
        if (0 <= proc_control_node_B.b_iy_o - 1) {
          std::memcpy(&proc_control_node_B.y_data_dy[0],
                      &solution->searchDir.data[0], proc_control_node_B.b_iy_o *
                      sizeof(real_T));
        }

        proc_control_node_B.iyend = 0;
        while (proc_control_node_B.iyend <= proc_control_node_B.nVar_f - 1) {
          proc_control_node_B.y_data_dy[proc_control_node_B.iyend] = 0.0;
          proc_control_node_B.iyend++;
        }

        if (0 <= proc_control_node_B.idx_aq - 1) {
          std::memcpy(&solution->searchDir.data[0],
                      &proc_control_node_B.y_data_dy[0],
                      proc_control_node_B.idx_aq * sizeof(real_T));
        }

        proc_control_node_B.normDelta = 0.0;
        guard11 = true;
      }

      if (guard11) {
        if ((!subProblemChanged) || (proc_control_node_B.normDelta <
             options_StepTolerance) || (workingset->nActiveConstr >=
             proc_control_node_B.nVar_f)) {
          proc_control_node_B.h_size[0] = memspace->workspace_double.size[0];
          proc_control_node_B.h_size[1] = memspace->workspace_double.size[1];
          proc_control_node_B.b_iy_o = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1];
          if (0 <= proc_control_node_B.b_iy_o - 1) {
            std::memcpy(&proc_control_node_B.h_data[0],
                        &memspace->workspace_double.data[0],
                        proc_control_node_B.b_iy_o * sizeof(real_T));
          }

          if (qrmanager->ncols > 0) {
            boolean_T guard1{ false };

            guard1 = false;
            if (objective->objtype != 4) {
              proc_control_node_B.normDelta = 100.0 * static_cast<real_T>
                (qrmanager->mrows) * 2.2204460492503131E-16;
              updateFval = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
              if (updateFval) {
                boolean_T guard2{ false };

                proc_control_node_B.iyend = qrmanager->ncols;
                guard2 = false;
                if (qrmanager->mrows < qrmanager->ncols) {
                  proc_control_node_B.idx_aq = (qrmanager->ncols - 1) *
                    qrmanager->ldq + qrmanager->mrows;
                  while ((proc_control_node_B.iyend > qrmanager->mrows) && (std::
                          abs(qrmanager->QR.data[proc_control_node_B.idx_aq - 1])
                          >= proc_control_node_B.normDelta)) {
                    proc_control_node_B.iyend--;
                    proc_control_node_B.idx_aq -= qrmanager->ldq;
                  }

                  updateFval = (proc_control_node_B.iyend == qrmanager->mrows);
                  if (!updateFval) {
                  } else {
                    guard2 = true;
                  }
                } else {
                  guard2 = true;
                }

                if (guard2) {
                  proc_control_node_B.idx_aq = (proc_control_node_B.iyend - 1) *
                    qrmanager->ldq + proc_control_node_B.iyend;
                  while ((proc_control_node_B.iyend >= 1) && (std::abs
                          (qrmanager->QR.data[proc_control_node_B.idx_aq - 1]) >=
                          proc_control_node_B.normDelta)) {
                    proc_control_node_B.iyend--;
                    proc_control_node_B.idx_aq = (proc_control_node_B.idx_aq -
                      qrmanager->ldq) - 1;
                  }

                  updateFval = (proc_control_node_B.iyend == 0);
                }
              }

              if (!updateFval) {
                solution->state = -7;
              } else {
                guard1 = true;
              }
            } else {
              guard1 = true;
            }

            if (guard1) {
              proc_control_node_B.h_size[0] = memspace->workspace_double.size[0];
              proc_control_node_B.h_size[1] = memspace->workspace_double.size[1];
              if (0 <= proc_control_node_B.b_iy_o - 1) {
                std::memcpy(&proc_control_node_B.h_data[0],
                            &memspace->workspace_double.data[0],
                            proc_control_node_B.b_iy_o * sizeof(real_T));
              }

              proc_control_node_xgemv_mtmc(qrmanager->mrows, qrmanager->ncols,
                qrmanager->Q.data, qrmanager->ldq, objective->grad.data,
                proc_control_node_B.h_data);
              proc_control_node_xtrsv(qrmanager->ncols, qrmanager->QR.data,
                qrmanager->ldq, proc_control_node_B.h_data);
              proc_control_node_B.iyend = 0;
              while (proc_control_node_B.iyend <= qrmanager->ncols - 1) {
                solution->lambda.data[proc_control_node_B.iyend] =
                  -proc_control_node_B.h_data[proc_control_node_B.iyend];
                proc_control_node_B.iyend++;
              }
            }
          }

          memspace->workspace_double.size[0] = proc_control_node_B.h_size[0];
          memspace->workspace_double.size[1] = proc_control_node_B.h_size[1];
          proc_control_node_B.b_iy_o = proc_control_node_B.h_size[0] *
            proc_control_node_B.h_size[1];
          if (0 <= proc_control_node_B.b_iy_o - 1) {
            std::memcpy(&memspace->workspace_double.data[0],
                        &proc_control_node_B.h_data[0],
                        proc_control_node_B.b_iy_o * sizeof(real_T));
          }

          if ((solution->state != -7) || (workingset->nActiveConstr >
               proc_control_node_B.nVar_f)) {
            proc_control_node_B.iyend = 0;
            proc_control_node_B.normDelta = 0.0;
            proc_control_node_B.idx_aq = workingset->nWConstr[0] +
              workingset->nWConstr[1];
            while (proc_control_node_B.idx_aq + 1 <= workingset->nActiveConstr)
            {
              if (solution->lambda.data[proc_control_node_B.idx_aq] <
                  proc_control_node_B.normDelta) {
                proc_control_node_B.normDelta = solution->
                  lambda.data[proc_control_node_B.idx_aq];
                proc_control_node_B.iyend = proc_control_node_B.idx_aq + 1;
              }

              proc_control_node_B.idx_aq++;
            }

            if (proc_control_node_B.iyend == 0) {
              solution->state = 1;
            } else {
              proc_control_node_B.activeSetChangeID = -1;
              proc_control_node_B.globalActiveConstrIdx =
                proc_control_node_B.iyend;
              subProblemChanged = true;
              proc_control_node_removeConstr(workingset,
                proc_control_node_B.iyend);
              solution->lambda.data[proc_control_node_B.iyend - 1] = 0.0;
            }
          } else {
            proc_control_node_B.iyend = workingset->nActiveConstr;
            proc_control_node_B.activeSetChangeID = 0;
            proc_control_node_B.globalActiveConstrIdx =
              workingset->nActiveConstr;
            subProblemChanged = true;
            proc_control_node_removeConstr(workingset, workingset->nActiveConstr);
            solution->lambda.data[proc_control_node_B.iyend - 1] = 0.0;
          }

          updateFval = false;
        } else {
          proc_control__feasibleratiotest(solution->xstar.data,
            solution->searchDir.data, memspace->workspace_double.data,
            memspace->workspace_double.size, workingset->nVar, workingset->ldA,
            workingset->Aineq.data, workingset->bineq.data, workingset->lb.data,
            workingset->indexLB.data, workingset->sizes, workingset->isActiveIdx,
            workingset->isActiveConstr.data, workingset->nWConstr,
            proc_control_node_B.TYPE == 5, &proc_control_node_B.normDelta,
            &updateFval, &proc_control_node_B.iyend, &proc_control_node_B.idx_aq);
          if (updateFval) {
            switch (proc_control_node_B.iyend) {
             case 3:
              proc_control_nod_addAineqConstr(workingset,
                proc_control_node_B.idx_aq);
              break;

             case 4:
              proc_addBoundToActiveSetMatrix_(workingset, 4,
                proc_control_node_B.idx_aq);
              break;

             default:
              proc_addBoundToActiveSetMatrix_(workingset, 5,
                proc_control_node_B.idx_aq);
              break;
            }

            proc_control_node_B.activeSetChangeID = 1;
          } else {
            proc_c_checkUnboundedOrIllPosed(solution, objective);
            subProblemChanged = false;
            if (workingset->nActiveConstr == 0) {
              solution->state = 1;
            }
          }

          if ((proc_control_node_B.nVar_f >= 1) &&
              (!(proc_control_node_B.normDelta == 0.0))) {
            proc_control_node_B.iyend = 0;
            while (proc_control_node_B.iyend <= proc_control_node_B.nVar_f - 1)
            {
              solution->xstar.data[proc_control_node_B.iyend] +=
                proc_control_node_B.normDelta * solution->
                searchDir.data[proc_control_node_B.iyend];
              proc_control_node_B.iyend++;
            }
          }

          proc_contro_computeGrad_StoreHx(objective, H, f_data,
            solution->xstar.data);
          updateFval = true;
        }

        proc_checkStoppingAndUpdateFval(&proc_control_node_B.activeSetChangeID,
          f_data, solution, memspace, objective, workingset, qrmanager,
          options_ObjectiveLimit, runTimeOptions_MaxIterations, updateFval);
      }
    } else {
      if (!updateFval) {
        solution->fstar = proc_contro_computeFval_ReuseHx(objective,
          memspace->workspace_double.data, f_data, solution->xstar.data);
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_linearForm_(boolean_T
  obj_hasLinear, int32_T obj_nvar, real_T workspace_data[], const real_T H[21609],
  const real_T f_data[], const real_T x_data[])
{
  int32_T ix;
  ix = 0;
  if (obj_hasLinear) {
    while (ix <= obj_nvar - 1) {
      workspace_data[ix] = f_data[ix];
      ix++;
    }

    ix = 1;
  }

  if (obj_nvar != 0) {
    int32_T b;
    int32_T iac;
    if (ix != 1) {
      while (ix <= obj_nvar - 1) {
        workspace_data[ix] = 0.0;
        ix++;
      }
    }

    ix = 0;
    b = (obj_nvar - 1) * obj_nvar + 1;
    iac = 1;
    while (((obj_nvar > 0) && (iac <= b)) || ((obj_nvar < 0) && (iac >= b))) {
      int32_T d;
      int32_T iy;
      proc_control_node_B.c_cc = 0.5 * x_data[ix];
      iy = 0;
      d = (iac + obj_nvar) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        workspace_data[iy] += H[ia - 1] * proc_control_node_B.c_cc;
        iy++;
      }

      ix++;
      iac += obj_nvar;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_computeFval(const
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *obj, real_T workspace_data[], const real_T H
  [21609], const real_T f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    proc_control_node_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    val = 0.0;
    if (obj->nvar >= 1) {
      for (int32_T idx{0}; idx < obj->nvar; idx++) {
        val += workspace_data[idx] * x_data[idx];
      }
    }
    break;

   default:
    {
      int32_T idx;
      proc_control_node_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
        f_data, x_data);
      for (idx = obj->nvar; idx < obj->maxVar - 1; idx++) {
        workspace_data[idx] = 0.5 * obj->beta * x_data[idx] + obj->rho;
      }

      val = 0.0;
      if (obj->maxVar - 1 >= 1) {
        for (idx = 0; idx <= obj->maxVar - 2; idx++) {
          val += workspace_data[idx] * x_data[idx];
        }
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_phaseone(const real_T H
  [21609], const real_T f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *cholmanager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options, const
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  proc_control_node_B.PROBTYPE_ORIG = workingset->probType;
  proc_control_node_B.nVar_tmp = workingset->nVar;
  solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
  if (workingset->probType == 3) {
    proc_control_node_B.mConstr = 1;
  } else {
    proc_control_node_B.mConstr = 4;
  }

  proc_control_nod_setProblemType(workingset, proc_control_node_B.mConstr);
  proc_contro_removeAllIneqConstr(workingset);
  objective->prev_objtype = objective->objtype;
  objective->prev_nvar = objective->nvar;
  objective->prev_hasLinear = objective->hasLinear;
  objective->objtype = 5;
  objective->nvar = proc_control_node_B.nVar_tmp + 1;
  objective->gammaScalar = 1.0;
  objective->hasLinear = true;
  options->ObjectiveLimit = 0.02;
  options->StepTolerance = 1.4901161193847657E-10;
  solution->fstar = proc_control_node_computeFval(objective,
    memspace->workspace_double.data, H, f_data, solution->xstar.data);
  solution->state = 5;
  proc_control_node_iterate(H, f_data, solution, memspace, workingset, qrmanager,
    cholmanager, objective, options->SolverName, options->StepTolerance,
    options->ObjectiveLimit, runTimeOptions->MaxIterations);
  if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
       workingset->sizes[3]) - 2]) {
    boolean_T exitg1;
    proc_control_node_B.mConstr = workingset->sizes[0] + 131;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.mConstr <=
                         workingset->nActiveConstr)) {
      if ((workingset->Wid.data[proc_control_node_B.mConstr - 1] == 4) &&
          (workingset->Wlocalidx.data[proc_control_node_B.mConstr - 1] ==
           workingset->sizes[3])) {
        proc_control_node_removeConstr(workingset, proc_control_node_B.mConstr);
        exitg1 = true;
      } else {
        proc_control_node_B.mConstr++;
      }
    }
  }

  proc_control_node_B.mConstr = workingset->nActiveConstr;
  proc_control_node_B.mEqFixed = workingset->sizes[0] + 130;
  while ((proc_control_node_B.mConstr > proc_control_node_B.mEqFixed) &&
         (proc_control_node_B.mConstr > proc_control_node_B.nVar_tmp)) {
    proc_control_node_removeConstr(workingset, proc_control_node_B.mConstr);
    proc_control_node_B.mConstr--;
  }

  solution->maxConstr = solution->xstar.data[proc_control_node_B.nVar_tmp];
  proc_control_nod_setProblemType(workingset, proc_control_node_B.PROBTYPE_ORIG);
  objective->objtype = objective->prev_objtype;
  objective->nvar = objective->prev_nvar;
  objective->hasLinear = objective->prev_hasLinear;
  options->ObjectiveLimit = (rtMinusInf);
  options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_driver_i(const real_T H
  [21609], const real_T f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *cholmanager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options,
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  boolean_T guard1{ false };

  solution->iterations = 0;
  runTimeOptions->RemainFeasible = true;
  proc_control_node_B.nVar_k = workingset->nVar - 1;
  guard1 = false;
  if (workingset->probType == 3) {
    proc_control_node_B.b_idx_j = 0;
    while (proc_control_node_B.b_idx_j <= workingset->sizes[0] - 1) {
      solution->xstar.data[workingset->
        indexFixed.data[proc_control_node_B.b_idx_j] - 1] = workingset->
        ub.data[workingset->indexFixed.data[proc_control_node_B.b_idx_j] - 1];
      proc_control_node_B.b_idx_j++;
    }

    proc_control_node_B.b_idx_j = 0;
    while (proc_control_node_B.b_idx_j <= workingset->sizes[3] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
           proc_control_node_B.b_idx_j) - 1]) {
        solution->xstar.data[workingset->
          indexLB.data[proc_control_node_B.b_idx_j] - 1] = -workingset->
          lb.data[workingset->indexLB.data[proc_control_node_B.b_idx_j] - 1];
      }

      proc_control_node_B.b_idx_j++;
    }

    proc_control_node_B.b_idx_j = 0;
    while (proc_control_node_B.b_idx_j <= workingset->sizes[4] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[4] +
           proc_control_node_B.b_idx_j) - 1]) {
        solution->xstar.data[workingset->
          indexUB.data[proc_control_node_B.b_idx_j] - 1] = workingset->
          ub.data[workingset->indexUB.data[proc_control_node_B.b_idx_j] - 1];
      }

      proc_control_node_B.b_idx_j++;
    }

    proc_control_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
    if (solution->state < 0) {
    } else {
      guard1 = true;
    }
  } else {
    solution->state = 82;
    guard1 = true;
  }

  if (guard1) {
    solution->iterations = 0;
    solution->maxConstr = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    if (solution->maxConstr > 0.02) {
      proc_control_node_phaseone(H, f_data, solution, memspace, workingset,
        qrmanager, cholmanager, objective, options, runTimeOptions);
      if (solution->state != 0) {
        solution->maxConstr = proc__maxConstraintViolation_du(workingset,
          solution->xstar.data);
        if (solution->maxConstr > 0.02) {
          proc_control_node_B.nVar_k = 0;
          while (proc_control_node_B.nVar_k <= workingset->mConstrMax - 1) {
            solution->lambda.data[proc_control_node_B.nVar_k] = 0.0;
            proc_control_node_B.nVar_k++;
          }

          solution->fstar = proc_control_node_computeFval(objective,
            memspace->workspace_double.data, H, f_data, solution->xstar.data);
          solution->state = -2;
        } else {
          if (solution->maxConstr > 0.0) {
            proc_control_node_B.y_size_idx_0_d = solution->searchDir.size;
            proc_control_node_B.b_idx_j = solution->searchDir.size;
            if (0 <= proc_control_node_B.b_idx_j - 1) {
              std::memcpy(&proc_control_node_B.y_data_d[0],
                          &solution->searchDir.data[0],
                          proc_control_node_B.b_idx_j * sizeof(real_T));
            }

            proc_control_node_B.b_idx_j = 0;
            while (proc_control_node_B.b_idx_j <= proc_control_node_B.nVar_k) {
              proc_control_node_B.y_data_d[proc_control_node_B.b_idx_j] =
                solution->xstar.data[proc_control_node_B.b_idx_j];
              proc_control_node_B.b_idx_j++;
            }

            if (0 <= proc_control_node_B.y_size_idx_0_d - 1) {
              std::memcpy(&solution->searchDir.data[0],
                          &proc_control_node_B.y_data_d[0],
                          proc_control_node_B.y_size_idx_0_d * sizeof(real_T));
            }

            proc_control_PresolveWorkingSet(solution, memspace, workingset,
              qrmanager);
            proc_control_node_B.maxConstr_new = proc__maxConstraintViolation_du
              (workingset, solution->xstar.data);
            if (proc_control_node_B.maxConstr_new >= solution->maxConstr) {
              solution->maxConstr = proc_control_node_B.maxConstr_new;
              proc_control_node_B.y_size_idx_0_d = solution->xstar.size;
              proc_control_node_B.b_idx_j = solution->xstar.size;
              if (0 <= proc_control_node_B.b_idx_j - 1) {
                std::memcpy(&proc_control_node_B.y_data_d[0],
                            &solution->xstar.data[0],
                            proc_control_node_B.b_idx_j * sizeof(real_T));
              }

              proc_control_node_B.b_idx_j = 0;
              while (proc_control_node_B.b_idx_j <= proc_control_node_B.nVar_k)
              {
                proc_control_node_B.y_data_d[proc_control_node_B.b_idx_j] =
                  solution->searchDir.data[proc_control_node_B.b_idx_j];
                proc_control_node_B.b_idx_j++;
              }

              if (0 <= proc_control_node_B.y_size_idx_0_d - 1) {
                std::memcpy(&solution->xstar.data[0],
                            &proc_control_node_B.y_data_d[0],
                            proc_control_node_B.y_size_idx_0_d * sizeof(real_T));
              }
            }
          }

          proc_control_node_iterate(H, f_data, solution, memspace, workingset,
            qrmanager, cholmanager, objective, options->SolverName,
            options->StepTolerance, options->ObjectiveLimit,
            runTimeOptions->MaxIterations);
        }
      }
    } else {
      proc_control_node_iterate(H, f_data, solution, memspace, workingset,
        qrmanager, cholmanager, objective, options->SolverName,
        options->StepTolerance, options->ObjectiveLimit,
        runTimeOptions->MaxIterations);
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_addAeqConstr
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T idx_local)
{
  int32_T totalEq;
  totalEq = obj->nWConstr[0] + obj->nWConstr[1];
  if ((obj->nActiveConstr == totalEq) && (idx_local > obj->nWConstr[1])) {
    int32_T iAeq0;
    int32_T iAw0;
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 2;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    for (totalEq = 1; totalEq - 1 < obj->nVar; totalEq++) {
      obj->ATwset.data[(iAw0 + totalEq) - 1] = obj->Aeq.data[(iAeq0 + totalEq) -
        1];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
  } else {
    int32_T iAeq0;
    int32_T iAw0;
    obj->nActiveConstr++;
    iAeq0 = obj->nActiveConstr - 1;
    obj->Wid.data[obj->nActiveConstr - 1] = obj->Wid.data[totalEq];
    obj->Wlocalidx.data[iAeq0] = obj->Wlocalidx.data[totalEq];
    for (iAw0 = 0; iAw0 < obj->nVar; iAw0++) {
      obj->ATwset.data[iAw0 + obj->ldA * iAeq0] = obj->ATwset.data[obj->ldA *
        totalEq + iAw0];
    }

    obj->bwset.data[iAeq0] = obj->bwset.data[totalEq];
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->Wid.data[totalEq] = 2;
    obj->Wlocalidx.data[totalEq] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = obj->ldA * totalEq;
    for (int32_T b_idx{1}; b_idx - 1 < obj->nVar; b_idx++) {
      obj->ATwset.data[(iAw0 + b_idx) - 1] = obj->Aeq.data[(iAeq0 + b_idx) - 1];
    }

    obj->bwset.data[totalEq] = obj->beq[idx_local - 1];
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_soc(const real_T
  Hessian[21609], const real_T grad_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T
  *TrialState, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace,
  s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T
  *QRManager, s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager,
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *QPObjective, const
  somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T success;
  proc_control_node_B.nWIneq_old = WorkingSet->nWConstr[2];
  proc_control_node_B.nWLower_old = WorkingSet->nWConstr[3];
  proc_control_node_B.nWUpper_old = WorkingSet->nWConstr[4];
  proc_control_node_B.nVar_kr = WorkingSet->nVar - 1;
  proc_control_node_B.mConstrMax_k = WorkingSet->mConstrMax - 1;
  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_kr) {
    TrialState->xstarsqp[proc_control_node_B.idx_Aineq] =
      TrialState->xstarsqp_old[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_kr) {
    TrialState->socDirection.data[proc_control_node_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.mConstrMax_k) {
    TrialState->lambdaStopTest.data[proc_control_node_B.idx_Aineq] =
      TrialState->lambda.data[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  for (proc_control_node_B.idx_Aineq = 0; proc_control_node_B.idx_Aineq < 130;
       proc_control_node_B.idx_Aineq++) {
    WorkingSet->beq[proc_control_node_B.idx_Aineq] = -TrialState->
      cEq[proc_control_node_B.idx_Aineq];
  }

  proc_control_node_B.idx_Aineq_tmp_tmp = WorkingSet->ldA;
  proc_control_node_B.iy_id = 0;
  proc_control_node_B.idx_upper = WorkingSet->ldA * 129 + 1;
  proc_control_node_B.iac = 1;
  while (((proc_control_node_B.idx_Aineq_tmp_tmp > 0) &&
          (proc_control_node_B.iac <= proc_control_node_B.idx_upper)) ||
         ((proc_control_node_B.idx_Aineq_tmp_tmp < 0) &&
          (proc_control_node_B.iac >= proc_control_node_B.idx_upper))) {
    proc_control_node_B.idx_Partition = 0;
    proc_control_node_B.oldDirIdx = 0.0;
    proc_control_node_B.idx_Aineq = (proc_control_node_B.iac + WorkingSet->nVar)
      - 1;
    proc_control_node_B.b_ia_e = proc_control_node_B.iac;
    while (proc_control_node_B.b_ia_e <= proc_control_node_B.idx_Aineq) {
      proc_control_node_B.oldDirIdx += WorkingSet->
        Aeq.data[proc_control_node_B.b_ia_e - 1] * TrialState->
        searchDir.data[proc_control_node_B.idx_Partition];
      proc_control_node_B.idx_Partition++;
      proc_control_node_B.b_ia_e++;
    }

    WorkingSet->beq[proc_control_node_B.iy_id] += proc_control_node_B.oldDirIdx;
    proc_control_node_B.iy_id++;
    proc_control_node_B.iac += proc_control_node_B.idx_Aineq_tmp_tmp;
  }

  for (proc_control_node_B.idx_Aineq = 0; proc_control_node_B.idx_Aineq < 130;
       proc_control_node_B.idx_Aineq++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_node_B.idx_Aineq]
      = WorkingSet->beq[proc_control_node_B.idx_Aineq];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_node_B.idx_Aineq = 0;
    while (proc_control_node_B.idx_Aineq <= WorkingSet->sizes[2] - 1) {
      WorkingSet->bineq.data[proc_control_node_B.idx_Aineq] =
        -TrialState->cIneq.data[proc_control_node_B.idx_Aineq];
      proc_control_node_B.idx_Aineq++;
    }

    proc_control_node_B.idx_Aineq_tmp_tmp = WorkingSet->ldA;
    proc_control_node_B.iy_id = 0;
    proc_control_node_B.idx_upper = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA
      + 1;
    proc_control_node_B.iac = 1;
    while (((proc_control_node_B.idx_Aineq_tmp_tmp > 0) &&
            (proc_control_node_B.iac <= proc_control_node_B.idx_upper)) ||
           ((proc_control_node_B.idx_Aineq_tmp_tmp < 0) &&
            (proc_control_node_B.iac >= proc_control_node_B.idx_upper))) {
      proc_control_node_B.idx_Partition = 0;
      proc_control_node_B.oldDirIdx = 0.0;
      proc_control_node_B.idx_Aineq = (proc_control_node_B.iac +
        WorkingSet->nVar) - 1;
      proc_control_node_B.b_ia_e = proc_control_node_B.iac;
      while (proc_control_node_B.b_ia_e <= proc_control_node_B.idx_Aineq) {
        proc_control_node_B.oldDirIdx += WorkingSet->
          Aineq.data[proc_control_node_B.b_ia_e - 1] *
          TrialState->searchDir.data[proc_control_node_B.idx_Partition];
        proc_control_node_B.idx_Partition++;
        proc_control_node_B.b_ia_e++;
      }

      WorkingSet->bineq.data[proc_control_node_B.iy_id] +=
        proc_control_node_B.oldDirIdx;
      proc_control_node_B.iy_id++;
      proc_control_node_B.iac += proc_control_node_B.idx_Aineq_tmp_tmp;
    }

    proc_control_node_B.idx_Aineq = 1;
    proc_control_node_B.iy_id = WorkingSet->sizes[2] + 1;
    proc_control_node_B.idx_upper = (WorkingSet->sizes[2] + WorkingSet->sizes[3])
      + 1;
    proc_control_node_B.iac = WorkingSet->isActiveIdx[2] - 1;
    while (proc_control_node_B.iac + 1 <= WorkingSet->nActiveConstr) {
      switch (WorkingSet->Wid.data[proc_control_node_B.iac]) {
       case 3:
        proc_control_node_B.idx_Partition = proc_control_node_B.idx_Aineq;
        proc_control_node_B.idx_Aineq++;
        WorkingSet->bwset.data[proc_control_node_B.iac] = WorkingSet->
          bineq.data[WorkingSet->Wlocalidx.data[proc_control_node_B.iac] - 1];
        break;

       case 4:
        proc_control_node_B.idx_Partition = proc_control_node_B.iy_id;
        proc_control_node_B.iy_id++;
        break;

       default:
        proc_control_node_B.idx_Partition = proc_control_node_B.idx_upper;
        proc_control_node_B.idx_upper++;
        break;
      }

      TrialState->workingset_old.data[proc_control_node_B.idx_Partition - 1] =
        WorkingSet->Wlocalidx.data[proc_control_node_B.iac];
      proc_control_node_B.iac++;
    }
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_kr) {
    TrialState->xstar.data[proc_control_node_B.idx_Aineq] = TrialState->
      xstarsqp[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.qpoptions_f = *qpoptions;
  proc_control_node_B.qpoptions_js = *qpoptions;
  proc_control_node_driver_i(Hessian, grad_data, TrialState, memspace,
    WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions_f, &proc_control_node_B.qpoptions_js);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_node_addAeqConstr(WorkingSet, WorkingSet->
      indexEqRemoved[WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_kr) {
    proc_control_node_B.oldDirIdx = TrialState->
      socDirection.data[proc_control_node_B.idx_Aineq];
    TrialState->socDirection.data[proc_control_node_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_node_B.idx_Aineq] -
      TrialState->socDirection.data[proc_control_node_B.idx_Aineq];
    TrialState->xstar.data[proc_control_node_B.idx_Aineq] =
      proc_control_node_B.oldDirIdx;
    proc_control_node_B.idx_Aineq++;
  }

  success = (proc_control_node_xnrm2_md(proc_control_node_B.nVar_kr + 1,
              TrialState->socDirection.data) <= proc_control_node_xnrm2_md
             (proc_control_node_B.nVar_kr + 1, TrialState->xstar.data) * 2.0);
  proc_control_node_B.idx_Aineq = WorkingSet->sizes[2];
  proc_control_node_B.iy_id = WorkingSet->sizes[3];
  for (proc_control_node_B.nVar_kr = 0; proc_control_node_B.nVar_kr < 130;
       proc_control_node_B.nVar_kr++) {
    WorkingSet->beq[proc_control_node_B.nVar_kr] = -TrialState->
      cEq[proc_control_node_B.nVar_kr];
  }

  for (proc_control_node_B.nVar_kr = 0; proc_control_node_B.nVar_kr < 130;
       proc_control_node_B.nVar_kr++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_node_B.nVar_kr] =
      WorkingSet->beq[proc_control_node_B.nVar_kr];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_node_B.nVar_kr = 0;
    while (proc_control_node_B.nVar_kr <= proc_control_node_B.idx_Aineq - 1) {
      WorkingSet->bineq.data[proc_control_node_B.nVar_kr] =
        -TrialState->cIneq.data[proc_control_node_B.nVar_kr];
      proc_control_node_B.nVar_kr++;
    }

    if (!success) {
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_node_B.nVar_kr = 0;
      while (proc_control_node_B.nVar_kr <= proc_control_node_B.nWIneq_old - 1)
      {
        proc_control_nod_addAineqConstr(WorkingSet,
          TrialState->workingset_old.data[proc_control_node_B.nVar_kr]);
        proc_control_node_B.nVar_kr++;
      }

      proc_control_node_B.nWIneq_old = 0;
      while (proc_control_node_B.nWIneq_old <= proc_control_node_B.nWLower_old -
             1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 4,
          TrialState->workingset_old.data[proc_control_node_B.nWIneq_old +
          proc_control_node_B.idx_Aineq]);
        proc_control_node_B.nWIneq_old++;
      }

      proc_control_node_B.nWLower_old = 0;
      while (proc_control_node_B.nWLower_old <= proc_control_node_B.nWUpper_old
             - 1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 5,
          TrialState->workingset_old.data[(proc_control_node_B.nWLower_old +
          proc_control_node_B.idx_Aineq) + proc_control_node_B.iy_id]);
        proc_control_node_B.nWLower_old++;
      }
    }
  }

  if (!success) {
    proc_control_node_B.nWUpper_old = 0;
    while (proc_control_node_B.nWUpper_old <= proc_control_node_B.mConstrMax_k)
    {
      TrialState->lambda.data[proc_control_node_B.nWUpper_old] =
        TrialState->lambdaStopTest.data[proc_control_node_B.nWUpper_old];
      proc_control_node_B.nWUpper_old++;
    }
  } else {
    proc_control_node_sortLambdaQP(TrialState->lambda.data,
      WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
      WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
      memspace->workspace_double.data);
  }

  return success;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_normal(const real_T Hessian
  [21609], const real_T grad_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T nonlinEqRemoved;
  proc_control_node_B.qpoptions_h = *qpoptions;
  proc_control_node_B.qpoptions_c = *qpoptions;
  proc_control_node_driver_i(Hessian, grad_data, TrialState, memspace,
    WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions_h, &proc_control_node_B.qpoptions_c);
  if (TrialState->state > 0) {
    proc_control_node_B.penaltyParamTrial = MeritFunction->penaltyParam;
    proc_control_node_B.constrViolationEq = 0.0;
    for (proc_control_node_B.k_k = 0; proc_control_node_B.k_k < 130;
         proc_control_node_B.k_k++) {
      proc_control_node_B.constrViolationEq += std::abs(TrialState->
        cEq[proc_control_node_B.k_k]);
    }

    proc_control_node_B.constrViolationIneq = 0.0;
    proc_control_node_B.k_k = 0;
    while (proc_control_node_B.k_k <= WorkingSet->sizes[2] - 1) {
      if (TrialState->cIneq.data[proc_control_node_B.k_k] > 0.0) {
        proc_control_node_B.constrViolationIneq += TrialState->
          cIneq.data[proc_control_node_B.k_k];
      }

      proc_control_node_B.k_k++;
    }

    proc_control_node_B.constrViolationEq +=
      proc_control_node_B.constrViolationIneq;
    proc_control_node_B.constrViolationIneq =
      MeritFunction->linearizedConstrViol;
    MeritFunction->linearizedConstrViol = 0.0;
    proc_control_node_B.constrViolationIneq +=
      proc_control_node_B.constrViolationEq;
    if ((proc_control_node_B.constrViolationIneq > 2.2204460492503131E-16) &&
        (TrialState->fstar > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_node_B.penaltyParamTrial = 1.0;
      } else {
        proc_control_node_B.penaltyParamTrial = 1.5;
      }

      proc_control_node_B.penaltyParamTrial =
        proc_control_node_B.penaltyParamTrial * TrialState->fstar /
        proc_control_node_B.constrViolationIneq;
    }

    if (proc_control_node_B.penaltyParamTrial < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_node_B.penaltyParamTrial *
        proc_control_node_B.constrViolationEq + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) *
           proc_control_node_B.penaltyParamTrial + MeritFunction->initFval) -
          MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        MeritFunction->penaltyParam = std::fmax
          (proc_control_node_B.penaltyParamTrial, 1.0E-10);
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_node_B.constrViolationEq + TrialState->sqpFval;
      }
    } else {
      MeritFunction->penaltyParam = std::fmax
        (proc_control_node_B.penaltyParamTrial, 1.0E-10);
      MeritFunction->phi = MeritFunction->penaltyParam *
        proc_control_node_B.constrViolationEq + TrialState->sqpFval;
    }

    MeritFunction->phiPrimePlus = std::fmin(TrialState->fstar -
      MeritFunction->penaltyParam * proc_control_node_B.constrViolationEq, 0.0);
  }

  proc_control_node_sortLambdaQP(TrialState->lambda.data,
    WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
    WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
    memspace->workspace_double.data);
  nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_node_addAeqConstr(WorkingSet, WorkingSet->
      indexEqRemoved[WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  if (nonlinEqRemoved) {
    for (proc_control_node_B.k_k = 0; proc_control_node_B.k_k < 130;
         proc_control_node_B.k_k++) {
      WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + proc_control_node_B.k_k]
        = proc_control_node_B.k_k + 1;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_relaxed(const real_T
  Hessian[21609], const real_T grad_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T
  *TrialState, sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T tf;
  proc_control_node_B.nVarOrig = WorkingSet->nVar - 1;
  proc_control_node_B.beta = 0.0;
  proc_control_node_B.temp_d4 = 0;
  while (proc_control_node_B.temp_d4 <= proc_control_node_B.nVarOrig) {
    proc_control_node_B.beta += Hessian[147 * proc_control_node_B.temp_d4 +
      proc_control_node_B.temp_d4];
    proc_control_node_B.temp_d4++;
  }

  proc_control_node_B.beta /= static_cast<real_T>(WorkingSet->nVar);
  if (TrialState->sqpIterations <= 1) {
    proc_control_node_B.rho = std::fmax(1.0, std::abs
      (grad_data[proc_control_node_ixamax(QPObjective->nvar, grad_data) - 1])) *
      100.0;
  } else {
    proc_control_node_B.rho = std::abs(TrialState->
      lambdasqp.data[proc_control_node_ixamax(WorkingSet->mConstr,
      TrialState->lambdasqp.data) - 1]);
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->beta = proc_control_node_B.beta;
  QPObjective->rho = proc_control_node_B.rho;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 4;
  proc_control_node_B.b_WorkingSet = *WorkingSet;
  proc_control_nod_setProblemType(&proc_control_node_B.b_WorkingSet, 2);
  proc_control_node_B.mIneq_o = proc_control_node_B.b_WorkingSet.sizes[2] - 1;
  proc_control_node_B.mLBOrig = (proc_control_node_B.b_WorkingSet.sizes[3] -
    proc_control_node_B.b_WorkingSet.sizes[2]) - 260;
  proc_control_node_B.temp_d4 = 0;
  while (proc_control_node_B.temp_d4 <= proc_control_node_B.mIneq_o) {
    memspace->workspace_double.data[proc_control_node_B.temp_d4] =
      proc_control_node_B.b_WorkingSet.bineq.data[proc_control_node_B.temp_d4];
    proc_control_node_B.temp_d4++;
  }

  proc_control_xgemv_mtmcjbiadz2i(WorkingSet->nVar,
    proc_control_node_B.b_WorkingSet.sizes[2],
    proc_control_node_B.b_WorkingSet.Aineq.data,
    proc_control_node_B.b_WorkingSet.ldA, TrialState->xstar.data,
    memspace->workspace_double.data);
  proc_control_node_B.temp_d4 = 0;
  while (proc_control_node_B.temp_d4 <= proc_control_node_B.mIneq_o) {
    TrialState->xstar.data[(proc_control_node_B.nVarOrig +
      proc_control_node_B.temp_d4) + 1] = static_cast<real_T>
      (memspace->workspace_double.data[proc_control_node_B.temp_d4] > 0.0) *
      memspace->workspace_double.data[proc_control_node_B.temp_d4];
    proc_control_node_B.temp_d4++;
  }

  std::memcpy(&memspace->workspace_double.data[0],
              &proc_control_node_B.b_WorkingSet.beq[0], 130U * sizeof(real_T));
  proc_control_xgemv_mtmcjbiadz2i(WorkingSet->nVar, 130,
    proc_control_node_B.b_WorkingSet.Aeq.data,
    proc_control_node_B.b_WorkingSet.ldA, TrialState->xstar.data,
    memspace->workspace_double.data);
  for (proc_control_node_B.temp_d4 = 0; proc_control_node_B.temp_d4 < 130;
       proc_control_node_B.temp_d4++) {
    proc_control_node_B.idx_positive = proc_control_node_B.mIneq_o +
      proc_control_node_B.temp_d4;
    if (memspace->workspace_double.data[proc_control_node_B.temp_d4] <= 0.0) {
      TrialState->xstar.data[(proc_control_node_B.nVarOrig +
        proc_control_node_B.idx_positive) + 2] = 0.0;
      TrialState->xstar.data[(proc_control_node_B.nVarOrig +
        proc_control_node_B.idx_positive) + 132] =
        -memspace->workspace_double.data[proc_control_node_B.temp_d4];
      proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
        (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 2);
      if (memspace->workspace_double.data[proc_control_node_B.temp_d4] >= -0.02)
      {
        proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
          (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 132);
      }
    } else {
      proc_control_node_B.i17 = proc_control_node_B.nVarOrig +
        proc_control_node_B.idx_positive;
      TrialState->xstar.data[proc_control_node_B.i17 + 2] =
        memspace->workspace_double.data[proc_control_node_B.temp_d4];
      TrialState->xstar.data[proc_control_node_B.i17 + 132] = 0.0;
      proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
        (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 132);
      if (memspace->workspace_double.data[proc_control_node_B.temp_d4] <= 0.02)
      {
        proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
          (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 2);
      }
    }
  }

  proc_control_node_B.temp_d4 = qpoptions->MaxIterations;
  qpoptions->MaxIterations = (qpoptions->MaxIterations +
    proc_control_node_B.b_WorkingSet.nVar) - WorkingSet->nVar;
  proc_control_node_B.qpoptions = *qpoptions;
  proc_control_node_B.qpoptions_j = *qpoptions;
  proc_control_node_driver_i(Hessian, grad_data, TrialState, memspace,
    &proc_control_node_B.b_WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions, &proc_control_node_B.qpoptions_j);
  qpoptions->MaxIterations = proc_control_node_B.temp_d4;
  proc_control_node_B.mIneq_o = proc_control_node_B.b_WorkingSet.sizes[2] - 1;
  proc_control_node_B.mLBOrig = proc_control_node_B.b_WorkingSet.sizes[3] - 261;
  proc_control_node_B.temp_d4 = 0;
  for (proc_control_node_B.nVarOrig = 0; proc_control_node_B.nVarOrig < 130;
       proc_control_node_B.nVarOrig++) {
    boolean_T b_tf;
    proc_control_node_B.idx_positive =
      (proc_control_node_B.b_WorkingSet.isActiveIdx[3] +
       proc_control_node_B.mLBOrig) + proc_control_node_B.nVarOrig;
    tf =
      proc_control_node_B.b_WorkingSet.isActiveConstr.data[proc_control_node_B.idx_positive];
    b_tf =
      proc_control_node_B.b_WorkingSet.isActiveConstr.data[proc_control_node_B.idx_positive
      + 130];
    memspace->workspace_int.data[proc_control_node_B.nVarOrig] = tf;
    memspace->workspace_int.data[proc_control_node_B.nVarOrig + 130] = b_tf;
    proc_control_node_B.temp_d4 = (proc_control_node_B.temp_d4 + tf) + b_tf;
  }

  proc_control_node_B.nVarOrig = 0;
  while (proc_control_node_B.nVarOrig <= proc_control_node_B.mIneq_o) {
    tf = proc_control_node_B.b_WorkingSet.isActiveConstr.data
      [(((proc_control_node_B.b_WorkingSet.isActiveIdx[3] +
          proc_control_node_B.mLBOrig) - proc_control_node_B.mIneq_o) +
        proc_control_node_B.nVarOrig) - 1];
    memspace->workspace_int.data[proc_control_node_B.nVarOrig + 260] = tf;
    proc_control_node_B.temp_d4 += tf;
    proc_control_node_B.nVarOrig++;
  }

  if (TrialState->state != -6) {
    proc_control_node_B.nVarOrig = (proc_control_node_B.b_WorkingSet.nVarMax -
      WorkingSet->nVar) - 1;
    proc_control_node_B.qpfvalLinearExcess = 0.0;
    proc_control_node_B.qpfvalQuadExcess = 0.0;
    if (proc_control_node_B.nVarOrig >= 1) {
      proc_control_node_B.mIneq_o = WorkingSet->nVar +
        proc_control_node_B.nVarOrig;
      proc_control_node_B.mLBOrig = WorkingSet->nVar;
      while (proc_control_node_B.mLBOrig + 1 <= proc_control_node_B.mIneq_o) {
        proc_control_node_B.qpfvalLinearExcess += std::abs
          (TrialState->xstar.data[proc_control_node_B.mLBOrig]);
        proc_control_node_B.mLBOrig++;
      }

      proc_control_node_B.mIneq_o = WorkingSet->nVar;
      proc_control_node_B.mLBOrig = WorkingSet->nVar;
      proc_control_node_B.idx_positive = 0;
      while (proc_control_node_B.idx_positive <= proc_control_node_B.nVarOrig -
             1) {
        proc_control_node_B.qpfvalQuadExcess += TrialState->
          xstar.data[proc_control_node_B.mIneq_o] * TrialState->
          xstar.data[proc_control_node_B.mLBOrig];
        proc_control_node_B.mIneq_o++;
        proc_control_node_B.mLBOrig++;
        proc_control_node_B.idx_positive++;
      }
    }

    proc_control_node_B.beta = (TrialState->fstar - proc_control_node_B.rho *
      proc_control_node_B.qpfvalLinearExcess) - proc_control_node_B.beta / 2.0 *
      proc_control_node_B.qpfvalQuadExcess;
    proc_control_node_B.mIneq_o = (WorkingSet->nVarMax - WorkingSet->nVar) - 1;
    proc_control_node_B.rho = MeritFunction->penaltyParam;
    proc_control_node_B.qpfvalLinearExcess = 0.0;
    for (proc_control_node_B.nVarOrig = 0; proc_control_node_B.nVarOrig < 130;
         proc_control_node_B.nVarOrig++) {
      proc_control_node_B.qpfvalLinearExcess += std::abs(TrialState->
        cEq[proc_control_node_B.nVarOrig]);
    }

    proc_control_node_B.qpfvalQuadExcess = 0.0;
    proc_control_node_B.nVarOrig = 0;
    while (proc_control_node_B.nVarOrig <= WorkingSet->sizes[2] - 1) {
      if (TrialState->cIneq.data[proc_control_node_B.nVarOrig] > 0.0) {
        proc_control_node_B.qpfvalQuadExcess += TrialState->
          cIneq.data[proc_control_node_B.nVarOrig];
      }

      proc_control_node_B.nVarOrig++;
    }

    proc_control_node_B.qpfvalLinearExcess +=
      proc_control_node_B.qpfvalQuadExcess;
    proc_control_node_B.qpfvalQuadExcess = MeritFunction->linearizedConstrViol;
    proc_control_node_B.y_g = 0.0;
    if (proc_control_node_B.mIneq_o >= 1) {
      proc_control_node_B.nVarOrig = WorkingSet->nVar +
        proc_control_node_B.mIneq_o;
      proc_control_node_B.mIneq_o = WorkingSet->nVar;
      while (proc_control_node_B.mIneq_o + 1 <= proc_control_node_B.nVarOrig) {
        proc_control_node_B.y_g += std::abs(TrialState->
          xstar.data[proc_control_node_B.mIneq_o]);
        proc_control_node_B.mIneq_o++;
      }
    }

    MeritFunction->linearizedConstrViol = proc_control_node_B.y_g;
    proc_control_node_B.qpfvalQuadExcess =
      (proc_control_node_B.qpfvalLinearExcess +
       proc_control_node_B.qpfvalQuadExcess) - proc_control_node_B.y_g;
    if ((proc_control_node_B.qpfvalQuadExcess > 2.2204460492503131E-16) &&
        (proc_control_node_B.beta > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_node_B.rho = 1.0;
      } else {
        proc_control_node_B.rho = 1.5;
      }

      proc_control_node_B.rho = proc_control_node_B.rho *
        proc_control_node_B.beta / proc_control_node_B.qpfvalQuadExcess;
    }

    if (proc_control_node_B.rho < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_node_B.rho *
        proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * proc_control_node_B.rho +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        MeritFunction->penaltyParam = std::fmax(proc_control_node_B.rho, 1.0E-10);
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
      }
    } else {
      MeritFunction->penaltyParam = std::fmax(proc_control_node_B.rho, 1.0E-10);
      MeritFunction->phi = MeritFunction->penaltyParam *
        proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
    }

    MeritFunction->phiPrimePlus = std::fmin(proc_control_node_B.beta -
      MeritFunction->penaltyParam * proc_control_node_B.qpfvalLinearExcess, 0.0);
    proc_control_node_B.mIneq_o = proc_control_node_B.b_WorkingSet.isActiveIdx[1]
      - 1;
    for (proc_control_node_B.nVarOrig = 0; proc_control_node_B.nVarOrig < 130;
         proc_control_node_B.nVarOrig++) {
      if (memspace->workspace_int.data[proc_control_node_B.nVarOrig] != 0) {
        tf = (memspace->workspace_int.data[proc_control_node_B.nVarOrig + 130]
              != 0);
      } else {
        tf = false;
      }

      proc_control_node_B.mLBOrig = proc_control_node_B.mIneq_o +
        proc_control_node_B.nVarOrig;
      TrialState->lambda.data[proc_control_node_B.mLBOrig] *= static_cast<real_T>
        (tf);
    }

    proc_control_node_B.nVarOrig = proc_control_node_B.b_WorkingSet.isActiveIdx
      [2] - 1;
    while (proc_control_node_B.nVarOrig + 1 <=
           proc_control_node_B.b_WorkingSet.nActiveConstr) {
      if (proc_control_node_B.b_WorkingSet.Wid.data[proc_control_node_B.nVarOrig]
          == 3) {
        TrialState->lambda.data[proc_control_node_B.nVarOrig] *=
          static_cast<real_T>(memspace->
                              workspace_int.data[proc_control_node_B.b_WorkingSet.Wlocalidx.data
                              [proc_control_node_B.nVarOrig] + 259]);
      }

      proc_control_node_B.nVarOrig++;
    }
  }

  proc_control_node_B.c_WorkingSet = proc_control_node_B.b_WorkingSet;
  proc_control_node_B.nVarOrig = (proc_control_node_B.b_WorkingSet.sizes[3] -
    proc_control_node_B.b_WorkingSet.sizes[2]) - 260;
  proc_control_node_B.mIneq_o = proc_control_node_B.b_WorkingSet.nActiveConstr;
  while ((proc_control_node_B.mIneq_o > proc_control_node_B.b_WorkingSet.sizes[0]
          + 130) && (proc_control_node_B.temp_d4 > 0)) {
    if ((proc_control_node_B.c_WorkingSet.Wid.data[proc_control_node_B.mIneq_o -
         1] == 4) &&
        (proc_control_node_B.c_WorkingSet.Wlocalidx.data[proc_control_node_B.mIneq_o
         - 1] > proc_control_node_B.nVarOrig)) {
      proc_control_node_B.beta = TrialState->
        lambda.data[proc_control_node_B.c_WorkingSet.nActiveConstr - 1];
      TrialState->lambda.data[proc_control_node_B.c_WorkingSet.nActiveConstr - 1]
        = 0.0;
      TrialState->lambda.data[proc_control_node_B.mIneq_o - 1] =
        proc_control_node_B.beta;
      proc_control_node_removeConstr(&proc_control_node_B.c_WorkingSet,
        proc_control_node_B.mIneq_o);
      proc_control_node_B.temp_d4--;
    }

    proc_control_node_B.mIneq_o--;
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 3;
  *WorkingSet = proc_control_node_B.c_WorkingSet;
  proc_control_nod_setProblemType(WorkingSet, 3);
  proc_control_node_sortLambdaQP(TrialState->lambda.data,
    WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
    WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
    memspace->workspace_double.data);
}

// Function for MATLAB Function: '<S268>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_step_k(int32_T
  *STEP_TYPE, real_T Hessian[21609], const real_T lb[147],
  s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState, sG8JZ69axY52WWR6RKyApQC_proc__T
  *MeritFunction, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace,
  s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T
  *QRManager, s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager,
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *
  qpoptions)
{
  boolean_T checkBoundViolation;
  boolean_T stepSuccess;
  stepSuccess = true;
  checkBoundViolation = true;
  proc_control_node_B.nVar = WorkingSet->nVar - 1;
  if (*STEP_TYPE != 3) {
    proc_control_node_B.b_k_j = 0;
    while (proc_control_node_B.b_k_j <= proc_control_node_B.nVar) {
      TrialState->xstar.data[proc_control_node_B.b_k_j] = TrialState->
        xstarsqp[proc_control_node_B.b_k_j];
      proc_control_node_B.b_k_j++;
    }
  } else {
    proc_control_node_B.y_size_idx_0_h = TrialState->searchDir.size;
    proc_control_node_B.iH0 = TrialState->searchDir.size;
    if (0 <= proc_control_node_B.iH0 - 1) {
      std::memcpy(&proc_control_node_B.y_data_ld[0], &TrialState->
                  searchDir.data[0], proc_control_node_B.iH0 * sizeof(real_T));
    }

    proc_control_node_B.b_k_j = 0;
    while (proc_control_node_B.b_k_j <= proc_control_node_B.nVar) {
      proc_control_node_B.y_data_ld[proc_control_node_B.b_k_j] =
        TrialState->xstar.data[proc_control_node_B.b_k_j];
      proc_control_node_B.b_k_j++;
    }

    if (0 <= proc_control_node_B.y_size_idx_0_h - 1) {
      std::memcpy(&TrialState->searchDir.data[0],
                  &proc_control_node_B.y_data_ld[0],
                  proc_control_node_B.y_size_idx_0_h * sizeof(real_T));
    }
  }

  int32_T exitg1;
  boolean_T guard1{ false };

  do {
    exitg1 = 0;
    guard1 = false;
    switch (*STEP_TYPE) {
     case 1:
      proc_control_node_normal(Hessian, TrialState->grad.data, TrialState,
        MeritFunction, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      if ((TrialState->state <= 0) && (TrialState->state != -6)) {
        *STEP_TYPE = 2;
      } else {
        proc_control_node_B.y_size_idx_0_h = TrialState->delta_x.size;
        proc_control_node_B.iH0 = TrialState->delta_x.size;
        if (0 <= proc_control_node_B.iH0 - 1) {
          std::memcpy(&proc_control_node_B.y_data_ld[0],
                      &TrialState->delta_x.data[0], proc_control_node_B.iH0 *
                      sizeof(real_T));
        }

        proc_control_node_B.b_k_j = 0;
        while (proc_control_node_B.b_k_j <= proc_control_node_B.nVar) {
          proc_control_node_B.y_data_ld[proc_control_node_B.b_k_j] =
            TrialState->xstar.data[proc_control_node_B.b_k_j];
          proc_control_node_B.b_k_j++;
        }

        if (0 <= proc_control_node_B.y_size_idx_0_h - 1) {
          std::memcpy(&TrialState->delta_x.data[0],
                      &proc_control_node_B.y_data_ld[0],
                      proc_control_node_B.y_size_idx_0_h * sizeof(real_T));
        }

        guard1 = true;
      }
      break;

     case 2:
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_node_B.y_size_idx_0_h = TrialState->xstar.size;
      proc_control_node_B.iH0 = TrialState->xstar.size;
      if (0 <= proc_control_node_B.iH0 - 1) {
        std::memcpy(&proc_control_node_B.c_data_f[0], &TrialState->xstar.data[0],
                    proc_control_node_B.iH0 * sizeof(real_T));
      }

      proc_control_node_B.b_k_j = 0;
      while (proc_control_node_B.b_k_j <= WorkingSet->sizes[3] - 1) {
        proc_control_node_B.nrmGradInf = WorkingSet->lb.data
          [WorkingSet->indexLB.data[proc_control_node_B.b_k_j] - 1];
        if (-proc_control_node_B.c_data_f[WorkingSet->
            indexLB.data[proc_control_node_B.b_k_j] - 1] >
            proc_control_node_B.nrmGradInf) {
          proc_control_node_B.c_data_f[WorkingSet->
            indexLB.data[proc_control_node_B.b_k_j] - 1] =
            -proc_control_node_B.nrmGradInf + std::abs
            (proc_control_node_B.nrmGradInf);
        }

        proc_control_node_B.b_k_j++;
      }

      if (0 <= proc_control_node_B.y_size_idx_0_h - 1) {
        std::memcpy(&TrialState->xstar.data[0], &proc_control_node_B.c_data_f[0],
                    proc_control_node_B.y_size_idx_0_h * sizeof(real_T));
      }

      proc_control_node_relaxed(Hessian, TrialState->grad.data, TrialState,
        MeritFunction, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      proc_control_node_B.y_size_idx_0_h = TrialState->delta_x.size;
      proc_control_node_B.iH0 = TrialState->delta_x.size;
      if (0 <= proc_control_node_B.iH0 - 1) {
        std::memcpy(&proc_control_node_B.y_data_ld[0], &TrialState->
                    delta_x.data[0], proc_control_node_B.iH0 * sizeof(real_T));
      }

      proc_control_node_B.b_k_j = 0;
      while (proc_control_node_B.b_k_j <= proc_control_node_B.nVar) {
        proc_control_node_B.y_data_ld[proc_control_node_B.b_k_j] =
          TrialState->xstar.data[proc_control_node_B.b_k_j];
        proc_control_node_B.b_k_j++;
      }

      if (0 <= proc_control_node_B.y_size_idx_0_h - 1) {
        std::memcpy(&TrialState->delta_x.data[0],
                    &proc_control_node_B.y_data_ld[0],
                    proc_control_node_B.y_size_idx_0_h * sizeof(real_T));
      }

      guard1 = true;
      break;

     default:
      stepSuccess = proc_control_node_soc(Hessian, TrialState->grad.data,
        TrialState, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      checkBoundViolation = stepSuccess;
      if (stepSuccess && (TrialState->state != -6)) {
        proc_control_node_B.b_k_j = 0;
        while (proc_control_node_B.b_k_j <= proc_control_node_B.nVar) {
          TrialState->delta_x.data[proc_control_node_B.b_k_j] =
            TrialState->xstar.data[proc_control_node_B.b_k_j] +
            TrialState->socDirection.data[proc_control_node_B.b_k_j];
          proc_control_node_B.b_k_j++;
        }
      }

      guard1 = true;
      break;
    }

    if (guard1) {
      if (TrialState->state != -6) {
        exitg1 = 1;
      } else {
        proc_control_node_B.nrmGradInf = 0.0;
        proc_control_node_B.nrmDirInf = 1.0;
        for (proc_control_node_B.b_k_j = 0; proc_control_node_B.b_k_j < 147;
             proc_control_node_B.b_k_j++) {
          proc_control_node_B.nrmGradInf = std::fmax
            (proc_control_node_B.nrmGradInf, std::abs(TrialState->
              grad.data[proc_control_node_B.b_k_j]));
          proc_control_node_B.nrmDirInf = std::fmax
            (proc_control_node_B.nrmDirInf, std::abs(TrialState->
              xstar.data[proc_control_node_B.b_k_j]));
        }

        proc_control_node_B.nrmGradInf = std::fmax(2.2204460492503131E-16,
          proc_control_node_B.nrmGradInf / proc_control_node_B.nrmDirInf);
        for (proc_control_node_B.b_k_j = 0; proc_control_node_B.b_k_j < 147;
             proc_control_node_B.b_k_j++) {
          proc_control_node_B.iH0 = 147 * proc_control_node_B.b_k_j;
          proc_control_node_B.y_size_idx_0_h = 0;
          while (proc_control_node_B.y_size_idx_0_h <= proc_control_node_B.b_k_j
                 - 1) {
            Hessian[proc_control_node_B.iH0 + proc_control_node_B.y_size_idx_0_h]
              = 0.0;
            proc_control_node_B.y_size_idx_0_h++;
          }

          Hessian[proc_control_node_B.b_k_j + 147 * proc_control_node_B.b_k_j] =
            proc_control_node_B.nrmGradInf;
          proc_control_node_B.iH0 += proc_control_node_B.b_k_j;
          proc_control_node_B.y_size_idx_0_h = 0;
          while (proc_control_node_B.y_size_idx_0_h <= 145 -
                 proc_control_node_B.b_k_j) {
            Hessian[(proc_control_node_B.iH0 +
                     proc_control_node_B.y_size_idx_0_h) + 1] = 0.0;
            proc_control_node_B.y_size_idx_0_h++;
          }
        }
      }
    }
  } while (exitg1 == 0);

  if (checkBoundViolation) {
    proc_control_node_B.y_size_idx_0_h = TrialState->delta_x.size;
    proc_control_node_B.iH0 = TrialState->delta_x.size;
    if (0 <= proc_control_node_B.iH0 - 1) {
      std::memcpy(&proc_control_node_B.c_data_f[0], &TrialState->delta_x.data[0],
                  proc_control_node_B.iH0 * sizeof(real_T));
    }

    proc_control_node_B.nVar = 0;
    while (proc_control_node_B.nVar <= WorkingSet->sizes[3] - 1) {
      proc_control_node_B.nrmDirInf = proc_control_node_B.c_data_f
        [WorkingSet->indexLB.data[proc_control_node_B.nVar] - 1];
      proc_control_node_B.nrmGradInf = (TrialState->xstarsqp
        [WorkingSet->indexLB.data[proc_control_node_B.nVar] - 1] +
        proc_control_node_B.nrmDirInf) - lb[WorkingSet->
        indexLB.data[proc_control_node_B.nVar] - 1];
      if (proc_control_node_B.nrmGradInf < 0.0) {
        proc_control_node_B.c_data_f[WorkingSet->
          indexLB.data[proc_control_node_B.nVar] - 1] =
          proc_control_node_B.nrmDirInf - proc_control_node_B.nrmGradInf;
        TrialState->xstar.data[WorkingSet->indexLB.data[proc_control_node_B.nVar]
          - 1] -= proc_control_node_B.nrmGradInf;
      }

      proc_control_node_B.nVar++;
    }

    TrialState->delta_x.size = proc_control_node_B.y_size_idx_0_h;
    if (0 <= proc_control_node_B.y_size_idx_0_h - 1) {
      std::memcpy(&TrialState->delta_x.data[0], &proc_control_node_B.c_data_f[0],
                  proc_control_node_B.y_size_idx_0_h * sizeof(real_T));
    }
  }

  return stepSuccess;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_outputBounds_p(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2])
{
  int32_T i;
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  for (i = 0; i < 130; i++) {
    proc_control_node_B.bv[i] = std::isinf(runtimedata_OutputMin[i]);
  }

  proc_control_node_all(proc_control_node_B.bv, proc_control_node_B.x_j);
  y = true;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k < 13)) {
    if (!proc_control_node_B.x_j[k]) {
      y = false;
      exitg1 = true;
    } else {
      k++;
    }
  }

  if (y) {
    for (i = 0; i < 130; i++) {
      proc_control_node_B.bv[i] = std::isinf(runtimedata_OutputMax[i]);
    }

    proc_control_node_all(proc_control_node_B.bv, proc_control_node_B.x_j);
    k = 0;
    exitg1 = false;
    while ((!exitg1) && (k < 13)) {
      if (!proc_control_node_B.x_j[k]) {
        y = false;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
  } else {
    int32_T b_size_idx_0;
    for (i = 0; i < 260; i++) {
      proc_control_node_B.b_c[i] = 0.0;
      proc_control_node_B.icf[i] = true;
    }

    for (i = 0; i < 13; i++) {
      proc_control_node_B.ic_i[i] = static_cast<real_T>(i) + 1.0;
    }

    for (k = 0; k < 10; k++) {
      for (i = 0; i < 13; i++) {
        proc_control_node_B.runtimedata_OutputMin = runtimedata_OutputMin[10 * i
          + k];
        proc_control_node_B.icf[static_cast<int32_T>(proc_control_node_B.ic_i[i])
          - 1] = ((!std::isinf(proc_control_node_B.runtimedata_OutputMin)) &&
                  (!std::isnan(proc_control_node_B.runtimedata_OutputMin)));
      }

      for (i = 0; i < 13; i++) {
        proc_control_node_B.runtimedata_OutputMin = proc_control_node_B.ic_i[i];
        proc_control_node_B.runtimedata_OutputMax = runtimedata_OutputMax[10 * i
          + k];
        proc_control_node_B.icf[static_cast<int32_T>
          (proc_control_node_B.runtimedata_OutputMin + 13.0) - 1] = ((!std::
          isinf(proc_control_node_B.runtimedata_OutputMax)) && (!std::isnan
          (proc_control_node_B.runtimedata_OutputMax)));
        proc_control_node_B.ic[i] = static_cast<int32_T>
          (proc_control_node_B.runtimedata_OutputMin) - 1;
        proc_control_node_B.ic[i + 13] = static_cast<int32_T>
          (proc_control_node_B.runtimedata_OutputMin + 13.0) - 1;
      }

      for (i = 0; i < 26; i++) {
        proc_control_node_B.icf_f[i] =
          proc_control_node_B.icf[proc_control_node_B.ic[i]];
      }

      if (proc_control_node_any(proc_control_node_B.icf_f)) {
        for (i = 0; i < 13; i++) {
          proc_control_node_B.b_c[static_cast<int32_T>
            (proc_control_node_B.ic_i[i]) - 1] = (runtimedata_OutputMin[10 * i +
            k] - e) - X[(11 * i + k) + 1];
        }

        for (i = 0; i < 13; i++) {
          proc_control_node_B.b_c[static_cast<int32_T>
            (proc_control_node_B.ic_i[i] + 13.0) - 1] = (X[(11 * i + k) + 1] -
            runtimedata_OutputMax[10 * i + k]) - e;
        }
      }

      for (i = 0; i < 13; i++) {
        proc_control_node_B.ic_i[i] += 26.0;
      }
    }

    k = 0;
    for (i = 0; i < 260; i++) {
      if (proc_control_node_B.icf[i]) {
        k++;
      }
    }

    b_size_idx_0 = k;
    k = 0;
    for (i = 0; i < 260; i++) {
      if (proc_control_node_B.icf[i]) {
        proc_control_node_B.b_data_c[k] = static_cast<int16_T>(i + 1);
        k++;
      }
    }

    for (i = 0; i < b_size_idx_0; i++) {
      proc_control_node_B.b_c_data[i] =
        proc_control_node_B.b_c[proc_control_node_B.b_data_c[i] - 1];
    }

    c_size[0] = b_size_idx_0;
    c_size[1] = 1;
    if (0 <= b_size_idx_0 - 1) {
      std::memcpy(&c_data[0], &proc_control_node_B.b_c_data[0], b_size_idx_0 *
                  sizeof(real_T));
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_stateEvolution_g(const real_T
  X[143], const real_T U[88], real_T c[130])
{
  int32_T i_0;
  int32_T i_1;
  std::memset(&c[0], 0, 130U * sizeof(real_T));
  for (i_0 = 0; i_0 < 13; i_0++) {
    proc_control_node_B.ic_f[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 11; i_0++) {
    for (i_1 = 0; i_1 < 8; i_1++) {
      proc_control_node_B.b_U_n3[i_1 + (i_0 << 3)] = U[11 * i_1 + i_0];
    }

    for (i_1 = 0; i_1 < 13; i_1++) {
      proc_control_node_B.b_X_h[i_1 + 13 * i_0] = X[11 * i_1 + i_0];
    }
  }

  for (int32_T i{0}; i < 10; i++) {
    i_0 = i << 3;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X_h[13 * i],
      &proc_control_node_B.b_U_n3[i_0], proc_control_node_B.dv20);
    i_1 = (i + 1) * 13;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X_h[i_1],
      &proc_control_node_B.b_U_n3[i_0], proc_control_node_B.dv21);
    for (i_0 = 0; i_0 < 13; i_0++) {
      c[static_cast<int32_T>(proc_control_node_B.ic_f[i_0]) - 1] =
        (proc_control_node_B.b_X_h[13 * i + i_0] + (proc_control_node_B.dv20[i_0]
          + proc_control_node_B.dv21[i_0]) * 0.05) -
        proc_control_node_B.b_X_h[i_1 + i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.ic_f[i_0] += 13.0;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc__eML_blk_kernel_anonFcn2_g(const real_T
  runtimedata_x[13], const real_T runtimedata_OutputMin[130], const real_T
  runtimedata_OutputMax[130], const real_T z[147], real_T varargout_1_data[],
  int32_T varargout_1_size[2], real_T varargout_2[130])
{
  int32_T sizes_idx_0;
  int8_T sizes_idx_1;
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_i,
    proc_control_node_B.U_f, &proc_control_node_B.e);
  proc_control_nod_outputBounds_p(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_node_B.X_i, proc_control_node_B.e,
    proc_control_node_B.varargin_1_data_f, proc_control_node_B.varargin_1_size);
  sizes_idx_1 = static_cast<int8_T>((proc_control_node_B.varargin_1_size[0] != 0)
    && (proc_control_node_B.varargin_1_size[1] != 0));
  if (sizes_idx_1 == 0) {
    sizes_idx_0 = proc_control_node_B.varargin_1_size[0];
  } else if ((proc_control_node_B.varargin_1_size[0] != 0) &&
             (proc_control_node_B.varargin_1_size[1] != 0)) {
    sizes_idx_0 = proc_control_node_B.varargin_1_size[0];
  } else {
    sizes_idx_0 = 0;
  }

  varargout_1_size[0] = sizes_idx_0;
  varargout_1_size[1] = sizes_idx_1;
  if ((0 <= sizes_idx_1 - 1) && (0 <= sizes_idx_0 - 1)) {
    std::memcpy(&varargout_1_data[0], &proc_control_node_B.varargin_1_data_f[0],
                sizes_idx_0 * sizeof(real_T));
  }

  proc_control_n_stateEvolution_g(proc_control_node_B.X_i,
    proc_control_node_B.U_f, varargout_2);
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_evalObjAndConstr(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[147],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T *fval, int32_T *status)
{
  proc_control_node_znlmpc_getXUe(x, obj_objfun_workspace_runtimedat,
    proc_control_node_B.X, proc_control_node_B.U_c, &proc_control_node_B.b_e);
  proc_control_node_B.fs = 0.0;
  for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 11;
       proc_control_node_B.i_n++) {
    for (proc_control_node_B.i_e = 0; proc_control_node_B.i_e < 13;
         proc_control_node_B.i_e++) {
      proc_control_node_B.b_X[proc_control_node_B.i_e + 13 *
        proc_control_node_B.i_n] = proc_control_node_B.X[11 *
        proc_control_node_B.i_e + proc_control_node_B.i_n];
    }

    for (proc_control_node_B.i_e = 0; proc_control_node_B.i_e < 8;
         proc_control_node_B.i_e++) {
      proc_control_node_B.b_U[proc_control_node_B.i_e + (proc_control_node_B.i_n
        << 3)] = proc_control_node_B.U_c[11 * proc_control_node_B.i_e +
        proc_control_node_B.i_n];
    }
  }

  for (proc_control_node_B.i_e = 0; proc_control_node_B.i_e < 10;
       proc_control_node_B.i_e++) {
    proc_control_node_B.wtYerr = 0.0;
    for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 13;
         proc_control_node_B.i_n++) {
      proc_control_node_B.wtYerr_tmp = 10 * proc_control_node_B.i_n +
        proc_control_node_B.i_e;
      proc_control_node_B.wtYerr_a = (proc_control_node_B.b_X
        [(proc_control_node_B.i_e + 1) * 13 + proc_control_node_B.i_n] -
        obj_objfun_workspace_runtimed_1[proc_control_node_B.wtYerr_tmp]) *
        obj_objfun_workspace_runtimed_2[proc_control_node_B.wtYerr_tmp];
      proc_control_node_B.wtYerr += proc_control_node_B.wtYerr_a *
        proc_control_node_B.wtYerr_a;
    }

    proc_control_node_B.fs += proc_control_node_B.wtYerr;
    std::memcpy(&proc_control_node_B.umvk[0],
                &proc_control_node_B.b_U[proc_control_node_B.i_e << 3], sizeof
                (real_T) << 3U);
    if (proc_control_node_B.i_e + 1 == 1) {
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.duk[proc_control_node_B.i_n] =
          proc_control_node_B.umvk[proc_control_node_B.i_n] -
          obj_objfun_workspace_runtimed_0[proc_control_node_B.i_n];
      }
    } else {
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.duk[proc_control_node_B.i_n] =
          proc_control_node_B.umvk[proc_control_node_B.i_n] -
          proc_control_node_B.b_U[((proc_control_node_B.i_e - 1) << 3) +
          proc_control_node_B.i_n];
      }
    }

    proc_control_node_B.wtYerr = 0.0;
    proc_control_node_B.wtYerr_a = 0.0;
    for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
         proc_control_node_B.i_n++) {
      proc_control_node_B.wtYerr_tmp = 10 * proc_control_node_B.i_n +
        proc_control_node_B.i_e;
      proc_control_node_B.umvk_h =
        (proc_control_node_B.umvk[proc_control_node_B.i_n] -
         obj_objfun_workspace_runtimed_5[proc_control_node_B.wtYerr_tmp]) *
        obj_objfun_workspace_runtimed_3[proc_control_node_B.wtYerr_tmp];
      proc_control_node_B.duk_oc =
        obj_objfun_workspace_runtimed_4[proc_control_node_B.wtYerr_tmp] *
        proc_control_node_B.duk[proc_control_node_B.i_n];
      proc_control_node_B.wtYerr += proc_control_node_B.umvk_h *
        proc_control_node_B.umvk_h;
      proc_control_node_B.wtYerr_a += proc_control_node_B.duk_oc *
        proc_control_node_B.duk_oc;
      proc_control_node_B.umvk[proc_control_node_B.i_n] =
        proc_control_node_B.umvk_h;
      proc_control_node_B.duk[proc_control_node_B.i_n] =
        proc_control_node_B.duk_oc;
    }

    proc_control_node_B.fs = (proc_control_node_B.fs +
      proc_control_node_B.wtYerr) + proc_control_node_B.wtYerr_a;
  }

  *fval = 100000.0 * proc_control_node_B.b_e * proc_control_node_B.b_e +
    proc_control_node_B.fs;
  if (std::isinf(*fval) || std::isnan(*fval)) {
    if (std::isnan(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    proc_control_node_B.i_n = (ineq0 + obj_mCineq) - 2;
    proc__eML_blk_kernel_anonFcn2_g(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_node_B.b_data, proc_control_node_B.b_size,
      proc_control_node_B.c);
    if (ineq0 > proc_control_node_B.i_n + 1) {
      proc_control_node_B.i_e = -1;
      proc_control_node_B.i_n = -1;
    } else {
      proc_control_node_B.i_e = ineq0 - 2;
    }

    proc_control_node_B.wtYerr_tmp = proc_control_node_B.i_n -
      proc_control_node_B.i_e;
    for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n <
         proc_control_node_B.wtYerr_tmp; proc_control_node_B.i_n++) {
      Cineq_workspace_data[(proc_control_node_B.i_e + proc_control_node_B.i_n) +
        1] = proc_control_node_B.b_data[proc_control_node_B.i_n];
    }

    std::memcpy(&Ceq_workspace[0], &proc_control_node_B.c[0], 130U * sizeof
                (real_T));
    *status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
      ineq0);
    if (*status == 1) {
      *status = proc_con_checkVectorNonFinite_g(Ceq_workspace);
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_con_computeLinearResiduals(const real_T
  x[147], int32_T nVar, real_T workspaceIneq_data[], const int32_T
  *workspaceIneq_size, int32_T mLinIneq, const real_T AineqT_data[], const
  real_T bineq_data[], int32_T ldAi)
{
  if (mLinIneq > 0) {
    int32_T k;
    int32_T loop_ub;
    int32_T y_size_idx_0;
    if (0 <= *workspaceIneq_size - 1) {
      std::memcpy(&proc_control_node_B.y_data_o[0], &workspaceIneq_data[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    for (k = 0; k < mLinIneq; k++) {
      proc_control_node_B.y_data_o[k] = bineq_data[k];
    }

    if (0 <= *workspaceIneq_size - 1) {
      std::memcpy(&workspaceIneq_data[0], &proc_control_node_B.y_data_o[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    for (k = 0; k < mLinIneq; k++) {
      workspaceIneq_data[k] = -workspaceIneq_data[k];
    }

    k = 0;
    loop_ub = (mLinIneq - 1) * ldAi + 1;
    y_size_idx_0 = 1;
    while (((ldAi > 0) && (y_size_idx_0 <= loop_ub)) || ((ldAi < 0) &&
            (y_size_idx_0 >= loop_ub))) {
      real_T c;
      int32_T d;
      int32_T ix;
      ix = 0;
      c = 0.0;
      d = (y_size_idx_0 + nVar) - 1;
      for (int32_T ia{y_size_idx_0}; ia <= d; ia++) {
        c += AineqT_data[ia - 1] * x[ix];
        ix++;
      }

      workspaceIneq_data[k] += c;
      k++;
      y_size_idx_0 += ldAi;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_no_computeMeritFcn(real_T
  obj_penaltyParam, real_T fval, const real_T Cineq_workspace_data[], int32_T
  mIneq, const real_T Ceq_workspace[130], boolean_T evalWellDefined)
{
  real_T val;
  if (evalWellDefined) {
    real_T constrViolationEq;
    real_T constrViolationIneq;
    int32_T k;
    constrViolationEq = 0.0;
    for (k = 0; k < 130; k++) {
      constrViolationEq += std::abs(Ceq_workspace[k]);
    }

    constrViolationIneq = 0.0;
    for (k = 0; k < mIneq; k++) {
      if (Cineq_workspace_data[k] > 0.0) {
        constrViolationIneq += Cineq_workspace_data[k];
      }
    }

    val = (constrViolationEq + constrViolationIneq) * obj_penaltyParam + fval;
  } else {
    val = (rtInf);
  }

  return val;
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_linesearch(boolean_T
  *evalWellDefined, const real_T bineq_data[], int32_T WorkingSet_nVar, int32_T
  WorkingSet_ldA, const real_T WorkingSet_Aineq_data[],
  s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState, real_T MeritFunction_penaltyParam,
  real_T MeritFunction_phi, real_T MeritFunction_phiPrimePlus, real_T
  MeritFunction_phiFullStep, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *FcnEvaluator_objfun_workspace_r, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *FcnEvaluator_nonlcon_workspace_, int32_T FcnEvaluator_mCineq, boolean_T
  socTaken, real_T *alpha, int32_T *exitflag)
{
  proc_control_node_B.mLinIneq = TrialState->mIneq - TrialState->mNonlinIneq;
  *alpha = 1.0;
  *exitflag = 1;
  proc_control_node_B.phi_alpha = MeritFunction_phiFullStep;
  proc_control_node_B.y_size_idx_0_k = TrialState->searchDir.size;
  proc_control_node_B.loop_ub_f = TrialState->searchDir.size;
  if (0 <= proc_control_node_B.loop_ub_f - 1) {
    std::memcpy(&proc_control_node_B.y_data_b[0], &TrialState->searchDir.data[0],
                proc_control_node_B.loop_ub_f * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_f = 0;
  while (proc_control_node_B.loop_ub_f <= WorkingSet_nVar - 1) {
    proc_control_node_B.y_data_b[proc_control_node_B.loop_ub_f] =
      TrialState->delta_x.data[proc_control_node_B.loop_ub_f];
    proc_control_node_B.loop_ub_f++;
  }

  if (0 <= proc_control_node_B.y_size_idx_0_k - 1) {
    std::memcpy(&TrialState->searchDir.data[0], &proc_control_node_B.y_data_b[0],
                proc_control_node_B.y_size_idx_0_k * sizeof(real_T));
  }

  int32_T exitg1;
  do {
    exitg1 = 0;
    if (TrialState->FunctionEvaluations < 14700) {
      if ((*evalWellDefined) && (proc_control_node_B.phi_alpha <= *alpha *
           0.0001 * MeritFunction_phiPrimePlus + MeritFunction_phi)) {
        exitg1 = 1;
      } else {
        boolean_T exitg2;
        boolean_T tooSmallX;
        *alpha *= 0.7;
        proc_control_node_B.loop_ub_f = 0;
        while (proc_control_node_B.loop_ub_f <= WorkingSet_nVar - 1) {
          TrialState->delta_x.data[proc_control_node_B.loop_ub_f] = *alpha *
            TrialState->xstar.data[proc_control_node_B.loop_ub_f];
          proc_control_node_B.loop_ub_f++;
        }

        if (socTaken) {
          proc_control_node_B.phi_alpha = *alpha * *alpha;
          if ((WorkingSet_nVar >= 1) && (!(proc_control_node_B.phi_alpha == 0.0)))
          {
            proc_control_node_B.loop_ub_f = 0;
            while (proc_control_node_B.loop_ub_f <= WorkingSet_nVar - 1) {
              TrialState->delta_x.data[proc_control_node_B.loop_ub_f] +=
                proc_control_node_B.phi_alpha * TrialState->
                socDirection.data[proc_control_node_B.loop_ub_f];
              proc_control_node_B.loop_ub_f++;
            }
          }
        }

        tooSmallX = true;
        proc_control_node_B.loop_ub_f = 0;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.loop_ub_f <= WorkingSet_nVar -
                             1)) {
          if (0.1 * std::fmax(1.0, std::abs(TrialState->
                xstarsqp[proc_control_node_B.loop_ub_f])) <= std::abs
              (TrialState->delta_x.data[proc_control_node_B.loop_ub_f])) {
            tooSmallX = false;
            exitg2 = true;
          } else {
            proc_control_node_B.loop_ub_f++;
          }
        }

        if (tooSmallX) {
          *exitflag = -2;
          exitg1 = 1;
        } else {
          proc_control_node_B.loop_ub_f = 0;
          while (proc_control_node_B.loop_ub_f <= WorkingSet_nVar - 1) {
            TrialState->xstarsqp[proc_control_node_B.loop_ub_f] =
              TrialState->xstarsqp_old[proc_control_node_B.loop_ub_f] +
              TrialState->delta_x.data[proc_control_node_B.loop_ub_f];
            proc_control_node_B.loop_ub_f++;
          }

          proc_control_n_evalObjAndConstr(FcnEvaluator_objfun_workspace_r->x,
            FcnEvaluator_objfun_workspace_r->lastMV,
            FcnEvaluator_objfun_workspace_r->ref,
            FcnEvaluator_objfun_workspace_r->OutputWeights,
            FcnEvaluator_objfun_workspace_r->MVWeights,
            FcnEvaluator_objfun_workspace_r->MVRateWeights,
            FcnEvaluator_objfun_workspace_r->MVScaledTarget,
            FcnEvaluator_nonlcon_workspace_->x,
            FcnEvaluator_nonlcon_workspace_->OutputMin,
            FcnEvaluator_nonlcon_workspace_->OutputMax, FcnEvaluator_mCineq,
            TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
            TrialState->cEq, &TrialState->sqpFval,
            &proc_control_node_B.loop_ub_f);
          proc_con_computeLinearResiduals(TrialState->xstarsqp, WorkingSet_nVar,
            TrialState->cIneq.data, &TrialState->cIneq.size,
            proc_control_node_B.mLinIneq, WorkingSet_Aineq_data, bineq_data,
            WorkingSet_ldA);
          TrialState->FunctionEvaluations++;
          *evalWellDefined = (proc_control_node_B.loop_ub_f == 1);
          proc_control_node_B.phi_alpha = proc_control_no_computeMeritFcn
            (MeritFunction_penaltyParam, TrialState->sqpFval,
             TrialState->cIneq.data, TrialState->mIneq, TrialState->cEq,
             *evalWellDefined);
        }
      }
    } else {
      *exitflag = 0;
      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_driver(const real_T
  bineq_data[], const real_T lb[147], s_UjlJWoQEHmSUKFcPTad7eC_proc_T
  *TrialState, sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const
  s_lkFpKxHZB0M4xOcTLHVN2_proc__T *FcnEvaluator, s_OnOuVjEActeQRN4FyNqSwB_proc_T
  *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet,
  s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager, s_TNXzMnREVvDmNpLFpsTLBC_proc_T
  *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *QPObjective, const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  real_T Hessian[21609])
{
  static const char_T h[7]{ 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  static const int8_T j[21609]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  boolean_T isFeasible;
  for (proc_control_node_B.mLambda = 0; proc_control_node_B.mLambda < 21609;
       proc_control_node_B.mLambda++) {
    Hessian[proc_control_node_B.mLambda] = j[proc_control_node_B.mLambda];
  }

  proc_control_node_B.nVar_tmp_tmp = WorkingSet->nVar;
  proc_control_node_B.mFixed = WorkingSet->sizes[0];
  proc_control_node_B.mIneq_b = WorkingSet->sizes[2];
  proc_control_node_B.mLB = WorkingSet->sizes[3];
  proc_control_node_B.mUB = WorkingSet->sizes[4];
  proc_control_node_B.mConstr_tmp = (((WorkingSet->sizes[0] + WorkingSet->sizes
    [2]) + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_node_B.mLinIneq_tmp_tmp = WorkingSet->sizes[2] -
    TrialState->mNonlinIneq;
  proc_control_node_B.mLambda = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) +
    WorkingSet->sizes[4]) + (WorkingSet->sizes[0] << 1);
  if (WorkingSet->nVar >= proc_control_node_B.mLambda) {
    proc_control_node_B.mLambda = WorkingSet->nVar;
  }

  proc_control_node_B.qpoptions_MaxIterations = 10 * proc_control_node_B.mLambda;
  TrialState->steplength = 1.0;
  proc_control_node_B.Flags.fevalOK = true;
  proc_control_node_B.Flags.stepAccepted = false;
  proc_control_node_B.Flags.failedLineSearch = false;
  proc_control_node_B.Flags.stepType = 1;
  proc_control_node_B.ix_kg = 0;
  while (proc_control_node_B.ix_kg <= proc_control_node_B.mConstr_tmp) {
    TrialState->lambdaStopTest.data[proc_control_node_B.ix_kg] =
      TrialState->lambdasqp.data[proc_control_node_B.ix_kg];
    proc_control_node_B.ix_kg++;
  }

  proc_control_nod_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_node_B.optimRelativeFactor = std::fmax(1.0, std::abs
    (TrialState->grad.data[proc_control_node_ixamax(WorkingSet->nVar,
    TrialState->grad.data) - 1]));
  if (std::isinf(proc_control_node_B.optimRelativeFactor)) {
    proc_control_node_B.optimRelativeFactor = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  MeritFunction->feasRelativeFactor = std::fmax(1.0,
    MeritFunction->nlpPrimalFeasError);
  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &proc_control_node_B.Flags.gradOK, &MeritFunction->nlpDualFeasError);
  if (!proc_control_node_B.Flags.gradOK) {
    proc_control_node_B.Flags.done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = 0.0;
    MeritFunction->firstOrderOpt = std::fmax(MeritFunction->nlpDualFeasError,
      0.0);
    proc_control_node_B.ix_kg = 0;
    while (proc_control_node_B.ix_kg <= proc_control_node_B.mConstr_tmp) {
      TrialState->lambdaStopTestPrev.data[proc_control_node_B.ix_kg] =
        TrialState->lambdaStopTest.data[proc_control_node_B.ix_kg];
      proc_control_node_B.ix_kg++;
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_node_B.optimRelativeFactor)) {
      proc_control_node_B.Flags.done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      proc_control_node_B.Flags.done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        proc_control_node_B.Flags.done = true;
        TrialState->sqpExitFlag = -3;
      }
    }
  }

  proc_control_node_saveJacobian(TrialState, WorkingSet->nVar, WorkingSet->
    sizes[2], WorkingSet->Aineq.data, TrialState->iNonIneq0,
    WorkingSet->Aeq.data, WorkingSet->ldA);
  proc_control_node_saveState(TrialState);
  if (!proc_control_node_B.Flags.done) {
    TrialState->sqpIterations = 1;
  }

  while (!proc_control_node_B.Flags.done) {
    if ((!proc_control_node_B.Flags.stepAccepted) &&
        (!proc_control_node_B.Flags.failedLineSearch)) {
      proc_control_node_B.expl_temp_d.IterDisplayQP = false;
      proc_control_node_B.expl_temp_d.RemainFeasible = false;
      proc_control_node_B.expl_temp_d.ProbRelTolFactor = 1.0;
      proc_control_node_B.expl_temp_d.ConstrRelTolFactor = 1.0;
      proc_control_node_B.expl_temp_d.PricingTolerance = 0.0;
      proc_control_node_B.expl_temp_d.ObjectiveLimit = (rtMinusInf);
      proc_control_node_B.expl_temp_d.ConstraintTolerance = 0.02;
      proc_control_node_B.expl_temp_d.OptimalityTolerance =
        2.2204460492503131E-14;
      proc_control_node_B.expl_temp_d.StepTolerance = 1.0E-6;
      proc_control_node_B.expl_temp_d.MaxIterations =
        proc_control_node_B.qpoptions_MaxIterations;
      for (proc_control_node_B.mLambda = 0; proc_control_node_B.mLambda < 7;
           proc_control_node_B.mLambda++) {
        proc_control_node_B.expl_temp_d.SolverName[proc_control_node_B.mLambda] =
          h[proc_control_node_B.mLambda];
      }
    }

    while ((!proc_control_node_B.Flags.stepAccepted) &&
           (!proc_control_node_B.Flags.failedLineSearch)) {
      if (proc_control_node_B.Flags.stepType != 3) {
        proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
          proc_control_node_B.mIneq_b, TrialState->mNonlinIneq,
          TrialState->cIneq.data, TrialState->cEq, proc_control_node_B.mLB, lb,
          proc_control_node_B.mUB, proc_control_node_B.mFixed);
      }

      proc_control_node_B.expl_temp_dv = proc_control_node_B.expl_temp_d;
      proc_control_node_B.Flags.stepAccepted = proc_control_node_step_k
        (&proc_control_node_B.Flags.stepType, Hessian, lb, TrialState,
         MeritFunction, memspace, WorkingSet, QRManager, CholManager,
         QPObjective, &proc_control_node_B.expl_temp_dv);
      if (proc_control_node_B.Flags.stepAccepted) {
        proc_control_node_B.mLambda = 0;
        while (proc_control_node_B.mLambda <= proc_control_node_B.nVar_tmp_tmp -
               1) {
          TrialState->xstarsqp[proc_control_node_B.mLambda] +=
            TrialState->delta_x.data[proc_control_node_B.mLambda];
          proc_control_node_B.mLambda++;
        }

        proc_control_n_evalObjAndConstr
          (FcnEvaluator->objfun.workspace.runtimedata.x,
           FcnEvaluator->objfun.workspace.runtimedata.lastMV,
           FcnEvaluator->objfun.workspace.runtimedata.ref,
           FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
           FcnEvaluator->nonlcon.workspace.runtimedata.x,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
           FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->cIneq.data,
           TrialState->iNonIneq0, TrialState->cEq, &TrialState->sqpFval,
           &proc_control_node_B.mLambda);
        proc_control_node_B.Flags.fevalOK = (proc_control_node_B.mLambda == 1);
        TrialState->FunctionEvaluations++;
        proc_con_computeLinearResiduals(TrialState->xstarsqp,
          proc_control_node_B.nVar_tmp_tmp, TrialState->cIneq.data,
          &TrialState->cIneq.size, proc_control_node_B.mLinIneq_tmp_tmp,
          WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
        MeritFunction->phiFullStep = proc_control_no_computeMeritFcn
          (MeritFunction->penaltyParam, TrialState->sqpFval,
           TrialState->cIneq.data, proc_control_node_B.mIneq_b, TrialState->cEq,
           proc_control_node_B.Flags.fevalOK);
      }

      if ((proc_control_node_B.Flags.stepType == 1) &&
          proc_control_node_B.Flags.stepAccepted &&
          proc_control_node_B.Flags.fevalOK && (MeritFunction->phi <
           MeritFunction->phiFullStep) && (TrialState->sqpFval <
           TrialState->sqpFval_old)) {
        proc_control_node_B.Flags.stepType = 3;
        proc_control_node_B.Flags.stepAccepted = false;
      } else {
        proc_control_node_linesearch(&proc_control_node_B.Flags.fevalOK,
          bineq_data, WorkingSet->nVar, WorkingSet->ldA, WorkingSet->Aineq.data,
          TrialState, MeritFunction->penaltyParam, MeritFunction->phi,
          MeritFunction->phiPrimePlus, MeritFunction->phiFullStep,
          &FcnEvaluator->objfun.workspace.runtimedata,
          &FcnEvaluator->nonlcon.workspace.runtimedata, FcnEvaluator->mCineq,
          (proc_control_node_B.Flags.stepType == 3) &&
          proc_control_node_B.Flags.stepAccepted,
          &proc_control_node_B.optimRelativeFactor, &proc_control_node_B.mLambda);
        TrialState->steplength = proc_control_node_B.optimRelativeFactor;
        if (proc_control_node_B.mLambda > 0) {
          proc_control_node_B.Flags.stepAccepted = true;
        } else {
          proc_control_node_B.Flags.failedLineSearch = true;
        }
      }
    }

    if (proc_control_node_B.Flags.stepAccepted &&
        (!proc_control_node_B.Flags.failedLineSearch)) {
      proc_control_node_B.ix_kg = 0;
      while (proc_control_node_B.ix_kg <= proc_control_node_B.nVar_tmp_tmp - 1)
      {
        TrialState->xstarsqp[proc_control_node_B.ix_kg] =
          TrialState->xstarsqp_old[proc_control_node_B.ix_kg] +
          TrialState->delta_x.data[proc_control_node_B.ix_kg];
        proc_control_node_B.ix_kg++;
      }

      proc_control_node_B.ix_kg = 0;
      while (proc_control_node_B.ix_kg <= proc_control_node_B.mConstr_tmp) {
        TrialState->lambdasqp.data[proc_control_node_B.ix_kg] +=
          (TrialState->lambda.data[proc_control_node_B.ix_kg] -
           TrialState->lambdasqp.data[proc_control_node_B.ix_kg]) *
          TrialState->steplength;
        proc_control_node_B.ix_kg++;
      }

      proc_control_node_saveState(TrialState);
      proc_control_node_B.Flags.gradOK = true;
      evalObjAndConstrAndDerivatives
        (FcnEvaluator->objfun.workspace.runtimedata.x,
         FcnEvaluator->objfun.workspace.runtimedata.lastMV,
         FcnEvaluator->objfun.workspace.runtimedata.ref,
         FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
         FcnEvaluator->nonlcon.workspace.runtimedata.x,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
         FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->grad.data,
         TrialState->cIneq.data, TrialState->iNonIneq0, TrialState->cEq,
         WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->ldA,
         WorkingSet->Aeq.data, WorkingSet->ldA, &TrialState->sqpFval,
         &proc_control_node_B.mLambda);
      TrialState->FunctionEvaluations++;
      proc_control_node_B.Flags.fevalOK = (proc_control_node_B.mLambda == 1);
    } else {
      TrialState->sqpFval = TrialState->sqpFval_old;
      std::memcpy(&TrialState->xstarsqp[0], &TrialState->xstarsqp_old[0], 147U *
                  sizeof(real_T));
      proc_control_node_B.ix_kg = TrialState->cIneq.size;
      proc_control_node_B.b_ix = TrialState->cIneq.size;
      if (0 <= proc_control_node_B.b_ix - 1) {
        std::memcpy(&proc_control_node_B.y_data_l[0], &TrialState->cIneq.data[0],
                    proc_control_node_B.b_ix * sizeof(real_T));
      }

      proc_control_node_B.mLambda = 0;
      while (proc_control_node_B.mLambda <= TrialState->mIneq - 1) {
        proc_control_node_B.y_data_l[proc_control_node_B.mLambda] =
          TrialState->cIneq_old.data[proc_control_node_B.mLambda];
        proc_control_node_B.mLambda++;
      }

      if (0 <= proc_control_node_B.ix_kg - 1) {
        std::memcpy(&TrialState->cIneq.data[0], &proc_control_node_B.y_data_l[0],
                    proc_control_node_B.ix_kg * sizeof(real_T));
      }

      std::memcpy(&TrialState->cEq[0], &TrialState->cEq_old[0], 130U * sizeof
                  (real_T));
    }

    proc_control_node_test_exit(&proc_control_node_B.Flags, memspace,
      MeritFunction, fscales_lineq_constraint_size,
      fscales_cineq_constraint_size, WorkingSet, TrialState, QRManager, lb);
    if ((!proc_control_node_B.Flags.done) &&
        proc_control_node_B.Flags.stepAccepted) {
      proc_control_node_B.Flags.stepAccepted = false;
      proc_control_node_B.Flags.stepType = 1;
      proc_control_node_B.Flags.failedLineSearch = false;
      proc_control_node_B.b_ix = proc_control_node_B.mFixed +
        TrialState->iNonIneq0;
      proc_control_node_B.mLambda = WorkingSet->ldA;
      proc_control_node_B.ix_kg = 0;
      while (proc_control_node_B.ix_kg <= proc_control_node_B.nVar_tmp_tmp - 1)
      {
        TrialState->delta_gradLag.data[proc_control_node_B.ix_kg] =
          TrialState->grad.data[proc_control_node_B.ix_kg];
        proc_control_node_B.ix_kg++;
      }

      if (proc_control_node_B.nVar_tmp_tmp >= 1) {
        proc_control_node_B.ix_kg = 0;
        while (proc_control_node_B.ix_kg <= proc_control_node_B.nVar_tmp_tmp - 1)
        {
          TrialState->delta_gradLag.data[proc_control_node_B.ix_kg] +=
            -TrialState->grad_old.data[proc_control_node_B.ix_kg];
          proc_control_node_B.ix_kg++;
        }
      }

      proc_contro_xgemv_mtmcjbiadz2ic(proc_control_node_B.nVar_tmp_tmp, 130,
        WorkingSet->Aeq.data, 1, WorkingSet->ldA, TrialState->lambdasqp.data,
        proc_control_node_B.mFixed + 1, TrialState->delta_gradLag.data);
      proc_control_node_B.ix_kg = proc_control_node_B.mFixed;
      proc_control_node_B.c_lr = WorkingSet->ldA * 129 + 1;
      proc_control_node_B.b_iy_p = 1;
      while (((proc_control_node_B.mLambda > 0) && (proc_control_node_B.b_iy_p <=
               proc_control_node_B.c_lr)) || ((proc_control_node_B.mLambda < 0) &&
              (proc_control_node_B.b_iy_p >= proc_control_node_B.c_lr))) {
        proc_control_node_B.iy = 0;
        proc_control_node_B.b_ia = (proc_control_node_B.b_iy_p +
          proc_control_node_B.nVar_tmp_tmp) - 1;
        proc_control_node_B.ia_n = proc_control_node_B.b_iy_p;
        while (proc_control_node_B.ia_n <= proc_control_node_B.b_ia) {
          TrialState->delta_gradLag.data[proc_control_node_B.iy] +=
            TrialState->JacCeqTrans_old.data[proc_control_node_B.ia_n - 1] *
            -TrialState->lambdasqp.data[proc_control_node_B.ix_kg];
          proc_control_node_B.iy++;
          proc_control_node_B.ia_n++;
        }

        proc_control_node_B.ix_kg++;
        proc_control_node_B.b_iy_p += proc_control_node_B.mLambda;
      }

      if (TrialState->mNonlinIneq > 0) {
        proc_contro_xgemv_mtmcjbiadz2ic(proc_control_node_B.nVar_tmp_tmp,
          TrialState->mNonlinIneq, WorkingSet->Aineq.data, WorkingSet->ldA *
          (TrialState->iNonIneq0 - 1) + 1, WorkingSet->ldA,
          TrialState->lambdasqp.data, proc_control_node_B.b_ix + 130,
          TrialState->delta_gradLag.data);
        proc_control_node_B.ix_kg = (TrialState->mNonlinIneq - 1) *
          WorkingSet->ldA + 1;
        proc_control_node_B.c_lr = 1;
        while (((proc_control_node_B.mLambda > 0) && (proc_control_node_B.c_lr <=
                 proc_control_node_B.ix_kg)) || ((proc_control_node_B.mLambda <
                 0) && (proc_control_node_B.c_lr >= proc_control_node_B.ix_kg)))
        {
          proc_control_node_B.b_iy_p = 0;
          proc_control_node_B.iy = (proc_control_node_B.c_lr +
            proc_control_node_B.nVar_tmp_tmp) - 1;
          proc_control_node_B.b_ia = proc_control_node_B.c_lr;
          while (proc_control_node_B.b_ia <= proc_control_node_B.iy) {
            TrialState->delta_gradLag.data[proc_control_node_B.b_iy_p] +=
              TrialState->JacCineqTrans_old.data[proc_control_node_B.b_ia - 1] *
              -TrialState->lambdasqp.data[proc_control_node_B.b_ix + 129];
            proc_control_node_B.b_iy_p++;
            proc_control_node_B.b_ia++;
          }

          proc_control_node_B.b_ix++;
          proc_control_node_B.c_lr += proc_control_node_B.mLambda;
        }
      }

      proc_control_node_saveJacobian(TrialState,
        proc_control_node_B.nVar_tmp_tmp, proc_control_node_B.mIneq_b,
        WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->Aeq.data,
        WorkingSet->ldA);
      proc_control_node_BFGSUpdate(proc_control_node_B.nVar_tmp_tmp, Hessian,
        TrialState->delta_x.data, TrialState->delta_gradLag.data,
        memspace->workspace_double.data);
      TrialState->sqpIterations++;
    }
  }
}

// Function for MATLAB Function: '<S268>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_fmincon(const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *fun_workspace_runtimedata, real_T
  fun_workspace_userdata_Ts, const real_T fun_workspace_userdata_CurrentS[13],
  const real_T fun_workspace_userdata_LastMV[8], const real_T
  fun_workspace_userdata_Referenc[130], const real_T
  fun_workspace_userdata_MVTarget[80], real_T fun_workspace_userdata_Predicti,
  real_T fun_workspace_userdata_NumOfSta, real_T fun_workspace_userdata_NumOfOut,
  real_T fun_workspace_userdata_NumOfInp, const real_T
  fun_workspace_userdata_MVIndex[8], const real_T x0[147], const real_T
  Aineq_data[], const real_T bineq_data[], const int32_T *bineq_size, const
  real_T lb[147], const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *nonlcon_workspace_runtimedata, const s6FZHgorTEIlMmVIrDGGTjF_proc__T
  *nonlcon_workspace_userdata, real_T x[147], real_T *fval, real_T *exitflag,
  real_T *output_iterations, real_T *output_funcCount, char_T output_algorithm[3],
  real_T *output_constrviolation, real_T *output_stepsize, real_T
  *output_lssteplength, real_T *output_firstorderopt)
{
  proc_co_eML_blk_kernel_anonFcn2(nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, x0, proc_control_node_B.Cineq_data,
    proc_control_node_B.Cineq_size, proc_control_node_B.Ceq,
    proc_control_node_B.JacCineqTrans_data,
    proc_control_node_B.JacCineqTrans_size, proc_control_node_B.JacCeqTrans);
  proc_control_node_B.mNonlinIneq = proc_control_node_B.Cineq_size[0] *
    proc_control_node_B.Cineq_size[1];
  proc_control_node_B.mIneq = *bineq_size + proc_control_node_B.mNonlinIneq;
  proc_control_node_B.mConstrMax = (proc_control_node_B.mIneq +
    proc_control_node_B.mIneq) + 685;
  if (proc_control_node_B.mIneq + 408 >= proc_control_node_B.mConstrMax) {
    proc_control_node_B.maxDims = proc_control_node_B.mIneq + 408;
  } else {
    proc_control_node_B.maxDims = proc_control_node_B.mConstrMax;
  }

  proc_control_n_factoryConstruct(proc_control_node_B.mIneq + 408,
    proc_control_node_B.mConstrMax, proc_control_node_B.mIneq,
    proc_control_node_B.mNonlinIneq, &proc_control_node_B.TrialState);
  std::memcpy(&proc_control_node_B.TrialState.xstarsqp[0], &x0[0], 147U * sizeof
              (real_T));
  proc_control_node_B.FcnEvaluator.objfun.workspace.runtimedata =
    *fun_workspace_runtimedata;
  proc_control_node_B.FcnEvaluator.objfun.workspace.userdata.Ts =
    fun_workspace_userdata_Ts;
  std::memcpy
    (&proc_control_node_B.FcnEvaluator.objfun.workspace.userdata.CurrentStates[0],
     &fun_workspace_userdata_CurrentS[0], 13U * sizeof(real_T));
  std::memcpy
    (&proc_control_node_B.FcnEvaluator.objfun.workspace.userdata.LastMV[0],
     &fun_workspace_userdata_LastMV[0], sizeof(real_T) << 3U);
  std::memcpy
    (&proc_control_node_B.FcnEvaluator.objfun.workspace.userdata.References[0],
     &fun_workspace_userdata_Referenc[0], 130U * sizeof(real_T));
  std::memcpy
    (&proc_control_node_B.FcnEvaluator.objfun.workspace.userdata.MVTarget[0],
     &fun_workspace_userdata_MVTarget[0], 80U * sizeof(real_T));
  proc_control_node_B.FcnEvaluator.objfun.workspace.userdata.PredictionHorizon =
    fun_workspace_userdata_Predicti;
  proc_control_node_B.FcnEvaluator.objfun.workspace.userdata.NumOfStates =
    fun_workspace_userdata_NumOfSta;
  proc_control_node_B.FcnEvaluator.objfun.workspace.userdata.NumOfOutputs =
    fun_workspace_userdata_NumOfOut;
  proc_control_node_B.FcnEvaluator.objfun.workspace.userdata.NumOfInputs =
    fun_workspace_userdata_NumOfInp;
  std::memcpy
    (&proc_control_node_B.FcnEvaluator.objfun.workspace.userdata.MVIndex[0],
     &fun_workspace_userdata_MVIndex[0], sizeof(real_T) << 3U);
  proc_control_node_B.FcnEvaluator.nonlcon.workspace.runtimedata =
    *nonlcon_workspace_runtimedata;
  proc_control_node_B.FcnEvaluator.nonlcon.workspace.userdata =
    *nonlcon_workspace_userdata;
  proc_control_node_B.FcnEvaluator.mCineq = proc_control_node_B.mNonlinIneq;
  proc_control_node_B.FcnEvaluator.nVar = 147;
  proc_control_node_B.FcnEvaluator.mCeq = 130;
  proc_control_node_B.FcnEvaluator.NonFiniteSupport = true;
  proc_control_node_B.FcnEvaluator.SpecifyObjectiveGradient = true;
  proc_control_node_B.FcnEvaluator.SpecifyConstraintGradient = true;
  proc_control_node_B.FcnEvaluator.ScaleProblem = false;
  proc_cont_factoryConstruct_lnz4(proc_control_node_B.mIneq + 408,
    &proc_control_node_B.QPObjective.grad.size,
    &proc_control_node_B.QPObjective.Hx.size,
    &proc_control_node_B.QPObjective.hasLinear,
    &proc_control_node_B.QPObjective.nvar,
    &proc_control_node_B.QPObjective.maxVar,
    &proc_control_node_B.QPObjective.beta, &proc_control_node_B.QPObjective.rho,
    &proc_control_node_B.QPObjective.objtype,
    &proc_control_node_B.QPObjective.prev_objtype,
    &proc_control_node_B.QPObjective.prev_nvar,
    &proc_control_node_B.QPObjective.prev_hasLinear,
    &proc_control_node_B.QPObjective.gammaScalar);
  proc_control_node_B.QPObjective.nvar = 147;
  proc_control_node_B.QPObjective.hasLinear = true;
  proc_control_node_B.QPObjective.objtype = 3;
  proc_control_node_B.memspace.workspace_double.size[0] =
    proc_control_node_B.maxDims;
  proc_control_node_B.memspace.workspace_double.size[1] =
    proc_control_node_B.mIneq + 408;
  proc_control_node_B.memspace.workspace_int.size = proc_control_node_B.maxDims;
  proc_control_node_B.memspace.workspace_sort.size = proc_control_node_B.maxDims;
  proc_con_factoryConstruct_lnz42(proc_control_node_B.mIneq,
    proc_control_node_B.mIneq + 408, proc_control_node_B.mConstrMax,
    &proc_control_node_B.WorkingSet);
  proc_control_node_B.i_au = 0;
  for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx < 147;
       proc_control_node_B.b_idx++) {
    proc_control_node_B.b_c_j = lb[proc_control_node_B.b_idx];
    if ((!std::isinf(proc_control_node_B.b_c_j)) && (!std::isnan
         (proc_control_node_B.b_c_j))) {
      proc_control_node_B.i_au++;
      proc_control_node_B.WorkingSet.indexLB.data[proc_control_node_B.i_au - 1] =
        proc_control_node_B.b_idx + 1;
    }
  }

  proc_control_node_loadProblem(&proc_control_node_B.WorkingSet,
    proc_control_node_B.mIneq, *bineq_size, Aineq_data, proc_control_node_B.i_au,
    0, 0, proc_control_node_B.mConstrMax);
  proc_control_node_B.mConstrMax = 0;
  while (proc_control_node_B.mConstrMax <= proc_control_node_B.i_au - 1) {
    proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
      [proc_control_node_B.mConstrMax] - 1] = std::fmax
      (proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
       [proc_control_node_B.mConstrMax] - 1],
       lb[proc_control_node_B.WorkingSet.indexLB.data[proc_control_node_B.mConstrMax]
       - 1]);
    proc_control_node_B.mConstrMax++;
  }

  evalObjAndConstrAndDerivatives(fun_workspace_runtimedata->x,
    fun_workspace_runtimedata->lastMV, fun_workspace_runtimedata->ref,
    fun_workspace_runtimedata->OutputWeights,
    fun_workspace_runtimedata->MVWeights,
    fun_workspace_runtimedata->MVRateWeights,
    fun_workspace_runtimedata->MVScaledTarget, nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, proc_control_node_B.mNonlinIneq,
    proc_control_node_B.TrialState.xstarsqp,
    proc_control_node_B.TrialState.grad.data,
    proc_control_node_B.TrialState.cIneq.data,
    proc_control_node_B.TrialState.iNonIneq0, proc_control_node_B.TrialState.cEq,
    proc_control_node_B.WorkingSet.Aineq.data,
    proc_control_node_B.TrialState.iNonIneq0, proc_control_node_B.WorkingSet.ldA,
    proc_control_node_B.WorkingSet.Aeq.data, proc_control_node_B.WorkingSet.ldA,
    &proc_control_node_B.TrialState.sqpFval, &proc_control_node_B.mConstrMax);
  proc_control_node_B.TrialState.FunctionEvaluations = 1;
  proc_control_node_B.mConstrMax = proc_control_node_B.WorkingSet.ldA;
  if (*bineq_size > 0) {
    proc_control_node_B.y_size_idx_0 = proc_control_node_B.TrialState.cIneq.size;
    proc_control_node_B.loop_ub = proc_control_node_B.TrialState.cIneq.size;
    if (0 <= proc_control_node_B.loop_ub - 1) {
      std::memcpy(&proc_control_node_B.y_data_p[0],
                  &proc_control_node_B.TrialState.cIneq.data[0],
                  proc_control_node_B.loop_ub * sizeof(real_T));
    }

    proc_control_node_B.b_idx = 0;
    while (proc_control_node_B.b_idx <= *bineq_size - 1) {
      proc_control_node_B.y_data_p[proc_control_node_B.b_idx] =
        bineq_data[proc_control_node_B.b_idx];
      proc_control_node_B.b_idx++;
    }

    if (0 <= proc_control_node_B.y_size_idx_0 - 1) {
      std::memcpy(&proc_control_node_B.TrialState.cIneq.data[0],
                  &proc_control_node_B.y_data_p[0],
                  proc_control_node_B.y_size_idx_0 * sizeof(real_T));
    }

    proc_control_node_B.b_idx = 0;
    while (proc_control_node_B.b_idx <= *bineq_size - 1) {
      proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.b_idx] =
        -proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.b_idx];
      proc_control_node_B.b_idx++;
    }

    proc_control_node_B.b_idx = 0;
    proc_control_node_B.loop_ub = (*bineq_size - 1) *
      proc_control_node_B.WorkingSet.ldA + 1;
    proc_control_node_B.y_size_idx_0 = 1;
    while (((proc_control_node_B.mConstrMax > 0) &&
            (proc_control_node_B.y_size_idx_0 <= proc_control_node_B.loop_ub)) ||
           ((proc_control_node_B.mConstrMax < 0) &&
            (proc_control_node_B.y_size_idx_0 >= proc_control_node_B.loop_ub)))
    {
      proc_control_node_B.ix_k = 0;
      proc_control_node_B.b_c_j = 0.0;
      proc_control_node_B.ia = proc_control_node_B.y_size_idx_0;
      while (proc_control_node_B.ia <= proc_control_node_B.y_size_idx_0 + 146) {
        proc_control_node_B.b_c_j +=
          proc_control_node_B.WorkingSet.Aineq.data[proc_control_node_B.ia - 1] *
          proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.ix_k];
        proc_control_node_B.ix_k++;
        proc_control_node_B.ia++;
      }

      proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.b_idx] +=
        proc_control_node_B.b_c_j;
      proc_control_node_B.b_idx++;
      proc_control_node_B.y_size_idx_0 += proc_control_node_B.mConstrMax;
    }
  }

  proc_c_updateWorkingSetForNewQP(x0, &proc_control_node_B.WorkingSet,
    proc_control_node_B.mIneq, proc_control_node_B.TrialState.cIneq.data,
    proc_control_node_B.TrialState.cEq, proc_control_node_B.i_au, lb, 0, 0);
  proc_control_node_initActiveSet(&proc_control_node_B.WorkingSet);
  proc_control_node_B.MeritFunction.initFval =
    proc_control_node_B.TrialState.sqpFval;
  proc_control_node_B.MeritFunction.penaltyParam = 1.0;
  proc_control_node_B.MeritFunction.threshold = 0.0001;
  proc_control_node_B.MeritFunction.nPenaltyDecreases = 0;
  proc_control_node_B.MeritFunction.linearizedConstrViol = 0.0;
  proc_control_node_B.b_c_j = 0.0;
  for (proc_control_node_B.i_au = 0; proc_control_node_B.i_au < 130;
       proc_control_node_B.i_au++) {
    proc_control_node_B.b_c_j += std::abs
      (proc_control_node_B.TrialState.cEq[proc_control_node_B.i_au]);
  }

  proc_control_node_B.MeritFunction.initConstrViolationEq =
    proc_control_node_B.b_c_j;
  proc_control_node_B.b_c_j = 0.0;
  proc_control_node_B.i_au = 0;
  while (proc_control_node_B.i_au <= proc_control_node_B.mIneq - 1) {
    if (proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.i_au] >
        0.0) {
      proc_control_node_B.b_c_j +=
        proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.i_au];
    }

    proc_control_node_B.i_au++;
  }

  proc_control_node_B.MeritFunction.initConstrViolationIneq =
    proc_control_node_B.b_c_j;
  proc_control_node_B.MeritFunction.phi = 0.0;
  proc_control_node_B.MeritFunction.phiPrimePlus = 0.0;
  proc_control_node_B.MeritFunction.phiFullStep = 0.0;
  proc_control_node_B.MeritFunction.feasRelativeFactor = 0.0;
  proc_control_node_B.MeritFunction.nlpPrimalFeasError = 0.0;
  proc_control_node_B.MeritFunction.nlpDualFeasError = 0.0;
  proc_control_node_B.MeritFunction.nlpComplError = 0.0;
  proc_control_node_B.MeritFunction.firstOrderOpt = 0.0;
  proc_control_node_B.MeritFunction.hasObjective = true;
  proc_contro_factoryConstruct_ln(proc_control_node_B.maxDims,
    proc_control_node_B.maxDims, &proc_control_node_B.QRManager.ldq,
    proc_control_node_B.QRManager.QR.size, proc_control_node_B.QRManager.Q.data,
    proc_control_node_B.QRManager.Q.size,
    proc_control_node_B.QRManager.jpvt.data,
    &proc_control_node_B.QRManager.jpvt.size,
    &proc_control_node_B.QRManager.mrows, &proc_control_node_B.QRManager.ncols,
    &proc_control_node_B.QRManager.tau.size,
    &proc_control_node_B.QRManager.minRowCol,
    &proc_control_node_B.QRManager.usedPivoting);
  proc_contr_factoryConstruct_lnz(proc_control_node_B.maxDims,
    proc_control_node_B.CholManager.FMat.size,
    &proc_control_node_B.CholManager.ldm, &proc_control_node_B.CholManager.ndims,
    &proc_control_node_B.CholManager.info,
    &proc_control_node_B.CholManager.scaleFactor,
    &proc_control_node_B.CholManager.ConvexCheck,
    &proc_control_node_B.CholManager.regTol_,
    &proc_control_node_B.CholManager.workspace_,
    &proc_control_node_B.CholManager.workspace2_);
  proc_control_node_B.tmp_size_m = *bineq_size;
  proc_control_node_B.tmp_size_c = proc_control_node_B.mNonlinIneq;
  proc_control_node_driver(bineq_data, lb, &proc_control_node_B.TrialState,
    &proc_control_node_B.MeritFunction, &proc_control_node_B.FcnEvaluator,
    &proc_control_node_B.memspace, &proc_control_node_B.WorkingSet,
    &proc_control_node_B.QRManager, &proc_control_node_B.CholManager,
    &proc_control_node_B.QPObjective, &proc_control_node_B.tmp_size_m,
    &proc_control_node_B.tmp_size_c, proc_control_node_B.unusedExpr);
  *fval = proc_control_node_B.TrialState.sqpFval;
  *exitflag = proc_control_node_B.TrialState.sqpExitFlag;
  *output_iterations = proc_control_node_B.TrialState.sqpIterations;
  *output_funcCount = proc_control_node_B.TrialState.FunctionEvaluations;
  output_algorithm[0] = 's';
  output_algorithm[1] = 'q';
  output_algorithm[2] = 'p';
  *output_constrviolation = proc_control_node_B.MeritFunction.nlpPrimalFeasError;
  proc_control_node_B.b_c_j = 0.0;
  proc_control_node_B.scale_o = 3.3121686421112381E-170;
  for (proc_control_node_B.mNonlinIneq = 0; proc_control_node_B.mNonlinIneq <
       147; proc_control_node_B.mNonlinIneq++) {
    x[proc_control_node_B.mNonlinIneq] =
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.mNonlinIneq];
    proc_control_node_B.absxk_f = std::abs
      (proc_control_node_B.TrialState.delta_x.data[proc_control_node_B.mNonlinIneq]);
    if (proc_control_node_B.absxk_f > proc_control_node_B.scale_o) {
      proc_control_node_B.t_m = proc_control_node_B.scale_o /
        proc_control_node_B.absxk_f;
      proc_control_node_B.b_c_j = proc_control_node_B.b_c_j *
        proc_control_node_B.t_m * proc_control_node_B.t_m + 1.0;
      proc_control_node_B.scale_o = proc_control_node_B.absxk_f;
    } else {
      proc_control_node_B.t_m = proc_control_node_B.absxk_f /
        proc_control_node_B.scale_o;
      proc_control_node_B.b_c_j += proc_control_node_B.t_m *
        proc_control_node_B.t_m;
    }
  }

  *output_stepsize = proc_control_node_B.scale_o * std::sqrt
    (proc_control_node_B.b_c_j);
  *output_lssteplength = proc_control_node_B.TrialState.steplength;
  *output_firstorderopt = proc_control_node_B.MeritFunction.firstOrderOpt;
}

// Function for MATLAB Function: '<S150>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_lusolve_j(const real_T A[144],
  const real_T B[144], real_T X[144])
{
  int32_T b_j;
  int32_T c_ix;
  int32_T c_k;
  int32_T ijA;
  int32_T ix;
  int32_T iy;
  int32_T jj;
  std::memcpy(&proc_control_node_B.b_A_o[0], &A[0], 144U * sizeof(real_T));
  std::memcpy(&X[0], &B[0], 144U * sizeof(real_T));
  for (b_j = 0; b_j < 12; b_j++) {
    proc_control_node_B.ipiv_a[b_j] = static_cast<int8_T>(b_j + 1);
  }

  for (b_j = 0; b_j < 11; b_j++) {
    jj = b_j * 13;
    iy = 0;
    ix = jj;
    proc_control_node_B.smax_m = std::abs(proc_control_node_B.b_A_o[jj]);
    for (c_k = 2; c_k <= 12 - b_j; c_k++) {
      ix++;
      proc_control_node_B.s_o = std::abs(proc_control_node_B.b_A_o[ix]);
      if (proc_control_node_B.s_o > proc_control_node_B.smax_m) {
        iy = c_k - 1;
        proc_control_node_B.smax_m = proc_control_node_B.s_o;
      }
    }

    if (proc_control_node_B.b_A_o[jj + iy] != 0.0) {
      if (iy != 0) {
        iy += b_j;
        proc_control_node_B.ipiv_a[b_j] = static_cast<int8_T>(iy + 1);
        for (c_k = 0; c_k < 12; c_k++) {
          proc_control_node_B.smax_m = proc_control_node_B.b_A_o[c_k * 12 + b_j];
          ix = c_k * 12 + iy;
          proc_control_node_B.b_A_o[b_j + c_k * 12] =
            proc_control_node_B.b_A_o[ix];
          proc_control_node_B.b_A_o[ix] = proc_control_node_B.smax_m;
        }
      }

      iy = (jj - b_j) + 12;
      for (ix = jj + 1; ix < iy; ix++) {
        proc_control_node_B.b_A_o[ix] /= proc_control_node_B.b_A_o[jj];
      }
    }

    iy = jj;
    ix = jj + 12;
    for (c_k = 0; c_k <= 10 - b_j; c_k++) {
      if (proc_control_node_B.b_A_o[ix] != 0.0) {
        int32_T c;
        proc_control_node_B.smax_m = -proc_control_node_B.b_A_o[ix];
        c_ix = jj + 1;
        ijA = iy + 13;
        c = (iy - b_j) + 24;
        while (ijA + 1 <= c) {
          proc_control_node_B.b_A_o[ijA] += proc_control_node_B.b_A_o[c_ix] *
            proc_control_node_B.smax_m;
          c_ix++;
          ijA++;
        }
      }

      ix += 12;
      iy += 12;
    }
  }

  for (b_j = 0; b_j < 11; b_j++) {
    int8_T ipiv;
    ipiv = proc_control_node_B.ipiv_a[b_j];
    if (b_j + 1 != ipiv) {
      for (iy = 0; iy < 12; iy++) {
        jj = 12 * iy + b_j;
        proc_control_node_B.smax_m = X[jj];
        ix = (12 * iy + ipiv) - 1;
        X[jj] = X[ix];
        X[ix] = proc_control_node_B.smax_m;
      }
    }
  }

  for (b_j = 0; b_j < 12; b_j++) {
    jj = 12 * b_j;
    for (iy = 0; iy < 12; iy++) {
      ix = 12 * iy;
      if (X[iy + jj] != 0.0) {
        for (c_k = iy + 2; c_k < 13; c_k++) {
          c_ix = (c_k + jj) - 1;
          X[c_ix] -= proc_control_node_B.b_A_o[(c_k + ix) - 1] * X[iy + jj];
        }
      }
    }
  }

  for (b_j = 0; b_j < 12; b_j++) {
    jj = 12 * b_j;
    for (iy = 11; iy >= 0; iy--) {
      ix = 12 * iy;
      if (X[iy + jj] != 0.0) {
        c_ix = iy + jj;
        X[c_ix] /= proc_control_node_B.b_A_o[iy + ix];
        for (c_k = 0; c_k < iy; c_k++) {
          ijA = c_k + jj;
          X[ijA] -= proc_control_node_B.b_A_o[c_k + ix] * X[c_ix];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S150>/MATLAB Function2'
void proc_control_nodeModelClass::proc__PadeApproximantOfDegree_k(const real_T
  A[144], uint8_T m, real_T F[144])
{
  for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
       proc_control_node_B.i15++) {
    std::memset(&proc_control_node_B.A2_n[proc_control_node_B.i15 * 12], 0, 12U *
                sizeof(real_T));
    for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
         proc_control_node_B.e_k_m++) {
      for (proc_control_node_B.e_k_k = 0; proc_control_node_B.e_k_k < 12;
           proc_control_node_B.e_k_k++) {
        proc_control_node_B.A2_tmp_m = 12 * proc_control_node_B.i15 +
          proc_control_node_B.e_k_k;
        proc_control_node_B.A2_n[proc_control_node_B.A2_tmp_m] += A[12 *
          proc_control_node_B.e_k_m + proc_control_node_B.e_k_k] * A[12 *
          proc_control_node_B.i15 + proc_control_node_B.e_k_m];
      }
    }
  }

  if (m == 3) {
    std::memcpy(&proc_control_node_B.U_lu[0], &proc_control_node_B.A2_n[0], 144U
                * sizeof(real_T));
    proc_control_node_B.e_k_k = 0;
    proc_control_node_B.A2_tmp_m = 0;
    for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
         proc_control_node_B.e_k_m++) {
      std::memset(&proc_control_node_B.A4_i[proc_control_node_B.A2_tmp_m], 0,
                  12U * sizeof(real_T));
      proc_control_node_B.U_lu[proc_control_node_B.e_k_k] += 60.0;
      proc_control_node_B.e_k_k += 13;
      proc_control_node_B.A2_tmp_m += 12;
    }

    proc_control_node_B.e_k_k = 0;
    for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
         proc_control_node_B.e_k_m++) {
      proc_control_node_B.A2_tmp_m = 0;
      for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 12;
           proc_control_node_B.i16++) {
        for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
             proc_control_node_B.i15++) {
          int32_T A_tmp;
          A_tmp = proc_control_node_B.i15 + proc_control_node_B.e_k_k;
          proc_control_node_B.A4_i[A_tmp] += A[proc_control_node_B.i15 +
            proc_control_node_B.A2_tmp_m] *
            proc_control_node_B.U_lu[proc_control_node_B.i16 +
            proc_control_node_B.e_k_k];
        }

        proc_control_node_B.A2_tmp_m += 12;
      }

      proc_control_node_B.e_k_k += 12;
    }

    for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 144;
         proc_control_node_B.i15++) {
      proc_control_node_B.U_lu[proc_control_node_B.i15] =
        proc_control_node_B.A4_i[proc_control_node_B.i15];
      proc_control_node_B.V_p[proc_control_node_B.i15] = 12.0 *
        proc_control_node_B.A2_n[proc_control_node_B.i15];
    }

    proc_control_node_B.d_o = 120.0;
  } else {
    for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
         proc_control_node_B.i15++) {
      std::memset(&proc_control_node_B.A3_p[proc_control_node_B.i15 * 12], 0,
                  12U * sizeof(real_T));
      for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
           proc_control_node_B.e_k_m++) {
        for (proc_control_node_B.e_k_k = 0; proc_control_node_B.e_k_k < 12;
             proc_control_node_B.e_k_k++) {
          proc_control_node_B.A2_tmp_m = 12 * proc_control_node_B.i15 +
            proc_control_node_B.e_k_k;
          proc_control_node_B.A3_p[proc_control_node_B.A2_tmp_m] +=
            proc_control_node_B.A2_n[12 * proc_control_node_B.e_k_m +
            proc_control_node_B.e_k_k] * proc_control_node_B.A2_n[12 *
            proc_control_node_B.i15 + proc_control_node_B.e_k_m];
        }
      }
    }

    if (m == 5) {
      for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 144;
           proc_control_node_B.i15++) {
        proc_control_node_B.U_lu[proc_control_node_B.i15] = 420.0 *
          proc_control_node_B.A2_n[proc_control_node_B.i15] +
          proc_control_node_B.A3_p[proc_control_node_B.i15];
      }

      proc_control_node_B.e_k_k = 0;
      proc_control_node_B.A2_tmp_m = 0;
      for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
           proc_control_node_B.e_k_m++) {
        std::memset(&proc_control_node_B.A4_i[proc_control_node_B.A2_tmp_m], 0,
                    12U * sizeof(real_T));
        proc_control_node_B.U_lu[proc_control_node_B.e_k_k] += 15120.0;
        proc_control_node_B.e_k_k += 13;
        proc_control_node_B.A2_tmp_m += 12;
      }

      proc_control_node_B.e_k_k = 0;
      for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
           proc_control_node_B.e_k_m++) {
        proc_control_node_B.A2_tmp_m = 0;
        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 12;
             proc_control_node_B.i16++) {
          for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
               proc_control_node_B.i15++) {
            int32_T A_tmp;
            A_tmp = proc_control_node_B.i15 + proc_control_node_B.e_k_k;
            proc_control_node_B.A4_i[A_tmp] += A[proc_control_node_B.i15 +
              proc_control_node_B.A2_tmp_m] *
              proc_control_node_B.U_lu[proc_control_node_B.i16 +
              proc_control_node_B.e_k_k];
          }

          proc_control_node_B.A2_tmp_m += 12;
        }

        proc_control_node_B.e_k_k += 12;
      }

      for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 144;
           proc_control_node_B.i15++) {
        proc_control_node_B.U_lu[proc_control_node_B.i15] =
          proc_control_node_B.A4_i[proc_control_node_B.i15];
        proc_control_node_B.V_p[proc_control_node_B.i15] = 30.0 *
          proc_control_node_B.A3_p[proc_control_node_B.i15] + 3360.0 *
          proc_control_node_B.A2_n[proc_control_node_B.i15];
      }

      proc_control_node_B.d_o = 30240.0;
    } else {
      for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
           proc_control_node_B.i15++) {
        std::memset(&proc_control_node_B.A4_f[proc_control_node_B.i15 * 12], 0,
                    12U * sizeof(real_T));
        for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
             proc_control_node_B.e_k_m++) {
          for (proc_control_node_B.e_k_k = 0; proc_control_node_B.e_k_k < 12;
               proc_control_node_B.e_k_k++) {
            proc_control_node_B.A2_tmp_m = 12 * proc_control_node_B.i15 +
              proc_control_node_B.e_k_k;
            proc_control_node_B.A4_f[proc_control_node_B.A2_tmp_m] +=
              proc_control_node_B.A3_p[12 * proc_control_node_B.e_k_m +
              proc_control_node_B.e_k_k] * proc_control_node_B.A2_n[12 *
              proc_control_node_B.i15 + proc_control_node_B.e_k_m];
          }
        }
      }

      switch (m) {
       case 7:
        {
          for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 144;
               proc_control_node_B.i15++) {
            proc_control_node_B.U_lu[proc_control_node_B.i15] = (1512.0 *
              proc_control_node_B.A3_p[proc_control_node_B.i15] +
              proc_control_node_B.A4_f[proc_control_node_B.i15]) + 277200.0 *
              proc_control_node_B.A2_n[proc_control_node_B.i15];
          }

          proc_control_node_B.e_k_k = 0;
          proc_control_node_B.A2_tmp_m = 0;
          for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
               proc_control_node_B.e_k_m++) {
            std::memset(&proc_control_node_B.A4_i[proc_control_node_B.A2_tmp_m],
                        0, 12U * sizeof(real_T));
            proc_control_node_B.U_lu[proc_control_node_B.e_k_k] += 8.64864E+6;
            proc_control_node_B.e_k_k += 13;
            proc_control_node_B.A2_tmp_m += 12;
          }

          proc_control_node_B.e_k_k = 0;
          for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
               proc_control_node_B.e_k_m++) {
            proc_control_node_B.A2_tmp_m = 0;
            for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 12;
                 proc_control_node_B.i16++) {
              for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
                   proc_control_node_B.i15++) {
                int32_T A_tmp;
                A_tmp = proc_control_node_B.i15 + proc_control_node_B.e_k_k;
                proc_control_node_B.A4_i[A_tmp] += A[proc_control_node_B.i15 +
                  proc_control_node_B.A2_tmp_m] *
                  proc_control_node_B.U_lu[proc_control_node_B.i16 +
                  proc_control_node_B.e_k_k];
              }

              proc_control_node_B.A2_tmp_m += 12;
            }

            proc_control_node_B.e_k_k += 12;
          }

          for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 144;
               proc_control_node_B.i15++) {
            proc_control_node_B.U_lu[proc_control_node_B.i15] =
              proc_control_node_B.A4_i[proc_control_node_B.i15];
            proc_control_node_B.V_p[proc_control_node_B.i15] = (56.0 *
              proc_control_node_B.A4_f[proc_control_node_B.i15] + 25200.0 *
              proc_control_node_B.A3_p[proc_control_node_B.i15]) + 1.99584E+6 *
              proc_control_node_B.A2_n[proc_control_node_B.i15];
          }

          proc_control_node_B.d_o = 1.729728E+7;
        }
        break;

       case 9:
        {
          for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
               proc_control_node_B.i15++) {
            std::memset(&proc_control_node_B.V_p[proc_control_node_B.i15 * 12],
                        0, 12U * sizeof(real_T));
            for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
                 proc_control_node_B.e_k_m++) {
              for (proc_control_node_B.e_k_k = 0; proc_control_node_B.e_k_k < 12;
                   proc_control_node_B.e_k_k++) {
                proc_control_node_B.A2_tmp_m = 12 * proc_control_node_B.i15 +
                  proc_control_node_B.e_k_k;
                proc_control_node_B.V_p[proc_control_node_B.A2_tmp_m] +=
                  proc_control_node_B.A4_f[12 * proc_control_node_B.e_k_m +
                  proc_control_node_B.e_k_k] * proc_control_node_B.A2_n[12 *
                  proc_control_node_B.i15 + proc_control_node_B.e_k_m];
              }
            }
          }

          for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 144;
               proc_control_node_B.i15++) {
            proc_control_node_B.U_lu[proc_control_node_B.i15] = ((3960.0 *
              proc_control_node_B.A4_f[proc_control_node_B.i15] +
              proc_control_node_B.V_p[proc_control_node_B.i15]) + 2.16216E+6 *
              proc_control_node_B.A3_p[proc_control_node_B.i15]) + 3.027024E+8 *
              proc_control_node_B.A2_n[proc_control_node_B.i15];
          }

          proc_control_node_B.e_k_k = 0;
          proc_control_node_B.A2_tmp_m = 0;
          for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
               proc_control_node_B.e_k_m++) {
            std::memset(&proc_control_node_B.A4_i[proc_control_node_B.A2_tmp_m],
                        0, 12U * sizeof(real_T));
            proc_control_node_B.U_lu[proc_control_node_B.e_k_k] += 8.8216128E+9;
            proc_control_node_B.e_k_k += 13;
            proc_control_node_B.A2_tmp_m += 12;
          }

          proc_control_node_B.e_k_k = 0;
          for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
               proc_control_node_B.e_k_m++) {
            proc_control_node_B.A2_tmp_m = 0;
            for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 12;
                 proc_control_node_B.i16++) {
              for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
                   proc_control_node_B.i15++) {
                int32_T A_tmp;
                A_tmp = proc_control_node_B.i15 + proc_control_node_B.e_k_k;
                proc_control_node_B.A4_i[A_tmp] += A[proc_control_node_B.i15 +
                  proc_control_node_B.A2_tmp_m] *
                  proc_control_node_B.U_lu[proc_control_node_B.i16 +
                  proc_control_node_B.e_k_k];
              }

              proc_control_node_B.A2_tmp_m += 12;
            }

            proc_control_node_B.e_k_k += 12;
          }

          for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 144;
               proc_control_node_B.i15++) {
            proc_control_node_B.U_lu[proc_control_node_B.i15] =
              proc_control_node_B.A4_i[proc_control_node_B.i15];
            proc_control_node_B.V_p[proc_control_node_B.i15] = ((90.0 *
              proc_control_node_B.V_p[proc_control_node_B.i15] + 110880.0 *
              proc_control_node_B.A4_f[proc_control_node_B.i15]) + 3.027024E+7 *
              proc_control_node_B.A3_p[proc_control_node_B.i15]) + 2.0756736E+9 *
              proc_control_node_B.A2_n[proc_control_node_B.i15];
          }

          proc_control_node_B.d_o = 1.76432256E+10;
        }
        break;

       default:
        for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 144;
             proc_control_node_B.i15++) {
          proc_control_node_B.U_lu[proc_control_node_B.i15] = (3.352212864E+10 *
            proc_control_node_B.A4_f[proc_control_node_B.i15] +
            1.05594705216E+13 * proc_control_node_B.A3_p[proc_control_node_B.i15])
            + 1.1873537964288E+15 *
            proc_control_node_B.A2_n[proc_control_node_B.i15];
        }

        proc_control_node_B.e_k_k = 0;
        for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
             proc_control_node_B.e_k_m++) {
          proc_control_node_B.U_lu[proc_control_node_B.e_k_k] +=
            3.238237626624E+16;
          proc_control_node_B.e_k_k += 13;
        }

        for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 144;
             proc_control_node_B.i15++) {
          proc_control_node_B.V_p[proc_control_node_B.i15] = (16380.0 *
            proc_control_node_B.A3_p[proc_control_node_B.i15] +
            proc_control_node_B.A4_f[proc_control_node_B.i15]) + 4.08408E+7 *
            proc_control_node_B.A2_n[proc_control_node_B.i15];
        }

        for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
             proc_control_node_B.i15++) {
          proc_control_node_B.e_k_k = 0;
          for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
               proc_control_node_B.e_k_m++) {
            proc_control_node_B.d_o = 0.0;
            proc_control_node_B.A2_tmp_m = 0;
            for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 12;
                 proc_control_node_B.i16++) {
              proc_control_node_B.d_o +=
                proc_control_node_B.A4_f[proc_control_node_B.A2_tmp_m +
                proc_control_node_B.i15] *
                proc_control_node_B.V_p[proc_control_node_B.i16 +
                proc_control_node_B.e_k_k];
              proc_control_node_B.A2_tmp_m += 12;
            }

            proc_control_node_B.A2_tmp_m = proc_control_node_B.e_k_k +
              proc_control_node_B.i15;
            proc_control_node_B.A4_i[proc_control_node_B.A2_tmp_m] =
              proc_control_node_B.U_lu[proc_control_node_B.A2_tmp_m] +
              proc_control_node_B.d_o;
            proc_control_node_B.e_k_k += 12;
          }
        }

        for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
             proc_control_node_B.i15++) {
          std::memset(&proc_control_node_B.U_lu[proc_control_node_B.i15 * 12], 0,
                      12U * sizeof(real_T));
          for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
               proc_control_node_B.e_k_m++) {
            for (proc_control_node_B.e_k_k = 0; proc_control_node_B.e_k_k < 12;
                 proc_control_node_B.e_k_k++) {
              proc_control_node_B.A2_tmp_m = 12 * proc_control_node_B.i15 +
                proc_control_node_B.e_k_k;
              proc_control_node_B.U_lu[proc_control_node_B.A2_tmp_m] += A[12 *
                proc_control_node_B.e_k_m + proc_control_node_B.e_k_k] *
                proc_control_node_B.A4_i[12 * proc_control_node_B.i15 +
                proc_control_node_B.e_k_m];
            }
          }
        }

        for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 144;
             proc_control_node_B.i15++) {
          proc_control_node_B.A4_i[proc_control_node_B.i15] = (182.0 *
            proc_control_node_B.A4_f[proc_control_node_B.i15] + 960960.0 *
            proc_control_node_B.A3_p[proc_control_node_B.i15]) + 1.32324192E+9 *
            proc_control_node_B.A2_n[proc_control_node_B.i15];
        }

        for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 12;
             proc_control_node_B.i15++) {
          proc_control_node_B.e_k_k = 0;
          for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
               proc_control_node_B.e_k_m++) {
            proc_control_node_B.d_o = 0.0;
            proc_control_node_B.A2_tmp_m = 0;
            for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 12;
                 proc_control_node_B.i16++) {
              proc_control_node_B.d_o +=
                proc_control_node_B.A4_f[proc_control_node_B.A2_tmp_m +
                proc_control_node_B.i15] *
                proc_control_node_B.A4_i[proc_control_node_B.i16 +
                proc_control_node_B.e_k_k];
              proc_control_node_B.A2_tmp_m += 12;
            }

            proc_control_node_B.A2_tmp_m = proc_control_node_B.e_k_k +
              proc_control_node_B.i15;
            proc_control_node_B.V_p[proc_control_node_B.A2_tmp_m] =
              ((proc_control_node_B.A4_f[proc_control_node_B.A2_tmp_m] *
                6.704425728E+11 + proc_control_node_B.d_o) +
               proc_control_node_B.A3_p[proc_control_node_B.A2_tmp_m] *
               1.29060195264E+14) +
              proc_control_node_B.A2_n[proc_control_node_B.A2_tmp_m] *
              7.7717703038976E+15;
            proc_control_node_B.e_k_k += 12;
          }
        }

        proc_control_node_B.d_o = 6.476475253248E+16;
        break;
      }
    }
  }

  proc_control_node_B.e_k_k = 0;
  for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
       proc_control_node_B.e_k_m++) {
    proc_control_node_B.V_p[proc_control_node_B.e_k_k] +=
      proc_control_node_B.d_o;
    proc_control_node_B.e_k_k += 13;
  }

  for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 144;
       proc_control_node_B.e_k_m++) {
    proc_control_node_B.V_p[proc_control_node_B.e_k_m] -=
      proc_control_node_B.U_lu[proc_control_node_B.e_k_m];
    proc_control_node_B.U_lu[proc_control_node_B.e_k_m] *= 2.0;
  }

  proc_control_node_lusolve_j(proc_control_node_B.V_p, proc_control_node_B.U_lu,
    F);
  proc_control_node_B.e_k_k = 0;
  for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 12;
       proc_control_node_B.e_k_m++) {
    F[proc_control_node_B.e_k_k]++;
    proc_control_node_B.e_k_k += 13;
  }
}

// Function for MATLAB Function: '<S150>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_expm(real_T A[144], real_T
  F[144])
{
  static const real_T theta[5]{ 0.01495585217958292, 0.253939833006323,
    0.95041789961629319, 2.097847961257068, 5.3719203511481517 };

  static const uint8_T b[5]{ 3U, 5U, 7U, 9U, 13U };

  boolean_T exitg1;
  proc_control_node_B.normA = 0.0;
  proc_control_node_B.b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.b_j < 12)) {
    proc_control_node_B.c_s = 0.0;
    for (proc_control_node_B.b_i_m = 0; proc_control_node_B.b_i_m < 12;
         proc_control_node_B.b_i_m++) {
      proc_control_node_B.c_s += std::abs(A[12 * proc_control_node_B.b_j +
        proc_control_node_B.b_i_m]);
    }

    if (std::isnan(proc_control_node_B.c_s)) {
      proc_control_node_B.normA = (rtNaN);
      exitg1 = true;
    } else {
      if (proc_control_node_B.c_s > proc_control_node_B.normA) {
        proc_control_node_B.normA = proc_control_node_B.c_s;
      }

      proc_control_node_B.b_j++;
    }
  }

  if (proc_control_node_B.normA <= 5.3719203511481517) {
    proc_control_node_B.b_j = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.b_j < 5)) {
      if (proc_control_node_B.normA <= theta[proc_control_node_B.b_j]) {
        proc__PadeApproximantOfDegree_k(A, b[proc_control_node_B.b_j], F);
        exitg1 = true;
      } else {
        proc_control_node_B.b_j++;
      }
    }
  } else {
    proc_control_node_B.c_s = proc_control_node_B.normA / 5.3719203511481517;
    if ((!std::isinf(proc_control_node_B.c_s)) && (!std::isnan
         (proc_control_node_B.c_s))) {
      proc_control_node_B.c_s = frexp(proc_control_node_B.c_s,
        &proc_control_node_B.b_s_b);
    } else {
      proc_control_node_B.b_s_b = 0;
    }

    proc_control_node_B.normA = proc_control_node_B.b_s_b;
    if (proc_control_node_B.c_s == 0.5) {
      proc_control_node_B.normA = static_cast<real_T>(proc_control_node_B.b_s_b)
        - 1.0;
    }

    proc_control_node_B.c_s = rt_powd_snf(2.0, proc_control_node_B.normA);
    for (proc_control_node_B.b_i_m = 0; proc_control_node_B.b_i_m < 144;
         proc_control_node_B.b_i_m++) {
      A[proc_control_node_B.b_i_m] /= proc_control_node_B.c_s;
    }

    proc__PadeApproximantOfDegree_k(A, 13, F);
    proc_control_node_B.b_j = 0;
    while (proc_control_node_B.b_j <= static_cast<int32_T>
           (proc_control_node_B.normA) - 1) {
      for (proc_control_node_B.b_i_m = 0; proc_control_node_B.b_i_m < 12;
           proc_control_node_B.b_i_m++) {
        proc_control_node_B.b_s_b = 0;
        for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 12;
             proc_control_node_B.i12++) {
          proc_control_node_B.F_tmp = proc_control_node_B.b_s_b +
            proc_control_node_B.b_i_m;
          proc_control_node_B.F[proc_control_node_B.F_tmp] = 0.0;
          proc_control_node_B.i14 = 0;
          for (proc_control_node_B.i13 = 0; proc_control_node_B.i13 < 12;
               proc_control_node_B.i13++) {
            proc_control_node_B.F[proc_control_node_B.F_tmp] +=
              F[proc_control_node_B.i14 + proc_control_node_B.b_i_m] *
              F[proc_control_node_B.i13 + proc_control_node_B.b_s_b];
            proc_control_node_B.i14 += 12;
          }

          proc_control_node_B.b_s_b += 12;
        }
      }

      std::memcpy(&F[0], &proc_control_node_B.F[0], 144U * sizeof(real_T));
      proc_control_node_B.b_j++;
    }
  }
}

// Function for MATLAB Function: '<S188>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_contr_mpcblock_optimizer_l(const real_T
  rseq[120], const real_T vseq[11], const real_T x[20], const real_T old_u[8],
  const boolean_T iA[32], const real_T b_Mlim[32], real_T b_Mx[640], real_T
  b_Mu1[256], real_T b_Mv[352], const real_T b_utarget[80], const real_T b_uoff
  [8], real_T b_H[289], real_T b_Ac[544], const real_T b_Wy[12], const real_T
  b_Wdu[8], const real_T b_Jm[1280], const real_T b_Wu[8], const real_T b_I1[640],
  const real_T b_A[400], const real_T Bu[1760], const real_T Bv[220], const
  real_T b_C[240], const real_T Dv[132], const int32_T b_Mrows[32], real_T u[8],
  real_T useq[88], real_T *status, boolean_T iAout[32])
{
  static const int8_T c_A[100]{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1 };

  int16_T ixw;
  boolean_T exitg1;
  boolean_T guard1{ false };

  std::memset(&useq[0], 0, 88U * sizeof(real_T));
  for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 32;
       proc_control_node_B.i_dg++) {
    iAout[proc_control_node_B.i_dg] = false;
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 20;
       proc_control_node_B.j2_d++) {
    std::memset(&proc_control_node_B.CA_c[proc_control_node_B.j2_d * 12], 0, 12U
                * sizeof(real_T));
    for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 20;
         proc_control_node_B.kidx_f++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 12;
           proc_control_node_B.Tries++) {
        proc_control_node_B.CA_tmp_a = 12 * proc_control_node_B.j2_d +
          proc_control_node_B.Tries;
        proc_control_node_B.CA_c[proc_control_node_B.CA_tmp_a] += b_C[12 *
          proc_control_node_B.kidx_f + proc_control_node_B.Tries] * b_A[20 *
          proc_control_node_B.j2_d + proc_control_node_B.kidx_f];
      }
    }
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 8;
       proc_control_node_B.j2_d++) {
    std::memset(&proc_control_node_B.Sum_na[proc_control_node_B.j2_d * 12], 0,
                12U * sizeof(real_T));
    for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 20;
         proc_control_node_B.kidx_f++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 12;
           proc_control_node_B.Tries++) {
        proc_control_node_B.Sum_tmp_m = 12 * proc_control_node_B.j2_d +
          proc_control_node_B.Tries;
        proc_control_node_B.Sum_na[proc_control_node_B.Sum_tmp_m] += b_C[12 *
          proc_control_node_B.kidx_f + proc_control_node_B.Tries] * Bu[20 *
          proc_control_node_B.j2_d + proc_control_node_B.kidx_f];
      }
    }
  }

  std::memset(&proc_control_node_B.b_C_f[0], 0, 12U * sizeof(real_T));
  proc_control_node_B.Tries = 0;
  for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 20;
       proc_control_node_B.kidx_f++) {
    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 12;
         proc_control_node_B.j2_d++) {
      proc_control_node_B.b_C_f[proc_control_node_B.j2_d] +=
        b_C[proc_control_node_B.j2_d + proc_control_node_B.Tries] *
        Bv[proc_control_node_B.kidx_f];
    }

    proc_control_node_B.Tries += 12;
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 12;
       proc_control_node_B.j2_d++) {
    proc_control_node_B.b_Hv_l[proc_control_node_B.j2_d] =
      proc_control_node_B.b_C_f[proc_control_node_B.j2_d];
    proc_control_node_B.b_Hv_l[proc_control_node_B.j2_d + 120] =
      Dv[proc_control_node_B.j2_d];
  }

  proc_control_node_B.j2_d = 0;
  for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 9;
       proc_control_node_B.Tries++) {
    std::memset(&proc_control_node_B.b_Hv_l[proc_control_node_B.j2_d + 240], 0,
                12U * sizeof(real_T));
    proc_control_node_B.j2_d += 120;
  }

  proc_control_node_B.j2_d = 0;
  for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 11;
       proc_control_node_B.Tries++) {
    std::memset(&proc_control_node_B.b_Hv_l[proc_control_node_B.j2_d + 12], 0,
                108U * sizeof(real_T));
    proc_control_node_B.j2_d += 120;
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 20;
       proc_control_node_B.j2_d++) {
    std::memcpy(&proc_control_node_B.b_Sx_c[proc_control_node_B.j2_d * 120],
                &proc_control_node_B.CA_c[proc_control_node_B.j2_d * 12], 12U *
                sizeof(real_T));
    std::memset(&proc_control_node_B.b_Sx_c[proc_control_node_B.j2_d * 120 + 12],
                0, 108U * sizeof(real_T));
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 8;
       proc_control_node_B.j2_d++) {
    std::memcpy(&proc_control_node_B.b_Su1_a[proc_control_node_B.j2_d * 120],
                &proc_control_node_B.Sum_na[proc_control_node_B.j2_d * 12], 12U *
                sizeof(real_T));
    std::memset(&proc_control_node_B.b_Su1_a[proc_control_node_B.j2_d * 120 + 12],
                0, 108U * sizeof(real_T));
    std::memcpy(&proc_control_node_B.Su_k[proc_control_node_B.j2_d * 120],
                &proc_control_node_B.Sum_na[proc_control_node_B.j2_d * 12], 12U *
                sizeof(real_T));
  }

  proc_control_node_B.j2_d = 0;
  for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 72;
       proc_control_node_B.Tries++) {
    std::memset(&proc_control_node_B.Su_k[proc_control_node_B.j2_d + 960], 0,
                12U * sizeof(real_T));
    proc_control_node_B.j2_d += 120;
  }

  proc_control_node_B.j2_d = 0;
  for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 80;
       proc_control_node_B.Tries++) {
    std::memset(&proc_control_node_B.Su_k[proc_control_node_B.j2_d + 12], 0,
                108U * sizeof(real_T));
    proc_control_node_B.j2_d += 120;
  }

  for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 9;
       proc_control_node_B.i_dg++) {
    int8_T kidx;
    kidx = static_cast<int8_T>((proc_control_node_B.i_dg + 1) * 12 + 1);
    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 12;
         proc_control_node_B.j2_d++) {
      proc_control_node_B.rows_o[proc_control_node_B.j2_d] = static_cast<int8_T>
        (proc_control_node_B.j2_d + kidx);
      proc_control_node_B.Tries = 0;
      proc_control_node_B.kidx_f = 0;
      for (proc_control_node_B.i2_b = 0; proc_control_node_B.i2_b < 8;
           proc_control_node_B.i2_b++) {
        proc_control_node_B.normH = 0.0;
        proc_control_node_B.Sum_tmp_m = 0;
        for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 20;
             proc_control_node_B.i7++) {
          proc_control_node_B.normH +=
            proc_control_node_B.CA_c[proc_control_node_B.Sum_tmp_m +
            proc_control_node_B.j2_d] * Bu[proc_control_node_B.i7 +
            proc_control_node_B.kidx_f];
          proc_control_node_B.Sum_tmp_m += 12;
        }

        proc_control_node_B.Sum_tmp_m = proc_control_node_B.Tries +
          proc_control_node_B.j2_d;
        proc_control_node_B.Sum_na[proc_control_node_B.Sum_tmp_m] +=
          proc_control_node_B.normH;
        proc_control_node_B.Tries += 12;
        proc_control_node_B.kidx_f += 20;
      }
    }

    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 8;
         proc_control_node_B.j2_d++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 12;
           proc_control_node_B.Tries++) {
        proc_control_node_B.Sum_tmp_m = 12 * proc_control_node_B.j2_d +
          proc_control_node_B.Tries;
        proc_control_node_B.normH =
          proc_control_node_B.Sum_na[proc_control_node_B.Sum_tmp_m];
        proc_control_node_B.b_Su1_a
          [(proc_control_node_B.rows_o[proc_control_node_B.Tries] + 120 *
            proc_control_node_B.j2_d) - 1] = proc_control_node_B.normH;
        proc_control_node_B.Sum_j[proc_control_node_B.Sum_tmp_m] =
          proc_control_node_B.normH;
      }
    }

    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 72;
         proc_control_node_B.j2_d++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 12;
           proc_control_node_B.Tries++) {
        proc_control_node_B.Sum_j[proc_control_node_B.Tries + 12 *
          (proc_control_node_B.j2_d + 8)] = proc_control_node_B.Su_k[(120 *
          proc_control_node_B.j2_d +
          proc_control_node_B.rows_o[proc_control_node_B.Tries]) - 13];
      }
    }

    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 80;
         proc_control_node_B.j2_d++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 12;
           proc_control_node_B.Tries++) {
        proc_control_node_B.Su_k
          [(proc_control_node_B.rows_o[proc_control_node_B.Tries] + 120 *
            proc_control_node_B.j2_d) - 1] = proc_control_node_B.Sum_j[12 *
          proc_control_node_B.j2_d + proc_control_node_B.Tries];
      }
    }

    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 12;
         proc_control_node_B.j2_d++) {
      proc_control_node_B.b_C_f[proc_control_node_B.j2_d] = 0.0;
      proc_control_node_B.Tries = 0;
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 20;
           proc_control_node_B.kidx_f++) {
        proc_control_node_B.b_C_f[proc_control_node_B.j2_d] +=
          proc_control_node_B.CA_c[proc_control_node_B.Tries +
          proc_control_node_B.j2_d] * Bv[proc_control_node_B.kidx_f];
        proc_control_node_B.Tries += 12;
      }

      proc_control_node_B.CA_a[proc_control_node_B.j2_d] =
        proc_control_node_B.b_C_f[proc_control_node_B.j2_d];
    }

    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 10;
         proc_control_node_B.j2_d++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 12;
           proc_control_node_B.Tries++) {
        proc_control_node_B.CA_a[proc_control_node_B.Tries + 12 *
          (proc_control_node_B.j2_d + 1)] = proc_control_node_B.b_Hv_l[(120 *
          proc_control_node_B.j2_d +
          proc_control_node_B.rows_o[proc_control_node_B.Tries]) - 13];
      }
    }

    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 11;
         proc_control_node_B.j2_d++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 12;
           proc_control_node_B.Tries++) {
        proc_control_node_B.b_Hv_l
          [(proc_control_node_B.rows_o[proc_control_node_B.Tries] + 120 *
            proc_control_node_B.j2_d) - 1] = proc_control_node_B.CA_a[12 *
          proc_control_node_B.j2_d + proc_control_node_B.Tries];
      }
    }

    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 12;
         proc_control_node_B.j2_d++) {
      proc_control_node_B.Tries = 0;
      proc_control_node_B.kidx_f = 0;
      for (proc_control_node_B.i2_b = 0; proc_control_node_B.i2_b < 20;
           proc_control_node_B.i2_b++) {
        proc_control_node_B.CA_tmp_a = proc_control_node_B.Tries +
          proc_control_node_B.j2_d;
        proc_control_node_B.CA_k[proc_control_node_B.CA_tmp_a] = 0.0;
        proc_control_node_B.Sum_tmp_m = 0;
        for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 20;
             proc_control_node_B.i7++) {
          proc_control_node_B.CA_k[proc_control_node_B.CA_tmp_a] +=
            proc_control_node_B.CA_c[proc_control_node_B.Sum_tmp_m +
            proc_control_node_B.j2_d] * b_A[proc_control_node_B.i7 +
            proc_control_node_B.kidx_f];
          proc_control_node_B.Sum_tmp_m += 12;
        }

        proc_control_node_B.Tries += 12;
        proc_control_node_B.kidx_f += 20;
      }
    }

    std::memcpy(&proc_control_node_B.CA_c[0], &proc_control_node_B.CA_k[0], 240U
                * sizeof(real_T));
    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 20;
         proc_control_node_B.j2_d++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 12;
           proc_control_node_B.Tries++) {
        proc_control_node_B.b_Sx_c
          [(proc_control_node_B.rows_o[proc_control_node_B.Tries] + 120 *
            proc_control_node_B.j2_d) - 1] = proc_control_node_B.CA_c[12 *
          proc_control_node_B.j2_d + proc_control_node_B.Tries];
      }
    }
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 16;
       proc_control_node_B.j2_d++) {
    std::memset(&proc_control_node_B.b_SuJm_m[proc_control_node_B.j2_d * 120], 0,
                120U * sizeof(real_T));
    for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 80;
         proc_control_node_B.kidx_f++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 120;
           proc_control_node_B.Tries++) {
        proc_control_node_B.i_dg = 120 * proc_control_node_B.j2_d +
          proc_control_node_B.Tries;
        proc_control_node_B.b_SuJm_m[proc_control_node_B.i_dg] +=
          proc_control_node_B.Su_k[120 * proc_control_node_B.kidx_f +
          proc_control_node_B.Tries] * b_Jm[80 * proc_control_node_B.j2_d +
          proc_control_node_B.kidx_f];
      }
    }
  }

  if (b_Mrows[0] > 0) {
    proc_control_node_B.i_dg = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.i_dg < 32)) {
      if (b_Mrows[proc_control_node_B.i_dg] <= 120) {
        proc_control_node_B.Tries = b_Mrows[proc_control_node_B.i_dg];
        for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 16;
             proc_control_node_B.j2_d++) {
          b_Ac[proc_control_node_B.i_dg + (proc_control_node_B.j2_d << 5)] =
            -proc_control_node_B.b_SuJm_m[(120 * proc_control_node_B.j2_d +
            proc_control_node_B.Tries) - 1];
        }

        proc_control_node_B.Tries = b_Mrows[proc_control_node_B.i_dg];
        for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 20;
             proc_control_node_B.j2_d++) {
          b_Mx[proc_control_node_B.i_dg + (proc_control_node_B.j2_d << 5)] =
            -proc_control_node_B.b_Sx_c[(120 * proc_control_node_B.j2_d +
            proc_control_node_B.Tries) - 1];
        }

        proc_control_node_B.Tries = b_Mrows[proc_control_node_B.i_dg];
        for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 8;
             proc_control_node_B.j2_d++) {
          b_Mu1[proc_control_node_B.i_dg + (proc_control_node_B.j2_d << 5)] =
            -proc_control_node_B.b_Su1_a[(120 * proc_control_node_B.j2_d +
            proc_control_node_B.Tries) - 1];
        }

        proc_control_node_B.Tries = b_Mrows[proc_control_node_B.i_dg];
        for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 11;
             proc_control_node_B.j2_d++) {
          b_Mv[proc_control_node_B.i_dg + (proc_control_node_B.j2_d << 5)] =
            -proc_control_node_B.b_Hv_l[(120 * proc_control_node_B.j2_d +
            proc_control_node_B.Tries) - 1];
        }

        proc_control_node_B.i_dg++;
      } else if (b_Mrows[proc_control_node_B.i_dg] <= 240) {
        proc_control_node_B.j2_d = b_Mrows[proc_control_node_B.i_dg];
        if (proc_control_node_B.j2_d < -2147483528) {
          proc_control_node_B.Tries = MIN_int32_T;
        } else {
          proc_control_node_B.Tries = proc_control_node_B.j2_d - 120;
        }

        for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 16;
             proc_control_node_B.j2_d++) {
          b_Ac[proc_control_node_B.i_dg + (proc_control_node_B.j2_d << 5)] =
            proc_control_node_B.b_SuJm_m[(120 * proc_control_node_B.j2_d +
            proc_control_node_B.Tries) - 1];
        }

        for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 20;
             proc_control_node_B.j2_d++) {
          b_Mx[proc_control_node_B.i_dg + (proc_control_node_B.j2_d << 5)] =
            proc_control_node_B.b_Sx_c[(120 * proc_control_node_B.j2_d +
            proc_control_node_B.Tries) - 1];
        }

        for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 8;
             proc_control_node_B.j2_d++) {
          b_Mu1[proc_control_node_B.i_dg + (proc_control_node_B.j2_d << 5)] =
            proc_control_node_B.b_Su1_a[(120 * proc_control_node_B.j2_d +
            proc_control_node_B.Tries) - 1];
        }

        for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 11;
             proc_control_node_B.j2_d++) {
          b_Mv[proc_control_node_B.i_dg + (proc_control_node_B.j2_d << 5)] =
            proc_control_node_B.b_Hv_l[(120 * proc_control_node_B.j2_d +
            proc_control_node_B.Tries) - 1];
        }

        proc_control_node_B.i_dg++;
      } else {
        exitg1 = true;
      }
    }
  }

  std::memset(&proc_control_node_B.b_B_a[0], 0, sizeof(int8_T) << 6U);
  proc_control_node_B.kidx_f = 0;
  for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 8;
       proc_control_node_B.i_dg++) {
    proc_control_node_B.b_B_a[proc_control_node_B.kidx_f] = 1;
    proc_control_node_B.kidx_f += 9;
  }

  proc_control_node_B.i_dg = -1;
  for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 10;
       proc_control_node_B.Tries++) {
    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 8;
         proc_control_node_B.j2_d++) {
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 10;
           proc_control_node_B.kidx_f++) {
        for (proc_control_node_B.i2_b = 0; proc_control_node_B.i2_b < 8;
             proc_control_node_B.i2_b++) {
          proc_control_node_B.a_o[(proc_control_node_B.i_dg +
            proc_control_node_B.i2_b) + 1] = static_cast<int8_T>(c_A[10 *
            proc_control_node_B.Tries + proc_control_node_B.kidx_f] *
            proc_control_node_B.b_B_a[(proc_control_node_B.j2_d << 3) +
            proc_control_node_B.i2_b]);
        }

        proc_control_node_B.i_dg += 8;
      }
    }
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 16;
       proc_control_node_B.j2_d++) {
    std::memset(&proc_control_node_B.I2Jm_d[proc_control_node_B.j2_d * 80], 0,
                80U * sizeof(real_T));
    for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 80;
         proc_control_node_B.kidx_f++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 80;
           proc_control_node_B.Tries++) {
        proc_control_node_B.i_dg = 80 * proc_control_node_B.j2_d +
          proc_control_node_B.Tries;
        proc_control_node_B.I2Jm_d[proc_control_node_B.i_dg] +=
          static_cast<real_T>(proc_control_node_B.a_o[80 *
                              proc_control_node_B.kidx_f +
                              proc_control_node_B.Tries]) * b_Jm[80 *
          proc_control_node_B.j2_d + proc_control_node_B.kidx_f];
      }
    }
  }

  ixw = 1;
  for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 120;
       proc_control_node_B.i_dg++) {
    proc_control_node_B.normH = b_Wy[ixw - 1];
    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 16;
         proc_control_node_B.j2_d++) {
      proc_control_node_B.Tries = 120 * proc_control_node_B.j2_d +
        proc_control_node_B.i_dg;
      proc_control_node_B.WySuJm_n[proc_control_node_B.Tries] =
        proc_control_node_B.b_SuJm_m[proc_control_node_B.Tries] *
        proc_control_node_B.normH;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 12) {
      ixw = 1;
    }
  }

  proc_control_node_WtMult(b_Wu, proc_control_node_B.I2Jm_d,
    proc_control_node_nu, proc_control_node_B.WuI2Jm_e);
  proc_control_node_WtMult(b_Wdu, b_Jm, proc_control_node_nu,
    proc_control_node_B.dv3);
  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 16;
       proc_control_node_B.j2_d++) {
    for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 16;
         proc_control_node_B.Tries++) {
      proc_control_node_B.i_dg = (proc_control_node_B.j2_d << 4) +
        proc_control_node_B.Tries;
      proc_control_node_B.b_SuJm_me[proc_control_node_B.i_dg] = 0.0;
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 120;
           proc_control_node_B.kidx_f++) {
        proc_control_node_B.b_SuJm_me[proc_control_node_B.i_dg] +=
          proc_control_node_B.b_SuJm_m[120 * proc_control_node_B.Tries +
          proc_control_node_B.kidx_f] * proc_control_node_B.WySuJm_n[120 *
          proc_control_node_B.j2_d + proc_control_node_B.kidx_f];
      }

      proc_control_node_B.b_Jm_m[proc_control_node_B.i_dg] = 0.0;
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 80;
           proc_control_node_B.kidx_f++) {
        proc_control_node_B.b_Jm_m[proc_control_node_B.i_dg] += b_Jm[80 *
          proc_control_node_B.Tries + proc_control_node_B.kidx_f] *
          proc_control_node_B.dv3[80 * proc_control_node_B.j2_d +
          proc_control_node_B.kidx_f];
      }
    }
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 16;
       proc_control_node_B.j2_d++) {
    for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 16;
         proc_control_node_B.Tries++) {
      proc_control_node_B.normH = 0.0;
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 80;
           proc_control_node_B.kidx_f++) {
        proc_control_node_B.normH += proc_control_node_B.I2Jm_d[80 *
          proc_control_node_B.j2_d + proc_control_node_B.kidx_f] *
          proc_control_node_B.WuI2Jm_e[80 * proc_control_node_B.Tries +
          proc_control_node_B.kidx_f];
      }

      proc_control_node_B.CA_tmp_a = (proc_control_node_B.Tries << 4) +
        proc_control_node_B.j2_d;
      b_H[proc_control_node_B.j2_d + 17 * proc_control_node_B.Tries] =
        (proc_control_node_B.b_SuJm_me[proc_control_node_B.CA_tmp_a] +
         proc_control_node_B.b_Jm_m[proc_control_node_B.CA_tmp_a]) +
        proc_control_node_B.normH;
    }

    for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 8;
         proc_control_node_B.Tries++) {
      proc_control_node_B.i_dg = (proc_control_node_B.j2_d << 3) +
        proc_control_node_B.Tries;
      proc_control_node_B.b_Su1_jg[proc_control_node_B.i_dg] = 0.0;
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 120;
           proc_control_node_B.kidx_f++) {
        proc_control_node_B.b_Su1_jg[proc_control_node_B.i_dg] +=
          proc_control_node_B.b_Su1_a[120 * proc_control_node_B.Tries +
          proc_control_node_B.kidx_f] * proc_control_node_B.WySuJm_n[120 *
          proc_control_node_B.j2_d + proc_control_node_B.kidx_f];
      }

      proc_control_node_B.b_I1_e[proc_control_node_B.i_dg] = 0.0;
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 80;
           proc_control_node_B.kidx_f++) {
        proc_control_node_B.b_I1_e[proc_control_node_B.i_dg] += b_I1[80 *
          proc_control_node_B.Tries + proc_control_node_B.kidx_f] *
          proc_control_node_B.WuI2Jm_e[80 * proc_control_node_B.j2_d +
          proc_control_node_B.kidx_f];
      }
    }
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 128;
       proc_control_node_B.j2_d++) {
    proc_control_node_B.b_Ku1_m[proc_control_node_B.j2_d] =
      proc_control_node_B.b_Su1_jg[proc_control_node_B.j2_d] +
      proc_control_node_B.b_I1_e[proc_control_node_B.j2_d];
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 1280;
       proc_control_node_B.j2_d++) {
    proc_control_node_B.WuI2Jm_e[proc_control_node_B.j2_d] =
      -proc_control_node_B.WuI2Jm_e[proc_control_node_B.j2_d];
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 16;
       proc_control_node_B.j2_d++) {
    for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 20;
         proc_control_node_B.Tries++) {
      proc_control_node_B.i_dg = 20 * proc_control_node_B.j2_d +
        proc_control_node_B.Tries;
      proc_control_node_B.b_Kx_h[proc_control_node_B.i_dg] = 0.0;
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 120;
           proc_control_node_B.kidx_f++) {
        proc_control_node_B.b_Kx_h[proc_control_node_B.i_dg] +=
          proc_control_node_B.b_Sx_c[120 * proc_control_node_B.Tries +
          proc_control_node_B.kidx_f] * proc_control_node_B.WySuJm_n[120 *
          proc_control_node_B.j2_d + proc_control_node_B.kidx_f];
      }
    }

    for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 11;
         proc_control_node_B.Tries++) {
      proc_control_node_B.i_dg = 11 * proc_control_node_B.j2_d +
        proc_control_node_B.Tries;
      proc_control_node_B.b_Kv_j[proc_control_node_B.i_dg] = 0.0;
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 120;
           proc_control_node_B.kidx_f++) {
        proc_control_node_B.b_Kv_j[proc_control_node_B.i_dg] +=
          proc_control_node_B.b_Hv_l[120 * proc_control_node_B.Tries +
          proc_control_node_B.kidx_f] * proc_control_node_B.WySuJm_n[120 *
          proc_control_node_B.j2_d + proc_control_node_B.kidx_f];
      }
    }
  }

  for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 1920;
       proc_control_node_B.j2_d++) {
    proc_control_node_B.WySuJm_n[proc_control_node_B.j2_d] =
      -proc_control_node_B.WySuJm_n[proc_control_node_B.j2_d];
  }

  proc_control_node_B.i_dg = 0;
  std::memcpy(&proc_control_node_B.L[0], &b_H[0], 289U * sizeof(real_T));
  proc_control_node_B.Tries = proc_control_node_xpotrf(proc_control_node_B.L);
  guard1 = false;
  if (proc_control_node_B.Tries == 0) {
    proc_control_node_B.j2_d = 0;
    for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 17;
         proc_control_node_B.Tries++) {
      proc_control_node_B.varargin_1[proc_control_node_B.Tries] =
        proc_control_node_B.L[proc_control_node_B.j2_d];
      proc_control_node_B.j2_d += 18;
    }

    if (proc_control_node_minimum(proc_control_node_B.varargin_1) >
        1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    boolean_T exitg2;
    proc_control_node_B.normH = 0.0;
    proc_control_node_B.Tries = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.Tries < 17)) {
      proc_control_node_B.s = 0.0;
      for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 17;
           proc_control_node_B.j2_d++) {
        proc_control_node_B.s += std::abs(b_H[17 * proc_control_node_B.j2_d +
          proc_control_node_B.Tries]);
      }

      if (std::isnan(proc_control_node_B.s)) {
        proc_control_node_B.normH = (rtNaN);
        exitg2 = true;
      } else {
        if (proc_control_node_B.s > proc_control_node_B.normH) {
          proc_control_node_B.normH = proc_control_node_B.s;
        }

        proc_control_node_B.Tries++;
      }
    }

    if (proc_control_node_B.normH >= 1.0E+10) {
      proc_control_node_B.i_dg = 2;
    } else {
      proc_control_node_B.Tries = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.Tries <= 4)) {
        boolean_T guard2{ false };

        proc_control_node_B.normH = rt_powd_snf(10.0, static_cast<real_T>
          (proc_control_node_B.Tries)) * 1.4901161193847656E-7;
        std::memset(&proc_control_node_B.b_c3[0], 0, 289U * sizeof(int8_T));
        proc_control_node_B.kidx_f = 0;
        for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 17;
             proc_control_node_B.i_dg++) {
          proc_control_node_B.b_c3[proc_control_node_B.kidx_f] = 1;
          proc_control_node_B.kidx_f += 18;
        }

        for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 289;
             proc_control_node_B.j2_d++) {
          b_H[proc_control_node_B.j2_d] += proc_control_node_B.normH *
            static_cast<real_T>
            (proc_control_node_B.b_c3[proc_control_node_B.j2_d]);
          proc_control_node_B.L[proc_control_node_B.j2_d] =
            b_H[proc_control_node_B.j2_d];
        }

        proc_control_node_B.i_dg = proc_control_node_xpotrf
          (proc_control_node_B.L);
        guard2 = false;
        if (proc_control_node_B.i_dg == 0) {
          proc_control_node_B.kidx_f = 0;
          for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 17;
               proc_control_node_B.i_dg++) {
            proc_control_node_B.varargin_1[proc_control_node_B.i_dg] =
              proc_control_node_B.L[proc_control_node_B.kidx_f];
            proc_control_node_B.kidx_f += 18;
          }

          if (proc_control_node_minimum(proc_control_node_B.varargin_1) >
              1.4901161193847656E-7) {
            proc_control_node_B.i_dg = 1;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          proc_control_node_B.i_dg = 3;
          proc_control_node_B.Tries++;
        }
      }
    }
  }

  if (proc_control_node_B.i_dg > 1) {
    proc_control_node_B.i_dg = 0;
    for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 8;
         proc_control_node_B.kidx_f++) {
      u[proc_control_node_B.kidx_f] = old_u[proc_control_node_B.kidx_f] +
        b_uoff[proc_control_node_B.kidx_f];
      for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 11;
           proc_control_node_B.j2_d++) {
        useq[proc_control_node_B.j2_d + proc_control_node_B.i_dg] =
          u[proc_control_node_B.kidx_f];
      }

      proc_control_node_B.i_dg += 11;
    }

    *status = -2.0;
  } else {
    std::memset(&proc_control_node_B.b_c3[0], 0, 289U * sizeof(int8_T));
    proc_control_node_B.kidx_f = 0;
    for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 17;
         proc_control_node_B.i_dg++) {
      proc_control_node_B.b_c3[proc_control_node_B.kidx_f] = 1;
      proc_control_node_B.kidx_f += 18;
    }

    proc_control_node_B.kidx_f = 0;
    for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 17;
         proc_control_node_B.i_dg++) {
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 17;
           proc_control_node_B.Tries++) {
        proc_control_node_B.CA_tmp_a = proc_control_node_B.Tries +
          proc_control_node_B.kidx_f;
        b_H[proc_control_node_B.CA_tmp_a] =
          proc_control_node_B.b_c3[proc_control_node_B.CA_tmp_a];
      }

      proc_control_node_B.kidx_f += 17;
    }

    proc_control_node_trisolve(proc_control_node_B.L, b_H);
    std::memset(&proc_control_node_B.varargin_1[0], 0, 17U * sizeof(real_T));
    for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 16;
         proc_control_node_B.i_dg++) {
      proc_control_node_B.normH = 0.0;
      for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 20;
           proc_control_node_B.j2_d++) {
        proc_control_node_B.normH += proc_control_node_B.b_Kx_h[20 *
          proc_control_node_B.i_dg + proc_control_node_B.j2_d] *
          x[proc_control_node_B.j2_d];
      }

      proc_control_node_B.s = 0.0;
      for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 120;
           proc_control_node_B.j2_d++) {
        proc_control_node_B.s += proc_control_node_B.WySuJm_n[120 *
          proc_control_node_B.i_dg + proc_control_node_B.j2_d] *
          rseq[proc_control_node_B.j2_d];
      }

      proc_control_node_B.b_Ku1_f = 0.0;
      for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 8;
           proc_control_node_B.j2_d++) {
        proc_control_node_B.b_Ku1_f += proc_control_node_B.b_Ku1_m
          [(proc_control_node_B.i_dg << 3) + proc_control_node_B.j2_d] *
          old_u[proc_control_node_B.j2_d];
      }

      proc_control_node_B.b_Kv_o = 0.0;
      for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 11;
           proc_control_node_B.j2_d++) {
        proc_control_node_B.b_Kv_o += proc_control_node_B.b_Kv_j[11 *
          proc_control_node_B.i_dg + proc_control_node_B.j2_d] *
          vseq[proc_control_node_B.j2_d];
      }

      proc_control_node_B.WuI2Jm_i = 0.0;
      for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 80;
           proc_control_node_B.j2_d++) {
        proc_control_node_B.WuI2Jm_i += proc_control_node_B.WuI2Jm_e[80 *
          proc_control_node_B.i_dg + proc_control_node_B.j2_d] *
          b_utarget[proc_control_node_B.j2_d];
      }

      proc_control_node_B.varargin_1[proc_control_node_B.i_dg] =
        (((proc_control_node_B.normH + proc_control_node_B.s) +
          proc_control_node_B.b_Ku1_f) + proc_control_node_B.b_Kv_o) +
        proc_control_node_B.WuI2Jm_i;
    }

    for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 32;
         proc_control_node_B.i_dg++) {
      proc_control_node_B.iAnew_f[proc_control_node_B.i_dg] =
        iA[proc_control_node_B.i_dg];
      proc_control_node_B.normH = 0.0;
      proc_control_node_B.j2_d = 0;
      for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 20;
           proc_control_node_B.Tries++) {
        proc_control_node_B.normH += b_Mx[proc_control_node_B.j2_d +
          proc_control_node_B.i_dg] * x[proc_control_node_B.Tries];
        proc_control_node_B.j2_d += 32;
      }

      proc_control_node_B.b_Mlim_i[proc_control_node_B.i_dg] =
        b_Mlim[proc_control_node_B.i_dg] + proc_control_node_B.normH;
      proc_control_node_B.b_Mu1_g[proc_control_node_B.i_dg] = 0.0;
    }

    proc_control_node_B.j2_d = 0;
    for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 8;
         proc_control_node_B.Tries++) {
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 32;
           proc_control_node_B.kidx_f++) {
        proc_control_node_B.b_Mu1_g[proc_control_node_B.kidx_f] +=
          b_Mu1[proc_control_node_B.kidx_f + proc_control_node_B.j2_d] *
          old_u[proc_control_node_B.Tries];
      }

      proc_control_node_B.j2_d += 32;
    }

    proc_control_node_B.j2_d = 0;
    for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 17;
         proc_control_node_B.Tries++) {
      proc_control_node_B.kidx_f = 0;
      for (proc_control_node_B.i2_b = 0; proc_control_node_B.i2_b < 17;
           proc_control_node_B.i2_b++) {
        proc_control_node_B.CA_tmp_a = proc_control_node_B.i2_b +
          proc_control_node_B.j2_d;
        proc_control_node_B.L[proc_control_node_B.CA_tmp_a] = 0.0;
        for (proc_control_node_B.Sum_tmp_m = 0; proc_control_node_B.Sum_tmp_m <
             17; proc_control_node_B.Sum_tmp_m++) {
          proc_control_node_B.L[proc_control_node_B.CA_tmp_a] +=
            b_H[proc_control_node_B.Sum_tmp_m + proc_control_node_B.kidx_f] *
            b_H[proc_control_node_B.Sum_tmp_m + proc_control_node_B.j2_d];
        }

        proc_control_node_B.kidx_f += 17;
      }

      proc_control_node_B.j2_d += 17;
    }

    for (proc_control_node_B.j2_d = 0; proc_control_node_B.j2_d < 32;
         proc_control_node_B.j2_d++) {
      proc_control_node_B.normH = 0.0;
      proc_control_node_B.Tries = 0;
      for (proc_control_node_B.kidx_f = 0; proc_control_node_B.kidx_f < 11;
           proc_control_node_B.kidx_f++) {
        proc_control_node_B.normH += b_Mv[proc_control_node_B.Tries +
          proc_control_node_B.j2_d] * vseq[proc_control_node_B.kidx_f];
        proc_control_node_B.Tries += 32;
      }

      proc_control_node_B.b_Mlim_n[proc_control_node_B.j2_d] =
        -((proc_control_node_B.b_Mlim_i[proc_control_node_B.j2_d] +
           proc_control_node_B.b_Mu1_g[proc_control_node_B.j2_d]) +
          proc_control_node_B.normH);
    }

    proc_control_node_qpkwik(b_H, proc_control_node_B.L,
      proc_control_node_B.varargin_1, b_Ac, proc_control_node_B.b_Mlim_n,
      proc_control_node_B.iAnew_f, 196, 0.01, proc_control_node_B.zopt_c,
      proc_control_node_B.b_Mlim_i, status);
    for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 32;
         proc_control_node_B.i_dg++) {
      iAout[proc_control_node_B.i_dg] =
        (proc_control_node_B.iAnew_f[proc_control_node_B.i_dg] != 0);
    }

    proc_control_node_B.normH = std::round(*status);
    if (proc_control_node_B.normH < 2.147483648E+9) {
      if (proc_control_node_B.normH >= -2.147483648E+9) {
        proc_control_node_B.j2_d = static_cast<int32_T>
          (proc_control_node_B.normH);
      } else {
        proc_control_node_B.j2_d = MIN_int32_T;
      }

      if (proc_control_node_B.normH >= -2.147483648E+9) {
        proc_control_node_B.Tries = static_cast<int32_T>
          (proc_control_node_B.normH);
      } else {
        proc_control_node_B.Tries = MIN_int32_T;
      }
    } else {
      proc_control_node_B.j2_d = MAX_int32_T;
      proc_control_node_B.Tries = MAX_int32_T;
    }

    if ((proc_control_node_B.j2_d < 0) || (proc_control_node_B.Tries == 0)) {
      std::memset(&proc_control_node_B.zopt_c[0], 0, 17U * sizeof(real_T));
    }

    for (proc_control_node_B.i_dg = 0; proc_control_node_B.i_dg < 8;
         proc_control_node_B.i_dg++) {
      u[proc_control_node_B.i_dg] = (old_u[proc_control_node_B.i_dg] +
        proc_control_node_B.zopt_c[proc_control_node_B.i_dg]) +
        b_uoff[proc_control_node_B.i_dg];
    }
  }
}

real_T rt_urand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  uint32_T hi;
  uint32_T lo;

  // Uniform random number generator (random number between 0 and 1)

  // #define IA      16807                      magic multiplier = 7^5
  // #define IM      2147483647                 modulus = 2^31-1
  // #define IQ      127773                     IM div IA
  // #define IR      2836                       IM modulo IA
  // #define S       4.656612875245797e-10      reciprocal of 2^31-1
  // test = IA * (seed % IQ) - IR * (seed/IQ)
  // seed = test < 0 ? (test + IM) : test
  // return (seed*S)

  lo = *u % 127773U * 16807U;
  hi = *u / 127773U * 2836U;
  if (lo < hi) {
    *u = 2147483647U - (hi - lo);
  } else {
    *u = lo - hi;
  }

  return static_cast<real_T>(*u) * 4.6566128752457969E-10;
}

real_T rt_nrand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  real_T si;
  real_T sr;
  real_T y;

  // Normal (Gaussian) random number generator
  do {
    sr = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = sr * sr + si * si;
  } while (si > 1.0);

  y = std::sqrt(-2.0 * std::log(si) / si) * sr;
  return y;
}

// Function for MATLAB Function: '<S150>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_nod_AUVEulerSimFcn(const real_T
  in1[12], const real_T in2[8], real_T out1[12])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  real_T out1_tmp_1;
  real_T out1_tmp_2;
  proc_control_node_B.t5_n = std::cos(in1[3]);
  proc_control_node_B.t6_j = std::cos(in1[5]);
  proc_control_node_B.t9_p = std::cos(in1[4]);
  proc_control_node_B.t11_a = std::sin(in1[3]);
  proc_control_node_B.t12_d = std::sin(in1[5]);
  proc_control_node_B.t13_p = std::sin(in1[4]);
  proc_control_node_B.t20_d = in1[10] / 500.0;
  proc_control_node_B.t24_pq = in1[9] / 1000.0;
  proc_control_node_B.t26_f = in1[11] * 0.018;
  proc_control_node_B.t46 = in1[6] * 32.4648;
  proc_control_node_B.t49 = in1[7] * 43.6156;
  proc_control_node_B.t50_g = in1[8] * 46.7695;
  proc_control_node_B.t14_d = 1.0 / proc_control_node_B.t9_p;
  proc_control_node_B.t53_h = proc_control_node_B.t20_d +
    proc_control_node_B.t26_f;
  proc_control_node_B.t20_d += proc_control_node_B.t24_pq;
  proc_control_node_B.t24_pq += proc_control_node_B.t26_f;
  proc_control_node_B.t26_f = in1[10] * 0.558 + proc_control_node_B.t46;
  proc_control_node_B.t62_i = in1[9] * 0.062 + proc_control_node_B.t50_g;
  proc_control_node_B.t63_m = in1[11] * 0.031 + proc_control_node_B.t49;
  proc_control_node_B.t66 = (in1[10] / 125.0 + in1[11] / 250.0) + in1[9] * 0.592;
  proc_control_node_B.t46 = in1[11] * 0.062 + -proc_control_node_B.t46;
  proc_control_node_B.t49 = in1[9] * 0.558 + -proc_control_node_B.t49;
  proc_control_node_B.t50_g = in1[10] * 0.031 + -proc_control_node_B.t50_g;
  proc_control_node_B.t68_c = (in1[9] / 250.0 + -(in1[10] / 1000.0)) + in1[11] *
    1.8864;
  proc_control_node_B.t69_l = (in1[9] / 125.0 + -(in1[11] / 1000.0)) + in1[10] *
    1.7228;
  proc_control_node_B.out1_tmp_p = proc_control_node_B.t11_a *
    proc_control_node_B.t12_d;
  proc_control_node_B.out1_tmp_i = proc_control_node_B.t5_n *
    proc_control_node_B.t6_j;
  proc_control_node_B.out1_tmp_b = proc_control_node_B.t5_n *
    proc_control_node_B.t12_d;
  proc_control_node_B.out1_tmp_gn = proc_control_node_B.t6_j *
    proc_control_node_B.t11_a;
  out1[0] = ((proc_control_node_B.out1_tmp_b - proc_control_node_B.out1_tmp_gn *
              proc_control_node_B.t13_p) * -in1[7] +
             (proc_control_node_B.out1_tmp_i * proc_control_node_B.t13_p +
              proc_control_node_B.out1_tmp_p) * in1[8]) +
    proc_control_node_B.t6_j * proc_control_node_B.t9_p * in1[6];
  out1[1] = ((proc_control_node_B.out1_tmp_p * proc_control_node_B.t13_p +
              proc_control_node_B.out1_tmp_i) * in1[7] -
             (proc_control_node_B.out1_tmp_gn - proc_control_node_B.out1_tmp_b *
              proc_control_node_B.t13_p) * in1[8]) + proc_control_node_B.t9_p *
    proc_control_node_B.t12_d * in1[6];
  proc_control_node_B.out1_tmp_p = proc_control_node_B.t5_n *
    proc_control_node_B.t9_p;
  proc_control_node_B.out1_tmp_i = proc_control_node_B.t9_p *
    proc_control_node_B.t11_a;
  out1[2] = (proc_control_node_B.out1_tmp_i * in1[7] +
             -proc_control_node_B.t13_p * in1[6]) +
    proc_control_node_B.out1_tmp_p * in1[8];
  proc_control_node_B.out1_tmp_b = in1[10] * proc_control_node_B.t11_a;
  proc_control_node_B.out1_tmp_gn = in1[11] * proc_control_node_B.t5_n;
  out1[3] = (proc_control_node_B.out1_tmp_b * proc_control_node_B.t13_p *
             proc_control_node_B.t14_d + in1[9]) +
    proc_control_node_B.out1_tmp_gn * proc_control_node_B.t13_p *
    proc_control_node_B.t14_d;
  out1[4] = in1[10] * proc_control_node_B.t5_n - in1[11] *
    proc_control_node_B.t11_a;
  out1[5] = proc_control_node_B.out1_tmp_b * proc_control_node_B.t14_d +
    proc_control_node_B.out1_tmp_gn * proc_control_node_B.t14_d;
  proc_control_node_B.out1_tmp_b = in1[9] * proc_control_node_B.t53_h;
  proc_control_node_B.out1_tmp_gn = (std::abs(in1[9]) * 0.167 +
    3.3333333333333335) * in1[9];
  proc_control_node_B.t6_j = in1[9] * proc_control_node_B.t62_i;
  proc_control_node_B.t12_d = in1[9] * proc_control_node_B.t49;
  proc_control_node_B.t14_d = in1[9] * proc_control_node_B.t68_c;
  proc_control_node_B.out1_tmp_oq = in1[9] * proc_control_node_B.t69_l;
  proc_control_node_B.out1_tmp_b1 = (std::abs(in1[10]) / 10.0 +
    2.3333333333333335) * in1[10];
  proc_control_node_B.out1_tmp_e = in1[10] * proc_control_node_B.t24_pq;
  proc_control_node_B.out1_tmp_e1 = in1[10] * proc_control_node_B.t26_f;
  proc_control_node_B.out1_tmp_lg = in1[10] * proc_control_node_B.t50_g;
  proc_control_node_B.out1_tmp_cf = in1[10] * proc_control_node_B.t66;
  proc_control_node_B.t68_c *= in1[10];
  proc_control_node_B.out1_tmp_e5 = (std::abs(in1[11]) * 0.102 + 5.0) * in1[11];
  out1_tmp = in1[11] * proc_control_node_B.t20_d;
  out1_tmp_0 = in1[11] * proc_control_node_B.t46;
  out1_tmp_1 = in1[11] * proc_control_node_B.t63_m;
  proc_control_node_B.t66 *= in1[11];
  proc_control_node_B.t69_l *= in1[11];
  proc_control_node_B.t5_n = (proc_control_node_B.t5_n * 0.062 +
    -(proc_control_node_B.t11_a * 0.746622)) * proc_control_node_B.t9_p;
  proc_control_node_B.t9_p = (std::abs(in1[6]) * 1.17 + 15.0) * in1[6];
  proc_control_node_B.t53_h *= in1[6];
  proc_control_node_B.t63_m *= in1[6];
  proc_control_node_B.t50_g *= in1[6];
  proc_control_node_B.t11_a = (std::abs(in1[7]) * 0.82 + 20.0) * in1[7];
  proc_control_node_B.t24_pq *= in1[7];
  proc_control_node_B.t46 *= in1[7];
  proc_control_node_B.t62_i *= in1[7];
  out1_tmp_2 = (std::abs(in1[8]) * 0.756 + 23.333333333333332) * in1[8];
  proc_control_node_B.t20_d *= in1[8];
  proc_control_node_B.t26_f *= in1[8];
  proc_control_node_B.t49 *= in1[8];
  out1[6] = ((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 + proc_control_node_B.t13_p * 0.20690082595613279)) +
                     (((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        in2[1] * 1.4142135623730951 * 0.014928824155507611) +
                       in2[2] * 1.4142135623730951 * 0.015171119710606879) +
                      in2[3] * 1.4142135623730951 * 0.01516372519659284)) +
                    (((proc_control_node_B.out1_tmp_b * -0.96028628902704993 -
                       proc_control_node_B.out1_tmp_gn * 0.0001303522588356414)
                      + proc_control_node_B.t6_j * 9.4803055144857715E-7) -
                     proc_control_node_B.t12_d * 6.8231348244175949E-6)) +
                   (((proc_control_node_B.t14_d * -0.010033314971702871 -
                      proc_control_node_B.out1_tmp_oq * 0.0010125044874363649) +
                     proc_control_node_B.out1_tmp_b1 * 0.010033314971702871) -
                    proc_control_node_B.out1_tmp_e * 2.9388947094905889E-5)) +
                  (((proc_control_node_B.out1_tmp_e1 * -6.8231348244175949E-6 +
                     proc_control_node_B.out1_tmp_lg * 0.030976977065388711) +
                    proc_control_node_B.out1_tmp_cf * 0.0010125044874363649) -
                   proc_control_node_B.t68_c * 0.0001303522588356414)) +
                 (((proc_control_node_B.out1_tmp_e5 * -0.0010125044874363649 +
                    out1_tmp * 0.0002115171795569455) + out1_tmp_0 *
                   9.4803055144857715E-7) + out1_tmp_1 * 0.030976977065388711))
                + ((proc_control_node_B.t66 * 0.010033314971702871 +
                    proc_control_node_B.t69_l * 0.0001303522588356414) +
                   proc_control_node_B.out1_tmp_p * 0.0030804819903427929)) +
               ((proc_control_node_B.out1_tmp_i * 0.0003038485611411295 +
                 proc_control_node_B.t5_n * 0.0012787556591776421) -
                proc_control_node_B.t9_p * 0.030976977065388711)) +
              (((proc_control_node_B.t53_h * 0.0040409200239048832 -
                 proc_control_node_B.t63_m * 0.0010125044874363649) +
                proc_control_node_B.t50_g * 0.010033314971702871) -
               proc_control_node_B.t11_a * 9.4803055144857715E-7)) +
             (((proc_control_node_B.t24_pq * -0.311032764122789 -
                proc_control_node_B.t46 * 0.0010125044874363649) -
               proc_control_node_B.t62_i * 0.0001303522588356414) + out1_tmp_2 *
              6.8231348244175949E-6)) + ((proc_control_node_B.t20_d *
    0.031387639110527318 + proc_control_node_B.t26_f * 0.010033314971702871) -
    proc_control_node_B.t49 * 0.0001303522588356414);
  out1[7] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 + proc_control_node_B.t13_p * 0.00049601054978465754))
                      + ((in2[0] * 1.4142135623730951 * -0.01090649593858282 +
    in2[1] * 1.4142135623730951 * 0.011000123045544621) - in2[2] *
    1.4142135623730951 * 0.01090649593858282)) + ((in2[3] * 1.4142135623730951 *
    0.01090087173345982 - proc_control_node_B.out1_tmp_b * 2.9388947094905889E-5)
    - proc_control_node_B.out1_tmp_gn * 0.021882274381510681)) +
                    (((proc_control_node_B.t6_j * 0.02320783323245932 -
                       proc_control_node_B.t12_d * 2.9076309096921531E-5) -
                      proc_control_node_B.t14_d * 0.0001026911824132076) +
                     proc_control_node_B.out1_tmp_oq * 0.00042780737967584029))
                   + (((proc_control_node_B.out1_tmp_b1 * 0.0001026911824132076
                        - proc_control_node_B.out1_tmp_e * 0.71944283020623911)
                       - proc_control_node_B.out1_tmp_e1 * 2.9076309096921531E-5)
                      + proc_control_node_B.out1_tmp_lg * 9.4803055144857715E-7))
                  + (((proc_control_node_B.out1_tmp_cf * -0.00042780737967584029
                       - proc_control_node_B.t68_c * 0.021882274381510681) +
                      proc_control_node_B.out1_tmp_e5 * 0.00042780737967584029)
                     + out1_tmp * 0.00090136558200456737)) + (((out1_tmp_0 *
    0.02320783323245932 + out1_tmp_1 * 9.4803055144857715E-7) +
    proc_control_node_B.t66 * 0.0001026911824132076) + proc_control_node_B.t69_l
    * 0.021882274381510681)) + ((proc_control_node_B.out1_tmp_p *
    0.0001558786802929103 - proc_control_node_B.out1_tmp_i * 0.09962138533478937)
    + proc_control_node_B.t5_n * 0.2146651116826197)) +
               (((proc_control_node_B.t9_p * -9.4803055144857715E-7 +
                  proc_control_node_B.t53_h * 0.678350505826831) +
                 proc_control_node_B.t63_m * 0.00042780737967584029) +
                proc_control_node_B.t50_g * 0.0001026911824132076)) +
              ((proc_control_node_B.t11_a * -0.02320783323245932 -
                proc_control_node_B.t24_pq * 0.0031834266548094372) +
               proc_control_node_B.t46 * 0.00042780737967584029)) +
             (((proc_control_node_B.t62_i * -0.021882274381510681 + out1_tmp_2 *
                2.9076309096921531E-5) - proc_control_node_B.t20_d *
               0.013262028769951049) + proc_control_node_B.t26_f *
              0.0001026911824132076)) + proc_control_node_B.t49 *
    -0.021882274381510681;
  out1[8] = ((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 - proc_control_node_B.t13_p * 0.0029379207602901669)) +
                     ((in2[0] * 1.4142135623730951 * -4.8869263875916949E-5 +
                       in2[1] * 1.4142135623730951 * 6.6264429389244648E-5) -
                      in2[2] * 1.4142135623730951 * 4.8869263875916949E-5)) +
                    (((in2[3] * 1.4142135623730951 * 6.7490056888775055E-5 +
                       proc_control_node_B.out1_tmp_b * 0.0002115171795569455) +
                      proc_control_node_B.out1_tmp_gn * 0.002272431716587712) -
                     proc_control_node_B.t6_j * 2.9076309096921531E-5)) +
                   (((proc_control_node_B.t12_d * 0.021384731826702759 +
                      proc_control_node_B.t14_d * 0.00039756137245743289) -
                     proc_control_node_B.out1_tmp_oq * 5.2828771531483014E-6) -
                    proc_control_node_B.out1_tmp_b1 * 0.00039756137245743289)) +
                  (((proc_control_node_B.out1_tmp_e * 0.00090136558200456737 +
                     proc_control_node_B.out1_tmp_e1 * 0.021384731826702759) -
                    proc_control_node_B.out1_tmp_lg * 6.8231348244175949E-6) +
                   proc_control_node_B.out1_tmp_cf * 5.2828771531483014E-6)) +
                 (((proc_control_node_B.t68_c * 0.002272431716587712 -
                    proc_control_node_B.out1_tmp_e5 * 5.2828771531483014E-6) -
                   out1_tmp * 0.66292668662778553) - out1_tmp_0 *
                  2.9076309096921531E-5)) + ((out1_tmp_1 *
    -6.8231348244175949E-6 - proc_control_node_B.t66 * 0.00039756137245743289) -
    proc_control_node_B.t69_l * 0.002272431716587712)) +
               ((proc_control_node_B.out1_tmp_p * -0.091796606188097957 +
                 proc_control_node_B.out1_tmp_i * 0.0001262558405802736) -
                proc_control_node_B.t5_n * 0.022292555139725449)) +
              (((proc_control_node_B.t9_p * 6.8231348244175949E-6 -
                 proc_control_node_B.t53_h * 0.070445383214219059) -
                proc_control_node_B.t63_m * 5.2828771531483014E-6) -
               proc_control_node_B.t50_g * 0.00039756137245743289)) +
             (((proc_control_node_B.t11_a * 2.9076309096921531E-5 +
                proc_control_node_B.t24_pq * 0.01232440254618042) -
               proc_control_node_B.t46 * 5.2828771531483014E-6) +
              proc_control_node_B.t62_i * 0.002272431716587712)) + (((out1_tmp_2
    * -0.021384731826702759 + proc_control_node_B.t20_d * 0.00016376919174759729)
    - proc_control_node_B.t26_f * 0.00039756137245743289) +
    proc_control_node_B.t49 * 0.002272431716587712);
  out1[9] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 + proc_control_node_B.t13_p * 0.056926116941144737)) +
                        ((in2[0] * 1.4142135623730951 * 0.043593198825375247 -
    in2[1] * 1.4142135623730951 * 0.043051831063235027) + in2[2] *
    1.4142135623730951 * 0.043593198825375247)) + ((in2[3] * 1.4142135623730951 *
    -0.043976565543532631 - proc_control_node_B.out1_tmp_b *
    0.0040409200239048832) - proc_control_node_B.out1_tmp_gn * 1.71018810547529))
                      + ((proc_control_node_B.t6_j * 0.021882274381510681 -
    proc_control_node_B.t12_d * 0.002272431716587712) -
    proc_control_node_B.t14_d * 0.0080268590155159435)) +
                     ((proc_control_node_B.out1_tmp_oq * 0.0039859244840414 +
                       proc_control_node_B.out1_tmp_b1 * 0.0080268590155159435)
                      - proc_control_node_B.out1_tmp_e * 0.678350505826831)) +
                    ((proc_control_node_B.out1_tmp_e1 * -0.002272431716587712 +
                      proc_control_node_B.out1_tmp_lg * 0.0001303522588356414) -
                     proc_control_node_B.out1_tmp_cf * 0.0039859244840414)) +
                   ((proc_control_node_B.t68_c * -1.71018810547529 +
                     proc_control_node_B.out1_tmp_e5 * 0.0039859244840414) +
                    out1_tmp * 0.070445383214219059)) + ((out1_tmp_0 *
    0.021882274381510681 + out1_tmp_1 * 0.0001303522588356414) +
    proc_control_node_B.t66 * 0.0080268590155159435)) +
                 ((proc_control_node_B.t69_l * 1.71018810547529 +
                   proc_control_node_B.out1_tmp_p * 0.01218289469126858) -
                  proc_control_node_B.out1_tmp_i * 0.095020813300146653)) +
                ((proc_control_node_B.t5_n * 16.7769453147126 -
                  proc_control_node_B.t9_p * 0.0001303522588356414) +
                 proc_control_node_B.t53_h * 53.015831269733987)) +
               ((proc_control_node_B.t63_m * 0.0039859244840414 +
                 proc_control_node_B.t50_g * 0.0080268590155159435) -
                proc_control_node_B.t11_a * 0.021882274381510681)) +
              ((proc_control_node_B.t24_pq * -0.2488326294809943 +
                proc_control_node_B.t46 * 0.0039859244840414) -
               proc_control_node_B.t62_i * 1.71018810547529)) + ((out1_tmp_2 *
    0.002272431716587712 - proc_control_node_B.t20_d * 0.1235636590052834) +
              proc_control_node_B.t26_f * 0.0080268590155159435)) +
    proc_control_node_B.t49 * -1.71018810547529;
  out1[10] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 - proc_control_node_B.t13_p * 4.3185698628399987)) +
                        ((in2[0] * 1.4142135623730951 * 0.013457654526727991 +
    in2[1] * 1.4142135623730951 * 0.013869054980635681) + in2[2] *
    1.4142135623730951 * 0.013457654526727991)) + ((in2[3] * 1.4142135623730951 *
    0.01386868232130781 + proc_control_node_B.out1_tmp_b * 0.311032764122789) +
    proc_control_node_B.out1_tmp_gn * 0.0080268590155159435)) +
                      (((proc_control_node_B.t6_j * -0.0001026911824132076 +
    proc_control_node_B.t12_d * 0.00039756137245743289) +
                        proc_control_node_B.t14_d * 0.58374455968341665) +
                       proc_control_node_B.out1_tmp_oq * 1.606290206365557E-6))
                     + ((proc_control_node_B.out1_tmp_b1 * -0.58374455968341665
    + proc_control_node_B.out1_tmp_e * 0.0031834266548094372) +
                        proc_control_node_B.out1_tmp_e1 * 0.00039756137245743289))
                    + (((proc_control_node_B.out1_tmp_lg * -0.010033314971702871
    - proc_control_node_B.out1_tmp_cf * 1.606290206365557E-6) +
                        proc_control_node_B.t68_c * 0.0080268590155159435) +
                       proc_control_node_B.out1_tmp_e5 * 1.606290206365557E-6))
                   + ((out1_tmp * -0.01232440254618042 - out1_tmp_0 *
                       0.0001026911824132076) - out1_tmp_1 *
                      0.010033314971702871)) + ((proc_control_node_B.t66 *
    -0.58374455968341665 - proc_control_node_B.t69_l * 0.0080268590155159435) -
    proc_control_node_B.out1_tmp_p * 0.17922689172220771)) +
                 ((proc_control_node_B.out1_tmp_i * 0.000439745529355291 -
                   proc_control_node_B.t5_n * 0.078743486942211408) +
                  proc_control_node_B.t9_p * 0.010033314971702871)) +
                ((proc_control_node_B.t53_h * -0.2488326294809943 +
                  proc_control_node_B.t63_m * 1.606290206365557E-6) -
                 proc_control_node_B.t50_g * 0.58374455968341665)) +
               (((proc_control_node_B.t11_a * 0.0001026911824132076 +
                  proc_control_node_B.t24_pq * 18.096081350185919) +
                 proc_control_node_B.t46 * 1.606290206365557E-6) +
                proc_control_node_B.t62_i * 0.0080268590155159435)) +
              ((out1_tmp_2 * -0.00039756137245743289 - proc_control_node_B.t20_d
                * 4.9794996397332282E-5) - proc_control_node_B.t26_f *
               0.58374455968341665)) + proc_control_node_B.t49 *
    0.0080268590155159435;
  out1[11] = (((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_node_B.t13_p * 0.32680566187003413)) +
                       ((in2[0] * 1.4142135623730951 * 0.00059255494878017434 -
    in2[1] * 1.4142135623730951 * 0.1225770464045467) + in2[2] *
                        1.4142135623730951 * 0.00059255494878017434)) + ((in2[3]
    * 1.4142135623730951 * 0.00041984673608298361 -
    proc_control_node_B.out1_tmp_b * 0.031387639110527318) +
    proc_control_node_B.out1_tmp_gn * 0.0039859244840414)) +
                     (((proc_control_node_B.t6_j * -0.00042780737967584029 +
                        proc_control_node_B.t12_d * 5.2828771531483014E-6) -
                       proc_control_node_B.t14_d * 1.606290206365557E-6) -
                      proc_control_node_B.out1_tmp_oq * 0.53015902215788635)) +
                    (((proc_control_node_B.out1_tmp_b1 * 1.606290206365557E-6 +
                       proc_control_node_B.out1_tmp_e * 0.013262028769951049) +
                      proc_control_node_B.out1_tmp_e1 * 5.2828771531483014E-6) +
                     proc_control_node_B.out1_tmp_lg * 0.0010125044874363649)) +
                   ((proc_control_node_B.out1_tmp_cf * 0.53015902215788635 +
                     proc_control_node_B.t68_c * 0.0039859244840414) -
                    proc_control_node_B.out1_tmp_e5 * 0.53015902215788635)) +
                  (((out1_tmp * -0.00016376919174759729 - out1_tmp_0 *
                     0.00042780737967584029) + out1_tmp_1 *
                    0.0010125044874363649) + proc_control_node_B.t66 *
                   1.606290206365557E-6)) + ((proc_control_node_B.t69_l *
    -0.0039859244840414 - proc_control_node_B.out1_tmp_p * 2.2159046954574339E-5)
    + proc_control_node_B.out1_tmp_i * 0.16306065763088379)) +
                ((proc_control_node_B.t5_n * -0.03910191918844614 -
                  proc_control_node_B.t9_p * 0.0010125044874363649) -
                 proc_control_node_B.t53_h * 0.1235636590052834)) +
               (((proc_control_node_B.t63_m * -0.53015902215788635 +
                  proc_control_node_B.t50_g * 1.606290206365557E-6) +
                 proc_control_node_B.t11_a * 0.00042780737967584029) -
                proc_control_node_B.t24_pq * 4.9794996397332282E-5)) +
              ((proc_control_node_B.t46 * -0.53015902215788635 +
                proc_control_node_B.t62_i * 0.0039859244840414) - out1_tmp_2 *
               5.2828771531483014E-6)) + ((proc_control_node_B.t20_d *
    16.434929686894481 + proc_control_node_B.t26_f * 1.606290206365557E-6) +
    proc_control_node_B.t49 * 0.0039859244840414);
}

// Model step function
void proc_control_nodeModelClass::step()
{
  static const real_T b_B[6930]{ 0.00010422287096660737, -7.60262465294606E-5,
    -2.7978839506221557E-7, 0.0, 0.00013024602419296888, 4.5705305075394251E-5,
    -0.00039515692029936625, 0.00207067626528841, -0.0015161848659374837,
    -4.9246767934457295E-6, 0.0047144512137947516, 0.0017884809057889287,
    -0.015136665580870333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010417536353033212, 7.7231779270040308E-5, 3.9043431633268714E-7, 0.0,
    -0.00012640159694068945, 4.6849954954468127E-5, -0.00039756890175053893,
    0.00206983613181119, 0.0015388624403197394, 7.0936716057341977E-6,
    -0.0045837034086854992, 0.0018286450604411118, -0.015232210269176915, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001072287753367836,
    -7.7268389610159381E-5, -2.6693703914389786E-7, 0.0, 0.00012531184349172991,
    4.570558793134934E-5, 0.00040426366299855908, 0.0021277731766221868,
    -0.0015395096046877032, -4.7070151263153741E-6, 0.0045454579501885747,
    0.001788552195101755, 0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7,
    0.0, -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010422287096660737, -7.60262465294606E-5, -2.7978839506221557E-7, 0.0,
    0.00013024602419296888, 4.5705305075394251E-5, -0.00039515692029936625,
    0.00207067626528841, -0.0015161848659374837, -4.9246767934457295E-6,
    0.0047144512137947516, 0.0017884809057889287, -0.015136665580870333, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010417536353033212,
    7.7231779270040308E-5, 3.9043431633268714E-7, 0.0, -0.00012640159694068945,
    4.6849954954468127E-5, -0.00039756890175053893, 0.00206983613181119,
    0.0015388624403197394, 7.0936716057341977E-6, -0.0045837034086854992,
    0.0018286450604411118, -0.015232210269176915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001072287753367836, -7.7268389610159381E-5,
    -2.6693703914389786E-7, 0.0, 0.00012531184349172991, 4.570558793134934E-5,
    0.00040426366299855908, 0.0021277731766221868, -0.0015395096046877032,
    -4.7070151263153741E-6, 0.0045454579501885747, 0.001788552195101755,
    0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7, 0.0,
    -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010422287096660737, -7.60262465294606E-5, -2.7978839506221557E-7, 0.0,
    0.00013024602419296888, 4.5705305075394251E-5, -0.00039515692029936625,
    0.00207067626528841, -0.0015161848659374837, -4.9246767934457295E-6,
    0.0047144512137947516, 0.0017884809057889287, -0.015136665580870333, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010417536353033212,
    7.7231779270040308E-5, 3.9043431633268714E-7, 0.0, -0.00012640159694068945,
    4.6849954954468127E-5, -0.00039756890175053893, 0.00206983613181119,
    0.0015388624403197394, 7.0936716057341977E-6, -0.0045837034086854992,
    0.0018286450604411118, -0.015232210269176915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001072287753367836, -7.7268389610159381E-5,
    -2.6693703914389786E-7, 0.0, 0.00012531184349172991, 4.570558793134934E-5,
    0.00040426366299855908, 0.0021277731766221868, -0.0015395096046877032,
    -4.7070151263153741E-6, 0.0045454579501885747, 0.001788552195101755,
    0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7, 0.0,
    -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010422287096660737, -7.60262465294606E-5, -2.7978839506221557E-7, 0.0,
    0.00013024602419296888, 4.5705305075394251E-5, -0.00039515692029936625,
    0.00207067626528841, -0.0015161848659374837, -4.9246767934457295E-6,
    0.0047144512137947516, 0.0017884809057889287, -0.015136665580870333, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010417536353033212,
    7.7231779270040308E-5, 3.9043431633268714E-7, 0.0, -0.00012640159694068945,
    4.6849954954468127E-5, -0.00039756890175053893, 0.00206983613181119,
    0.0015388624403197394, 7.0936716057341977E-6, -0.0045837034086854992,
    0.0018286450604411118, -0.015232210269176915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001072287753367836, -7.7268389610159381E-5,
    -2.6693703914389786E-7, 0.0, 0.00012531184349172991, 4.570558793134934E-5,
    0.00040426366299855908, 0.0021277731766221868, -0.0015395096046877032,
    -4.7070151263153741E-6, 0.0045454579501885747, 0.001788552195101755,
    0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7, 0.0,
    -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010422287096660737, -7.60262465294606E-5, -2.7978839506221557E-7, 0.0,
    0.00013024602419296888, 4.5705305075394251E-5, -0.00039515692029936625,
    0.00207067626528841, -0.0015161848659374837, -4.9246767934457295E-6,
    0.0047144512137947516, 0.0017884809057889287, -0.015136665580870333, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010417536353033212,
    7.7231779270040308E-5, 3.9043431633268714E-7, 0.0, -0.00012640159694068945,
    4.6849954954468127E-5, -0.00039756890175053893, 0.00206983613181119,
    0.0015388624403197394, 7.0936716057341977E-6, -0.0045837034086854992,
    0.0018286450604411118, -0.015232210269176915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001072287753367836, -7.7268389610159381E-5,
    -2.6693703914389786E-7, 0.0, 0.00012531184349172991, 4.570558793134934E-5,
    0.00040426366299855908, 0.0021277731766221868, -0.0015395096046877032,
    -4.7070151263153741E-6, 0.0045454579501885747, 0.001788552195101755,
    0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7, 0.0,
    -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010422287096660737, -7.60262465294606E-5, -2.7978839506221557E-7, 0.0,
    0.00013024602419296888, 4.5705305075394251E-5, -0.00039515692029936625,
    0.00207067626528841, -0.0015161848659374837, -4.9246767934457295E-6,
    0.0047144512137947516, 0.0017884809057889287, -0.015136665580870333, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010417536353033212,
    7.7231779270040308E-5, 3.9043431633268714E-7, 0.0, -0.00012640159694068945,
    4.6849954954468127E-5, -0.00039756890175053893, 0.00206983613181119,
    0.0015388624403197394, 7.0936716057341977E-6, -0.0045837034086854992,
    0.0018286450604411118, -0.015232210269176915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001072287753367836, -7.7268389610159381E-5,
    -2.6693703914389786E-7, 0.0, 0.00012531184349172991, 4.570558793134934E-5,
    0.00040426366299855908, 0.0021277731766221868, -0.0015395096046877032,
    -4.7070151263153741E-6, 0.0045454579501885747, 0.001788552195101755,
    0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7, 0.0,
    -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010422287096660737, -7.60262465294606E-5, -2.7978839506221557E-7, 0.0,
    0.00013024602419296888, 4.5705305075394251E-5, -0.00039515692029936625,
    0.00207067626528841, -0.0015161848659374837, -4.9246767934457295E-6,
    0.0047144512137947516, 0.0017884809057889287, -0.015136665580870333, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010417536353033212,
    7.7231779270040308E-5, 3.9043431633268714E-7, 0.0, -0.00012640159694068945,
    4.6849954954468127E-5, -0.00039756890175053893, 0.00206983613181119,
    0.0015388624403197394, 7.0936716057341977E-6, -0.0045837034086854992,
    0.0018286450604411118, -0.015232210269176915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001072287753367836, -7.7268389610159381E-5,
    -2.6693703914389786E-7, 0.0, 0.00012531184349172991, 4.570558793134934E-5,
    0.00040426366299855908, 0.0021277731766221868, -0.0015395096046877032,
    -4.7070151263153741E-6, 0.0045454579501885747, 0.001788552195101755,
    0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7, 0.0,
    -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010422287096660737, -7.60262465294606E-5, -2.7978839506221557E-7, 0.0,
    0.00013024602419296888, 4.5705305075394251E-5, -0.00039515692029936625,
    0.00207067626528841, -0.0015161848659374837, -4.9246767934457295E-6,
    0.0047144512137947516, 0.0017884809057889287, -0.015136665580870333, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010417536353033212,
    7.7231779270040308E-5, 3.9043431633268714E-7, 0.0, -0.00012640159694068945,
    4.6849954954468127E-5, -0.00039756890175053893, 0.00206983613181119,
    0.0015388624403197394, 7.0936716057341977E-6, -0.0045837034086854992,
    0.0018286450604411118, -0.015232210269176915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001072287753367836, -7.7268389610159381E-5,
    -2.6693703914389786E-7, 0.0, 0.00012531184349172991, 4.570558793134934E-5,
    0.00040426366299855908, 0.0021277731766221868, -0.0015395096046877032,
    -4.7070151263153741E-6, 0.0045454579501885747, 0.001788552195101755,
    0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7, 0.0,
    -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010422287096660737, -7.60262465294606E-5, -2.7978839506221557E-7, 0.0,
    0.00013024602419296888, 4.5705305075394251E-5, -0.00039515692029936625,
    0.00207067626528841, -0.0015161848659374837, -4.9246767934457295E-6,
    0.0047144512137947516, 0.0017884809057889287, -0.015136665580870333, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010417536353033212,
    7.7231779270040308E-5, 3.9043431633268714E-7, 0.0, -0.00012640159694068945,
    4.6849954954468127E-5, -0.00039756890175053893, 0.00206983613181119,
    0.0015388624403197394, 7.0936716057341977E-6, -0.0045837034086854992,
    0.0018286450604411118, -0.015232210269176915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001072287753367836, -7.7268389610159381E-5,
    -2.6693703914389786E-7, 0.0, 0.00012531184349172991, 4.570558793134934E-5,
    0.00040426366299855908, 0.0021277731766221868, -0.0015395096046877032,
    -4.7070151263153741E-6, 0.0045454579501885747, 0.001788552195101755,
    0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7, 0.0,
    -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010422287096660737, -7.60262465294606E-5, -2.7978839506221557E-7, 0.0,
    0.00013024602419296888, 4.5705305075394251E-5, -0.00039515692029936625,
    0.00207067626528841, -0.0015161848659374837, -4.9246767934457295E-6,
    0.0047144512137947516, 0.0017884809057889287, -0.015136665580870333, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010417536353033212,
    7.7231779270040308E-5, 3.9043431633268714E-7, 0.0, -0.00012640159694068945,
    4.6849954954468127E-5, -0.00039756890175053893, 0.00206983613181119,
    0.0015388624403197394, 7.0936716057341977E-6, -0.0045837034086854992,
    0.0018286450604411118, -0.015232210269176915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001072287753367836, -7.7268389610159381E-5,
    -2.6693703914389786E-7, 0.0, 0.00012531184349172991, 4.570558793134934E-5,
    0.00040426366299855908, 0.0021277731766221868, -0.0015395096046877032,
    -4.7070151263153741E-6, 0.0045454579501885747, 0.001788552195101755,
    0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7, 0.0,
    -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010422287096660737, -7.60262465294606E-5, -2.7978839506221557E-7, 0.0,
    0.00013024602419296888, 4.5705305075394251E-5, -0.00039515692029936625,
    0.00207067626528841, -0.0015161848659374837, -4.9246767934457295E-6,
    0.0047144512137947516, 0.0017884809057889287, -0.015136665580870333, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010417536353033212,
    7.7231779270040308E-5, 3.9043431633268714E-7, 0.0, -0.00012640159694068945,
    4.6849954954468127E-5, -0.00039756890175053893, 0.00206983613181119,
    0.0015388624403197394, 7.0936716057341977E-6, -0.0045837034086854992,
    0.0018286450604411118, -0.015232210269176915, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001072287753367836, -7.7268389610159381E-5,
    -2.6693703914389786E-7, 0.0, 0.00012531184349172991, 4.570558793134934E-5,
    0.00040426366299855908, 0.0021277731766221868, -0.0015395096046877032,
    -4.7070151263153741E-6, 0.0045454579501885747, 0.001788552195101755,
    0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7, 0.0,
    -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T e[4851]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832851E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422, 0.0002323165737535551, 0.00085021850252945308,
    -7.4644574418929142E-5, -0.042372304854011958, 0.0024338870206531572,
    -1.8831321574108633, 0.0081315634991630855, 0.031843900678722045, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.50198667904036E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092531, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915886E-6, 1.8779150781494828E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639629E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.8015848024516326E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001157E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069353,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382193E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832851E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929142E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.50198667904036E-6, -2.7393041473633992E-5,
    0.0, 0.00022368763943092531, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231466, 0.056970805070725557, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.097712985648965592, -4.6687337187153013E-8, 4.698526643327685E-7, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.2468820665019064E-8,
    0.097719633191502883, 2.3215726369779438E-6, 0.0, -0.0008890798672821649,
    3.9634420482915886E-6, 1.8779150781494828E-5, -9.5621691177178581E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.2606274736508919E-7, 2.6894872029217156E-6, 0.097546159765407481,
    0.0, 0.00010755525579326925, -2.1621574234746445E-5, -2.1868160728403164E-7,
    1.3780352347645445E-5, 4.7263455001554586E-5, 0.95132850476213759,
    0.0038484242973110924, -0.0008333234816673673, -7.0205219328639629E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7585041171691393E-6,
    -0.00033347288340573563, 3.3122055023886013E-5, 0.0, 0.037320608448162429,
    5.6600484105171559E-5, 3.8015848024516326E-5, -3.1210978741585189E-5,
    -0.0063626044977050378, 0.0006178014929020413, 0.5225327707856211,
    0.0020692471467052189, 0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518416, 9.8370988499867457E-7,
    -4.7891849279322587E-6, 0.0, 4.0707966674953438E-5, 0.0464090538358248,
    2.4610229279834434E-5, 0.0030919673412285178, 1.7576703166230974E-5,
    -9.7029434768206214E-5, 0.0015099715156626865, 0.85302749794390476,
    0.0014260811666531243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.2854788857525911E-5, 9.4443848985596353E-6, -9.7712698035315807E-8, 0.0,
    3.7516049822001157E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069353, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382193E-7, 0.76714673440244707, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -4.6042543754832851E-6, -0.0022720436034725897,
    0.00013605399495041681, 0.0, 0.94789999991422, 0.0002323165737535551,
    0.00085021850252945308, -7.4644574418929142E-5, -0.042372304854011958,
    0.0024338870206531572, -1.8831321574108633, 0.0081315634991630855,
    0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0019975139621085112, 3.50198667904036E-6, -2.7393041473633992E-5, 0.0,
    0.00022368763943092531, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231466, 0.056970805070725557, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.097712985648965592, -4.6687337187153013E-8, 4.698526643327685E-7, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.2468820665019064E-8,
    0.097719633191502883, 2.3215726369779438E-6, 0.0, -0.0008890798672821649,
    3.9634420482915886E-6, 1.8779150781494828E-5, -9.5621691177178581E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.2606274736508919E-7, 2.6894872029217156E-6, 0.097546159765407481,
    0.0, 0.00010755525579326925, -2.1621574234746445E-5, -2.1868160728403164E-7,
    1.3780352347645445E-5, 4.7263455001554586E-5, 0.95132850476213759,
    0.0038484242973110924, -0.0008333234816673673, -7.0205219328639629E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7585041171691393E-6,
    -0.00033347288340573563, 3.3122055023886013E-5, 0.0, 0.037320608448162429,
    5.6600484105171559E-5, 3.8015848024516326E-5, -3.1210978741585189E-5,
    -0.0063626044977050378, 0.0006178014929020413, 0.5225327707856211,
    0.0020692471467052189, 0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518416, 9.8370988499867457E-7,
    -4.7891849279322587E-6, 0.0, 4.0707966674953438E-5, 0.0464090538358248,
    2.4610229279834434E-5, 0.0030919673412285178, 1.7576703166230974E-5,
    -9.7029434768206214E-5, 0.0015099715156626865, 0.85302749794390476,
    0.0014260811666531243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.2854788857525911E-5, 9.4443848985596353E-6, -9.7712698035315807E-8, 0.0,
    3.7516049822001157E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069353, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382193E-7, 0.76714673440244707, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -4.6042543754832851E-6, -0.0022720436034725897,
    0.00013605399495041681, 0.0, 0.94789999991422, 0.0002323165737535551,
    0.00085021850252945308, -7.4644574418929142E-5, -0.042372304854011958,
    0.0024338870206531572, -1.8831321574108633, 0.0081315634991630855,
    0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0019975139621085112, 3.50198667904036E-6, -2.7393041473633992E-5, 0.0,
    0.00022368763943092531, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231466, 0.056970805070725557, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.097712985648965592, -4.6687337187153013E-8, 4.698526643327685E-7, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.2468820665019064E-8,
    0.097719633191502883, 2.3215726369779438E-6, 0.0, -0.0008890798672821649,
    3.9634420482915886E-6, 1.8779150781494828E-5, -9.5621691177178581E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.2606274736508919E-7, 2.6894872029217156E-6, 0.097546159765407481,
    0.0, 0.00010755525579326925, -2.1621574234746445E-5, -2.1868160728403164E-7,
    1.3780352347645445E-5, 4.7263455001554586E-5, 0.95132850476213759,
    0.0038484242973110924, -0.0008333234816673673, -7.0205219328639629E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7585041171691393E-6,
    -0.00033347288340573563, 3.3122055023886013E-5, 0.0, 0.037320608448162429,
    5.6600484105171559E-5, 3.8015848024516326E-5, -3.1210978741585189E-5,
    -0.0063626044977050378, 0.0006178014929020413, 0.5225327707856211,
    0.0020692471467052189, 0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518416, 9.8370988499867457E-7,
    -4.7891849279322587E-6, 0.0, 4.0707966674953438E-5, 0.0464090538358248,
    2.4610229279834434E-5, 0.0030919673412285178, 1.7576703166230974E-5,
    -9.7029434768206214E-5, 0.0015099715156626865, 0.85302749794390476,
    0.0014260811666531243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.2854788857525911E-5, 9.4443848985596353E-6, -9.7712698035315807E-8, 0.0,
    3.7516049822001157E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069353, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382193E-7, 0.76714673440244707, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -4.6042543754832851E-6, -0.0022720436034725897,
    0.00013605399495041681, 0.0, 0.94789999991422, 0.0002323165737535551,
    0.00085021850252945308, -7.4644574418929142E-5, -0.042372304854011958,
    0.0024338870206531572, -1.8831321574108633, 0.0081315634991630855,
    0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0019975139621085112, 3.50198667904036E-6, -2.7393041473633992E-5, 0.0,
    0.00022368763943092531, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231466, 0.056970805070725557, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.097712985648965592, -4.6687337187153013E-8, 4.698526643327685E-7, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.2468820665019064E-8,
    0.097719633191502883, 2.3215726369779438E-6, 0.0, -0.0008890798672821649,
    3.9634420482915886E-6, 1.8779150781494828E-5, -9.5621691177178581E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.2606274736508919E-7, 2.6894872029217156E-6, 0.097546159765407481,
    0.0, 0.00010755525579326925, -2.1621574234746445E-5, -2.1868160728403164E-7,
    1.3780352347645445E-5, 4.7263455001554586E-5, 0.95132850476213759,
    0.0038484242973110924, -0.0008333234816673673, -7.0205219328639629E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7585041171691393E-6,
    -0.00033347288340573563, 3.3122055023886013E-5, 0.0, 0.037320608448162429,
    5.6600484105171559E-5, 3.8015848024516326E-5, -3.1210978741585189E-5,
    -0.0063626044977050378, 0.0006178014929020413, 0.5225327707856211,
    0.0020692471467052189, 0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518416, 9.8370988499867457E-7,
    -4.7891849279322587E-6, 0.0, 4.0707966674953438E-5, 0.0464090538358248,
    2.4610229279834434E-5, 0.0030919673412285178, 1.7576703166230974E-5,
    -9.7029434768206214E-5, 0.0015099715156626865, 0.85302749794390476,
    0.0014260811666531243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.2854788857525911E-5, 9.4443848985596353E-6, -9.7712698035315807E-8, 0.0,
    3.7516049822001157E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069353, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382193E-7, 0.76714673440244707, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -4.6042543754832851E-6, -0.0022720436034725897,
    0.00013605399495041681, 0.0, 0.94789999991422, 0.0002323165737535551,
    0.00085021850252945308, -7.4644574418929142E-5, -0.042372304854011958,
    0.0024338870206531572, -1.8831321574108633, 0.0081315634991630855,
    0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0019975139621085112, 3.50198667904036E-6, -2.7393041473633992E-5, 0.0,
    0.00022368763943092531, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231466, 0.056970805070725557, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.097712985648965592, -4.6687337187153013E-8, 4.698526643327685E-7, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.2468820665019064E-8,
    0.097719633191502883, 2.3215726369779438E-6, 0.0, -0.0008890798672821649,
    3.9634420482915886E-6, 1.8779150781494828E-5, -9.5621691177178581E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.2606274736508919E-7, 2.6894872029217156E-6, 0.097546159765407481,
    0.0, 0.00010755525579326925, -2.1621574234746445E-5, -2.1868160728403164E-7,
    1.3780352347645445E-5, 4.7263455001554586E-5, 0.95132850476213759,
    0.0038484242973110924, -0.0008333234816673673, -7.0205219328639629E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7585041171691393E-6,
    -0.00033347288340573563, 3.3122055023886013E-5, 0.0, 0.037320608448162429,
    5.6600484105171559E-5, 3.8015848024516326E-5, -3.1210978741585189E-5,
    -0.0063626044977050378, 0.0006178014929020413, 0.5225327707856211,
    0.0020692471467052189, 0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518416, 9.8370988499867457E-7,
    -4.7891849279322587E-6, 0.0, 4.0707966674953438E-5, 0.0464090538358248,
    2.4610229279834434E-5, 0.0030919673412285178, 1.7576703166230974E-5,
    -9.7029434768206214E-5, 0.0015099715156626865, 0.85302749794390476,
    0.0014260811666531243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.2854788857525911E-5, 9.4443848985596353E-6, -9.7712698035315807E-8, 0.0,
    3.7516049822001157E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069353, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382193E-7, 0.76714673440244707, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -4.6042543754832851E-6, -0.0022720436034725897,
    0.00013605399495041681, 0.0, 0.94789999991422, 0.0002323165737535551,
    0.00085021850252945308, -7.4644574418929142E-5, -0.042372304854011958,
    0.0024338870206531572, -1.8831321574108633, 0.0081315634991630855,
    0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0019975139621085112, 3.50198667904036E-6, -2.7393041473633992E-5, 0.0,
    0.00022368763943092531, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231466, 0.056970805070725557, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.097712985648965592, -4.6687337187153013E-8, 4.698526643327685E-7, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.2468820665019064E-8,
    0.097719633191502883, 2.3215726369779438E-6, 0.0, -0.0008890798672821649,
    3.9634420482915886E-6, 1.8779150781494828E-5, -9.5621691177178581E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.2606274736508919E-7, 2.6894872029217156E-6, 0.097546159765407481,
    0.0, 0.00010755525579326925, -2.1621574234746445E-5, -2.1868160728403164E-7,
    1.3780352347645445E-5, 4.7263455001554586E-5, 0.95132850476213759,
    0.0038484242973110924, -0.0008333234816673673, -7.0205219328639629E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7585041171691393E-6,
    -0.00033347288340573563, 3.3122055023886013E-5, 0.0, 0.037320608448162429,
    5.6600484105171559E-5, 3.8015848024516326E-5, -3.1210978741585189E-5,
    -0.0063626044977050378, 0.0006178014929020413, 0.5225327707856211,
    0.0020692471467052189, 0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518416, 9.8370988499867457E-7,
    -4.7891849279322587E-6, 0.0, 4.0707966674953438E-5, 0.0464090538358248,
    2.4610229279834434E-5, 0.0030919673412285178, 1.7576703166230974E-5,
    -9.7029434768206214E-5, 0.0015099715156626865, 0.85302749794390476,
    0.0014260811666531243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.2854788857525911E-5, 9.4443848985596353E-6, -9.7712698035315807E-8, 0.0,
    3.7516049822001157E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069353, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382193E-7, 0.76714673440244707, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -4.6042543754832851E-6, -0.0022720436034725897,
    0.00013605399495041681, 0.0, 0.94789999991422, 0.0002323165737535551,
    0.00085021850252945308, -7.4644574418929142E-5, -0.042372304854011958,
    0.0024338870206531572, -1.8831321574108633, 0.0081315634991630855,
    0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0019975139621085112, 3.50198667904036E-6, -2.7393041473633992E-5, 0.0,
    0.00022368763943092531, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231466, 0.056970805070725557, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.097712985648965592, -4.6687337187153013E-8, 4.698526643327685E-7, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.2468820665019064E-8,
    0.097719633191502883, 2.3215726369779438E-6, 0.0, -0.0008890798672821649,
    3.9634420482915886E-6, 1.8779150781494828E-5, -9.5621691177178581E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.2606274736508919E-7, 2.6894872029217156E-6, 0.097546159765407481,
    0.0, 0.00010755525579326925, -2.1621574234746445E-5, -2.1868160728403164E-7,
    1.3780352347645445E-5, 4.7263455001554586E-5, 0.95132850476213759,
    0.0038484242973110924, -0.0008333234816673673, -7.0205219328639629E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7585041171691393E-6,
    -0.00033347288340573563, 3.3122055023886013E-5, 0.0, 0.037320608448162429,
    5.6600484105171559E-5, 3.8015848024516326E-5, -3.1210978741585189E-5,
    -0.0063626044977050378, 0.0006178014929020413, 0.5225327707856211,
    0.0020692471467052189, 0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518416, 9.8370988499867457E-7,
    -4.7891849279322587E-6, 0.0, 4.0707966674953438E-5, 0.0464090538358248,
    2.4610229279834434E-5, 0.0030919673412285178, 1.7576703166230974E-5,
    -9.7029434768206214E-5, 0.0015099715156626865, 0.85302749794390476,
    0.0014260811666531243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.2854788857525911E-5, 9.4443848985596353E-6, -9.7712698035315807E-8, 0.0,
    3.7516049822001157E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069353, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382193E-7, 0.76714673440244707, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -4.6042543754832851E-6, -0.0022720436034725897,
    0.00013605399495041681, 0.0, 0.94789999991422, 0.0002323165737535551,
    0.00085021850252945308, -7.4644574418929142E-5, -0.042372304854011958,
    0.0024338870206531572, -1.8831321574108633, 0.0081315634991630855,
    0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0019975139621085112, 3.50198667904036E-6, -2.7393041473633992E-5, 0.0,
    0.00022368763943092531, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231466, 0.056970805070725557, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.097712985648965592, -4.6687337187153013E-8, 4.698526643327685E-7, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.2468820665019064E-8,
    0.097719633191502883, 2.3215726369779438E-6, 0.0, -0.0008890798672821649,
    3.9634420482915886E-6, 1.8779150781494828E-5, -9.5621691177178581E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.2606274736508919E-7, 2.6894872029217156E-6, 0.097546159765407481,
    0.0, 0.00010755525579326925, -2.1621574234746445E-5, -2.1868160728403164E-7,
    1.3780352347645445E-5, 4.7263455001554586E-5, 0.95132850476213759,
    0.0038484242973110924, -0.0008333234816673673, -7.0205219328639629E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7585041171691393E-6,
    -0.00033347288340573563, 3.3122055023886013E-5, 0.0, 0.037320608448162429,
    5.6600484105171559E-5, 3.8015848024516326E-5, -3.1210978741585189E-5,
    -0.0063626044977050378, 0.0006178014929020413, 0.5225327707856211,
    0.0020692471467052189, 0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518416, 9.8370988499867457E-7,
    -4.7891849279322587E-6, 0.0, 4.0707966674953438E-5, 0.0464090538358248,
    2.4610229279834434E-5, 0.0030919673412285178, 1.7576703166230974E-5,
    -9.7029434768206214E-5, 0.0015099715156626865, 0.85302749794390476,
    0.0014260811666531243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.2854788857525911E-5, 9.4443848985596353E-6, -9.7712698035315807E-8, 0.0,
    3.7516049822001157E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069353, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382193E-7, 0.76714673440244707, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -4.6042543754832851E-6, -0.0022720436034725897,
    0.00013605399495041681, 0.0, 0.94789999991422, 0.0002323165737535551,
    0.00085021850252945308, -7.4644574418929142E-5, -0.042372304854011958,
    0.0024338870206531572, -1.8831321574108633, 0.0081315634991630855,
    0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0019975139621085112, 3.50198667904036E-6, -2.7393041473633992E-5, 0.0,
    0.00022368763943092531, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231466, 0.056970805070725557, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.097712985648965592, -4.6687337187153013E-8, 4.698526643327685E-7, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.2468820665019064E-8,
    0.097719633191502883, 2.3215726369779438E-6, 0.0, -0.0008890798672821649,
    3.9634420482915886E-6, 1.8779150781494828E-5, -9.5621691177178581E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.2606274736508919E-7, 2.6894872029217156E-6, 0.097546159765407481,
    0.0, 0.00010755525579326925, -2.1621574234746445E-5, -2.1868160728403164E-7,
    1.3780352347645445E-5, 4.7263455001554586E-5, 0.95132850476213759,
    0.0038484242973110924, -0.0008333234816673673, -7.0205219328639629E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7585041171691393E-6,
    -0.00033347288340573563, 3.3122055023886013E-5, 0.0, 0.037320608448162429,
    5.6600484105171559E-5, 3.8015848024516326E-5, -3.1210978741585189E-5,
    -0.0063626044977050378, 0.0006178014929020413, 0.5225327707856211,
    0.0020692471467052189, 0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518416, 9.8370988499867457E-7,
    -4.7891849279322587E-6, 0.0, 4.0707966674953438E-5, 0.0464090538358248,
    2.4610229279834434E-5, 0.0030919673412285178, 1.7576703166230974E-5,
    -9.7029434768206214E-5, 0.0015099715156626865, 0.85302749794390476,
    0.0014260811666531243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.2854788857525911E-5, 9.4443848985596353E-6, -9.7712698035315807E-8, 0.0,
    3.7516049822001157E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069353, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382193E-7, 0.76714673440244707, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -4.6042543754832851E-6, -0.0022720436034725897,
    0.00013605399495041681, 0.0, 0.94789999991422, 0.0002323165737535551,
    0.00085021850252945308, -7.4644574418929142E-5, -0.042372304854011958,
    0.0024338870206531572, -1.8831321574108633, 0.0081315634991630855,
    0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0019975139621085112, 3.50198667904036E-6, -2.7393041473633992E-5, 0.0,
    0.00022368763943092531, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598253E-5, -0.00052789703364104388,
    0.0078377521590508176, -0.80137776286231466, 0.056970805070725557, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.097712985648965592, -4.6687337187153013E-8, 4.698526643327685E-7, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.2468820665019064E-8,
    0.097719633191502883, 2.3215726369779438E-6, 0.0, -0.0008890798672821649,
    3.9634420482915886E-6, 1.8779150781494828E-5, -9.5621691177178581E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.2606274736508919E-7, 2.6894872029217156E-6, 0.097546159765407481,
    0.0, 0.00010755525579326925, -2.1621574234746445E-5, -2.1868160728403164E-7,
    1.3780352347645445E-5, 4.7263455001554586E-5, 0.95132850476213759,
    0.0038484242973110924, -0.0008333234816673673, -7.0205219328639629E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.7585041171691393E-6,
    -0.00033347288340573563, 3.3122055023886013E-5, 0.0, 0.037320608448162429,
    5.6600484105171559E-5, 3.8015848024516326E-5, -3.1210978741585189E-5,
    -0.0063626044977050378, 0.0006178014929020413, 0.5225327707856211,
    0.0020692471467052189, 0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518416, 9.8370988499867457E-7,
    -4.7891849279322587E-6, 0.0, 4.0707966674953438E-5, 0.0464090538358248,
    2.4610229279834434E-5, 0.0030919673412285178, 1.7576703166230974E-5,
    -9.7029434768206214E-5, 0.0015099715156626865, 0.85302749794390476,
    0.0014260811666531243, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.2854788857525911E-5, 9.4443848985596353E-6, -9.7712698035315807E-8, 0.0,
    3.7516049822001157E-5, -2.1506383219102627E-9, 0.04392176650032184,
    -0.00043412487299914745, 0.00017734495634069353, -1.6549466756155211E-6,
    0.001284906265277134, -5.4203394113382193E-7, 0.76714673440244707, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T l_0[1280]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T n[640]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T g[630]{ 0.00010422287096660737, -7.60262465294606E-5,
    -2.7978839506221557E-7, 0.0, 0.00013024602419296888, 4.5705305075394251E-5,
    -0.00039515692029936625, 0.00207067626528841, -0.0015161848659374837,
    -4.9246767934457295E-6, 0.0047144512137947516, 0.0017884809057889287,
    -0.015136665580870333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010417536353033212, 7.7231779270040308E-5, 3.9043431633268714E-7, 0.0,
    -0.00012640159694068945, 4.6849954954468127E-5, -0.00039756890175053893,
    0.00206983613181119, 0.0015388624403197394, 7.0936716057341977E-6,
    -0.0045837034086854992, 0.0018286450604411118, -0.015232210269176915, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001072287753367836,
    -7.7268389610159381E-5, -2.6693703914389786E-7, 0.0, 0.00012531184349172991,
    4.570558793134934E-5, 0.00040426366299855908, 0.0021277731766221868,
    -0.0015395096046877032, -4.7070151263153741E-6, 0.0045454579501885747,
    0.001788552195101755, 0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7,
    0.0, -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T c_0[580]{ 0.00010422287096660738, -7.60262465294606E-5,
    -2.7978839506221573E-7, 0.000260492048385937, 9.1410610150788462E-5,
    -0.00079031384059873228, 0.0020706762652884106, -0.0015161848659374837,
    -4.9246767934457321E-6, 0.0047144512137947533, 0.0017884809057889283,
    -0.015136665580870332, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010417536353033206, 7.7231779270040281E-5, 3.9043431633268725E-7,
    -0.00025280319388137722, 9.36999099089363E-5, -0.00079513780350107764,
    0.0020698361318111885, 0.0015388624403197388, 7.0936716057342E-6,
    -0.0045837034086855, 0.0018286450604411127, -0.015232210269176909, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010722877533678366, -7.72683896101594E-5,
    -2.6693703914389791E-7, 0.0002506236869834583, 9.1411175862698708E-5,
    0.00080852732599711783, 0.0021277731766221881, -0.0015395096046877034,
    -4.7070151263153758E-6, 0.0045454579501885747, 0.0017885521951017554,
    0.015488629320465569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.59896361893415E-5, 4.032856722510049E-7,
    -0.00026267155528385592, 9.370047562084646E-5, 0.00080370336309477344,
    0.0021269330431449652, 0.0015155377015695199, 7.3113332728645549E-6,
    -0.0047526966722916788, 0.0018287163497539387, 0.015393084632159004, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6,
    -1.3816909168454246E-5, -0.000103383604388567, -0.0011049614826840457,
    0.00050356210516202453, 2.3158311080908376E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627943, -0.019969091635381547,
    0.00980213589487001, 3.9349807678455732E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.45923953411291E-6, 1.3674246354540061E-5,
    0.00010405449326463774, 0.0010935616702599184, 0.0005029427567630765,
    -2.0517780352474836E-6, -0.0001624993877145915, 0.00024291206297072056,
    0.0020665268130396638, 0.019769533879726159, 0.0098088728766578467,
    -2.8973871535883652E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065862E-6, 1.4401377334566511E-5, -0.00010698614121978928,
    0.0011517048551550385, -0.000512955406365266, -2.4109127152300577E-6,
    0.00016525729215282779, 0.00025570392622469755, -0.0021189752999033824,
    0.02081049977914216, -0.0099841160533174263, -4.0887653638265275E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.3015132161758412E-6,
    -1.4258714520652324E-5, 0.00010631525234371853, -0.0011403050427309111,
    -0.00049354945555983435, 2.1468596423867036E-6, 0.00015948934372563578,
    -0.00025324868038586784, 0.002106046793526513, -0.020610942023486768,
    -0.00962689271821042, 3.0511717495693182E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0 };

  static const real_T k[544]{ -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T f_0[441]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832851E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422, 0.0002323165737535551, 0.00085021850252945308,
    -7.4644574418929142E-5, -0.042372304854011958, 0.0024338870206531572,
    -1.8831321574108633, 0.0081315634991630855, 0.031843900678722045, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.50198667904036E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092531, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915886E-6, 1.8779150781494828E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639629E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.8015848024516326E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001157E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069353,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382193E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T b_0[400]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -2.302127187741643E-6, -0.0011360218017362948,
    6.8026997475208417E-5, 0.94789999991421969, 0.00023231657375355513,
    0.00085021850252945308, -3.7322287209464571E-5, -0.021186152427005972,
    0.0012169435103265786, -0.94156607870543163, 0.0040657817495815428,
    0.015921950339361023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00099875698105425514, 1.7509933395201809E-6, -1.3696520736817E-5,
    0.00022368763943092593, 0.97943363183036425, 0.0014929610497083706,
    0.019593212568943443, 2.830735007229914E-5, -0.000263948516820522,
    0.0039188760795254079, -0.40068888143115738, 0.028485402535362768, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.097712985648965592,
    -4.6687337187153066E-8, 4.6985266433276861E-7, -7.5645777505609488E-6,
    0.00070578462970000567, -6.8378279067968185E-5, 0.95461902809957677,
    -7.110042269450259E-7, 8.9811567385581143E-6, -0.00013126902944982953,
    0.013640927712662433, -0.0012950988615465715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -6.2468820665019064E-8, 0.097719633191502883,
    2.3215726369779446E-6, -0.0017781597345643274, 7.9268840965831756E-6,
    3.7558301562989656E-5, -9.56216911771786E-7, 0.95478880828256985,
    4.1141673422749067E-5, -0.0318401126387842, 0.0001373722495739874,
    0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    7.260627473650893E-7, 2.6894872029217169E-6, 0.097546159765407481,
    0.00021511051158653813, -4.3243148469492891E-5, -4.37363214568064E-7,
    1.3780352347645447E-5, 4.7263455001554613E-5, 0.95132850476213759,
    0.0038484242973110933, -0.0008333234816673673, -7.0205219328639765E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.75850411716914E-6,
    -0.00033347288340573563, 3.3122055023886034E-5, 0.074641216896324913,
    0.0001132009682103431, 7.6031696049032638E-5, -3.12109787415852E-5,
    -0.0063626044977050378, 0.00061780149290204163, 0.522532770785621,
    0.0020692471467052185, 0.0015825196049838544, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518413, 9.83709884998675E-7, -4.78918492793226E-6,
    8.141593334990632E-5, 0.0928181076716496, 4.9220458559668867E-5,
    0.0030919673412285174, 1.7576703166230984E-5, -9.7029434768206255E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525914E-5, 9.4443848985596387E-6,
    -9.7712698035315847E-8, 7.50320996440025E-5, -4.3012766438204923E-9,
    0.087843533000643667, -0.00043412487299914756, 0.00017734495634069358,
    -1.6549466756155219E-6, 0.0012849062652771337, -5.4203394113382162E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T l[390]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T h_0[289]{ 3.6785629627420082, 2.797544798095382,
    -2.360635762793919, -2.6816539274405464, -0.053892325349211963,
    0.40043778568385469, 0.060027034522193226, -0.406572494856835,
    2.8971333859846364, 2.2742718717973, -1.9283491687806742,
    -2.1912106829680127, -0.055078176367865522, 0.350735464197205,
    0.06071643500716075, -0.35637372283649954, 0.0, 2.797544798095382,
    3.7339601732958991, -2.7368939938731685, -2.3604786186726541,
    0.43115186802877542, -0.081493831866778915, -0.44487520504439088,
    0.095217168882393746, 2.2753212852502038, 2.9413112313056757,
    -2.2351651004592434, -1.9291751544037736, 0.37143676461703773,
    -0.072715055780217933, -0.38334700486944595, 0.084625296032625516, 0.0,
    -2.360635762793919, -2.7368939938731685, 3.8506234600571885,
    2.9143652289779411, -0.025355625351294941, 0.49227335067991085,
    0.031706284816897662, -0.49862401014551272, -1.9311237766359393,
    -2.2368686502490913, 3.0350226685975468, 2.3692777949843973,
    -0.035565137930782087, 0.41225219536456115, 0.041338304677436044,
    -0.41802536211121433, 0.0, -2.6816539274405464, -2.3604786186726545,
    2.9143652289779411, 3.7955405377458362, 0.45968856802669239,
    0.01034173312927756, -0.47319595474968645, 0.0031656535937159983,
    -2.192935877370374, -1.9298292907407177, 2.3682067369189794,
    2.9913133235486384, 0.39094980305412114, -0.011198324612861577,
    -0.40272513519917064, 0.022973656757910584, 0.0, -0.053892325349211991,
    0.43115186802877536, -0.025355625351294944, 0.45968856802669239,
    2.9102323671294519, -0.12177412168469348, -1.9259520929050857,
    -0.21250615253967475, -0.05696796876070654, 0.369523149922694,
    -0.032605190030641079, 0.39388592865275951, 2.2843936670166873,
    -0.14163710235290972, -1.6667169313626395, -0.11603963330114005, 0.0,
    0.40043778568385463, -0.0814938318667789, 0.49227335067991085,
    0.010341733129277549, -0.12177412168469355, 2.9343641246751586,
    -0.25132796595197826, -1.9112620370384839, 0.3441566174766067,
    -0.079258138445453138, 0.41998598469063653, -0.0034287712314230575,
    -0.1415241005558853, 2.3026751565602721, -0.14869917495609103,
    -1.6524518810482924, 0.0, 0.060027034522193219, -0.44487520504439082,
    0.031706284816897676, -0.4731959547496864, -1.9259520929050855,
    -0.25132796595197832, 3.0328093435723584, -0.20552928471529369,
    0.062552070319612713, -0.38138592600686588, 0.038343895463891754,
    -0.40559410086258679, -1.6664266600293993, -0.1487111378951059,
    2.3909759055225104, -0.21583810759800356, 0.0, -0.40657249485683494,
    0.095217168882393746, -0.49862401014551272, 0.0031656535937160126,
    -0.21250615253967478, -1.9112620370384841, -0.20552928471529355,
    2.9792974742934479, -0.34974071903551213, 0.091120914529624328,
    -0.42572469012388647, 0.01513694344124991, -0.11644290643140454,
    -1.6523269163122538, -0.21555979920377841, 2.3443296219474328, 0.0,
    2.8971333859846364, 2.2753212852502038, -1.9311237766359393,
    -2.192935877370374, -0.056967968760706512, 0.3441566174766067,
    0.0625520703196127, -0.34974071903551213, 2.5971537146504966,
    1.8602960000071345, -1.5862612220399466, -1.8031189366833105,
    -0.05795865053017879, 0.305198349360844, 0.0631616077951804,
    -0.31040130662584481, 0.0, 2.2742718717973, 2.9413112313056757,
    -2.2368686502490913, -1.9298292907407177, 0.36952314992269408,
    -0.079258138445453125, -0.38138592600686588, 0.091120914529624356,
    1.8602960000071345, 2.6325142306842615, -1.8381852654933684,
    -1.5859670348162436, 0.32233737058472234, -0.072064282254152,
    -0.33277246551655815, 0.082499377185987363, 0.0, -1.9283491687806742,
    -2.2351651004592434, 3.0350226685975468, 2.3682067369189794,
    -0.032605190030641079, 0.41998598469063647, 0.038343895463891754,
    -0.42572469012388642, -1.5862612220399466, -1.8381852654933686,
    2.7081324796851236, 1.9362084362317031, -0.041088724261266071,
    0.35606360493576572, 0.046381350891048535, -0.36135623156554753, 0.0,
    -2.1912106829680127, -1.9291751544037734, 2.3692777949843968,
    2.9913133235486384, 0.39388592865275951, -0.0034287712314230493,
    -0.40559410086258674, 0.015136943441249903, -1.8031189366833102,
    -1.5859670348162438, 1.9362084362317031, 2.6733603380987718,
    0.33920729685363504, -0.021199026679230005, -0.34955272242069,
    0.03154445224628457, 0.0, -0.055078176367865529, 0.37143676461703773,
    -0.035565137930782087, 0.39094980305412114, 2.2843936670166873,
    -0.14152410055588521, -1.6664266600293993, -0.11644290643140447,
    -0.057958650530178804, 0.32233737058472228, -0.041088724261266071,
    0.33920729685363504, 2.2682533071174076, -0.15937544841072734,
    -1.459376818059942, -0.039501040646739954, 0.0, 0.350735464197205,
    -0.072715055780217933, 0.4122521953645612, -0.011198324612861604,
    -0.14163710235290972, 2.3026751565602721, -0.14871113789510584,
    -1.6523269163122538, 0.30519834936084395, -0.072064282254151985,
    0.35606360493576572, -0.021199026679230019, -0.15937544841072743,
    2.2818594870961038, -0.0668833905694826, -1.445600648115891, 0.0,
    0.060716435007160757, -0.38334700486944595, 0.041338304677436058,
    -0.40272513519917064, -1.6667169313626395, -0.14869917495609108,
    2.3909759055225104, -0.21555979920377855, 0.0631616077951804,
    -0.33277246551655815, 0.046381350891048563, -0.34955272242069,
    -1.459376818059942, -0.066883390569482642, 2.3621511271093807,
    -0.22589091847995488, 0.0, -0.35637372283649954, 0.084625296032625516,
    -0.41802536211121438, 0.0229736567579106, -0.11603963330114009,
    -1.6524518810482924, -0.21583810759800365, 2.3443296219474328,
    -0.31040130662584481, 0.082499377185987349, -0.36135623156554753,
    0.031544452246284584, -0.039501040646739968, -1.4456006481158912,
    -0.22589091847995482, 2.3209926072425828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100000.0 };

  static const real_T h_1[289]{ 5.8556870538643846, 4.9045923918478893,
    -4.4483877715029569, -4.8394824335194571, -0.093672994973311746,
    0.71401902628357572, 0.10440523604099879, -0.72475126735126272,
    4.6757536858875239, 3.9891680478726794, -3.6256186525823781,
    -3.952204290597225, -0.095958127053169848, 0.62724293910676465,
    0.1058635920178657, -0.63714840407146056, 0.0, 4.9045923918478893,
    5.9527731602971956, -4.9362650411096896, -4.4480842726603864,
    0.76867651823185867, -0.14281204770496386, -0.79276468068091233,
    0.16690021015401815, 3.9909864658681053, 4.7531642538206524,
    -4.0291964460386112, -3.6270186580860675, 0.66408826950116051,
    -0.12735552420542445, -0.68508177450749586, 0.14834902921176, 0.0,
    -4.4483877715029578, -4.9362650411096896, 6.1549704745407228,
    5.1070932049339941, -0.042902531414779073, 0.87732110269573049,
    0.054021337881904011, -0.88843990916285531, -3.6303640595091742,
    -4.0320823750055883, 4.9155645668917218, 4.1538462513953105,
    -0.061227028361851031, 0.73666152124072948, 0.0713742247779489,
    -0.746808717656827, 0.0, -4.8394824335194562, -4.4480842726603864,
    5.1070932049339941, 6.0584913657930688, 0.81944698179039122,
    0.020490028707190824, -0.84314857884000738, 0.0032115683424258144,
    -3.9551312795285956, -3.6280861690576183, 4.15198677343549,
    4.839031883906471, 0.69881936819247925, -0.017936942071459978,
    -0.71957114174741255, 0.03868871562639363, 0.0, -0.093672994973311732,
    0.76867651823185856, -0.042902531414779094, 0.81944698179039122,
    4.6261201024650713, -0.064015102173636582, -3.5772584393024736,
    -0.22484656098895997, -0.0996287224150228, 0.65843865659265255,
    -0.056285821083380948, 0.70178155792429431, 3.6616501886064512,
    -0.13196855221683543, -3.0837188294909748, -0.085962806898638486, 0.0,
    0.71401902628357572, -0.14281204770496383, 0.87732110269573049,
    0.020490028707190789, -0.0640151021736367, 4.6679550541984209,
    -0.29279232062004806, -3.5511476314047337, 0.61329394271132542,
    -0.1393179912718579, 0.74813029020301824, -0.0044816437801652991,
    -0.13181174826945244, 3.6932772217467287, -0.1431464018669632,
    -3.0583190716103119, 0.0, 0.10440523604099881, -0.79276468068091233,
    0.054021337881904039, -0.84314857884000738, -3.5772584393024731,
    -0.29279232062004806, 4.8410177954875664, -0.21096703556504659,
    0.10939037647868211, -0.67923861365439975, 0.066325398824221324,
    -0.72230359130886035, -3.0829945005080175, -0.1433325198357478,
    3.84859542082509, -0.2622684004813266, 0.0, -0.72475126735126272,
    0.16690021015401815, -0.88843990916285542, 0.0032115683424258348,
    -0.22484656098896008, -3.5511476314047337, -0.21096703556504651,
    4.7469612279587388, -0.62305559677498457, 0.16011794833360538,
    -0.75816986794385854, 0.025003677164731713, -0.086843939828979089,
    -3.0579761496941442, -0.26173018946715315, 3.7665502789902749, 0.0,
    4.6757536858875248, 3.9909864658681053, -3.6303640595091742,
    -3.9551312795285956, -0.0996287224150228, 0.61329394271132542,
    0.10939037647868211, -0.62305559677498445, 4.0594311272783505,
    3.2646251538676179, -2.9754473336461267, -3.2502533070568624,
    -0.10150365632662932, 0.54535456578540387, 0.11063708934574755,
    -0.554487998804522, 0.0, 3.9891680478726794, 4.7531642538206524,
    -4.0320823750055883, -3.6280861690576183, 0.65843865659265266,
    -0.1393179912718579, -0.67923861365439975, 0.16011794833360538,
    3.2646251538676179, 4.1213804723544012, -3.3116591305613419,
    -2.9749038120745603, 0.57586256029318239, -0.12662049174184317,
    -0.59423484745766286, 0.14499277890632392, 0.0, -3.6256186525823781,
    -4.0291964460386112, 4.9155645668917218, 4.15198677343549,
    -0.056285821083380934, 0.74813029020301813, 0.066325398824221324,
    -0.75816986794385843, -2.9754473336461271, -3.3116591305613419,
    4.2524122345363242, 3.3962004376211117, -0.071478537221611,
    0.63582571364006879, 0.080773647427405351, -0.64512082384586311, 0.0,
    -3.952204290597225, -3.6270186580860675, 4.15384625139531, 4.839031883906471,
    0.70178155792429431, -0.0044816437801652991, -0.72230359130886035,
    0.0250036771647317, -3.250253307056862, -2.9749038120745603,
    3.3962004376211117, 4.191549932603416, 0.60588767939820054,
    -0.036149343887178345, -0.62409828937600509, 0.054359953864983136, 0.0,
    -0.0959581270531698, 0.66408826950116051, -0.061227028361851059,
    0.69881936819247925, 3.6616501886064512, -0.13181174826945233,
    -3.0829945005080175, -0.086843939828979144, -0.10150365632662929,
    0.57586256029318228, -0.07147853722161103, 0.60588767939820054,
    3.5736609949434506, -0.18876111112923633, -2.6896504716590912,
    0.024750587844878137, 0.0, 0.62724293910676465, -0.12735552420542443,
    0.73666152124072937, -0.017936942071459985, -0.13196855221683532,
    3.6932772217467287, -0.14333251983574788, -3.0579761496941442,
    0.54535456578540387, -0.12662049174184314, 0.63582571364006879,
    -0.036149343887178352, -0.18876111112923641, 3.5971310170990396,
    -0.023206619399951695, -2.66516328656985, 0.0, 0.10586359201786572,
    -0.68508177450749586, 0.071374224777948872, -0.71957114174741255,
    -3.0837188294909748, -0.14314640186696323, 3.84859542082509,
    -0.2617301894671531, 0.11063708934574756, -0.59423484745766286,
    0.080773647427405379, -0.62409828937600509, -2.6896504716590912,
    -0.023206619399951729, 3.7384579061832683, -0.30560081512422727, 0.0,
    -0.63714840407146056, 0.14834902921175996, -0.74680871765682721,
    0.038688715626393658, -0.085962806898638541, -3.0583190716103119,
    -0.26226840048132644, 3.7665502789902749, -0.554487998804522,
    0.14499277890632392, -0.64512082384586311, 0.054359953864983164,
    0.024750587844878102, -2.66516328656985, -0.30560081512422721,
    3.6660135138491974, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100000.0 };

  static const real_T g_0[256]{ -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T tmp_3[90]{ 10.0, 11.0, 19.0, 30.0, 30.0, 0.0, 30.0, 30.0,
    0.0, 30.0, 30.0, 0.0, 45.0, 45.0, 0.0, 45.0, 45.0, 0.0, 45.0, 45.0, 0.0,
    45.0, 45.0, 0.0, 0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 0.0,
    20.0, 0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2,
    0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2, 0.2,
    0.2, 0.4, 0.4, 0.1, 0.4, 0.4, 0.1, 0.4, 0.4, 0.1, 0.4, 0.4, 0.1, 0.5, 0.5,
    0.3, 0.5, 0.5, 0.3, 0.5, 0.5, 0.3, 0.5, 0.5, 0.3 };

  static const real_T b_b[48]{ 0.02112443491058583, -0.015284356933675681,
    -7.0837403672252132E-5, 0.062952228101239543, 0.019032522297668639,
    -0.17235611708486639, 0.021112545591001931, 0.01555652319878203,
    9.3712054745178266E-5, -0.060884483374622281, 0.01961380565091311,
    -0.17335012146094611, 0.021790267284400529, -0.01556568704794139,
    -6.7363334491227155E-5, 0.060331047065513788, 0.019031465986279989,
    0.17628138981294919, 0.02177837796481662, 0.015275193084516331,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.1752873854368695, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193449,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.000647305851320949 };

  static const real_T c_b[48]{ 0.02112443491058583, -0.015284356933675683,
    -7.0837403672252146E-5, 0.062952228101239543, 0.019032522297668636,
    -0.17235611708486639, 0.021112545591001931, 0.015556523198782039,
    9.3712054745178266E-5, -0.060884483374622281, 0.019613805650913103,
    -0.17335012146094617, 0.021790267284400529, -0.015565687047941387,
    -6.7363334491227168E-5, 0.060331047065513795, 0.019031465986279986,
    0.17628138981294922, 0.021778377964816624, 0.015275193084516326,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.17528738543686956, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193441,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.00064730585132094889 };

  static const real_T f_1[21]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T f_2[20]{ 0.0, 0.0, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T tmp_0[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0, 45.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T l_1[12]{ 900.0, 900.0, 900.0, 900.0, 900.0, 900.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T n_0[8]{ 0.16000000000000003, 0.16000000000000003,
    0.16000000000000003, 0.16000000000000003, 0.36, 0.36, 0.36, 0.36 };

  static const real_T tmp_1[8]{ 0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5 };

  static const real_T theta[5]{ 0.01495585217958292, 0.253939833006323,
    0.95041789961629319, 2.097847961257068, 5.3719203511481517 };

  static const int32_T b_Mrows[32]{ 261, 262, 263, 264, 265, 266, 267, 268, 269,
    270, 271, 272, 273, 274, 275, 276, 341, 342, 343, 344, 345, 346, 347, 348,
    349, 350, 351, 352, 353, 354, 355, 356 };

  static const int32_T b_Mrows_0[32]{ 241, 242, 243, 244, 245, 246, 247, 248,
    249, 250, 251, 252, 253, 254, 255, 256, 321, 322, 323, 324, 325, 326, 327,
    328, 329, 330, 331, 332, 333, 334, 335, 336 };

  static const int8_T b_D[4290]{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T d[3003]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T a[1280]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

  static const int8_T h[273]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T d_0[240]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T c[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T tmp_4[144]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T e_0[32]{ 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
    40, 40, 40, 40, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
    30 };

  static const int8_T b[9]{ 2, 9, 3, 4, 5, 6, 10, 11, 12 };

  static const int8_T tmp_2[7]{ 0, 0, 0, 1, 0, 0, 0 };

  static const uint8_T f[5]{ 3U, 5U, 7U, 9U, 13U };

  SL_Bus_proc_control_node_std_msgs_Bool BusAssignment;
  SL_Bus_proc_control_node_std_msgs_Bool b_varargout_2_0;
  SL_Bus_proc_control_node_std_msgs_Bool rtb_BusAssignment1;
  SL_Bus_proc_control_node_std_msgs_Bool rtb_BusAssignment2;
  SL_Bus_proc_control_node_std_msgs_Int8 rtb_BusAssignment;
  SL_Bus_proc_control_node_std_msgs_UInt8 b_varargout_2;
  char_T expl_temp[3];
  int8_T rtAction;
  boolean_T corr[3];
  boolean_T b_varargout_1;
  boolean_T b_varargout_1_2;
  boolean_T exitg1;
  boolean_T rtb_Compare_h;
  boolean_T rtb_Merge_h;
  boolean_T rtb_NewDvlMsg;
  if (rtmIsMajorTimeStep((&proc_control_node_M))) {
    // set solver stop time
    if (!((&proc_control_node_M)->Timing.clockTick0+1)) {
      rtsiSetSolverStopTime(&(&proc_control_node_M)->solverInfo,
                            (((&proc_control_node_M)->Timing.clockTickH0 + 1) *
        (&proc_control_node_M)->Timing.stepSize0 * 4294967296.0));
    } else {
      rtsiSetSolverStopTime(&(&proc_control_node_M)->solverInfo,
                            (((&proc_control_node_M)->Timing.clockTick0 + 1) * (
        &proc_control_node_M)->Timing.stepSize0 + (&proc_control_node_M)
        ->Timing.clockTickH0 * (&proc_control_node_M)->Timing.stepSize0 *
        4294967296.0));
    }
  }                                    // end MajorTimeStep

  // Update absolute time of base rate at minor time step
  if (rtmIsMinorTimeStep((&proc_control_node_M))) {
    (&proc_control_node_M)->Timing.t[0] = rtsiGetT(&(&proc_control_node_M)
      ->solverInfo);
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    boolean_T b_varargout_1_0;
    boolean_T b_varargout_1_1;
    boolean_T b_varargout_1_3;

    // Outputs for Atomic SubSystem: '<Root>/Subsystem1'
    // Outputs for Atomic SubSystem: '<S10>/Subscribe2'
    // MATLABSystem: '<S401>/SourceBlock' incorporates:
    //   Inport: '<S407>/In1'

    rtb_Compare_h = Sub_proc_control_node_185_13.getLatestMessage(&b_varargout_2);

    // Outputs for Enabled SubSystem: '<S401>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S407>/Enable'

    if (rtb_Compare_h) {
      proc_control_node_B.In1_i2 = b_varargout_2;
    }

    // End of Outputs for SubSystem: '<S401>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe2'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe3'
    // MATLABSystem: '<S402>/SourceBlock'
    b_varargout_1 = Sub_proc_control_node_185_14.getLatestMessage
      (&b_varargout_2_0);

    // End of Outputs for SubSystem: '<S10>/Subscribe3'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe1'
    // MATLABSystem: '<S400>/SourceBlock' incorporates:
    //   Inport: '<S406>/In1'

    b_varargout_1_0 = Sub_proc_control_node_185_12.getLatestMessage
      (&b_varargout_2_0);

    // Outputs for Enabled SubSystem: '<S400>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S406>/Enable'

    if (b_varargout_1_0) {
      proc_control_node_B.In1_cx = b_varargout_2_0;
    }

    // End of Outputs for SubSystem: '<S400>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S10>/startSim'
    // MATLABSystem: '<S405>/SourceBlock' incorporates:
    //   Inport: '<S411>/In1'

    b_varargout_1_1 = Sub_proc_control_node_185_11.getLatestMessage
      (&proc_control_node_B.b_varargout_2_f);

    // Outputs for Enabled SubSystem: '<S405>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S411>/Enable'

    if (b_varargout_1_1) {
      proc_control_node_B.In1_n = proc_control_node_B.b_varargout_2_f;
    }

    // End of Outputs for SubSystem: '<S405>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/startSim'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe5'
    // MATLABSystem: '<S404>/SourceBlock' incorporates:
    //   Inport: '<S410>/In1'

    b_varargout_1_2 = Sub_proc_control_node_185_270.getLatestMessage
      (&b_varargout_2_0);

    // Outputs for Enabled SubSystem: '<S404>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S410>/Enable'

    if (b_varargout_1_2) {
      proc_control_node_B.In1_f1 = b_varargout_2_0;
    }

    // End of Outputs for SubSystem: '<S404>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe5'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe4'
    // MATLABSystem: '<S403>/SourceBlock'
    b_varargout_1_3 = Sub_proc_control_node_185_268.getLatestMessage
      (&b_varargout_2_0);

    // End of Outputs for SubSystem: '<S10>/Subscribe4'

    // MATLABSystem: '<S10>/MATLAB System' incorporates:
    //   MATLABSystem: '<S400>/SourceBlock'
    //   MATLABSystem: '<S401>/SourceBlock'
    //   MATLABSystem: '<S402>/SourceBlock'
    //   MATLABSystem: '<S404>/SourceBlock'
    //   MATLABSystem: '<S405>/SourceBlock'
    //   SignalConversion generated from: '<S10>/MATLAB System'

    if (proc_control_node_DW.obj_mv.initial_mode !=
        proc_control_node_P.mode.init) {
      proc_control_node_DW.obj_mv.initial_mode = proc_control_node_P.mode.init;
    }

    // Outputs for Atomic SubSystem: '<S10>/Subscribe5'
    //         %% Fonction qui détermine si on est mode dry_run
    if (b_varargout_1_2) {
      proc_control_node_DW.obj_mv.m_notDryRun = !proc_control_node_B.In1_f1.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe5'

    // Outputs for Atomic SubSystem: '<S10>/startSim'
    //          %% Fonction qui détermine la condition initial
    if (b_varargout_1_1) {
      proc_control_node_DW.obj_mv.m_simulation = 1.0;

      //  activer la simulation
      proc_control_node_DW.obj_mv.m_initCond[0] =
        proc_control_node_B.In1_n.Position.X;
      proc_control_node_DW.obj_mv.m_initCond[1] =
        proc_control_node_B.In1_n.Position.Y;
      proc_control_node_DW.obj_mv.m_initCond[2] =
        proc_control_node_B.In1_n.Position.Z;

      //         %% Fonction qui vérifie si le quaternion est unitaire
      proc_control_node_B.scale = 3.3121686421112381E-170;
      proc_control_node_B.absxk = std::abs
        (proc_control_node_B.In1_n.Orientation.W);
      if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
        proc_control_node_B.d = 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          3.3121686421112381E-170;
        proc_control_node_B.d = proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.absxk = std::abs
        (proc_control_node_B.In1_n.Orientation.X);
      if (proc_control_node_B.absxk > proc_control_node_B.scale) {
        proc_control_node_B.t = proc_control_node_B.scale /
          proc_control_node_B.absxk;
        proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
          proc_control_node_B.t + 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          proc_control_node_B.scale;
        proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.absxk = std::abs
        (proc_control_node_B.In1_n.Orientation.Y);
      if (proc_control_node_B.absxk > proc_control_node_B.scale) {
        proc_control_node_B.t = proc_control_node_B.scale /
          proc_control_node_B.absxk;
        proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
          proc_control_node_B.t + 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          proc_control_node_B.scale;
        proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.absxk = std::abs
        (proc_control_node_B.In1_n.Orientation.Z);
      if (proc_control_node_B.absxk > proc_control_node_B.scale) {
        proc_control_node_B.t = proc_control_node_B.scale /
          proc_control_node_B.absxk;
        proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
          proc_control_node_B.t + 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          proc_control_node_B.scale;
        proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.d = proc_control_node_B.scale * std::sqrt
        (proc_control_node_B.d);
      proc_control_node_B.rtb_sincos_o2_idx_2 =
        proc_control_node_B.In1_n.Orientation.W / proc_control_node_B.d;
      proc_control_node_B.b_ja[0] = std::isnan
        (proc_control_node_B.rtb_sincos_o2_idx_2);
      proc_control_node_B.n[0] = proc_control_node_B.rtb_sincos_o2_idx_2;
      proc_control_node_B.rtb_sincos_o2_idx_2 =
        proc_control_node_B.In1_n.Orientation.X / proc_control_node_B.d;
      proc_control_node_B.b_ja[1] = std::isnan
        (proc_control_node_B.rtb_sincos_o2_idx_2);
      proc_control_node_B.n[1] = proc_control_node_B.rtb_sincos_o2_idx_2;
      proc_control_node_B.rtb_sincos_o2_idx_2 =
        proc_control_node_B.In1_n.Orientation.Y / proc_control_node_B.d;
      proc_control_node_B.b_ja[2] = std::isnan
        (proc_control_node_B.rtb_sincos_o2_idx_2);
      proc_control_node_B.n[2] = proc_control_node_B.rtb_sincos_o2_idx_2;
      proc_control_node_B.rtb_sincos_o2_idx_2 =
        proc_control_node_B.In1_n.Orientation.Z / proc_control_node_B.d;
      proc_control_node_B.b_ja[3] = std::isnan
        (proc_control_node_B.rtb_sincos_o2_idx_2);
      b_varargout_1_2 = true;
      proc_control_node_B.ibmat = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.ibmat < 4)) {
        if (!proc_control_node_B.b_ja[proc_control_node_B.ibmat]) {
          b_varargout_1_2 = false;
          exitg1 = true;
        } else {
          proc_control_node_B.ibmat++;
        }
      }

      if (b_varargout_1_2) {
        proc_control_node_DW.obj_mv.m_initCond[3] = 1.0;
        proc_control_node_DW.obj_mv.m_initCond[4] = 0.0;
        proc_control_node_DW.obj_mv.m_initCond[5] = 0.0;
        proc_control_node_DW.obj_mv.m_initCond[6] = 0.0;
      } else {
        proc_control_node_DW.obj_mv.m_initCond[3] = proc_control_node_B.n[0];
        proc_control_node_DW.obj_mv.m_initCond[4] = proc_control_node_B.n[1];
        proc_control_node_DW.obj_mv.m_initCond[5] = proc_control_node_B.n[2];
        proc_control_node_DW.obj_mv.m_initCond[6] =
          proc_control_node_B.rtb_sincos_o2_idx_2;
      }
    }

    // End of Outputs for SubSystem: '<S10>/startSim'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe1'
    //         %% Fonction qui détermine le mode
    //          %% Fonction qui détermine l'arret d'urgence
    if (b_varargout_1_0) {
      proc_control_node_DW.obj_mv.m_killStatus =
        !proc_control_node_B.In1_cx.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe2'
    //  regarder l'états de la kill
    if (rtb_Compare_h && (!(proc_control_node_DW.obj_mv.m_killStatus != 0.0)) &&
        (proc_control_node_DW.Delay_DSTATE_e != 0.0)) {
      proc_control_node_DW.obj_mv.m_mode = proc_control_node_B.In1_i2.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe2'
    if ((proc_control_node_DW.obj_mv.m_killStatus != 0.0) ||
        (!(proc_control_node_DW.obj_mv.m_notDryRun != 0.0))) {
      proc_control_node_DW.obj_mv.m_mode = 0.0;
    }

    // Outputs for Atomic SubSystem: '<S10>/Subscribe3'
    //          %% Fonction qui détermine si on reset
    if (b_varargout_1 || b_varargout_1_1) {
      proc_control_node_DW.obj_mv.m_reset = 1.0;
    } else {
      proc_control_node_DW.obj_mv.m_reset = 0.0;
    }

    //          %% Fonction qui détermine si on clear la trajectoire
    if (b_varargout_1 || b_varargout_1_1 || rtb_Compare_h || b_varargout_1_3) {
      proc_control_node_DW.obj_mv.m_trajClear = 1.0;
    } else {
      proc_control_node_DW.obj_mv.m_trajClear = 0.0;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe3'

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o1[0] =
      proc_control_node_DW.obj_mv.m_initCond[3];
    proc_control_node_B.MATLABSystem_o1[1] =
      proc_control_node_DW.obj_mv.m_initCond[4];
    proc_control_node_B.MATLABSystem_o1[2] =
      proc_control_node_DW.obj_mv.m_initCond[5];
    proc_control_node_B.MATLABSystem_o1[3] =
      proc_control_node_DW.obj_mv.m_initCond[6];

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o2[0] =
      proc_control_node_DW.obj_mv.m_initCond[0];
    proc_control_node_B.MATLABSystem_o2[1] =
      proc_control_node_DW.obj_mv.m_initCond[1];
    proc_control_node_B.MATLABSystem_o2[2] =
      proc_control_node_DW.obj_mv.m_initCond[2];

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o3 =
      proc_control_node_DW.obj_mv.m_simulation;

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o4 = proc_control_node_DW.obj_mv.m_reset;

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o6 =
      proc_control_node_DW.obj_mv.m_trajClear;
    proc_control_node_B.MATLABSystem_o7 =
      proc_control_node_DW.obj_mv.m_notDryRun;

    // DataTypeConversion: '<S10>/Data Type Conversion' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    proc_control_node_B.DataTypeConversion_j = static_cast<uint8_T>
      (proc_control_node_DW.obj_mv.m_mode);

    // End of Outputs for SubSystem: '<Root>/Subsystem1'

    // Delay: '<S300>/ '
    std::memcpy(&proc_control_node_B.u[0], &proc_control_node_DW._DSTATE[0],
                sizeof(real_T) << 3U);

    // DataTypeConversion: '<S3>/Cast To Double'
    proc_control_node_B.CastToDouble = static_cast<uint8_T>
      (proc_control_node_B.MATLABSystem_o3);
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
    // ZeroOrderHold: '<S300>/Zero-Order Hold' incorporates:
    //   Delay: '<S300>/ '

    std::memcpy(&proc_control_node_B.ZeroOrderHold_e[0], &proc_control_node_B.u
                [0], sizeof(real_T) << 3U);

    // SwitchCase: '<S3>/Switch Case' incorporates:
    //   Inport: '<S63>/In1'
    //   Inport: '<S64>/In1'
    //   Inport: '<S65>/In1'
    //   Inport: '<S69>/In1'
    //   Inport: '<S70>/In1'
    //   Inport: '<S71>/In1'
    //   MATLABSystem: '<S60>/SourceBlock'
    //   MATLABSystem: '<S61>/SourceBlock'
    //   MATLABSystem: '<S62>/SourceBlock'
    //   MATLABSystem: '<S66>/SourceBlock'
    //   MATLABSystem: '<S67>/SourceBlock'
    //   MATLABSystem: '<S68>/SourceBlock'
    //   ZeroOrderHold: '<S3>/Zero-Order Hold'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      if (proc_control_node_B.CastToDouble == 1) {
        rtAction = 0;
      } else {
        rtAction = 1;
      }

      proc_control_node_DW.SwitchCase_ActiveSubsystem = rtAction;
    } else {
      rtAction = proc_control_node_DW.SwitchCase_ActiveSubsystem;
    }

    switch (rtAction) {
     case 0:
      // Outputs for IfAction SubSystem: '<S3>/Simulation' incorporates:
      //   ActionPort: '<S58>/Action Port'

      // Outputs for Atomic SubSystem: '<S58>/Subscribe'
      // MATLABSystem: '<S66>/SourceBlock'
      rtb_Merge_h = Sub_proc_control_node_31_1241.getLatestMessage
        (&proc_control_node_B.msg_i);

      // Outputs for Enabled SubSystem: '<S66>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S69>/Enable'

      if (rtb_Merge_h) {
        proc_control_node_B.In1_pd = proc_control_node_B.msg_i;
      }

      // End of Outputs for SubSystem: '<S66>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S58>/Subscribe'

      // SignalConversion generated from: '<S58>/imu Data' incorporates:
      //   Inport: '<S69>/In1'
      //   MATLABSystem: '<S66>/SourceBlock'
      //   Merge: '<S3>/Merge1'

      proc_control_node_B.fcn2_e = proc_control_node_B.In1_pd.Orientation.X;
      proc_control_node_B.Product2_l = proc_control_node_B.In1_pd.Orientation.Y;
      proc_control_node_B.Product1_n = proc_control_node_B.In1_pd.Orientation.Z;
      proc_control_node_B.Sum_ll = proc_control_node_B.In1_pd.Orientation.W;

      // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
      // SignalConversion generated from: '<S295>/qS2W' incorporates:
      //   SignalConversion generated from: '<S58>/imu Data'

      proc_control_node_B.TmpSignalConversionAtBuffer[6] =
        proc_control_node_B.In1_pd.AngularVelocity.X;
      proc_control_node_B.TmpSignalConversionAtBuffer[7] =
        proc_control_node_B.In1_pd.AngularVelocity.Y;
      proc_control_node_B.TmpSignalConversionAtBuffer[8] =
        proc_control_node_B.In1_pd.AngularVelocity.Z;

      // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

      // Outputs for Atomic SubSystem: '<S58>/Subscribe1'
      // MATLABSystem: '<S68>/SourceBlock'
      rtb_NewDvlMsg = Sub_proc_control_node_31_1242.getLatestMessage
        (&proc_control_node_B.msg_iq);

      // Outputs for Enabled SubSystem: '<S68>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S71>/Enable'

      if (rtb_NewDvlMsg) {
        proc_control_node_B.In1_c = proc_control_node_B.msg_iq;
      }

      // End of Outputs for SubSystem: '<S68>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S58>/Subscribe1'

      // SignalConversion generated from: '<S58>/dvl data' incorporates:
      //   Inport: '<S71>/In1'
      //   MATLABSystem: '<S68>/SourceBlock'
      //   Merge: '<S3>/Merge2'

      proc_control_node_B.t9 = proc_control_node_B.In1_c.XVelBtm;
      proc_control_node_B.t10 = proc_control_node_B.In1_c.YVelBtm;
      proc_control_node_B.t11 = proc_control_node_B.In1_c.ZVelBtm;
      proc_control_node_B.t13 = proc_control_node_B.In1_c.Velocity1;
      proc_control_node_B.t14 = proc_control_node_B.In1_c.Velocity2;
      proc_control_node_B.t15 = proc_control_node_B.In1_c.Velocity3;
      proc_control_node_B.t16 = proc_control_node_B.In1_c.Velocity4;

      // Outputs for Atomic SubSystem: '<S58>/Subscribe depth'
      // MATLABSystem: '<S67>/SourceBlock'
      rtb_Compare_h = Sub_proc_control_node_31_1305.getLatestMessage
        (&proc_control_node_B.b_varargout_2_k);

      // Outputs for Enabled SubSystem: '<S67>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S70>/Enable'

      if (rtb_Compare_h) {
        proc_control_node_B.In1_om = proc_control_node_B.b_varargout_2_k;
      }

      // End of Outputs for SubSystem: '<S67>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S58>/Subscribe depth'

      // SignalConversion generated from: '<S58>/depth data' incorporates:
      //   Inport: '<S70>/In1'
      //   MATLABSystem: '<S67>/SourceBlock'
      //   Merge: '<S3>/Merge4'

      proc_control_node_B.rtb_PressureDepth_Data =
        proc_control_node_B.In1_om.Data;

      // End of Outputs for SubSystem: '<S3>/Simulation'
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S3>/Real System' incorporates:
      //   ActionPort: '<S57>/Action Port'

      // Outputs for Atomic SubSystem: '<S57>/Subscribe'
      // MATLABSystem: '<S60>/SourceBlock'
      rtb_Merge_h = Sub_proc_control_node_31_5.getLatestMessage
        (&proc_control_node_B.msg_i);

      // Outputs for Enabled SubSystem: '<S60>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S63>/Enable'

      if (rtb_Merge_h) {
        proc_control_node_B.In1_p = proc_control_node_B.msg_i;
      }

      // End of Outputs for SubSystem: '<S60>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S57>/Subscribe'

      // SignalConversion generated from: '<S57>/imu Data' incorporates:
      //   Inport: '<S63>/In1'
      //   MATLABSystem: '<S60>/SourceBlock'
      //   Merge: '<S3>/Merge1'

      proc_control_node_B.fcn2_e = proc_control_node_B.In1_p.Orientation.X;
      proc_control_node_B.Product2_l = proc_control_node_B.In1_p.Orientation.Y;
      proc_control_node_B.Product1_n = proc_control_node_B.In1_p.Orientation.Z;
      proc_control_node_B.Sum_ll = proc_control_node_B.In1_p.Orientation.W;

      // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
      // SignalConversion generated from: '<S295>/qS2W' incorporates:
      //   SignalConversion generated from: '<S57>/imu Data'

      proc_control_node_B.TmpSignalConversionAtBuffer[6] =
        proc_control_node_B.In1_p.AngularVelocity.X;
      proc_control_node_B.TmpSignalConversionAtBuffer[7] =
        proc_control_node_B.In1_p.AngularVelocity.Y;
      proc_control_node_B.TmpSignalConversionAtBuffer[8] =
        proc_control_node_B.In1_p.AngularVelocity.Z;

      // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

      // Outputs for Atomic SubSystem: '<S57>/Subscribe1'
      // MATLABSystem: '<S61>/SourceBlock'
      rtb_NewDvlMsg = Sub_proc_control_node_31_1235.getLatestMessage
        (&proc_control_node_B.msg_iq);

      // Outputs for Enabled SubSystem: '<S61>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S64>/Enable'

      if (rtb_NewDvlMsg) {
        proc_control_node_B.In1_i = proc_control_node_B.msg_iq;
      }

      // End of Outputs for SubSystem: '<S61>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S57>/Subscribe1'

      // SignalConversion generated from: '<S57>/dvl data' incorporates:
      //   Inport: '<S64>/In1'
      //   MATLABSystem: '<S61>/SourceBlock'
      //   Merge: '<S3>/Merge2'

      proc_control_node_B.t9 = proc_control_node_B.In1_i.XVelBtm;
      proc_control_node_B.t10 = proc_control_node_B.In1_i.YVelBtm;
      proc_control_node_B.t11 = proc_control_node_B.In1_i.ZVelBtm;
      proc_control_node_B.t13 = proc_control_node_B.In1_i.Velocity1;
      proc_control_node_B.t14 = proc_control_node_B.In1_i.Velocity2;
      proc_control_node_B.t15 = proc_control_node_B.In1_i.Velocity3;
      proc_control_node_B.t16 = proc_control_node_B.In1_i.Velocity4;

      // Outputs for Atomic SubSystem: '<S57>/Subscribe2'
      // MATLABSystem: '<S62>/SourceBlock'
      rtb_Compare_h = Sub_proc_control_node_31_1302.getLatestMessage
        (&proc_control_node_B.b_varargout_2_k);

      // Outputs for Enabled SubSystem: '<S62>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S65>/Enable'

      if (rtb_Compare_h) {
        proc_control_node_B.In1_e = proc_control_node_B.b_varargout_2_k;
      }

      // End of Outputs for SubSystem: '<S62>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S57>/Subscribe2'

      // SignalConversion generated from: '<S57>/depth data' incorporates:
      //   Inport: '<S65>/In1'
      //   MATLABSystem: '<S62>/SourceBlock'
      //   Merge: '<S3>/Merge4'

      proc_control_node_B.rtb_PressureDepth_Data =
        proc_control_node_B.In1_e.Data;

      // End of Outputs for SubSystem: '<S3>/Real System'
      break;
    }

    // End of SwitchCase: '<S3>/Switch Case'

    // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
    // MATLAB Function: '<S295>/ ' incorporates:
    //   Merge: '<S3>/Merge1'
    //   SignalConversion generated from: '<S301>/ SFunction '

    proc_control_node_B.scale = 3.3121686421112381E-170;
    proc_control_node_B.absxk = std::abs(proc_control_node_B.Sum_ll);
    if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
      proc_control_node_B.d = 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        3.3121686421112381E-170;
      proc_control_node_B.d = proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = std::abs(proc_control_node_B.fcn2_e);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = std::abs(proc_control_node_B.Product2_l);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = std::abs(proc_control_node_B.Product1_n);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.d = proc_control_node_B.scale * std::sqrt
      (proc_control_node_B.d);
    proc_control_node_B.rtb_sincos_o2_idx_2 = proc_control_node_B.Sum_ll /
      proc_control_node_B.d;
    proc_control_node_B.b_ja[0] = std::isnan
      (proc_control_node_B.rtb_sincos_o2_idx_2);
    proc_control_node_B.n[0] = proc_control_node_B.rtb_sincos_o2_idx_2;
    proc_control_node_B.rtb_sincos_o2_idx_2 = proc_control_node_B.fcn2_e /
      proc_control_node_B.d;
    proc_control_node_B.b_ja[1] = std::isnan
      (proc_control_node_B.rtb_sincos_o2_idx_2);
    proc_control_node_B.n[1] = proc_control_node_B.rtb_sincos_o2_idx_2;
    proc_control_node_B.rtb_sincos_o2_idx_2 = proc_control_node_B.Product2_l /
      proc_control_node_B.d;
    proc_control_node_B.b_ja[2] = std::isnan
      (proc_control_node_B.rtb_sincos_o2_idx_2);
    proc_control_node_B.n[2] = proc_control_node_B.rtb_sincos_o2_idx_2;
    proc_control_node_B.rtb_sincos_o2_idx_2 = proc_control_node_B.Product1_n /
      proc_control_node_B.d;
    proc_control_node_B.b_ja[3] = std::isnan
      (proc_control_node_B.rtb_sincos_o2_idx_2);
    proc_control_node_B.n[3] = proc_control_node_B.rtb_sincos_o2_idx_2;
    b_varargout_1_2 = true;
    proc_control_node_B.ibmat = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.ibmat < 4)) {
      if (!proc_control_node_B.b_ja[proc_control_node_B.ibmat]) {
        b_varargout_1_2 = false;
        exitg1 = true;
      } else {
        proc_control_node_B.ibmat++;
      }
    }

    if (b_varargout_1_2) {
      proc_control_node_B.n[0] = 1.0;
      proc_control_node_B.n[1] = 0.0;
      proc_control_node_B.n[2] = 0.0;
      proc_control_node_B.n[3] = 0.0;
    }

    // End of MATLAB Function: '<S295>/ '

    // RelationalOperator: '<S312>/Compare' incorporates:
    //   Constant: '<S309>/Time constant'
    //   Constant: '<S312>/Constant'
    //   Sum: '<S309>/Sum1'

    rtb_Compare_h = (proc_control_node_P.LowPassFilter_T
                     - proc_control_node_B.Probe[0] <=
                     proc_control_node_P.Constant_Value_fa);

    // Sum: '<S316>/Sum' incorporates:
    //   Product: '<S316>/Product'
    //   Product: '<S316>/Product1'
    //   Product: '<S316>/Product2'
    //   Product: '<S316>/Product3'
    //   UnaryMinus: '<S304>/Unary Minus'
    //   UnaryMinus: '<S304>/Unary Minus1'
    //   UnaryMinus: '<S304>/Unary Minus2'

    proc_control_node_B.d = ((proc_control_node_B.n[0] * proc_control_node_B.n[0]
      + -proc_control_node_B.n[1] * -proc_control_node_B.n[1]) +
      -proc_control_node_B.n[2] * -proc_control_node_B.n[2]) +
      -proc_control_node_B.n[3] * -proc_control_node_B.n[3];

    // Product: '<S305>/Divide1' incorporates:
    //   UnaryMinus: '<S304>/Unary Minus'

    proc_control_node_B.fcn2_e = proc_control_node_B.n[1] /
      proc_control_node_B.d;

    // Product: '<S305>/Divide'
    proc_control_node_B.Product2_l = proc_control_node_B.n[0] /
      proc_control_node_B.d;

    // Product: '<S305>/Divide2' incorporates:
    //   UnaryMinus: '<S304>/Unary Minus1'

    proc_control_node_B.scale = proc_control_node_B.n[2] / proc_control_node_B.d;

    // Product: '<S305>/Divide3' incorporates:
    //   UnaryMinus: '<S304>/Unary Minus2'

    proc_control_node_B.d = proc_control_node_B.n[3] / proc_control_node_B.d;

    // Sqrt: '<S321>/sqrt' incorporates:
    //   Product: '<S322>/Product'
    //   Product: '<S322>/Product1'
    //   Product: '<S322>/Product2'
    //   Product: '<S322>/Product3'
    //   Sum: '<S322>/Sum'

    proc_control_node_B.t = std::sqrt(((proc_control_node_B.Product2_l *
      proc_control_node_B.Product2_l + proc_control_node_B.fcn2_e *
      proc_control_node_B.fcn2_e) + proc_control_node_B.scale *
      proc_control_node_B.scale) + proc_control_node_B.d * proc_control_node_B.d);

    // Product: '<S317>/Product1'
    proc_control_node_B.Product1_n = proc_control_node_B.fcn2_e /
      proc_control_node_B.t;

    // Product: '<S317>/Product3'
    proc_control_node_B.Sum_ll = proc_control_node_B.d / proc_control_node_B.t;

    // Product: '<S317>/Product'
    proc_control_node_B.absxk = proc_control_node_B.Product2_l /
      proc_control_node_B.t;

    // Product: '<S317>/Product2'
    proc_control_node_B.t = proc_control_node_B.scale / proc_control_node_B.t;

    // Sum: '<S295>/Sum' incorporates:
    //   Constant: '<S295>/Constant'
    //   Constant: '<S320>/Constant'
    //   Gain: '<S320>/Gain'
    //   Gain: '<S320>/Gain1'
    //   Gain: '<S320>/Gain2'
    //   Merge: '<S3>/Merge4'
    //   Product: '<S320>/Product'
    //   Product: '<S320>/Product1'
    //   Product: '<S320>/Product2'
    //   Product: '<S320>/Product3'
    //   Product: '<S320>/Product4'
    //   Product: '<S320>/Product5'
    //   Product: '<S320>/Product6'
    //   Product: '<S320>/Product7'
    //   Product: '<S320>/Product8'
    //   Sum: '<S320>/Sum'
    //   Sum: '<S320>/Sum1'
    //   Sum: '<S320>/Sum2'
    //   Sum: '<S320>/Sum3'

    proc_control_node_B.absxk = proc_control_node_B.rtb_PressureDepth_Data -
      (((proc_control_node_B.Product1_n * proc_control_node_B.Sum_ll +
         proc_control_node_B.absxk * proc_control_node_B.t) *
        proc_control_node_P.Gain_Gain_jj *
        proc_control_node_P.physics.DepthPose[0] + (proc_control_node_B.t *
         proc_control_node_B.Sum_ll - proc_control_node_B.absxk *
         proc_control_node_B.Product1_n) * proc_control_node_P.Gain1_Gain_j *
        proc_control_node_P.physics.DepthPose[1]) +
       ((proc_control_node_P.Constant_Value_a1 - proc_control_node_B.Product1_n *
         proc_control_node_B.Product1_n) - proc_control_node_B.t *
        proc_control_node_B.t) * proc_control_node_P.Gain2_Gain_o *
       proc_control_node_P.physics.DepthPose[2]);

    // Gain: '<S303>/K'
    proc_control_node_B.t = proc_control_node_P.LowPassFilter_K *
      proc_control_node_B.absxk;

    // DiscreteIntegrator: '<S314>/Integrator'
    if (proc_control_node_DW.Integrator_IC_LOADING != 0) {
      proc_control_node_DW.Integrator_DSTATE_o = proc_control_node_B.t;
      if (proc_control_node_DW.Integrator_DSTATE_o >=
          proc_control_node_P.Integrator_UpperSat) {
        proc_control_node_DW.Integrator_DSTATE_o =
          proc_control_node_P.Integrator_UpperSat;
      } else if (proc_control_node_DW.Integrator_DSTATE_o <=
                 proc_control_node_P.Integrator_LowerSat) {
        proc_control_node_DW.Integrator_DSTATE_o =
          proc_control_node_P.Integrator_LowerSat;
      }
    }

    if (rtb_Compare_h || (proc_control_node_DW.Integrator_PrevResetState_d != 0))
    {
      proc_control_node_DW.Integrator_DSTATE_o = proc_control_node_B.t;
      if (proc_control_node_DW.Integrator_DSTATE_o >=
          proc_control_node_P.Integrator_UpperSat) {
        proc_control_node_DW.Integrator_DSTATE_o =
          proc_control_node_P.Integrator_UpperSat;
      } else if (proc_control_node_DW.Integrator_DSTATE_o <=
                 proc_control_node_P.Integrator_LowerSat) {
        proc_control_node_DW.Integrator_DSTATE_o =
          proc_control_node_P.Integrator_LowerSat;
      }
    }

    if (proc_control_node_DW.Integrator_DSTATE_o >=
        proc_control_node_P.Integrator_UpperSat) {
      proc_control_node_DW.Integrator_DSTATE_o =
        proc_control_node_P.Integrator_UpperSat;
    } else if (proc_control_node_DW.Integrator_DSTATE_o <=
               proc_control_node_P.Integrator_LowerSat) {
      proc_control_node_DW.Integrator_DSTATE_o =
        proc_control_node_P.Integrator_LowerSat;
    }

    // End of DiscreteIntegrator: '<S314>/Integrator'

    // Saturate: '<S314>/Saturation'
    if (proc_control_node_DW.Integrator_DSTATE_o >
        proc_control_node_P.Saturation_UpperSat) {
      proc_control_node_B.Sum_ll = proc_control_node_P.Saturation_UpperSat;
    } else if (proc_control_node_DW.Integrator_DSTATE_o <
               proc_control_node_P.Saturation_LowerSat) {
      proc_control_node_B.Sum_ll = proc_control_node_P.Saturation_LowerSat;
    } else {
      proc_control_node_B.Sum_ll = proc_control_node_DW.Integrator_DSTATE_o;
    }

    // End of Saturate: '<S314>/Saturation'

    // SampleTimeMath: '<S302>/TSamp'
    //
    //  About '<S302>/TSamp':
    //   y = u * K where K = 1 / ( w * Ts )

    proc_control_node_B.TSamp = proc_control_node_B.Sum_ll *
      proc_control_node_P.TSamp_WtEt_d;

    // MinMax: '<S309>/Max' incorporates:
    //   Constant: '<S309>/Time constant'

    proc_control_node_B.Product1_n = std::fmax(proc_control_node_B.Probe[0],
      proc_control_node_P.LowPassFilter_T);

    // SignalConversion generated from: '<S295>/qS2W' incorporates:
    //   Sum: '<S302>/Diff'
    //   UnitDelay: '<S302>/UD'
    //
    //  Block description for '<S302>/Diff':
    //
    //   Add in CPU
    //
    //  Block description for '<S302>/UD':
    //
    //   Store in Global RAM

    proc_control_node_B.TmpSignalConversionAtBuffer[0] =
      proc_control_node_B.absxk;
    proc_control_node_B.TmpSignalConversionAtBuffer[1] =
      proc_control_node_B.TSamp - proc_control_node_DW.UD_DSTATE;
    proc_control_node_B.TmpSignalConversionAtBuffer[2] =
      proc_control_node_B.Product2_l;
    proc_control_node_B.TmpSignalConversionAtBuffer[3] =
      proc_control_node_B.fcn2_e;
    proc_control_node_B.TmpSignalConversionAtBuffer[4] =
      proc_control_node_B.scale;
    proc_control_node_B.TmpSignalConversionAtBuffer[5] = proc_control_node_B.d;

    // Update for DiscreteIntegrator: '<S314>/Integrator' incorporates:
    //   Fcn: '<S309>/Avoid Divide by Zero'
    //   Product: '<S303>/1//T'
    //   Sum: '<S303>/Sum1'

    proc_control_node_DW.Integrator_IC_LOADING = 0U;
    proc_control_node_DW.Integrator_DSTATE_o += 1.0 / (static_cast<real_T>
      (proc_control_node_B.Product1_n == 0.0) * 2.2204460492503131e-16 +
      proc_control_node_B.Product1_n) * (proc_control_node_B.t -
      proc_control_node_B.Sum_ll) * proc_control_node_P.Integrator_gainval;
    if (proc_control_node_DW.Integrator_DSTATE_o >=
        proc_control_node_P.Integrator_UpperSat) {
      proc_control_node_DW.Integrator_DSTATE_o =
        proc_control_node_P.Integrator_UpperSat;
    } else if (proc_control_node_DW.Integrator_DSTATE_o <=
               proc_control_node_P.Integrator_LowerSat) {
      proc_control_node_DW.Integrator_DSTATE_o =
        proc_control_node_P.Integrator_LowerSat;
    }

    proc_control_node_DW.Integrator_PrevResetState_d = static_cast<int8_T>
      (rtb_Compare_h);

    // End of Update for DiscreteIntegrator: '<S314>/Integrator'

    // Update for UnitDelay: '<S302>/UD'
    //
    //  Block description for '<S302>/UD':
    //
    //   Store in Global RAM

    proc_control_node_DW.UD_DSTATE = proc_control_node_B.TSamp;

    // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

    // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
    //   EnablePort: '<S296>/Enable'

    if (rtb_NewDvlMsg) {
      // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
      //   EnablePort: '<S338>/Enable'

      // Delay: '<S335>/Delay'
      if (proc_control_node_DW.Delay_DSTATE_i > 0.0) {
        // Gain: '<S339>/1//2' incorporates:
        //   Constant: '<S338>/si y devant'

        proc_control_node_B.rtb_u2_g = proc_control_node_P.u2_Gain_b *
          proc_control_node_P.siydevant_Value[0];

        // Trigonometry: '<S339>/sincos'
        proc_control_node_B.rtb_sincos_o2_idx_0 = std::sin
          (proc_control_node_B.rtb_u2_g);
        proc_control_node_B.rtb_sincos_o1_idx_0 = std::cos
          (proc_control_node_B.rtb_u2_g);

        // Gain: '<S339>/1//2' incorporates:
        //   Constant: '<S338>/si y devant'

        proc_control_node_B.rtb_u2_g = proc_control_node_P.u2_Gain_b *
          proc_control_node_P.siydevant_Value[1];

        // Trigonometry: '<S339>/sincos'
        proc_control_node_B.rtb_sincos_o2_idx_1 = std::sin
          (proc_control_node_B.rtb_u2_g);
        proc_control_node_B.rtb_sincos_o1_idx_1 = std::cos
          (proc_control_node_B.rtb_u2_g);

        // Gain: '<S339>/1//2' incorporates:
        //   Constant: '<S338>/si y devant'

        proc_control_node_B.rtb_u2_g = proc_control_node_P.u2_Gain_b *
          proc_control_node_P.siydevant_Value[2];

        // Trigonometry: '<S339>/sincos'
        proc_control_node_B.rtb_sincos_o2_idx_2 = std::sin
          (proc_control_node_B.rtb_u2_g);
        proc_control_node_B.fcn2_e = std::cos(proc_control_node_B.rtb_u2_g);

        // Fcn: '<S339>/q0' incorporates:
        //   Fcn: '<S339>/q3'

        proc_control_node_B.rtb_u2_g = proc_control_node_B.rtb_sincos_o1_idx_0 *
          proc_control_node_B.rtb_sincos_o1_idx_1;
        proc_control_node_B.Product1_n = proc_control_node_B.rtb_sincos_o2_idx_0
          * proc_control_node_B.rtb_sincos_o2_idx_1;

        // Fcn: '<S339>/q0'
        proc_control_node_B.q0 = proc_control_node_B.rtb_u2_g *
          proc_control_node_B.fcn2_e - proc_control_node_B.Product1_n *
          proc_control_node_B.rtb_sincos_o2_idx_2;

        // Fcn: '<S339>/q1' incorporates:
        //   Fcn: '<S339>/q2'

        proc_control_node_B.rtb_sincos_o1_idx_0 *=
          proc_control_node_B.rtb_sincos_o2_idx_1;
        proc_control_node_B.rtb_sincos_o1_idx_1 *=
          proc_control_node_B.rtb_sincos_o2_idx_0;

        // Fcn: '<S339>/q1'
        proc_control_node_B.q1 = proc_control_node_B.rtb_sincos_o1_idx_0 *
          proc_control_node_B.rtb_sincos_o2_idx_2 +
          proc_control_node_B.rtb_sincos_o1_idx_1 * proc_control_node_B.fcn2_e;

        // Fcn: '<S339>/q2'
        proc_control_node_B.q2 = proc_control_node_B.rtb_sincos_o1_idx_0 *
          proc_control_node_B.fcn2_e - proc_control_node_B.rtb_sincos_o1_idx_1 *
          proc_control_node_B.rtb_sincos_o2_idx_2;

        // Fcn: '<S339>/q3'
        proc_control_node_B.q3 = proc_control_node_B.rtb_u2_g *
          proc_control_node_B.rtb_sincos_o2_idx_2 +
          proc_control_node_B.Product1_n * proc_control_node_B.fcn2_e;
      }

      // End of Delay: '<S335>/Delay'
      // End of Outputs for SubSystem: '<S335>/Subsystem2'

      // MATLAB Function: '<S296>/MATLAB Function1' incorporates:
      //   Constant: '<S296>/Constant1'
      //   Merge: '<S3>/Merge2'
      //   SignalConversion generated from: '<S336>/ SFunction '

      proc_control_node_B.u2[0] = std::abs(proc_control_node_B.t9);
      proc_control_node_B.u2[1] = std::abs(proc_control_node_B.t10);
      proc_control_node_B.u2[2] = std::abs(proc_control_node_B.t11);
      if (!std::isnan(proc_control_node_B.u2[0])) {
        proc_control_node_B.idx_m = 1;
      } else {
        proc_control_node_B.idx_m = 0;
        proc_control_node_B.ibmat = 2;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.ibmat <= 3)) {
          if (!std::isnan(proc_control_node_B.u2[proc_control_node_B.ibmat - 1]))
          {
            proc_control_node_B.idx_m = proc_control_node_B.ibmat;
            exitg1 = true;
          } else {
            proc_control_node_B.ibmat++;
          }
        }
      }

      if (proc_control_node_B.idx_m == 0) {
        proc_control_node_B.ZeroOrderHold_b = proc_control_node_B.u2[0];
      } else {
        proc_control_node_B.ZeroOrderHold_b =
          proc_control_node_B.u2[proc_control_node_B.idx_m - 1];
        while (proc_control_node_B.idx_m + 1 <= 3) {
          if (proc_control_node_B.ZeroOrderHold_b <
              proc_control_node_B.u2[proc_control_node_B.idx_m]) {
            proc_control_node_B.ZeroOrderHold_b =
              proc_control_node_B.u2[proc_control_node_B.idx_m];
          }

          proc_control_node_B.idx_m++;
        }
      }

      if (proc_control_node_B.ZeroOrderHold_b <
          proc_control_node_P.simulation.sensors.dvl.maxSpeedThres) {
        proc_control_node_B.u2[0] = proc_control_node_B.t9;
        proc_control_node_B.u2[1] = proc_control_node_B.t10;
        proc_control_node_B.u2[2] = proc_control_node_B.t11;
        proc_control_node_B.enable = 1.0;
      } else {
        proc_control_node_B.TmpSignalConversionAtSFunct[0] = std::abs
          (proc_control_node_B.t13);
        proc_control_node_B.TmpSignalConversionAtSFunct[1] = std::abs
          (proc_control_node_B.t14);
        proc_control_node_B.TmpSignalConversionAtSFunct[2] = std::abs
          (proc_control_node_B.t15);
        proc_control_node_B.TmpSignalConversionAtSFunct[3] = std::abs
          (proc_control_node_B.t16);
        if (!std::isnan(proc_control_node_B.TmpSignalConversionAtSFunct[0])) {
          proc_control_node_B.idx_m = 1;
        } else {
          proc_control_node_B.idx_m = 0;
          proc_control_node_B.ibmat = 2;
          exitg1 = false;
          while ((!exitg1) && (proc_control_node_B.ibmat <= 4)) {
            if (!std::isnan
                (proc_control_node_B.TmpSignalConversionAtSFunct[proc_control_node_B.ibmat
                 - 1])) {
              proc_control_node_B.idx_m = proc_control_node_B.ibmat;
              exitg1 = true;
            } else {
              proc_control_node_B.ibmat++;
            }
          }
        }

        if (proc_control_node_B.idx_m == 0) {
          proc_control_node_B.ZeroOrderHold_b =
            proc_control_node_B.TmpSignalConversionAtSFunct[0];
        } else {
          proc_control_node_B.ZeroOrderHold_b =
            proc_control_node_B.TmpSignalConversionAtSFunct[proc_control_node_B.idx_m
            - 1];
          while (proc_control_node_B.idx_m + 1 <= 4) {
            if (proc_control_node_B.ZeroOrderHold_b <
                proc_control_node_B.TmpSignalConversionAtSFunct[proc_control_node_B.idx_m])
            {
              proc_control_node_B.ZeroOrderHold_b =
                proc_control_node_B.TmpSignalConversionAtSFunct[proc_control_node_B.idx_m];
            }

            proc_control_node_B.idx_m++;
          }
        }

        if (proc_control_node_B.ZeroOrderHold_b <
            proc_control_node_P.simulation.sensors.dvl.maxSpeedThres) {
          proc_control_node_B.u2[0] = proc_control_node_B.t13;
          proc_control_node_B.u2[1] = proc_control_node_B.t14;
          proc_control_node_B.u2[2] = proc_control_node_B.t15;
          proc_control_node_B.enable = 0.0;
        } else {
          proc_control_node_B.u2[0] = 0.0;
          proc_control_node_B.u2[1] = 0.0;
          proc_control_node_B.u2[2] =
            proc_control_node_B.TmpSignalConversionAtBuffer[1];
          proc_control_node_B.enable = 0.0;
        }
      }

      // End of MATLAB Function: '<S296>/MATLAB Function1'

      // Sqrt: '<S344>/sqrt' incorporates:
      //   Product: '<S345>/Product'
      //   Product: '<S345>/Product1'
      //   Product: '<S345>/Product2'
      //   Product: '<S345>/Product3'
      //   Sum: '<S345>/Sum'

      proc_control_node_B.fcn2_e = std::sqrt(((proc_control_node_B.q0 *
        proc_control_node_B.q0 + proc_control_node_B.q1 * proc_control_node_B.q1)
        + proc_control_node_B.q2 * proc_control_node_B.q2) +
        proc_control_node_B.q3 * proc_control_node_B.q3);

      // Product: '<S340>/Product'
      proc_control_node_B.Product2_l = proc_control_node_B.q0 /
        proc_control_node_B.fcn2_e;

      // Product: '<S340>/Product1'
      proc_control_node_B.Product1_n = proc_control_node_B.q1 /
        proc_control_node_B.fcn2_e;

      // Product: '<S340>/Product2'
      proc_control_node_B.Sum_ll = proc_control_node_B.q2 /
        proc_control_node_B.fcn2_e;

      // Product: '<S340>/Product3'
      proc_control_node_B.fcn2_e = proc_control_node_B.q3 /
        proc_control_node_B.fcn2_e;

      // Product: '<S341>/Product7' incorporates:
      //   Product: '<S342>/Product7'

      proc_control_node_B.t16 = proc_control_node_B.fcn2_e *
        proc_control_node_B.fcn2_e;

      // Product: '<S341>/Product' incorporates:
      //   Product: '<S342>/Product'

      proc_control_node_B.t15 = proc_control_node_B.Product1_n *
        proc_control_node_B.Sum_ll;

      // Product: '<S341>/Product1' incorporates:
      //   Product: '<S342>/Product1'

      proc_control_node_B.rtb_sincos_o2_idx_2 = proc_control_node_B.Product2_l *
        proc_control_node_B.fcn2_e;

      // Product: '<S341>/Product3' incorporates:
      //   Product: '<S343>/Product'

      proc_control_node_B.t14 = proc_control_node_B.Product1_n *
        proc_control_node_B.fcn2_e;

      // Product: '<S341>/Product2' incorporates:
      //   Product: '<S343>/Product1'

      proc_control_node_B.rtb_sincos_o1_idx_1 = proc_control_node_B.Product2_l *
        proc_control_node_B.Sum_ll;

      // Product: '<S341>/Product6' incorporates:
      //   Product: '<S343>/Product7'

      proc_control_node_B.rtb_sincos_o1_idx_0 = proc_control_node_B.Sum_ll *
        proc_control_node_B.Sum_ll;

      // Sum: '<S341>/Sum' incorporates:
      //   Constant: '<S341>/Constant'
      //   Gain: '<S341>/Gain'
      //   Gain: '<S341>/Gain1'
      //   Gain: '<S341>/Gain2'
      //   Product: '<S341>/Product'
      //   Product: '<S341>/Product1'
      //   Product: '<S341>/Product2'
      //   Product: '<S341>/Product3'
      //   Product: '<S341>/Product4'
      //   Product: '<S341>/Product5'
      //   Product: '<S341>/Product6'
      //   Product: '<S341>/Product7'
      //   Product: '<S341>/Product8'
      //   Sum: '<S341>/Sum1'
      //   Sum: '<S341>/Sum2'
      //   Sum: '<S341>/Sum3'

      proc_control_node_B.Sum = (((proc_control_node_P.Constant_Value_fg -
        proc_control_node_B.rtb_sincos_o1_idx_0) - proc_control_node_B.t16) *
        proc_control_node_P.Gain2_Gain_oj * proc_control_node_B.u2[0] +
        (proc_control_node_B.t15 + proc_control_node_B.rtb_sincos_o2_idx_2) *
        proc_control_node_P.Gain_Gain_o * proc_control_node_B.u2[1]) +
        (proc_control_node_B.t14 - proc_control_node_B.rtb_sincos_o1_idx_1) *
        proc_control_node_P.Gain1_Gain_k * proc_control_node_B.u2[2];

      // Product: '<S342>/Product3' incorporates:
      //   Product: '<S343>/Product3'

      proc_control_node_B.fcn2_e *= proc_control_node_B.Sum_ll;

      // Product: '<S342>/Product2' incorporates:
      //   Product: '<S343>/Product2'

      proc_control_node_B.rtb_sincos_o2_idx_0 = proc_control_node_B.Product2_l *
        proc_control_node_B.Product1_n;

      // Product: '<S342>/Product6' incorporates:
      //   Product: '<S343>/Product6'

      proc_control_node_B.rtb_sincos_o2_idx_1 = proc_control_node_B.Product1_n *
        proc_control_node_B.Product1_n;

      // Sum: '<S342>/Sum' incorporates:
      //   Constant: '<S342>/Constant'
      //   Gain: '<S342>/Gain'
      //   Gain: '<S342>/Gain1'
      //   Gain: '<S342>/Gain2'
      //   Product: '<S342>/Product2'
      //   Product: '<S342>/Product3'
      //   Product: '<S342>/Product4'
      //   Product: '<S342>/Product5'
      //   Product: '<S342>/Product6'
      //   Product: '<S342>/Product8'
      //   Sum: '<S342>/Sum1'
      //   Sum: '<S342>/Sum2'
      //   Sum: '<S342>/Sum3'

      proc_control_node_B.Sum_o = (((proc_control_node_P.Constant_Value_j -
        proc_control_node_B.rtb_sincos_o2_idx_1) - proc_control_node_B.t16) *
        proc_control_node_P.Gain2_Gain_k * proc_control_node_B.u2[1] +
        (proc_control_node_B.t15 - proc_control_node_B.rtb_sincos_o2_idx_2) *
        proc_control_node_P.Gain_Gain_mq * proc_control_node_B.u2[0]) +
        (proc_control_node_B.rtb_sincos_o2_idx_0 + proc_control_node_B.fcn2_e) *
        proc_control_node_P.Gain1_Gain_bk * proc_control_node_B.u2[2];

      // Sum: '<S343>/Sum' incorporates:
      //   Constant: '<S343>/Constant'
      //   Gain: '<S343>/Gain'
      //   Gain: '<S343>/Gain1'
      //   Gain: '<S343>/Gain2'
      //   Product: '<S343>/Product4'
      //   Product: '<S343>/Product5'
      //   Product: '<S343>/Product8'
      //   Sum: '<S343>/Sum1'
      //   Sum: '<S343>/Sum2'
      //   Sum: '<S343>/Sum3'

      proc_control_node_B.Sum_c = ((proc_control_node_B.t14 +
        proc_control_node_B.rtb_sincos_o1_idx_1) *
        proc_control_node_P.Gain_Gain_n * proc_control_node_B.u2[0] +
        (proc_control_node_B.fcn2_e - proc_control_node_B.rtb_sincos_o2_idx_0) *
        proc_control_node_P.Gain1_Gain_ch * proc_control_node_B.u2[1]) +
        ((proc_control_node_P.Constant_Value_ol -
          proc_control_node_B.rtb_sincos_o2_idx_1) -
         proc_control_node_B.rtb_sincos_o1_idx_0) *
        proc_control_node_P.Gain2_Gain_br * proc_control_node_B.u2[2];

      // Update for Delay: '<S335>/Delay' incorporates:
      //   Constant: '<S335>/Constant6'

      proc_control_node_DW.Delay_DSTATE_i = proc_control_node_P.Constant6_Value;
    }

    // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    // Logic: '<S298>/NOT'
    proc_control_node_B.NOT = !(proc_control_node_B.MATLABSystem_o4 != 0.0);
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
    // Outputs for Enabled SubSystem: '<S3>/Subsystem' incorporates:
    //   EnablePort: '<S59>/Enable'

    // Logic: '<S3>/NOT' incorporates:
    //   Delay: '<S3>/Delay'

    if (!(proc_control_node_DW.Delay_DSTATE != 0.0)) {
      // Switch: '<S75>/Reset' incorporates:
      //   Constant: '<S59>/Constant1'
      //   Constant: '<S75>/Initial Condition'
      //   Memory: '<S75>/Memory'
      //   MinMax: '<S73>/MinMax'

      if (proc_control_node_P.Constant1_Value != 0.0) {
        rtb_Compare_h = proc_control_node_P.MinMaxRunningResettable_vinit;
      } else {
        rtb_Compare_h = (rtb_NewDvlMsg ||
                         proc_control_node_DW.Memory_PreviousInput_i);
      }

      // End of Switch: '<S75>/Reset'

      // Switch: '<S76>/Reset' incorporates:
      //   Constant: '<S59>/Constant'
      //   Constant: '<S76>/Initial Condition'
      //   Memory: '<S76>/Memory'
      //   MinMax: '<S74>/MinMax'

      if (proc_control_node_P.Constant_Value_f2j != 0.0) {
        rtb_Merge_h = proc_control_node_P.MinMaxRunningResettable1_vinit;
      } else {
        rtb_Merge_h = (rtb_Merge_h ||
                       proc_control_node_DW.Memory_PreviousInput_f);
      }

      // End of Switch: '<S76>/Reset'

      // MATLAB Function: '<S59>/MATLAB Function'
      proc_control_node_B.y = (rtb_Compare_h + rtb_Merge_h >= 2);

      // Update for Memory: '<S75>/Memory'
      proc_control_node_DW.Memory_PreviousInput_i = rtb_Compare_h;

      // Update for Memory: '<S76>/Memory'
      proc_control_node_DW.Memory_PreviousInput_f = rtb_Merge_h;
    }

    // End of Logic: '<S3>/NOT'
    // End of Outputs for SubSystem: '<S3>/Subsystem'

    // Logic: '<S298>/AND'
    rtb_Compare_h = (proc_control_node_B.NOT && (proc_control_node_B.y != 0.0));

    // Outputs for Enabled SubSystem: '<S8>/Subsystem' incorporates:
    //   EnablePort: '<S299>/Enable'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_DW.Subsystem_MODE = rtb_Compare_h;
    }

    if (proc_control_node_DW.Subsystem_MODE) {
      // Outputs for Enabled SubSystem: '<S349>/Correct1' incorporates:
      //   EnablePort: '<S350>/Enable'

      // Constant: '<S349>/Enable1'
      if (proc_control_node_P.Enable1_Value) {
        // MATLAB Function: '<S350>/Correct' incorporates:
        //   Constant: '<S349>/R1'
        //   DataStoreRead: '<S350>/Data Store ReadX'
        //   DataStoreWrite: '<S350>/Data Store WriteP'
        //   Lookup_n-D: '<S13>/ PWM to N'
        //   Lookup_n-D: '<S149>/N to A'
        //   Lookup_n-D: '<S149>/N to PWM'
        //   Trigonometry: '<S339>/sincos'
        //   Trigonometry: '<S36>/sincos'
        //   Trigonometry: '<S96>/sincos'

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 9;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.z_o[proc_control_node_B.Ns_j] =
            proc_control_node_DW.x[b[proc_control_node_B.Ns_j]];
        }

        for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 13;
             proc_control_node_B.Ns++) {
          std::memcpy(&proc_control_node_B.TmpSignalConversionAtSFun_b[0],
                      &proc_control_node_DW.x[0], 13U * sizeof(real_T));
          proc_control_node_B.epsilon = std::fmax(1.4901161193847656E-8,
            1.4901161193847656E-8 * std::abs
            (proc_control_node_DW.x[proc_control_node_B.Ns]));
          proc_control_node_B.TmpSignalConversionAtSFun_b[proc_control_node_B.Ns]
            = proc_control_node_DW.x[proc_control_node_B.Ns] +
            proc_control_node_B.epsilon;
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 9;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.Selector_f[proc_control_node_B.Ns_j + 9 *
              proc_control_node_B.Ns] =
              (proc_control_node_B.TmpSignalConversionAtSFun_b[b[proc_control_node_B.Ns_j]]
               - proc_control_node_B.z_o[proc_control_node_B.Ns_j]) /
              proc_control_node_B.epsilon;
          }
        }

        proc_control_node_qrFactor(proc_control_node_B.Selector_f,
          proc_control_node_DW.P, proc_control_node_P.R1_Value,
          proc_control_node_B.Sy);
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
             proc_control_node_B.i++) {
          std::memset(&proc_control_node_B.Ac[proc_control_node_B.Ns_j], 0, 13U *
                      sizeof(real_T));
          proc_control_node_B.Ns_j += 13;
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
               proc_control_node_B.i++) {
            for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 13;
                 proc_control_node_B.Ns_m++) {
              proc_control_node_B.idx_j = 13 * proc_control_node_B.i +
                proc_control_node_B.Ns_m;
              proc_control_node_B.Ac[proc_control_node_B.idx_j] +=
                proc_control_node_DW.P[13 * proc_control_node_B.Ns_j +
                proc_control_node_B.Ns_m] * proc_control_node_DW.P[13 *
                proc_control_node_B.Ns_j + proc_control_node_B.i];
            }
          }

          std::memset(&proc_control_node_B.K[proc_control_node_B.Ns_j * 9], 0,
                      9U * sizeof(real_T));
        }

        proc_control_node_B.Ns_j = 0;
        proc_control_node_B.Ns_m = 0;
        for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 13;
             proc_control_node_B.idx_j++) {
          proc_control_node_B.idx_i = 0;
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
               proc_control_node_B.ibmat++) {
            for (proc_control_node_B.i = 0; proc_control_node_B.i < 9;
                 proc_control_node_B.i++) {
              proc_control_node_B.Ns = proc_control_node_B.i +
                proc_control_node_B.idx_i;
              proc_control_node_B.K[proc_control_node_B.Ns] +=
                proc_control_node_B.Ac[proc_control_node_B.ibmat +
                proc_control_node_B.Ns_j] *
                proc_control_node_B.Selector_f[proc_control_node_B.i +
                proc_control_node_B.Ns_m];
            }

            proc_control_node_B.idx_i += 9;
          }

          proc_control_node_B.Ns_j += 13;
          proc_control_node_B.Ns_m += 9;
        }

        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
             proc_control_node_B.ibmat++) {
          std::memcpy(&proc_control_node_B.C[proc_control_node_B.Ns_j],
                      &proc_control_node_B.K[proc_control_node_B.Ns_j], 9U *
                      sizeof(real_T));
          proc_control_node_B.Ns_j += 9;
        }

        proc_control_node_trisolve_g(proc_control_node_B.Sy,
          proc_control_node_B.C);
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
             proc_control_node_B.ibmat++) {
          std::memcpy(&proc_control_node_B.b_C_j[proc_control_node_B.Ns_j],
                      &proc_control_node_B.C[proc_control_node_B.Ns_j], 9U *
                      sizeof(real_T));
          proc_control_node_B.Ns_j += 9;
        }

        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 9;
             proc_control_node_B.i++) {
          proc_control_node_B.Ns_m = 0;
          for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 9;
               proc_control_node_B.idx_j++) {
            proc_control_node_B.Sy_o[proc_control_node_B.idx_j +
              proc_control_node_B.Ns_j] =
              proc_control_node_B.Sy[proc_control_node_B.Ns_m +
              proc_control_node_B.i];
            proc_control_node_B.Ns_m += 9;
          }

          proc_control_node_B.Ns_j += 9;
        }

        proc_control_node_trisolve_ga(proc_control_node_B.Sy_o,
          proc_control_node_B.b_C_j);
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 9;
             proc_control_node_B.i++) {
          proc_control_node_B.Ns_m = 0;
          for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 13;
               proc_control_node_B.idx_j++) {
            proc_control_node_B.K[proc_control_node_B.idx_j +
              proc_control_node_B.Ns_j] =
              proc_control_node_B.b_C_j[proc_control_node_B.Ns_m +
              proc_control_node_B.i];
            proc_control_node_B.Ns_m += 9;
          }

          proc_control_node_B.Ns_j += 13;
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 117;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.C[proc_control_node_B.Ns_j] =
            -proc_control_node_B.K[proc_control_node_B.Ns_j];
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          std::memset(&proc_control_node_B.A[proc_control_node_B.Ns_j * 13], 0,
                      13U * sizeof(real_T));
          for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 9;
               proc_control_node_B.Ns_m++) {
            for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
                 proc_control_node_B.i++) {
              proc_control_node_B.idx_m = 13 * proc_control_node_B.Ns_j +
                proc_control_node_B.i;
              proc_control_node_B.A[proc_control_node_B.idx_m] +=
                proc_control_node_B.C[13 * proc_control_node_B.Ns_m +
                proc_control_node_B.i] * proc_control_node_B.Selector_f[9 *
                proc_control_node_B.Ns_j + proc_control_node_B.Ns_m];
            }
          }
        }

        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S296>/Enable'

        // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
        //   EnablePort: '<S338>/Enable'

        proc_control_node_B.ibmat = 0;

        // End of Outputs for SubSystem: '<S335>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
        for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 13;
             proc_control_node_B.idx_m++) {
          // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
          //   EnablePort: '<S4>/Enable'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S296>/Enable'

          // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
          //   EnablePort: '<S338>/Enable'

          proc_control_node_B.A[proc_control_node_B.ibmat]++;
          proc_control_node_B.ibmat += 14;

          // End of Outputs for SubSystem: '<S335>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          // End of Outputs for SubSystem: '<Root>/ROS Output'
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 9;
             proc_control_node_B.Ns_j++) {
          std::memset(&proc_control_node_B.C[proc_control_node_B.Ns_j * 13], 0,
                      13U * sizeof(real_T));
          for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 9;
               proc_control_node_B.Ns_m++) {
            for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
                 proc_control_node_B.i++) {
              proc_control_node_B.Ns = 13 * proc_control_node_B.Ns_j +
                proc_control_node_B.i;
              proc_control_node_B.C[proc_control_node_B.Ns] +=
                proc_control_node_B.K[13 * proc_control_node_B.Ns_m +
                proc_control_node_B.i] * proc_control_node_P.R1_Value[9 *
                proc_control_node_B.Ns_j + proc_control_node_B.Ns_m];
            }
          }
        }

        proc_control_node_qrFactor_a(proc_control_node_B.A,
          proc_control_node_DW.P, proc_control_node_B.C);
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 9;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.z_o[proc_control_node_B.Ns_j] =
            proc_control_node_B.TmpSignalConversionAtBuffer[proc_control_node_B.Ns_j]
            - proc_control_node_DW.x[b[proc_control_node_B.Ns_j]];
        }

        // DataStoreWrite: '<S350>/Data Store WriteX' incorporates:
        //   DataStoreRead: '<S350>/Data Store ReadX'
        //   MATLAB Function: '<S350>/Correct'

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.rtb_sincos_o2_idx_2 = 0.0;
          proc_control_node_B.i = 0;
          for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 9;
               proc_control_node_B.Ns_m++) {
            proc_control_node_B.rtb_sincos_o2_idx_2 +=
              proc_control_node_B.K[proc_control_node_B.i +
              proc_control_node_B.Ns_j] *
              proc_control_node_B.z_o[proc_control_node_B.Ns_m];
            proc_control_node_B.i += 13;
          }

          proc_control_node_DW.x[proc_control_node_B.Ns_j] +=
            proc_control_node_B.rtb_sincos_o2_idx_2;
        }

        // End of DataStoreWrite: '<S350>/Data Store WriteX'
      }

      // End of Constant: '<S349>/Enable1'
      // End of Outputs for SubSystem: '<S349>/Correct1'

      // Outputs for Enabled SubSystem: '<S349>/Correct2' incorporates:
      //   EnablePort: '<S351>/Enable'

      // DataTypeConversion: '<S349>/DataTypeConversion_Enable2'
      if (proc_control_node_B.enable != 0.0) {
        // MATLAB Function: '<S351>/Correct' incorporates:
        //   Constant: '<S349>/R2'
        //   DataStoreRead: '<S351>/Data Store ReadX'
        //   DataStoreWrite: '<S351>/Data Store WriteP'
        //   Lookup_n-D: '<S13>/ PWM to N'
        //   Lookup_n-D: '<S149>/N to A'
        //   Lookup_n-D: '<S149>/N to PWM'
        //   SignalConversion generated from: '<S355>/ SFunction '
        //   Trigonometry: '<S339>/sincos'
        //   Trigonometry: '<S36>/sincos'
        //   Trigonometry: '<S96>/sincos'

        proc_control_node_B.Ns_m = 0;
        for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 13;
             proc_control_node_B.Ns++) {
          std::memcpy(&proc_control_node_B.TmpSignalConversionAtSFun_b[0],
                      &proc_control_node_DW.x[0], 13U * sizeof(real_T));
          proc_control_node_B.epsilon = std::fmax(1.4901161193847656E-8,
            1.4901161193847656E-8 * std::abs
            (proc_control_node_DW.x[proc_control_node_B.Ns]));
          proc_control_node_B.TmpSignalConversionAtSFun_b[proc_control_node_B.Ns]
            = proc_control_node_DW.x[proc_control_node_B.Ns] +
            proc_control_node_B.epsilon;
          proc_control_node_B.dHdx[proc_control_node_B.Ns_m] =
            (proc_control_node_B.TmpSignalConversionAtSFun_b[7] -
             proc_control_node_DW.x[7]) / proc_control_node_B.epsilon;
          proc_control_node_B.dHdx[proc_control_node_B.Ns_m + 1] =
            (proc_control_node_B.TmpSignalConversionAtSFun_b[8] -
             proc_control_node_DW.x[8]) / proc_control_node_B.epsilon;
          proc_control_node_B.dHdx[proc_control_node_B.Ns_m + 2] =
            (proc_control_node_B.TmpSignalConversionAtSFun_b[9] -
             proc_control_node_DW.x[9]) / proc_control_node_B.epsilon;
          proc_control_node_B.Ns_m += 3;
        }

        proc_control_node_qrFactor_l(proc_control_node_B.dHdx,
          proc_control_node_DW.P, proc_control_node_P.R2_Value,
          proc_control_node_B.TmpSignalConversionAtBuffer);
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
             proc_control_node_B.i++) {
          std::memset(&proc_control_node_B.Ac[proc_control_node_B.Ns_j], 0, 13U *
                      sizeof(real_T));
          proc_control_node_B.Ns_j += 13;
        }

        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 13;
             proc_control_node_B.idx_j++) {
          proc_control_node_B.idx_i = 0;
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
               proc_control_node_B.i++) {
            for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 13;
                 proc_control_node_B.Ns_m++) {
              proc_control_node_B.ibmat = proc_control_node_B.Ns_m +
                proc_control_node_B.idx_i;
              proc_control_node_B.Ac[proc_control_node_B.ibmat] +=
                proc_control_node_DW.P[proc_control_node_B.Ns_m +
                proc_control_node_B.Ns_j] *
                proc_control_node_DW.P[proc_control_node_B.i +
                proc_control_node_B.Ns_j];
            }

            proc_control_node_B.idx_i += 13;
          }

          proc_control_node_B.Ns_j += 13;
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 3;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.i = 0;
          for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 13;
               proc_control_node_B.Ns_m++) {
            proc_control_node_B.Ns = proc_control_node_B.i +
              proc_control_node_B.Ns_j;
            proc_control_node_B.K_k[proc_control_node_B.Ns] = 0.0;
            proc_control_node_B.idx_j = 0;
            proc_control_node_B.idx_i = 0;
            for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
                 proc_control_node_B.ibmat++) {
              proc_control_node_B.K_k[proc_control_node_B.Ns] +=
                proc_control_node_B.Ac[proc_control_node_B.idx_j +
                proc_control_node_B.Ns_m] *
                proc_control_node_B.dHdx[proc_control_node_B.idx_i +
                proc_control_node_B.Ns_j];
              proc_control_node_B.idx_j += 13;
              proc_control_node_B.idx_i += 3;
            }

            proc_control_node_B.i += 3;
          }
        }

        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.C_m[proc_control_node_B.Ns_j] =
            proc_control_node_B.K_k[proc_control_node_B.Ns_j];
          proc_control_node_B.C_m[proc_control_node_B.Ns_j + 1] =
            proc_control_node_B.K_k[proc_control_node_B.Ns_j + 1];
          proc_control_node_B.C_m[proc_control_node_B.Ns_j + 2] =
            proc_control_node_B.K_k[proc_control_node_B.Ns_j + 2];
          proc_control_node_B.Ns_j += 3;
        }

        proc_control_node_trisolve_i
          (proc_control_node_B.TmpSignalConversionAtBuffer,
           proc_control_node_B.C_m);
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.b_C_p[proc_control_node_B.Ns_j] =
            proc_control_node_B.C_m[proc_control_node_B.Ns_j];
          proc_control_node_B.b_C_p[proc_control_node_B.Ns_j + 1] =
            proc_control_node_B.C_m[proc_control_node_B.Ns_j + 1];
          proc_control_node_B.b_C_p[proc_control_node_B.Ns_j + 2] =
            proc_control_node_B.C_m[proc_control_node_B.Ns_j + 2];
          proc_control_node_B.Ns_j += 3;
        }

        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 3;
             proc_control_node_B.i++) {
          proc_control_node_B.z_o[proc_control_node_B.Ns_j] =
            proc_control_node_B.TmpSignalConversionAtBuffer[proc_control_node_B.i];
          proc_control_node_B.z_o[proc_control_node_B.Ns_j + 1] =
            proc_control_node_B.TmpSignalConversionAtBuffer[proc_control_node_B.i
            + 3];
          proc_control_node_B.z_o[proc_control_node_B.Ns_j + 2] =
            proc_control_node_B.TmpSignalConversionAtBuffer[proc_control_node_B.i
            + 6];
          proc_control_node_B.Ns_j += 3;
        }

        proc_control_node_trisolve_iq(proc_control_node_B.z_o,
          proc_control_node_B.b_C_p);
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 3;
             proc_control_node_B.i++) {
          proc_control_node_B.Ns_m = 0;
          for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 13;
               proc_control_node_B.idx_j++) {
            proc_control_node_B.K_k[proc_control_node_B.idx_j +
              proc_control_node_B.Ns_j] =
              proc_control_node_B.b_C_p[proc_control_node_B.Ns_m +
              proc_control_node_B.i];
            proc_control_node_B.Ns_m += 3;
          }

          proc_control_node_B.Ns_j += 13;
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 39;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.C_m[proc_control_node_B.Ns_j] =
            -proc_control_node_B.K_k[proc_control_node_B.Ns_j];
        }

        proc_control_node_B.Ns_j = 0;
        proc_control_node_B.i = 0;
        for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 13;
             proc_control_node_B.Ns_m++) {
          for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 13;
               proc_control_node_B.idx_j++) {
            proc_control_node_B.idx_m = proc_control_node_B.idx_j +
              proc_control_node_B.Ns_j;
            proc_control_node_B.A[proc_control_node_B.idx_m] = 0.0;
            proc_control_node_B.A[proc_control_node_B.idx_m] +=
              proc_control_node_B.dHdx[proc_control_node_B.i] *
              proc_control_node_B.C_m[proc_control_node_B.idx_j];
            proc_control_node_B.A[proc_control_node_B.idx_m] +=
              proc_control_node_B.dHdx[proc_control_node_B.i + 1] *
              proc_control_node_B.C_m[proc_control_node_B.idx_j + 13];
            proc_control_node_B.A[proc_control_node_B.idx_m] +=
              proc_control_node_B.dHdx[proc_control_node_B.i + 2] *
              proc_control_node_B.C_m[proc_control_node_B.idx_j + 26];
          }

          proc_control_node_B.Ns_j += 13;
          proc_control_node_B.i += 3;
        }

        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S296>/Enable'

        // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
        //   EnablePort: '<S338>/Enable'

        proc_control_node_B.ibmat = 0;

        // End of Outputs for SubSystem: '<S335>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
        for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 13;
             proc_control_node_B.idx_m++) {
          proc_control_node_B.Ns_j = 0;
          proc_control_node_B.i = 0;
          for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 3;
               proc_control_node_B.Ns_m++) {
            // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
            //   EnablePort: '<S4>/Enable'

            // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
            //   EnablePort: '<S1>/Enable'

            // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
            // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
            //   EnablePort: '<S296>/Enable'

            // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
            //   EnablePort: '<S338>/Enable'

            proc_control_node_B.Ns = proc_control_node_B.Ns_j +
              proc_control_node_B.idx_m;
            proc_control_node_B.C_m[proc_control_node_B.Ns] = 0.0;
            proc_control_node_B.C_m[proc_control_node_B.Ns] +=
              proc_control_node_P.R2_Value[proc_control_node_B.i] *
              proc_control_node_B.K_k[proc_control_node_B.idx_m];
            proc_control_node_B.C_m[proc_control_node_B.Ns] +=
              proc_control_node_P.R2_Value[proc_control_node_B.i + 1] *
              proc_control_node_B.K_k[proc_control_node_B.idx_m + 13];
            proc_control_node_B.C_m[proc_control_node_B.Ns] +=
              proc_control_node_P.R2_Value[proc_control_node_B.i + 2] *
              proc_control_node_B.K_k[proc_control_node_B.idx_m + 26];

            // End of Outputs for SubSystem: '<S335>/Subsystem2'
            // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
            // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
            // End of Outputs for SubSystem: '<Root>/Modèle Physique'
            // End of Outputs for SubSystem: '<Root>/ROS Output'
            proc_control_node_B.Ns_j += 13;
            proc_control_node_B.i += 3;
          }

          // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
          //   EnablePort: '<S4>/Enable'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S296>/Enable'

          // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
          //   EnablePort: '<S338>/Enable'

          proc_control_node_B.A[proc_control_node_B.ibmat]++;
          proc_control_node_B.ibmat += 14;

          // End of Outputs for SubSystem: '<S335>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          // End of Outputs for SubSystem: '<Root>/ROS Output'
        }

        proc_control_node_qrFactor_lm(proc_control_node_B.A,
          proc_control_node_DW.P, proc_control_node_B.C_m);
        proc_control_node_B.rtb_sincos_o2_idx_0 = proc_control_node_B.Sum -
          proc_control_node_DW.x[7];
        proc_control_node_B.rtb_sincos_o2_idx_1 = proc_control_node_B.Sum_o -
          proc_control_node_DW.x[8];
        proc_control_node_B.rtb_sincos_o2_idx_2 = proc_control_node_B.Sum_c -
          proc_control_node_DW.x[9];

        // DataStoreWrite: '<S351>/Data Store WriteX' incorporates:
        //   DataStoreRead: '<S351>/Data Store ReadX'
        //   MATLAB Function: '<S351>/Correct'

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          proc_control_node_DW.x[proc_control_node_B.Ns_j] +=
            (proc_control_node_B.K_k[proc_control_node_B.Ns_j + 13] *
             proc_control_node_B.rtb_sincos_o2_idx_1 +
             proc_control_node_B.K_k[proc_control_node_B.Ns_j] *
             proc_control_node_B.rtb_sincos_o2_idx_0) +
            proc_control_node_B.K_k[proc_control_node_B.Ns_j + 26] *
            proc_control_node_B.rtb_sincos_o2_idx_2;
        }

        // End of DataStoreWrite: '<S351>/Data Store WriteX'
      }

      // End of DataTypeConversion: '<S349>/DataTypeConversion_Enable2'
      // End of Outputs for SubSystem: '<S349>/Correct2'

      // Outputs for Atomic SubSystem: '<S349>/Output'
      // DataStoreRead: '<S352>/Data Store Read'
      std::memcpy(&proc_control_node_B.DataStoreRead[0],
                  &proc_control_node_DW.x[0], 13U * sizeof(real_T));

      // End of Outputs for SubSystem: '<S349>/Output'

      // Outputs for Atomic SubSystem: '<S349>/Predict'
      // MATLAB Function: '<S353>/Predict' incorporates:
      //   Constant: '<S349>/Q'
      //   DataStoreRead: '<S353>/Data Store ReadX'
      //   DataStoreWrite: '<S353>/Data Store WriteP'

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.Gain_fn[proc_control_node_B.Ns_j] = 0.0;
      }

      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 2;
           proc_control_node_B.idx_m++) {
        proc_con_AUVQuatPerturbedSimFcn(proc_control_node_DW.x,
          proc_control_node_B.Gain_fn, proc_control_node_B.ZeroOrderHold_e,
          proc_control_node_B.TmpSignalConversionAtSFun_b);
      }

      std::memcpy(&proc_control_node_B.z_f[0], &proc_control_node_DW.x[0], 13U *
                  sizeof(real_T));
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.Gain_fn[proc_control_node_B.Ns_j] = 0.0;
      }

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 2;
           proc_control_node_B.i++) {
        proc_con_AUVQuatPerturbedSimFcn(proc_control_node_DW.x,
          proc_control_node_B.Gain_fn, proc_control_node_B.ZeroOrderHold_e,
          proc_control_node_B.TmpSignalConversionAtTransp);
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.z_f[proc_control_node_B.Ns_j] +=
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.Ns_j]
            * 0.01;
        }
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.Gain_fn[proc_control_node_B.Ns_j] = 0.0;
      }

      for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 13;
           proc_control_node_B.Ns++) {
        std::memcpy(&proc_control_node_B.TmpSignalConversionAtSFun_b[0],
                    &proc_control_node_DW.x[0], 13U * sizeof(real_T));
        proc_control_node_B.epsilon = std::fmax(1.4901161193847656E-8,
          1.4901161193847656E-8 * std::abs
          (proc_control_node_DW.x[proc_control_node_B.Ns]));
        proc_control_node_B.TmpSignalConversionAtSFun_b[proc_control_node_B.Ns] =
          proc_control_node_DW.x[proc_control_node_B.Ns] +
          proc_control_node_B.epsilon;
        std::memcpy(&proc_control_node_B.imz[0],
                    &proc_control_node_B.TmpSignalConversionAtSFun_b[0], 13U *
                    sizeof(real_T));
        for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 2;
             proc_control_node_B.idx_m++) {
          proc_con_AUVQuatPerturbedSimFcn
            (proc_control_node_B.TmpSignalConversionAtSFun_b,
             proc_control_node_B.Gain_fn, proc_control_node_B.ZeroOrderHold_e,
             proc_control_node_B.TmpSignalConversionAtTransp);
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.imz[proc_control_node_B.Ns_j] +=
              proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.Ns_j]
              * 0.01;
          }
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.A[proc_control_node_B.Ns_j + 13 *
            proc_control_node_B.Ns] =
            (proc_control_node_B.imz[proc_control_node_B.Ns_j] -
             proc_control_node_B.z_f[proc_control_node_B.Ns_j]) /
            proc_control_node_B.epsilon;
        }
      }

      std::memcpy(&proc_control_node_B.TmpSignalConversionAtSFun_b[0],
                  &proc_control_node_DW.x[0], 13U * sizeof(real_T));
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.Gain_fn[proc_control_node_B.Ns_j] = 0.0;
      }

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 2;
           proc_control_node_B.i++) {
        proc_con_AUVQuatPerturbedSimFcn(proc_control_node_DW.x,
          proc_control_node_B.Gain_fn, proc_control_node_B.ZeroOrderHold_e,
          proc_control_node_B.TmpSignalConversionAtTransp);
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.TmpSignalConversionAtSFun_b[proc_control_node_B.Ns_j]
            +=
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.Ns_j]
            * 0.01;
        }
      }

      proc_control_node_qrFactor_d(proc_control_node_B.A, proc_control_node_DW.P,
        proc_control_node_P.Q_Value);

      // DataStoreWrite: '<S353>/Data Store WriteX' incorporates:
      //   MATLAB Function: '<S353>/Predict'

      std::memcpy(&proc_control_node_DW.x[0],
                  &proc_control_node_B.TmpSignalConversionAtSFun_b[0], 13U *
                  sizeof(real_T));

      // End of Outputs for SubSystem: '<S349>/Predict'
    }

    // End of Outputs for SubSystem: '<S8>/Subsystem'

    // Sum: '<S348>/Sum' incorporates:
    //   Product: '<S348>/Product'
    //   Product: '<S348>/Product1'
    //   Product: '<S348>/Product2'
    //   Product: '<S348>/Product3'

    proc_control_node_B.Sum_ll = ((proc_control_node_B.DataStoreRead[3] *
      proc_control_node_B.DataStoreRead[3] + proc_control_node_B.DataStoreRead[4]
      * proc_control_node_B.DataStoreRead[4]) +
      proc_control_node_B.DataStoreRead[5] * proc_control_node_B.DataStoreRead[5])
      + proc_control_node_B.DataStoreRead[6] *
      proc_control_node_B.DataStoreRead[6];

    // Product: '<S346>/Divide'
    proc_control_node_B.epsilon = proc_control_node_B.DataStoreRead[3] /
      proc_control_node_B.Sum_ll;

    // Product: '<S346>/Divide1' incorporates:
    //   UnaryMinus: '<S347>/Unary Minus'

    proc_control_node_B.Divide1 = -proc_control_node_B.DataStoreRead[4] /
      proc_control_node_B.Sum_ll;

    // Product: '<S346>/Divide2' incorporates:
    //   UnaryMinus: '<S347>/Unary Minus1'

    proc_control_node_B.Divide2 = -proc_control_node_B.DataStoreRead[5] /
      proc_control_node_B.Sum_ll;

    // Product: '<S346>/Divide3' incorporates:
    //   UnaryMinus: '<S347>/Unary Minus2'

    proc_control_node_B.Divide3 = -proc_control_node_B.DataStoreRead[6] /
      proc_control_node_B.Sum_ll;

    // Outputs for Enabled SubSystem: '<Root>/Sensor Manager' incorporates:
    //   EnablePort: '<S6>/Enable'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_DW.SensorManager_MODE = rtb_Compare_h;
    }

    // End of Outputs for SubSystem: '<Root>/Sensor Manager'
  }

  // Outputs for Enabled SubSystem: '<Root>/Sensor Manager' incorporates:
  //   EnablePort: '<S6>/Enable'

  if (proc_control_node_DW.SensorManager_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Sqrt: '<S145>/sqrt' incorporates:
      //   Product: '<S146>/Product'
      //   Product: '<S146>/Product1'
      //   Product: '<S146>/Product2'
      //   Product: '<S146>/Product3'
      //   Sum: '<S146>/Sum'

      proc_control_node_B.ZeroOrderHold_b = std::sqrt
        (((proc_control_node_B.epsilon * proc_control_node_B.epsilon +
           proc_control_node_B.Divide1 * proc_control_node_B.Divide1) +
          proc_control_node_B.Divide2 * proc_control_node_B.Divide2) +
         proc_control_node_B.Divide3 * proc_control_node_B.Divide3);

      // Product: '<S140>/Product'
      proc_control_node_B.absxk = proc_control_node_B.epsilon /
        proc_control_node_B.ZeroOrderHold_b;

      // Product: '<S140>/Product1'
      proc_control_node_B.scale = proc_control_node_B.Divide1 /
        proc_control_node_B.ZeroOrderHold_b;

      // Product: '<S140>/Product2'
      proc_control_node_B.d = proc_control_node_B.Divide2 /
        proc_control_node_B.ZeroOrderHold_b;

      // Product: '<S140>/Product3'
      proc_control_node_B.ZeroOrderHold_b = proc_control_node_B.Divide3 /
        proc_control_node_B.ZeroOrderHold_b;

      // Fcn: '<S136>/fcn3'
      proc_control_node_B.epsilon = (proc_control_node_B.scale *
        proc_control_node_B.ZeroOrderHold_b + proc_control_node_B.absxk *
        proc_control_node_B.d) * 2.0;

      // If: '<S141>/If' incorporates:
      //   Constant: '<S142>/Constant'
      //   Constant: '<S143>/Constant'

      if (proc_control_node_B.epsilon > 1.0) {
        proc_control_node_B.epsilon = proc_control_node_P.Constant_Value_pz;
      } else if (proc_control_node_B.epsilon < -1.0) {
        proc_control_node_B.epsilon = proc_control_node_P.Constant_Value_pmj;
      }

      // End of If: '<S141>/If'

      // Fcn: '<S136>/fcn2' incorporates:
      //   Fcn: '<S136>/fcn5'

      proc_control_node_B.Divide2 = proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.ZeroOrderHold_b;

      // Trigonometry: '<S139>/trigFcn'
      if (proc_control_node_B.epsilon > 1.0) {
        proc_control_node_B.epsilon = 1.0;
      } else if (proc_control_node_B.epsilon < -1.0) {
        proc_control_node_B.epsilon = -1.0;
      }

      // MATLAB Function: '<S129>/MATLAB Function1' incorporates:
      //   Constant: '<S132>/Constant'
      //   SignalConversion generated from: '<S134>/ SFunction '

      proc_control_node_B.msg_o = proc_control_node_P.Constant_Value_fw;
      proc_control_node_B.msg_o.Pose.Pose.Position.X =
        proc_control_node_B.DataStoreRead[0];
      proc_control_node_B.msg_o.Pose.Pose.Position.Y =
        proc_control_node_B.DataStoreRead[1];
      proc_control_node_B.msg_o.Pose.Pose.Position.Z =
        proc_control_node_B.DataStoreRead[2];

      // Fcn: '<S136>/fcn2' incorporates:
      //   Fcn: '<S136>/fcn5'

      proc_control_node_B.d38 = proc_control_node_B.d * proc_control_node_B.d;

      // MATLAB Function: '<S129>/MATLAB Function1' incorporates:
      //   Fcn: '<S136>/fcn1'
      //   Fcn: '<S136>/fcn2'
      //   Fcn: '<S136>/fcn4'
      //   Fcn: '<S136>/fcn5'
      //   Gain: '<S137>/Gain'
      //   Gain: '<S138>/Gain'
      //   SignalConversion generated from: '<S134>/ SFunction '
      //   Trigonometry: '<S139>/Trigonometric Function1'
      //   Trigonometry: '<S139>/Trigonometric Function3'
      //   Trigonometry: '<S139>/trigFcn'

      proc_control_node_B.msg_o.Pose.Pose.Orientation.X = rt_atan2d_snf
        ((proc_control_node_B.d * proc_control_node_B.ZeroOrderHold_b -
          proc_control_node_B.absxk * proc_control_node_B.scale) * -2.0,
         ((proc_control_node_B.absxk * proc_control_node_B.absxk -
           proc_control_node_B.scale * proc_control_node_B.scale) -
          proc_control_node_B.d38) + proc_control_node_B.Divide2) *
        proc_control_node_P.Gain_Gain_ei;
      proc_control_node_B.msg_o.Pose.Pose.Orientation.Y =
        proc_control_node_P.Gain_Gain_ei * std::asin(proc_control_node_B.epsilon);
      proc_control_node_B.msg_o.Pose.Pose.Orientation.Z = rt_atan2d_snf
        ((proc_control_node_B.scale * proc_control_node_B.d -
          proc_control_node_B.absxk * proc_control_node_B.ZeroOrderHold_b) *
         -2.0, ((proc_control_node_B.absxk * proc_control_node_B.absxk +
                 proc_control_node_B.scale * proc_control_node_B.scale) -
                proc_control_node_B.d38) - proc_control_node_B.Divide2) *
        proc_control_node_P.Gain_Gain_ei;
      proc_control_node_B.msg_o.Twist.Twist.Linear.X =
        proc_control_node_B.DataStoreRead[7];
      proc_control_node_B.msg_o.Twist.Twist.Linear.Y =
        proc_control_node_B.DataStoreRead[8];
      proc_control_node_B.msg_o.Twist.Twist.Linear.Z =
        proc_control_node_B.DataStoreRead[9];
      proc_control_node_B.msg_o.Twist.Twist.Angular.X =
        proc_control_node_P.Gain_Gain_i * proc_control_node_B.DataStoreRead[10];
      proc_control_node_B.msg_o.Twist.Twist.Angular.Y =
        proc_control_node_P.Gain_Gain_i * proc_control_node_B.DataStoreRead[11];
      proc_control_node_B.msg_o.Twist.Twist.Angular.Z =
        proc_control_node_P.Gain_Gain_i * proc_control_node_B.DataStoreRead[12];

      // Outputs for Atomic SubSystem: '<S129>/Publish'
      // MATLABSystem: '<S135>/SinkBlock'
      Pub_proc_control_node_163.publish(&proc_control_node_B.msg_o);

      // End of Outputs for SubSystem: '<S129>/Publish'

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.WorldPosition[0] = proc_control_node_B.DataStoreRead[0];
      proc_control_node_B.WorldPosition[1] = proc_control_node_B.DataStoreRead[1];
      proc_control_node_B.WorldPosition[2] = proc_control_node_B.DataStoreRead[2];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.qS2W[0] = proc_control_node_B.DataStoreRead[3];
      proc_control_node_B.qS2W[1] = proc_control_node_B.DataStoreRead[4];
      proc_control_node_B.qS2W[2] = proc_control_node_B.DataStoreRead[5];
      proc_control_node_B.qS2W[3] = proc_control_node_B.DataStoreRead[6];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.BodyVelocity[0] = proc_control_node_B.DataStoreRead[7];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.AngularRate[0] = proc_control_node_B.DataStoreRead[10];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.BodyVelocity[1] = proc_control_node_B.DataStoreRead[8];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.AngularRate[1] = proc_control_node_B.DataStoreRead[11];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.BodyVelocity[2] = proc_control_node_B.DataStoreRead[9];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.AngularRate[2] = proc_control_node_B.DataStoreRead[12];

      // BusAssignment: '<S128>/Bus Assignment' incorporates:
      //   DataTypeConversion: '<S128>/Cast To Boolean'

      BusAssignment.Data = (proc_control_node_B.y != 0.0);

      // ZeroOrderHold: '<S128>/Zero-Order Hold'
      if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
          (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
        // ZeroOrderHold: '<S128>/Zero-Order Hold'
        proc_control_node_B.ZeroOrderHold_h = BusAssignment;
      }

      // End of ZeroOrderHold: '<S128>/Zero-Order Hold'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // Outputs for Atomic SubSystem: '<S128>/Publish'
      // MATLABSystem: '<S131>/SinkBlock'
      Pub_proc_control_node_116.publish(&proc_control_node_B.ZeroOrderHold_h);

      // End of Outputs for SubSystem: '<S128>/Publish'
    }
  }

  // End of Outputs for SubSystem: '<Root>/Sensor Manager'
  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
    for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 6;
         proc_control_node_B.idx_m++) {
      // DiscreteIntegrator: '<S370>/Integrator' incorporates:
      //   Constant: '<S366>/Constant'
      //   Constant: '<S366>/Constant3'

      if ((proc_control_node_P.Constant_Value_as != 0.0) ||
          (proc_control_node_DW.Integrator_PrevResetState != 0)) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] =
          proc_control_node_P.Constant3_Value;
        if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] >=
            proc_control_node_P.Integrator_UpperSat_a) {
          proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] =
            proc_control_node_P.Integrator_UpperSat_a;
        } else if
            (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] <=
             proc_control_node_P.Integrator_LowerSat_g) {
          proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] =
            proc_control_node_P.Integrator_LowerSat_g;
        }
      }

      if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] >=
          proc_control_node_P.Integrator_UpperSat_a) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] =
          proc_control_node_P.Integrator_UpperSat_a;
      } else if
          (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] <=
           proc_control_node_P.Integrator_LowerSat_g) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] =
          proc_control_node_P.Integrator_LowerSat_g;
      }

      proc_control_node_B.Divide2 =
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m];

      // End of DiscreteIntegrator: '<S370>/Integrator'

      // Saturate: '<S370>/Saturation'
      if (proc_control_node_B.Divide2 >
          proc_control_node_P.Saturation_UpperSat_f) {
        proc_control_node_B.Divide2 = proc_control_node_P.Saturation_UpperSat_f;
      } else if (proc_control_node_B.Divide2 <
                 proc_control_node_P.Saturation_LowerSat_f) {
        proc_control_node_B.Divide2 = proc_control_node_P.Saturation_LowerSat_f;
      }

      // End of Saturate: '<S370>/Saturation'

      // Gain: '<S366>/Gain3'
      proc_control_node_B.Gain3[proc_control_node_B.idx_m] =
        proc_control_node_P.Gain3_Gain * proc_control_node_B.Divide2;
    }

    // Outputs for Atomic SubSystem: '<S360>/Subscribe2'
    // MATLABSystem: '<S367>/SourceBlock' incorporates:
    //   Inport: '<S372>/In1'

    rtb_Compare_h = Sub_proc_control_node_184_1122.getLatestMessage
      (&proc_control_node_B.b_varargout_2_h);

    // Outputs for Enabled SubSystem: '<S367>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S372>/Enable'

    if (rtb_Compare_h) {
      proc_control_node_B.In1_od = proc_control_node_B.b_varargout_2_h;
    }

    // End of MATLABSystem: '<S367>/SourceBlock'
    // End of Outputs for SubSystem: '<S367>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S360>/Subscribe2'

    // Gain: '<S366>/Gain'
    proc_control_node_B.epsilon = 2.0 * proc_control_node_P.zeta_l *
      (6.2831853071795862 * proc_control_node_P.wn_l);
    for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 6;
         proc_control_node_B.idx_m++) {
      // DiscreteIntegrator: '<S371>/Integrator' incorporates:
      //   Constant: '<S366>/Constant1'
      //   Constant: '<S366>/Constant2'

      if ((proc_control_node_P.Constant1_Value_d != 0.0) ||
          (proc_control_node_DW.Integrator_PrevResetState_h != 0)) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] =
          proc_control_node_P.Constant2_Value_m;
        if (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] >=
            proc_control_node_P.Integrator_UpperSat_f) {
          proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] =
            proc_control_node_P.Integrator_UpperSat_f;
        } else if
            (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m]
             <= proc_control_node_P.Integrator_LowerSat_p) {
          proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] =
            proc_control_node_P.Integrator_LowerSat_p;
        }
      }

      if (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] >=
          proc_control_node_P.Integrator_UpperSat_f) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] =
          proc_control_node_P.Integrator_UpperSat_f;
      } else if
          (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] <=
           proc_control_node_P.Integrator_LowerSat_p) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] =
          proc_control_node_P.Integrator_LowerSat_p;
      }

      proc_control_node_B.Divide2 =
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m];

      // End of DiscreteIntegrator: '<S371>/Integrator'

      // Saturate: '<S371>/Saturation'
      if (proc_control_node_B.Divide2 >
          proc_control_node_P.Saturation_UpperSat_m) {
        proc_control_node_B.Divide2 = proc_control_node_P.Saturation_UpperSat_m;
      } else if (proc_control_node_B.Divide2 <
                 proc_control_node_P.Saturation_LowerSat_c) {
        proc_control_node_B.Divide2 = proc_control_node_P.Saturation_LowerSat_c;
      }

      // Gain: '<S366>/Gain'
      proc_control_node_B.Gain_fn[proc_control_node_B.idx_m] =
        proc_control_node_B.epsilon * proc_control_node_B.Divide2;

      // Saturate: '<S371>/Saturation'
      proc_control_node_B.Saturation[proc_control_node_B.idx_m] =
        proc_control_node_B.Divide2;
    }

    // Sum: '<S366>/Sum' incorporates:
    //   Gain: '<S360>/Gain'

    proc_control_node_B.Sum_h[0] = (proc_control_node_B.In1_od.Linear.X -
      proc_control_node_B.Gain3[0]) - proc_control_node_B.Gain_fn[0];
    proc_control_node_B.Sum_h[1] = (proc_control_node_B.In1_od.Linear.Y -
      proc_control_node_B.Gain3[1]) - proc_control_node_B.Gain_fn[1];
    proc_control_node_B.Sum_h[2] = (proc_control_node_B.In1_od.Linear.Z -
      proc_control_node_B.Gain3[2]) - proc_control_node_B.Gain_fn[2];
    proc_control_node_B.Sum_h[3] = (proc_control_node_P.Gain_Gain_g *
      proc_control_node_B.In1_od.Angular.X - proc_control_node_B.Gain3[3]) -
      proc_control_node_B.Gain_fn[3];
    proc_control_node_B.Sum_h[4] = (proc_control_node_P.Gain_Gain_g *
      proc_control_node_B.In1_od.Angular.Y - proc_control_node_B.Gain3[4]) -
      proc_control_node_B.Gain_fn[4];
    proc_control_node_B.Sum_h[5] = (proc_control_node_P.Gain_Gain_g *
      proc_control_node_B.In1_od.Angular.Z - proc_control_node_B.Gain3[5]) -
      proc_control_node_B.Gain_fn[5];

    // MultiPortSwitch: '<S366>/Multiport Switch' incorporates:
    //   Constant: '<S366>/Constant4'

    switch (static_cast<int32_T>
            (proc_control_node_P.SecondOrderFilter_FilterType)) {
     case 1:
      // MultiPortSwitch: '<S366>/Multiport Switch'
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
           proc_control_node_B.i++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i] =
          proc_control_node_B.Gain3[proc_control_node_B.i];
      }
      break;

     case 2:
      // MultiPortSwitch: '<S366>/Multiport Switch'
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
           proc_control_node_B.i++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i] =
          proc_control_node_B.Sum_h[proc_control_node_B.i];
      }
      break;

     case 3:
      // MultiPortSwitch: '<S366>/Multiport Switch'
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
           proc_control_node_B.i++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i] =
          proc_control_node_B.Gain_fn[proc_control_node_B.i];
      }
      break;

     default:
      // MultiPortSwitch: '<S366>/Multiport Switch' incorporates:
      //   Sum: '<S366>/Sum1'

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
           proc_control_node_B.i++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i] =
          proc_control_node_B.Sum_h[proc_control_node_B.i] +
          proc_control_node_B.Gain3[proc_control_node_B.i];
      }
      break;
    }

    // End of MultiPortSwitch: '<S366>/Multiport Switch'
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[6] == 0) {
    // Outputs for Atomic SubSystem: '<S9>/Subscribe'
    // MATLABSystem: '<S359>/SourceBlock'
    proc_control_node_B.SourceBlock_o1 =
      Sub_proc_control_node_184_1581.getLatestMessage
      (&proc_control_node_B.b_varargout_2);

    // Outputs for Enabled SubSystem: '<S359>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S365>/Enable'

    if (proc_control_node_B.SourceBlock_o1) {
      // Inport: '<S365>/In1' incorporates:
      //   MATLABSystem: '<S359>/SourceBlock'

      proc_control_node_B.In1 = proc_control_node_B.b_varargout_2;
    }

    // End of Outputs for SubSystem: '<S359>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S9>/Subscribe'
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    int8_T rtPrevAction;

    // SwitchCase: '<S9>/Switch Case' incorporates:
    //   Concatenate: '<S376>/Matrix Concatenate'
    //   Constant: '<S376>/Constant1'
    //   Logic: '<S363>/OR'
    //   MATLABSystem: '<S379>/SourceBlock'

    rtPrevAction = proc_control_node_DW.SwitchCase_ActiveSubsystem_m;
    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      switch (proc_control_node_B.DataTypeConversion_j) {
       case 19:
       case 20:
       case 21:
        rtAction = 0;
        break;

       case 10:
        rtAction = 1;
        break;

       case 11:
       case 30:
       case 31:
       case 40:
       case 41:
        rtAction = 2;
        break;

       default:
        rtAction = 3;
        break;
      }

      proc_control_node_DW.SwitchCase_ActiveSubsystem_m = rtAction;
    } else {
      rtAction = proc_control_node_DW.SwitchCase_ActiveSubsystem_m;
    }

    switch (rtAction) {
     case 0:
      // Outputs for IfAction SubSystem: '<S9>/SubsystemManual' incorporates:
      //   ActionPort: '<S362>/Action Port'

      // SignalConversion generated from: '<S362>/Transpose' incorporates:
      //   Constant: '<S362>/Constant7'

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 7;
           proc_control_node_B.i++) {
        proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i] =
          proc_control_node_P.Constant7_Value[proc_control_node_B.i];
      }

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
           proc_control_node_B.i++) {
        proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i +
          7] = proc_control_node_B.MultiportSwitch[proc_control_node_B.i];
      }

      // MATLAB Function: '<S362>/MATLAB Function1' incorporates:
      //   Math: '<S362>/Transpose'

      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 13;
           proc_control_node_B.idx_m++) {
        proc_control_node_B.ibmat = proc_control_node_B.idx_m * 10;
        for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 10;
             proc_control_node_B.Ns++) {
          proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.ibmat
            + proc_control_node_B.Ns] =
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.idx_m];
        }
      }

      // End of MATLAB Function: '<S362>/MATLAB Function1'
      // End of Outputs for SubSystem: '<S9>/SubsystemManual'
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S9>/SubsystemAuto' incorporates:
      //   ActionPort: '<S361>/Action Port'

      // RelationalOperator: '<S374>/Compare' incorporates:
      //   Constant: '<S374>/Constant'

      rtb_Compare_h = (static_cast<int32_T>(proc_control_node_B.SourceBlock_o1) >
                       static_cast<int32_T>
                       (proc_control_node_P.Constant_Value_hm));

      // SignalConversion generated from: '<S361>/MATLAB System'
      proc_control_node_B.Bu_nl[0] = proc_control_node_B.WorldPosition[0];
      proc_control_node_B.Bu_nl[1] = proc_control_node_B.WorldPosition[1];
      proc_control_node_B.Bu_nl[2] = proc_control_node_B.WorldPosition[2];
      proc_control_node_B.Bu_nl[3] = proc_control_node_B.qS2W[0];
      proc_control_node_B.Bu_nl[4] = proc_control_node_B.qS2W[1];
      proc_control_node_B.Bu_nl[5] = proc_control_node_B.qS2W[2];
      proc_control_node_B.Bu_nl[6] = proc_control_node_B.qS2W[3];
      proc_control_node_B.Bu_nl[7] = proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.Bu_nl[10] = proc_control_node_B.AngularRate[0];
      proc_control_node_B.Bu_nl[8] = proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.Bu_nl[11] = proc_control_node_B.AngularRate[1];
      proc_control_node_B.Bu_nl[9] = proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.Bu_nl[12] = proc_control_node_B.AngularRate[2];

      // SignalConversion generated from: '<S361>/MATLAB System' incorporates:
      //   MATLABSystem: '<S361>/MATLAB System'
      //   Merge: '<S9>/Merge1'
      //   RelationalOperator: '<S373>/FixPt Relational Operator'
      //   UnitDelay: '<S373>/Delay Input1'
      //
      //  Block description for '<S373>/Delay Input1':
      //
      //   Store in Global RAM

      MultiTrajectoryManager_stepImpl(&proc_control_node_DW.obj_o, static_cast<
        int32_T>(rtb_Compare_h) > static_cast<int32_T>
        (proc_control_node_DW.DelayInput1_DSTATE),
        proc_control_node_B.In1.Transforms,
        proc_control_node_B.In1.Transforms_SL_Info.ReceivedLength,
        proc_control_node_B.In1.Velocities, proc_control_node_B.MATLABSystem_o6,
        proc_control_node_B.Bu_nl,
        proc_control_node_B.CostFcn_workspace_runtimedata.ref,
        &proc_control_node_B.isReached,
        &proc_control_node_B.TmpMLSysMemLayoutBufferAtMATL_m,
        proc_control_node_B.TmpSignalConversionAtMATLAB);
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 7;
           proc_control_node_B.Ns_j++) {
        // SignalConversion generated from: '<S361>/MATLAB System' incorporates:
        //   MATLABSystem: '<S361>/MATLAB System'

        proc_control_node_B.TmpMLSysMemLayoutBufferAtMATLAB[proc_control_node_B.Ns_j]
          =
          proc_control_node_B.TmpSignalConversionAtMATLAB[proc_control_node_B.Ns_j];
      }

      // Update for UnitDelay: '<S373>/Delay Input1'
      //
      //  Block description for '<S373>/Delay Input1':
      //
      //   Store in Global RAM

      proc_control_node_DW.DelayInput1_DSTATE = rtb_Compare_h;

      // End of Outputs for SubSystem: '<S9>/SubsystemAuto'
      break;

     case 2:
      {
        if (rtAction != rtPrevAction) {
          // InitializeConditions for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S363>/Action Port'

          // InitializeConditions for SwitchCase: '<S9>/Switch Case' incorporates:
          //   Delay: '<S363>/Delay1'

          proc_control_node_DW.Delay1_DSTATE_c =
            proc_control_node_P.Delay1_InitialCondition_k;

          // End of InitializeConditions for SubSystem: '<S9>/singleWpts Trajectory' 

          // SystemReset for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S363>/Action Port'

          //  Fonction Reset
          //  Initialize / reset discrete-state properties
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 18;
               proc_control_node_B.Ns_j++) {
            // SystemReset for SwitchCase: '<S9>/Switch Case' incorporates:
            //   MATLABSystem: '<S363>/MATLAB System1'

            proc_control_node_DW.obj_a.poseList[proc_control_node_B.Ns_j] =
              999.0;
          }

          // SystemReset for SwitchCase: '<S9>/Switch Case' incorporates:
          //   DiscreteIntegrator: '<S381>/Discrete-Time Integrator'
          //   MATLABSystem: '<S363>/MATLAB System1'

          proc_control_node_DW.obj_a.poseList[0] = 0.0;
          proc_control_node_DW.obj_a.poseList[2] = 0.0;
          proc_control_node_DW.obj_a.poseList[4] = 0.0;
          proc_control_node_DW.obj_a.poseList[6] = 1.0;
          proc_control_node_DW.obj_a.poseList[8] = 0.0;
          proc_control_node_DW.obj_a.poseList[10] = 0.0;
          proc_control_node_DW.obj_a.poseList[12] = 0.0;
          proc_control_node_DW.obj_a.poseList[14] = 0.0;
          proc_control_node_DW.obj_a.poseList[16] = 0.0;

          // initCond(1,1:7);
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 7;
               proc_control_node_B.Ns_j++) {
            proc_control_node_DW.obj_a.initcond[proc_control_node_B.Ns_j] =
              tmp_2[proc_control_node_B.Ns_j];
          }

          proc_control_node_DW.obj_a.i = 2.0;

          // SystemReset for Resettable SubSystem: '<S363>/Trajectory generator' 
          proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
            proc_control_node_P.DiscreteTimeIntegrator_IC;

          // End of SystemReset for SubSystem: '<S363>/Trajectory generator'
          // End of SystemReset for SubSystem: '<S9>/singleWpts Trajectory'
          //  Fonction reset
          //  Initialize / reset discrete-state properties
        }

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S363>/Action Port'

        // Outputs for Atomic SubSystem: '<S363>/Subscribe'
        // MATLABSystem: '<S379>/SourceBlock'
        rtb_Compare_h = Sub_proc_control_node_184_1168.getLatestMessage
          (&proc_control_node_B.b_varargout_2_p);

        // Outputs for Enabled SubSystem: '<S363>/Subsystem1' incorporates:
        //   EnablePort: '<S380>/Enable'

        // Outputs for Enabled SubSystem: '<S379>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S398>/Enable'

        if (rtb_Compare_h) {
          // DataTypeConversion: '<S380>/Data Type Conversion'
          proc_control_node_B.DataTypeConversion[0] =
            proc_control_node_B.b_varargout_2_p.Position.X;
          proc_control_node_B.DataTypeConversion[1] =
            proc_control_node_B.b_varargout_2_p.Position.Y;
          proc_control_node_B.DataTypeConversion[2] =
            proc_control_node_B.b_varargout_2_p.Position.Z;
          proc_control_node_B.DataTypeConversion[3] =
            proc_control_node_B.b_varargout_2_p.Orientation.Z;
          proc_control_node_B.DataTypeConversion[4] =
            proc_control_node_B.b_varargout_2_p.Orientation.Y;
          proc_control_node_B.DataTypeConversion[5] =
            proc_control_node_B.b_varargout_2_p.Orientation.X;

          // DataTypeConversion: '<S380>/Data Type Conversion1'
          proc_control_node_B.DataTypeConversion1[0] =
            proc_control_node_B.b_varargout_2_p.Frame;
          proc_control_node_B.DataTypeConversion1[1] =
            proc_control_node_B.b_varargout_2_p.Speed;

          // DataTypeConversion: '<S380>/Data Type Conversion2'
          proc_control_node_B.DataTypeConversion2 =
            proc_control_node_B.b_varargout_2_p.Fine;
        }

        // End of Outputs for SubSystem: '<S379>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S363>/Subsystem1'
        // End of Outputs for SubSystem: '<S363>/Subscribe'

        // SignalConversion generated from: '<S363>/MATLAB System1' incorporates:
        //   MATLABSystem: '<S379>/SourceBlock'

        for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
             proc_control_node_B.i++) {
          proc_control_node_B.TmpSignalConversionAtBuffer[proc_control_node_B.i]
            = proc_control_node_B.DataTypeConversion[proc_control_node_B.i];
        }

        proc_control_node_B.TmpSignalConversionAtBuffer[6] =
          proc_control_node_B.DataTypeConversion1[0];
        proc_control_node_B.TmpSignalConversionAtBuffer[7] =
          proc_control_node_B.DataTypeConversion1[1];
        proc_control_node_B.TmpSignalConversionAtBuffer[8] =
          proc_control_node_B.DataTypeConversion2;

        // SignalConversion generated from: '<S363>/MATLAB System1'
        proc_control_node_B.TmpSignalConversionAtMATLAB[0] =
          proc_control_node_B.WorldPosition[0];
        proc_control_node_B.TmpSignalConversionAtMATLAB[1] =
          proc_control_node_B.WorldPosition[1];
        proc_control_node_B.TmpSignalConversionAtMATLAB[2] =
          proc_control_node_B.WorldPosition[2];

        // MATLABSystem: '<S363>/MATLAB System1' incorporates:
        //   Constant: '<S363>/Constant'
        //   Delay: '<S363>/Delay1'
        //   MATLABSystem: '<S379>/SourceBlock'
        //   SignalConversion generated from: '<S363>/MATLAB System1'

        //  Main appeller à chaque exécution
        //  Suppression du buffer.
        //  ======================================================================== 
        //  Sous Routines
        // ==========================================================================         
        //  Fonction qui interprete les message ROS
        if (proc_control_node_P.Constant_Value_ha == 1.0) {
          //  supprimer le buffer de way points
          proc_control_node_B.Ns_j = 0;
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 9;
               proc_control_node_B.i++) {
            proc_control_node_DW.obj_a.poseList[proc_control_node_B.Ns_j + 1] =
              999.0;
            proc_control_node_B.Ns_j += 2;
          }

          proc_control_node_DW.obj_a.i = 2.0;
        }

        // Outputs for Atomic SubSystem: '<S363>/Subscribe'
        //  Ajout d'un waypoint provenant de ROS.
        if (rtb_Compare_h && (proc_control_node_DW.obj_a.i <= 2.0)) {
          uint8_T tmp;

          // ==========================================================================    
          //  Fonction qui interprete les waypoints reçu par ROS
          //  Determiner le quaternion en fonction des angles d'euler.
          //  Orde de rotation : ZYX.
          //  Reel
          //  Information sur le nouveau waypoints
          std::memset(&proc_control_node_B.z_o[0], 0, 9U * sizeof(real_T));
          proc_control_node_B.z_o[7] = proc_control_node_B.DataTypeConversion1[1];

          //  Information de la pose précédente
          //  LastPosition
          //  LastQuaternion
          //  transformer les angle d'euler quaternions
          proc_control_node_B.rtb_u2_g = 0.017453292519943295 *
            proc_control_node_B.TmpSignalConversionAtBuffer[3] / 2.0;
          proc_control_node_B.c_h[0] = proc_control_node_B.rtb_u2_g;
          proc_control_node_B.u2[0] = proc_control_node_B.rtb_u2_g;
          proc_control_node_B.rtb_u2_g = 0.017453292519943295 *
            proc_control_node_B.TmpSignalConversionAtBuffer[4] / 2.0;
          proc_control_node_B.c_h[1] = proc_control_node_B.rtb_u2_g;
          proc_control_node_B.u2[1] = proc_control_node_B.rtb_u2_g;
          proc_control_node_B.rtb_u2_g = 0.017453292519943295 *
            proc_control_node_B.TmpSignalConversionAtBuffer[5] / 2.0;
          proc_control_node_B.c_h[0] = std::cos(proc_control_node_B.c_h[0]);
          proc_control_node_B.c_h[1] = std::cos(proc_control_node_B.c_h[1]);
          proc_control_node_B.c_h[2] = std::cos(proc_control_node_B.rtb_u2_g);
          proc_control_node_B.u2[0] = std::sin(proc_control_node_B.u2[0]);
          proc_control_node_B.u2[1] = std::sin(proc_control_node_B.u2[1]);
          proc_control_node_B.u2[2] = std::sin(proc_control_node_B.rtb_u2_g);
          proc_control_node_B.epsilon = proc_control_node_B.c_h[0] *
            proc_control_node_B.c_h[1];
          proc_control_node_B.Divide2 = proc_control_node_B.u2[0] *
            proc_control_node_B.u2[1];
          proc_control_node_B.n[0] = proc_control_node_B.epsilon *
            proc_control_node_B.c_h[2] + proc_control_node_B.Divide2 *
            proc_control_node_B.u2[2];
          proc_control_node_B.n[1] = proc_control_node_B.epsilon *
            proc_control_node_B.u2[2] - proc_control_node_B.Divide2 *
            proc_control_node_B.c_h[2];
          proc_control_node_B.epsilon = proc_control_node_B.u2[0] *
            proc_control_node_B.c_h[1];
          proc_control_node_B.Divide2 = proc_control_node_B.c_h[0] *
            proc_control_node_B.u2[1];
          proc_control_node_B.n[2] = proc_control_node_B.Divide2 *
            proc_control_node_B.c_h[2] + proc_control_node_B.epsilon *
            proc_control_node_B.u2[2];
          proc_control_node_B.n[3] = proc_control_node_B.epsilon *
            proc_control_node_B.c_h[2] - proc_control_node_B.Divide2 *
            proc_control_node_B.u2[2];

          //  calculer
          //  quaternion partie scalaire
          //  quaternion partie vectoriel
          proc_control_node_B.Divide1 = 0.0;
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 3;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.Divide1 += proc_control_node_DW.obj_a.poseList
              [(((proc_control_node_B.ibmat + 4) << 1) + static_cast<int32_T>
                (proc_control_node_DW.obj_a.i - 1.0)) - 1] *
              proc_control_node_B.TmpSignalConversionAtBuffer[proc_control_node_B.ibmat];
          }

          proc_control_node_B.epsilon = 2.0 * proc_control_node_B.Divide1;
          proc_control_node_B.Divide1 = 0.0;
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 3;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.t16 = proc_control_node_DW.obj_a.poseList
              [(((proc_control_node_B.ibmat + 4) << 1) + static_cast<int32_T>
                (proc_control_node_DW.obj_a.i - 1.0)) - 1];
            proc_control_node_B.Divide1 += proc_control_node_B.t16 *
              proc_control_node_B.t16;
          }

          proc_control_node_B.t16 = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 5];
          proc_control_node_B.Divide1 = proc_control_node_B.t16 *
            proc_control_node_B.t16 - proc_control_node_B.Divide1;
          proc_control_node_B.Divide2 = proc_control_node_B.t16 * 2.0;

          //  QuatRotate n'est pas compilable
          //  choisir sens du quaternion
          proc_control_node_B.TmpSignalConversionAtSFunct[0] =
            proc_control_node_B.n[0];
          proc_control_node_B.TmpSignalConversionAtSFunct[1] =
            proc_control_node_B.n[1];
          proc_control_node_B.TmpSignalConversionAtSFunct[2] =
            proc_control_node_B.n[2];
          proc_control_node_B.TmpSignalConversionAtSFunct[3] =
            proc_control_node_B.n[3];

          // ==========================================================================    
          //  Fonnction qui retoure le quaternion le plus court/long selon
          //  l'utilisateur
          proc_control_node_B.Divide3 = 0.0;
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 4;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.Divide3 += proc_control_node_DW.obj_a.poseList
              [(((proc_control_node_B.ibmat + 3) << 1) + static_cast<int32_T>
                (proc_control_node_DW.obj_a.i - 1.0)) - 1] *
              proc_control_node_B.n[proc_control_node_B.ibmat];
          }

          //  conjuger le quaternion au besoin
          if (((proc_control_node_B.Divide3 > 1.0) &&
               (proc_control_node_B.DataTypeConversion2 == 0.0)) ||
              ((proc_control_node_B.Divide3 < 1.0) &&
               (proc_control_node_B.DataTypeConversion2 == 1.0))) {
            proc_control_node_B.TmpSignalConversionAtSFunct[0] =
              proc_control_node_B.n[0];
            proc_control_node_B.TmpSignalConversionAtSFunct[1] =
              -proc_control_node_B.n[1];
            proc_control_node_B.TmpSignalConversionAtSFunct[2] =
              -proc_control_node_B.n[2];
            proc_control_node_B.TmpSignalConversionAtSFunct[3] =
              -proc_control_node_B.n[3];
          }

          //  transformer le point en fonction du frame
          proc_control_node_B.rtb_sincos_o2_idx_2 = std::round
            (proc_control_node_B.DataTypeConversion1[0]);
          if (proc_control_node_B.rtb_sincos_o2_idx_2 < 256.0) {
            if (proc_control_node_B.rtb_sincos_o2_idx_2 >= 0.0) {
              tmp = static_cast<uint8_T>(proc_control_node_B.rtb_sincos_o2_idx_2);
            } else {
              tmp = 0U;
            }
          } else {
            tmp = MAX_uint8_T;
          }

          switch (tmp) {
           case 0U:
            //  position et angle absolue
            proc_control_node_B.z_o[0] =
              proc_control_node_B.TmpSignalConversionAtBuffer[0];
            proc_control_node_B.z_o[1] =
              proc_control_node_B.TmpSignalConversionAtBuffer[1];
            proc_control_node_B.z_o[2] =
              proc_control_node_B.TmpSignalConversionAtBuffer[2];
            proc_control_node_B.z_o[3] = proc_control_node_B.n[0];
            proc_control_node_B.z_o[4] = proc_control_node_B.n[1];
            proc_control_node_B.z_o[5] = proc_control_node_B.n[2];
            proc_control_node_B.z_o[6] = proc_control_node_B.n[3];
            break;

           case 1U:
            //  position et angle relatif
            proc_control_node_B.Divide3 = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
            proc_control_node_B.t15 = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
            proc_control_node_B.rtb_sincos_o2_idx_2 =
              proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0) + 9];
            proc_control_node_B.z_o[0] =
              ((proc_control_node_B.rtb_sincos_o2_idx_2 *
                proc_control_node_B.TmpSignalConversionAtBuffer[2] -
                proc_control_node_B.Divide3 *
                proc_control_node_B.TmpSignalConversionAtBuffer[1]) *
               proc_control_node_B.Divide2 + (proc_control_node_B.t15 *
                proc_control_node_B.epsilon + proc_control_node_B.Divide1 *
                proc_control_node_B.TmpSignalConversionAtBuffer[0])) +
              proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0) - 1];
            proc_control_node_B.z_o[1] = ((proc_control_node_B.Divide3 *
              proc_control_node_B.TmpSignalConversionAtBuffer[0] -
              proc_control_node_B.t15 *
              proc_control_node_B.TmpSignalConversionAtBuffer[2]) *
              proc_control_node_B.Divide2 +
              (proc_control_node_B.rtb_sincos_o2_idx_2 *
               proc_control_node_B.epsilon + proc_control_node_B.Divide1 *
               proc_control_node_B.TmpSignalConversionAtBuffer[1])) +
              proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0) + 1];
            proc_control_node_B.z_o[2] = ((proc_control_node_B.t15 *
              proc_control_node_B.TmpSignalConversionAtBuffer[1] -
              proc_control_node_B.rtb_sincos_o2_idx_2 *
              proc_control_node_B.TmpSignalConversionAtBuffer[0]) *
              proc_control_node_B.Divide2 + (proc_control_node_B.Divide3 *
              proc_control_node_B.epsilon + proc_control_node_B.Divide1 *
              proc_control_node_B.TmpSignalConversionAtBuffer[2])) +
              proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0) + 3];
            proc_control_node_B.z_o[3] = ((proc_control_node_B.t16 *
              proc_control_node_B.TmpSignalConversionAtSFunct[0] -
              proc_control_node_B.t15 *
              proc_control_node_B.TmpSignalConversionAtSFunct[1]) -
              proc_control_node_B.rtb_sincos_o2_idx_2 *
              proc_control_node_B.TmpSignalConversionAtSFunct[2]) -
              proc_control_node_B.Divide3 *
              proc_control_node_B.TmpSignalConversionAtSFunct[3];
            proc_control_node_B.z_o[4] = (proc_control_node_B.t16 *
              proc_control_node_B.TmpSignalConversionAtSFunct[1] +
              proc_control_node_B.t15 *
              proc_control_node_B.TmpSignalConversionAtSFunct[0]) +
              (proc_control_node_B.rtb_sincos_o2_idx_2 *
               proc_control_node_B.TmpSignalConversionAtSFunct[3] -
               proc_control_node_B.Divide3 *
               proc_control_node_B.TmpSignalConversionAtSFunct[2]);
            proc_control_node_B.z_o[5] = (proc_control_node_B.t16 *
              proc_control_node_B.TmpSignalConversionAtSFunct[2] +
              proc_control_node_B.rtb_sincos_o2_idx_2 *
              proc_control_node_B.TmpSignalConversionAtSFunct[0]) +
              (proc_control_node_B.Divide3 *
               proc_control_node_B.TmpSignalConversionAtSFunct[1] -
               proc_control_node_B.t15 *
               proc_control_node_B.TmpSignalConversionAtSFunct[3]);
            proc_control_node_B.z_o[6] = (proc_control_node_B.t16 *
              proc_control_node_B.TmpSignalConversionAtSFunct[3] +
              proc_control_node_B.Divide3 *
              proc_control_node_B.TmpSignalConversionAtSFunct[0]) +
              (proc_control_node_B.t15 *
               proc_control_node_B.TmpSignalConversionAtSFunct[2] -
               proc_control_node_B.rtb_sincos_o2_idx_2 *
               proc_control_node_B.TmpSignalConversionAtSFunct[1]);
            break;

           case 2U:
            //  position relatif et angle absolue
            proc_control_node_B.scale = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
            proc_control_node_B.d = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
            proc_control_node_B.Divide3 = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 9];
            proc_control_node_B.z_o[0] = ((proc_control_node_B.Divide3 *
              proc_control_node_B.TmpSignalConversionAtBuffer[2] -
              proc_control_node_B.scale *
              proc_control_node_B.TmpSignalConversionAtBuffer[1]) *
              proc_control_node_B.Divide2 + (proc_control_node_B.d *
              proc_control_node_B.epsilon + proc_control_node_B.Divide1 *
              proc_control_node_B.TmpSignalConversionAtBuffer[0])) +
              proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0) - 1];
            proc_control_node_B.z_o[1] = ((proc_control_node_B.scale *
              proc_control_node_B.TmpSignalConversionAtBuffer[0] -
              proc_control_node_B.d *
              proc_control_node_B.TmpSignalConversionAtBuffer[2]) *
              proc_control_node_B.Divide2 + (proc_control_node_B.Divide3 *
              proc_control_node_B.epsilon + proc_control_node_B.Divide1 *
              proc_control_node_B.TmpSignalConversionAtBuffer[1])) +
              proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0) + 1];
            proc_control_node_B.z_o[2] = ((proc_control_node_B.d *
              proc_control_node_B.TmpSignalConversionAtBuffer[1] -
              proc_control_node_B.Divide3 *
              proc_control_node_B.TmpSignalConversionAtBuffer[0]) *
              proc_control_node_B.Divide2 + (proc_control_node_B.scale *
              proc_control_node_B.epsilon + proc_control_node_B.Divide1 *
              proc_control_node_B.TmpSignalConversionAtBuffer[2])) +
              proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0) + 3];
            proc_control_node_B.z_o[3] = proc_control_node_B.n[0];
            proc_control_node_B.z_o[4] = proc_control_node_B.n[1];
            proc_control_node_B.z_o[5] = proc_control_node_B.n[2];
            proc_control_node_B.z_o[6] = proc_control_node_B.n[3];
            break;

           case 3U:
            //  position absolue et angle relatif
            proc_control_node_B.z_o[0] =
              proc_control_node_B.TmpSignalConversionAtBuffer[0];
            proc_control_node_B.z_o[1] =
              proc_control_node_B.TmpSignalConversionAtBuffer[1];
            proc_control_node_B.z_o[2] =
              proc_control_node_B.TmpSignalConversionAtBuffer[2];
            proc_control_node_B.scale = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
            proc_control_node_B.d = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 9];
            proc_control_node_B.Divide3 = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
            proc_control_node_B.z_o[3] = ((proc_control_node_B.t16 *
              proc_control_node_B.TmpSignalConversionAtSFunct[0] -
              proc_control_node_B.scale *
              proc_control_node_B.TmpSignalConversionAtSFunct[1]) -
              proc_control_node_B.d *
              proc_control_node_B.TmpSignalConversionAtSFunct[2]) -
              proc_control_node_B.Divide3 *
              proc_control_node_B.TmpSignalConversionAtSFunct[3];
            proc_control_node_B.z_o[4] = (proc_control_node_B.t16 *
              proc_control_node_B.TmpSignalConversionAtSFunct[1] +
              proc_control_node_B.scale *
              proc_control_node_B.TmpSignalConversionAtSFunct[0]) +
              (proc_control_node_B.d *
               proc_control_node_B.TmpSignalConversionAtSFunct[3] -
               proc_control_node_B.Divide3 *
               proc_control_node_B.TmpSignalConversionAtSFunct[2]);
            proc_control_node_B.z_o[5] = (proc_control_node_B.t16 *
              proc_control_node_B.TmpSignalConversionAtSFunct[2] +
              proc_control_node_B.d *
              proc_control_node_B.TmpSignalConversionAtSFunct[0]) +
              (proc_control_node_B.Divide3 *
               proc_control_node_B.TmpSignalConversionAtSFunct[1] -
               proc_control_node_B.scale *
               proc_control_node_B.TmpSignalConversionAtSFunct[3]);
            proc_control_node_B.z_o[6] = (proc_control_node_B.t16 *
              proc_control_node_B.TmpSignalConversionAtSFunct[3] +
              proc_control_node_B.Divide3 *
              proc_control_node_B.TmpSignalConversionAtSFunct[0]) +
              (proc_control_node_B.scale *
               proc_control_node_B.TmpSignalConversionAtSFunct[2] -
               proc_control_node_B.d *
               proc_control_node_B.TmpSignalConversionAtSFunct[1]);
            break;

           default:
            //  retourne le point précédent
            proc_control_node_B.z_o[0] = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) - 1];
            proc_control_node_B.z_o[1] = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 1];
            proc_control_node_B.z_o[2] = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 3];
            proc_control_node_B.z_o[3] = proc_control_node_B.t16;
            proc_control_node_B.z_o[4] = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
            proc_control_node_B.z_o[5] = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 9];
            proc_control_node_B.z_o[6] = proc_control_node_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
            break;
          }

          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 9;
               proc_control_node_B.Ns_j++) {
            proc_control_node_DW.obj_a.poseList[(static_cast<int32_T>
              (proc_control_node_DW.obj_a.i) + (proc_control_node_B.Ns_j << 1))
              - 1] = proc_control_node_B.z_o[proc_control_node_B.Ns_j];
          }

          proc_control_node_DW.obj_a.i++;
        }

        // End of Outputs for SubSystem: '<S363>/Subscribe'
        //  Générer la trajectoire
        if (proc_control_node_DW.Delay1_DSTATE_c) {
          proc_control_node_B.Ns_j = static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0);
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 9;
               proc_control_node_B.i++) {
            proc_control_node_B.Ns_m = proc_control_node_B.i << 1;
            proc_control_node_DW.obj_a.poseList[proc_control_node_B.Ns_m] =
              proc_control_node_DW.obj_a.poseList[(proc_control_node_B.Ns_m +
              proc_control_node_B.Ns_j) - 1];
            proc_control_node_DW.obj_a.poseList[proc_control_node_B.Ns_m + 1] =
              999.0;
          }

          proc_control_node_DW.obj_a.i = 2.0;
        }

        //  Reset Trajectoire
        if (proc_control_node_B.MATLABSystem_o6 != 0.0) {
          // ========================================================================== 
          // ==========================================================================    
          //  Fonction qui reset la trajectoire
          //  remove roll and pitch from initial condition
          proc_control_node_B.Divide1 = 1.0 / std::sqrt
            (((proc_control_node_B.qS2W[0] * proc_control_node_B.qS2W[0] +
               proc_control_node_B.qS2W[1] * proc_control_node_B.qS2W[1]) +
              proc_control_node_B.qS2W[2] * proc_control_node_B.qS2W[2]) +
             proc_control_node_B.qS2W[3] * proc_control_node_B.qS2W[3]);
          proc_control_node_B.n[0] = proc_control_node_B.qS2W[0] *
            proc_control_node_B.Divide1;
          proc_control_node_B.n[1] = proc_control_node_B.qS2W[1] *
            proc_control_node_B.Divide1;
          proc_control_node_B.n[2] = proc_control_node_B.qS2W[2] *
            proc_control_node_B.Divide1;
          proc_control_node_B.n[3] = proc_control_node_B.qS2W[3] *
            proc_control_node_B.Divide1;
          proc_control_node_B.epsilon = (proc_control_node_B.n[1] *
            proc_control_node_B.n[3] + proc_control_node_B.n[0] *
            proc_control_node_B.n[2]) * 2.0;
          rtb_Merge_h = (proc_control_node_B.epsilon >= 0.99999999999999778);
          rtb_NewDvlMsg = (proc_control_node_B.epsilon <= -0.99999999999999778);
          proc_control_node_B.scale = proc_control_node_B.epsilon;
          if (proc_control_node_B.epsilon >= 0.99999999999999778) {
            proc_control_node_B.scale = 1.0;
          }

          if (rtb_NewDvlMsg) {
            proc_control_node_B.scale = -1.0;
          }

          proc_control_node_B.t16 = proc_control_node_B.n[0] *
            proc_control_node_B.n[0];
          proc_control_node_B.t15 = proc_control_node_B.n[1] *
            proc_control_node_B.n[1];
          proc_control_node_B.epsilon = proc_control_node_B.n[2] *
            proc_control_node_B.n[2];
          proc_control_node_B.Divide2 = proc_control_node_B.n[3] *
            proc_control_node_B.n[3];
          proc_control_node_B.c_h[0] = rt_atan2d_snf((proc_control_node_B.n[2] *
            proc_control_node_B.n[3] - proc_control_node_B.n[0] *
            proc_control_node_B.n[1]) * -2.0, ((proc_control_node_B.t16 -
            proc_control_node_B.t15) - proc_control_node_B.epsilon) +
            proc_control_node_B.Divide2);
          proc_control_node_B.c_h[2] = rt_atan2d_snf((proc_control_node_B.n[1] *
            proc_control_node_B.n[2] - proc_control_node_B.n[0] *
            proc_control_node_B.n[3]) * -2.0, ((proc_control_node_B.t16 +
            proc_control_node_B.t15) - proc_control_node_B.epsilon) -
            proc_control_node_B.Divide2);
          proc_control_node_B.ibmat = 0;
          proc_control_node_B.Ns = 0;
          if (rtb_Merge_h || rtb_NewDvlMsg) {
            for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 1;
                 proc_control_node_B.idx_m++) {
              proc_control_node_B.Ns++;
            }
          }

          if (0 <= proc_control_node_B.Ns - 1) {
            proc_control_node_B.c_h[0] = 0.0;
          }

          proc_control_node_B.Ns = 0;
          if (rtb_Merge_h || rtb_NewDvlMsg) {
            for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 1;
                 proc_control_node_B.idx_m++) {
              proc_control_node_B.Ns++;
            }
          }

          proc_control_node_B.Ns_j = proc_control_node_B.Ns;
          if (0 <= proc_control_node_B.Ns - 1) {
            proc_control_node_B.t7 = proc_control_node_B.scale;
          }

          proc_control_node_B.idx_m = proc_control_node_B.Ns - 1;
          for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns <=
               proc_control_node_B.idx_m; proc_control_node_B.Ns++) {
            if (proc_control_node_B.t7 < 0.0) {
              proc_control_node_B.epsilon = -1.0;
            } else if (proc_control_node_B.t7 > 0.0) {
              proc_control_node_B.epsilon = 1.0;
            } else if (proc_control_node_B.t7 == 0.0) {
              proc_control_node_B.epsilon = 0.0;
            } else {
              proc_control_node_B.epsilon = (rtNaN);
            }

            proc_control_node_B.t7 = proc_control_node_B.epsilon;
          }

          if (rtb_Merge_h || rtb_NewDvlMsg) {
            for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 1;
                 proc_control_node_B.Ns++) {
              proc_control_node_B.ibmat++;
            }
          }

          if (0 <= proc_control_node_B.ibmat - 1) {
            proc_control_node_B.t8 = rt_atan2d_snf(proc_control_node_B.n[1],
              proc_control_node_B.n[0]);
          }

          if (0 <= proc_control_node_B.Ns_j - 1) {
            proc_control_node_B.c_h[2] = proc_control_node_B.t7 * 2.0 *
              proc_control_node_B.t8;
          }

          //  Retransformer en quaternion
          proc_control_node_B.u2[0] = proc_control_node_B.c_h[0] * 0.0 / 2.0;
          proc_control_node_B.u2[1] = std::asin(proc_control_node_B.scale) * 0.0
            / 2.0;
          proc_control_node_B.u2[2] = proc_control_node_B.c_h[2] / 2.0;
          proc_control_node_B.c_h[0] = std::cos(proc_control_node_B.u2[0]);
          proc_control_node_B.c_h[1] = std::cos(proc_control_node_B.u2[1]);
          proc_control_node_B.c_h[2] = std::cos(proc_control_node_B.u2[2]);
          proc_control_node_B.u2[0] = std::sin(proc_control_node_B.u2[0]);
          proc_control_node_B.u2[1] = std::sin(proc_control_node_B.u2[1]);
          proc_control_node_B.u2[2] = std::sin(proc_control_node_B.u2[2]);
          proc_control_node_B.epsilon = proc_control_node_B.c_h[0] *
            proc_control_node_B.c_h[1];
          proc_control_node_B.Divide2 = proc_control_node_B.u2[0] *
            proc_control_node_B.u2[1];
          proc_control_node_B.TmpSignalConversionAtMATLAB[3] =
            proc_control_node_B.epsilon * proc_control_node_B.c_h[2] -
            proc_control_node_B.Divide2 * proc_control_node_B.u2[2];
          proc_control_node_B.Divide3 = proc_control_node_B.c_h[0] *
            proc_control_node_B.u2[1];
          proc_control_node_B.TmpSignalConversionAtMATLAB[4] =
            proc_control_node_B.u2[0] * proc_control_node_B.c_h[1] *
            proc_control_node_B.c_h[2] + proc_control_node_B.Divide3 *
            proc_control_node_B.u2[2];
          proc_control_node_B.TmpSignalConversionAtMATLAB[5] =
            -proc_control_node_B.u2[0] * proc_control_node_B.c_h[1] *
            proc_control_node_B.u2[2] + proc_control_node_B.Divide3 *
            proc_control_node_B.c_h[2];
          proc_control_node_B.TmpSignalConversionAtMATLAB[6] =
            proc_control_node_B.epsilon * proc_control_node_B.u2[2] +
            proc_control_node_B.Divide2 * proc_control_node_B.c_h[2];
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 7;
               proc_control_node_B.Ns_j++) {
            proc_control_node_DW.obj_a.initcond[proc_control_node_B.Ns_j] =
              proc_control_node_B.TmpSignalConversionAtMATLAB[proc_control_node_B.Ns_j];
          }

          //  definir les conditions initiaux
          proc_control_node_B.Ns_j = 0;
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 9;
               proc_control_node_B.i++) {
            proc_control_node_DW.obj_a.poseList[proc_control_node_B.Ns_j + 1] =
              999.0;
            proc_control_node_B.Ns_j += 2;
          }

          proc_control_node_DW.obj_a.poseList[14] = 0.0;
          proc_control_node_DW.obj_a.poseList[16] = 0.0;
          proc_control_node_B.Ns_j = 0;
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 7;
               proc_control_node_B.i++) {
            proc_control_node_DW.obj_a.poseList[proc_control_node_B.Ns_j] =
              proc_control_node_DW.obj_a.initcond[proc_control_node_B.i];
            proc_control_node_DW.obj_a.poseList[proc_control_node_B.Ns_j + 1] =
              proc_control_node_DW.obj_a.initcond[proc_control_node_B.i];
            proc_control_node_B.Ns_j += 2;
          }

          proc_control_node_DW.obj_a.poseList[15] = 1.0;
          proc_control_node_DW.obj_a.poseList[17] = 0.0;
          proc_control_node_DW.obj_a.i = 2.0;
        }

        // Outputs for Enabled SubSystem: '<S363>/Pre-traitement' incorporates:
        //   EnablePort: '<S376>/Enable'

        // Outputs for Atomic SubSystem: '<S363>/Subscribe'
        if (rtb_Compare_h || (proc_control_node_B.MATLABSystem_o6 != 0.0)) {
          proc_control_node_B.MatrixConcatenate[0] =
            proc_control_node_P.Constant1_Value_o;

          // Math: '<S376>/Transpose' incorporates:
          //   Concatenate: '<S376>/Matrix Concatenate'
          //   Constant: '<S376>/Constant1'
          //   MATLABSystem: '<S363>/MATLAB System1'
          //   Selector: '<S376>/Selector'
          //   Selector: '<S376>/Selector1'

          proc_control_node_B.Ns_j = 0;
          proc_control_node_B.i = 0;
          proc_control_node_B.Ns_m = 0;
          for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 2;
               proc_control_node_B.idx_j++) {
            proc_control_node_B.idx_i = 0;
            for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 9;
                 proc_control_node_B.ibmat++) {
              proc_control_node_B.Transpose_i[proc_control_node_B.ibmat +
                proc_control_node_B.i] =
                proc_control_node_DW.obj_a.poseList[proc_control_node_B.idx_i +
                proc_control_node_B.idx_j];
              proc_control_node_B.idx_i += 2;
            }

            proc_control_node_B.Selector[proc_control_node_B.Ns_j] =
              proc_control_node_B.Transpose_i[proc_control_node_B.i];
            proc_control_node_B.Selector[proc_control_node_B.Ns_j + 1] =
              proc_control_node_B.Transpose_i[proc_control_node_B.i + 1];
            proc_control_node_B.Selector[proc_control_node_B.Ns_j + 2] =
              proc_control_node_B.Transpose_i[proc_control_node_B.i + 2];
            proc_control_node_B.Selector1[proc_control_node_B.Ns_m] =
              proc_control_node_B.Transpose_i[proc_control_node_B.i + 3];
            proc_control_node_B.Selector1[proc_control_node_B.Ns_m + 1] =
              proc_control_node_B.Transpose_i[proc_control_node_B.i + 4];
            proc_control_node_B.Selector1[proc_control_node_B.Ns_m + 2] =
              proc_control_node_B.Transpose_i[proc_control_node_B.i + 5];
            proc_control_node_B.Selector1[proc_control_node_B.Ns_m + 3] =
              proc_control_node_B.Transpose_i[proc_control_node_B.i + 6];
            proc_control_node_B.Ns_j += 3;
            proc_control_node_B.i += 9;
            proc_control_node_B.Ns_m += 4;
          }

          // End of Math: '<S376>/Transpose'

          // Selector: '<S376>/Selector2' incorporates:
          //   Concatenate: '<S376>/Matrix Concatenate'
          //   Math: '<S376>/Transpose'

          proc_control_node_B.MatrixConcatenate[1] =
            proc_control_node_B.Transpose_i[16];
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 7;
               proc_control_node_B.Ns_j++) {
            // Selector: '<S376>/Selector4' incorporates:
            //   Math: '<S376>/Transpose'

            proc_control_node_B.Selector4[proc_control_node_B.Ns_j] =
              proc_control_node_B.Transpose_i[proc_control_node_B.Ns_j + 9];
          }
        }

        // End of Outputs for SubSystem: '<S363>/Pre-traitement'

        // Outputs for Resettable SubSystem: '<S363>/Trajectory generator' incorporates:
        //   ResetPort: '<S381>/Reset'

        if (rtb_Compare_h &&
            (proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE != 1)) {
          // InitializeConditions for DiscreteIntegrator: '<S381>/Discrete-Time Integrator' 
          proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
            proc_control_node_P.DiscreteTimeIntegrator_IC;
        }

        proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE = rtb_Compare_h;

        // End of Outputs for SubSystem: '<S363>/Subscribe'

        // DiscreteIntegrator: '<S381>/Discrete-Time Integrator' incorporates:
        //   Concatenate: '<S376>/Matrix Concatenate'
        //   Constant: '<S376>/Constant1'
        //   Constant: '<S381>/Constant'
        //   Logic: '<S363>/OR'
        //   MATLABSystem: '<S379>/SourceBlock'

        proc_control_node_B.Divide3 =
          proc_control_node_P.DiscreteTimeIntegrator_gainval *
          proc_control_node_P.Constant_Value_ep;

        // DiscreteIntegrator: '<S381>/Discrete-Time Integrator'
        proc_control_node_B.epsilon = proc_control_node_B.Divide3 +
          proc_control_node_DW.DiscreteTimeIntegrator_DSTATE;

        // MATLABSystem: '<S381>/Rotation Trajectory' incorporates:
        //   Concatenate: '<S376>/Matrix Concatenate'
        //   Selector: '<S376>/Selector1'
        //   Selector: '<S381>/Selector1'
        //   Selector: '<S381>/Selector2'

        if (proc_control_node_DW.obj_j.TunablePropsChanged) {
          proc_control_node_DW.obj_j.TunablePropsChanged = false;
        }

        proc_control_node_B.u2[0] = 0.0;
        proc_control_node_B.u2[1] = 0.0;
        proc_control_node_B.u2[2] = 0.0;
        proc_control_node_rottraj(&proc_control_node_B.Selector1[0],
          &proc_control_node_B.Selector1[4],
          proc_control_node_B.MatrixConcatenate, proc_control_node_B.epsilon,
          proc_control_node_B.n, &proc_control_node_B.u2[0],
          proc_control_node_B.c_h);

        // MATLABSystem: '<S363>/MATLAB System' incorporates:
        //   MATLABSystem: '<S381>/Rotation Trajectory'

        proc_control_node_B.Bu_nl[3] = proc_control_node_B.n[0];
        proc_control_node_B.Bu_nl[4] = proc_control_node_B.n[1];
        proc_control_node_B.Bu_nl[5] = proc_control_node_B.n[2];
        proc_control_node_B.Bu_nl[6] = proc_control_node_B.n[3];

        // MATLABSystem: '<S399>/Polynomial Trajectory1' incorporates:
        //   Concatenate: '<S376>/Matrix Concatenate'
        //   MATLABSystem: '<S363>/MATLAB System1'
        //   Selector: '<S376>/Selector'

        rtb_Merge_h = false;
        rtb_NewDvlMsg = true;
        proc_control_node_B.ibmat = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.ibmat < 6)) {
          if (!(proc_control_node_DW.obj_jo.VelocityBoundaryCondition[proc_control_node_B.ibmat]
                ==
                proc_control_node_P.PolynomialTrajectory1_VelocityB[proc_control_node_B.ibmat]))
          {
            rtb_NewDvlMsg = false;
            exitg1 = true;
          } else {
            proc_control_node_B.ibmat++;
          }
        }

        if (rtb_NewDvlMsg) {
          rtb_Merge_h = true;
        }

        if (!rtb_Merge_h) {
          if (proc_control_node_DW.obj_jo.isInitialized == 1) {
            proc_control_node_DW.obj_jo.TunablePropsChanged = true;
          }

          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
               proc_control_node_B.Ns_j++) {
            proc_control_node_DW.obj_jo.VelocityBoundaryCondition[proc_control_node_B.Ns_j]
              =
              proc_control_node_P.PolynomialTrajectory1_VelocityB[proc_control_node_B.Ns_j];
          }
        }

        if (proc_control_node_DW.obj_jo.TunablePropsChanged) {
          proc_control_node_DW.obj_jo.TunablePropsChanged = false;
        }

        std::memset(&proc_control_node_B.TmpSignalConversionAtSFun_p[0], 0, 12U *
                    sizeof(real_T));
        proc_control_node_B.t16 = proc_control_node_B.MatrixConcatenate[1] -
          proc_control_node_B.MatrixConcatenate[0];
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 3;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.n[0] =
            proc_control_node_B.Selector[proc_control_node_B.ibmat];
          proc_control_node_B.n[1] =
            proc_control_node_DW.obj_jo.VelocityBoundaryCondition[proc_control_node_B.ibmat];
          proc_control_node_B.Divide1 =
            proc_control_node_B.Selector[proc_control_node_B.ibmat + 3] -
            (proc_control_node_B.t16 * proc_control_node_B.n[1] +
             proc_control_node_B.n[0]);
          proc_control_node_B.t15 =
            proc_control_node_DW.obj_jo.VelocityBoundaryCondition[proc_control_node_B.ibmat
            + 3] - (0.0 * proc_control_node_B.n[0] + proc_control_node_B.n[1]);
          proc_control_node_B.n[3] = proc_control_node_B.n[0];
          proc_control_node_B.Divide2 = proc_control_node_B.t16 *
            proc_control_node_B.t16;
          proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.ibmat]
            = 1.0 / proc_control_node_B.Divide2 * proc_control_node_B.t15 + -2.0
            / rt_powd_snf(proc_control_node_B.t16, 3.0) *
            proc_control_node_B.Divide1;
          proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.ibmat
            + 3] = 3.0 / proc_control_node_B.Divide2 *
            proc_control_node_B.Divide1 + -1.0 / proc_control_node_B.t16 *
            proc_control_node_B.t15;
          proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.ibmat
            + 6] = proc_control_node_B.n[1];
          proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.ibmat
            + 9] = proc_control_node_B.n[3];
        }

        std::memset(&proc_control_node_B.coeffMat[0], 0, 12U * sizeof(real_T));
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 3;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j + 9] = 0.0;
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j + 9] +=
            proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.Ns_j]
            * 0.0;
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j + 9] +=
            proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.Ns_j
            + 3] * 0.0;
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j + 9] +=
            proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.Ns_j
            + 6] * 0.0;
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j + 9] +=
            proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.Ns_j
            + 9];
        }

        std::memset(&proc_control_node_B.coefsWithFlatStart[0], 0, 24U * sizeof
                    (real_T));
        proc_control_node_B.Ns_j = 0;
        proc_control_node_B.i = 0;
        for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 4;
             proc_control_node_B.Ns_m++) {
          proc_control_node_B.coefsWithFlatStart[proc_control_node_B.Ns_j] =
            proc_control_node_B.coeffMat[proc_control_node_B.i];
          proc_control_node_B.coefsWithFlatStart[proc_control_node_B.Ns_j + 3] =
            proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.i];
          proc_control_node_B.coefsWithFlatStart[proc_control_node_B.Ns_j + 1] =
            proc_control_node_B.coeffMat[proc_control_node_B.i + 1];
          proc_control_node_B.coefsWithFlatStart[proc_control_node_B.Ns_j + 4] =
            proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.i
            + 1];
          proc_control_node_B.coefsWithFlatStart[proc_control_node_B.Ns_j + 2] =
            proc_control_node_B.coeffMat[proc_control_node_B.i + 2];
          proc_control_node_B.coefsWithFlatStart[proc_control_node_B.Ns_j + 5] =
            proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.i
            + 2];
          proc_control_node_B.Ns_j += 6;
          proc_control_node_B.i += 3;
        }

        proc_control_node_B.n[0] = rt_powd_snf(proc_control_node_B.t16, 3.0);
        proc_control_node_B.n[1] = rt_powd_snf(proc_control_node_B.t16, 2.0);
        proc_control_node_B.n[2] = rt_powd_snf(proc_control_node_B.t16, 1.0);
        proc_control_node_B.n[3] = rt_powd_snf(proc_control_node_B.t16, 0.0);
        std::memset(&proc_control_node_B.coeffMat[0], 0, 12U * sizeof(real_T));
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 3;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j + 9] = 0.0;
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j + 9] +=
            proc_control_node_B.coefsWithFlatStart[proc_control_node_B.Ns_j + 3]
            * proc_control_node_B.n[0];
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j + 9] +=
            proc_control_node_B.coefsWithFlatStart[proc_control_node_B.Ns_j + 9]
            * proc_control_node_B.n[1];
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j + 9] +=
            proc_control_node_B.coefsWithFlatStart[proc_control_node_B.Ns_j + 15]
            * proc_control_node_B.n[2];
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j + 9] +=
            proc_control_node_B.coefsWithFlatStart[proc_control_node_B.Ns_j + 21]
            * proc_control_node_B.n[3];
        }

        std::memset(&proc_control_node_B.b_newCoefs_d[0], 0, 36U * sizeof(real_T));
        proc_control_node_B.Ns_j = 0;
        proc_control_node_B.i = 0;
        proc_control_node_B.Ns_m = 0;
        for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 4;
             proc_control_node_B.idx_j++) {
          for (proc_control_node_B.idx_i = 0; proc_control_node_B.idx_i < 6;
               proc_control_node_B.idx_i++) {
            proc_control_node_B.b_newCoefs_d[proc_control_node_B.idx_i +
              proc_control_node_B.Ns_j] =
              proc_control_node_B.coefsWithFlatStart[proc_control_node_B.idx_i +
              proc_control_node_B.Ns_m];
          }

          proc_control_node_B.b_newCoefs_d[proc_control_node_B.Ns_j + 6] =
            proc_control_node_B.coeffMat[proc_control_node_B.i];
          proc_control_node_B.b_newCoefs_d[proc_control_node_B.Ns_j + 7] =
            proc_control_node_B.coeffMat[proc_control_node_B.i + 1];
          proc_control_node_B.b_newCoefs_d[proc_control_node_B.Ns_j + 8] =
            proc_control_node_B.coeffMat[proc_control_node_B.i + 2];
          proc_control_node_B.Ns_j += 9;
          proc_control_node_B.i += 3;
          proc_control_node_B.Ns_m += 6;
        }

        proc_control_node_B.n[0] = proc_control_node_B.MatrixConcatenate[0] -
          1.0;
        proc_control_node_B.n[1] = proc_control_node_B.MatrixConcatenate[0];
        proc_control_node_B.n[2] = proc_control_node_B.MatrixConcatenate[1];
        proc_control_node_B.n[3] = proc_control_node_B.MatrixConcatenate[1] +
          1.0;
        proc_control_node_B.TmpSignalConversionAtSFunct[0] =
          proc_control_node_B.MatrixConcatenate[0] - 1.0;
        proc_control_node_B.TmpSignalConversionAtSFunct[1] =
          proc_control_node_B.MatrixConcatenate[0];
        proc_control_node_B.TmpSignalConversionAtSFunct[3] =
          proc_control_node_B.MatrixConcatenate[1] + 1.0;
        proc_control_node_B.Divide1 = 0.01;
        if (proc_control_node_B.epsilon > proc_control_node_B.MatrixConcatenate
            [1]) {
          proc_control_node_B.idx_m = 1;
          proc_control_node_B.Ns = 1;
        } else {
          proc_control_node_B.idx_m = 0;
          proc_control_node_B.Ns = 0;
        }

        if ((proc_control_node_B.idx_m != 0) && (proc_control_node_B.Ns != 0)) {
          proc_control_node_B.Divide1 = std::fmin((proc_control_node_B.epsilon -
            proc_control_node_B.MatrixConcatenate[1]) / 2.0, 0.01);
        }

        proc_control_node_B.TmpSignalConversionAtSFunct[2] =
          proc_control_node_B.MatrixConcatenate[1] + proc_control_node_B.Divide1;
        std::memset(&proc_control_node_B.dCoefs[0], 0, 36U * sizeof(real_T));
        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 3;
             proc_control_node_B.i++) {
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 9;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.idx_m = proc_control_node_B.Ns_j +
              proc_control_node_B.ibmat;
            proc_control_node_B.dCoefs[proc_control_node_B.idx_m + 9] =
              static_cast<real_T>(3 - proc_control_node_B.i) *
              proc_control_node_B.b_newCoefs_d[proc_control_node_B.idx_m];
          }

          proc_control_node_B.ibmat += 9;
        }

        // Update for DiscreteIntegrator: '<S381>/Discrete-Time Integrator'
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
          proc_control_node_B.Divide3 + proc_control_node_B.epsilon;

        // End of Outputs for SubSystem: '<S363>/Trajectory generator'

        // MATLABSystem: '<S363>/MATLAB System'
        if (proc_control_node_DW.obj.linearConvergence !=
            proc_control_node_P.MATLABSystem_linearConvergence) {
          proc_control_node_DW.obj.linearConvergence =
            proc_control_node_P.MATLABSystem_linearConvergence;
        }

        if (proc_control_node_DW.obj.quaternionConvergence !=
            proc_control_node_P.MATLABSystem_quaternionConverge) {
          proc_control_node_DW.obj.quaternionConvergence =
            proc_control_node_P.MATLABSystem_quaternionConverge;
        }

        if (proc_control_node_DW.obj.TargetThreshold !=
            proc_control_node_P.MATLABSystem_TargetThreshold) {
          proc_control_node_DW.obj.TargetThreshold =
            proc_control_node_P.MATLABSystem_TargetThreshold;
        }

        // Outputs for Resettable SubSystem: '<S363>/Trajectory generator' incorporates:
        //   ResetPort: '<S381>/Reset'

        // MATLABSystem: '<S399>/Polynomial Trajectory1'
        proc_control_node_ppval_b(proc_control_node_B.n,
          proc_control_node_B.b_newCoefs_d, proc_control_node_B.epsilon,
          proc_control_node_B.c_h);
        proc_control_node_ppval_b
          (proc_control_node_B.TmpSignalConversionAtSFunct,
           proc_control_node_B.dCoefs, proc_control_node_B.epsilon,
           proc_control_node_B.dv25);

        // MATLABSystem: '<S363>/MATLAB System' incorporates:
        //   MATLABSystem: '<S381>/Rotation Trajectory'
        //   MATLABSystem: '<S399>/Polynomial Trajectory1'
        //   SignalConversion generated from: '<S363>/Transpose2'

        proc_control_node_B.Bu_nl[0] = proc_control_node_B.c_h[0];
        proc_control_node_B.Bu_nl[1] = proc_control_node_B.c_h[1];
        proc_control_node_B.Bu_nl[2] = proc_control_node_B.c_h[2];
        proc_control_node_B.Bu_nl[7] = proc_control_node_B.dv25[0];
        proc_control_node_B.Bu_nl[10] = proc_control_node_B.u2[0];

        // End of Outputs for SubSystem: '<S363>/Trajectory generator'
        proc_control_node_B.z_f[0] = proc_control_node_B.WorldPosition[0];

        // Outputs for Resettable SubSystem: '<S363>/Trajectory generator' incorporates:
        //   ResetPort: '<S381>/Reset'

        proc_control_node_B.Bu_nl[8] = proc_control_node_B.dv25[1];
        proc_control_node_B.Bu_nl[11] = proc_control_node_B.u2[1];

        // End of Outputs for SubSystem: '<S363>/Trajectory generator'
        proc_control_node_B.z_f[1] = proc_control_node_B.WorldPosition[1];

        // Outputs for Resettable SubSystem: '<S363>/Trajectory generator' incorporates:
        //   ResetPort: '<S381>/Reset'

        proc_control_node_B.Bu_nl[9] = proc_control_node_B.dv25[2];
        proc_control_node_B.Bu_nl[12] = proc_control_node_B.u2[2];

        // End of Outputs for SubSystem: '<S363>/Trajectory generator'
        proc_control_node_B.z_f[2] = proc_control_node_B.WorldPosition[2];
        proc_control_node_B.z_f[3] = proc_control_node_B.qS2W[0];
        proc_control_node_B.z_f[4] = proc_control_node_B.qS2W[1];
        proc_control_node_B.z_f[5] = proc_control_node_B.qS2W[2];
        proc_control_node_B.z_f[6] = proc_control_node_B.qS2W[3];
        proc_control_node_B.z_f[7] = proc_control_node_B.BodyVelocity[0];
        proc_control_node_B.z_f[10] = proc_control_node_B.AngularRate[0];
        proc_control_node_B.z_f[8] = proc_control_node_B.BodyVelocity[1];
        proc_control_node_B.z_f[11] = proc_control_node_B.AngularRate[1];
        proc_control_node_B.z_f[9] = proc_control_node_B.BodyVelocity[2];
        proc_control_node_B.z_f[12] = proc_control_node_B.AngularRate[2];

        // Merge: '<S9>/Merge1' incorporates:
        //   MATLABSystem: '<S363>/MATLAB System'
        //   MATLABSystem: '<S363>/MATLAB System1'
        //   Math: '<S363>/Transpose1'
        //   Selector: '<S376>/Selector4'

        proc_TrajectoryManager_stepImpl(&proc_control_node_DW.obj,
          proc_control_node_B.Bu_nl, proc_control_node_B.Selector4,
          proc_control_node_B.MATLABSystem_o6,
          proc_control_node_DW.obj_a.initcond, proc_control_node_B.z_f,
          proc_control_node_B.CostFcn_workspace_runtimedata.ref,
          &proc_control_node_B.isReached);

        // Outputs for Atomic SubSystem: '<S363>/Subscribe'
        // Update for Delay: '<S363>/Delay1' incorporates:
        //   MATLABSystem: '<S379>/SourceBlock'

        proc_control_node_DW.Delay1_DSTATE_c = rtb_Compare_h;

        // End of Outputs for SubSystem: '<S363>/Subscribe'
        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      }
      break;

     case 3:
      // Outputs for IfAction SubSystem: '<S9>/If Action Subsystem' incorporates:
      //   ActionPort: '<S358>/Action Port'

      // MATLAB Function: '<S358>/MATLAB Function1' incorporates:
      //   Constant: '<S358>/Constant'
      //   Math: '<S358>/Transpose'

      std::memcpy(&proc_control_node_B.TmpSignalConversionAtTransp[0],
                  &proc_control_node_P.Constant_Value_m5[0], 13U * sizeof(real_T));
      proc_control_node_B.TmpSignalConversionAtTransp[9] =
        -proc_control_node_P.Constant_Value_m5[9];
      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 13;
           proc_control_node_B.idx_m++) {
        proc_control_node_B.ibmat = proc_control_node_B.idx_m * 10;
        for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 10;
             proc_control_node_B.Ns++) {
          proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.ibmat
            + proc_control_node_B.Ns] =
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.idx_m];
        }
      }

      // End of MATLAB Function: '<S358>/MATLAB Function1'
      // End of Outputs for SubSystem: '<S9>/If Action Subsystem'
      break;
    }

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Switch: '<S7>/Switch' incorporates:
    //   Constant: '<S7>/Constant'
    //   Constant: '<S7>/Constant1'

    if (proc_control_node_B.DataTypeConversion_j >
        proc_control_node_P.Switch_Threshold_d) {
      proc_control_node_B.rtb_sincos_o2_idx_2 =
        proc_control_node_P.Constant_Value_hf;
    } else {
      proc_control_node_B.rtb_sincos_o2_idx_2 =
        proc_control_node_P.Constant1_Value_f;
    }

    // End of Switch: '<S7>/Switch'

    // Outputs for Enabled SubSystem: '<S7>/MPC manager' incorporates:
    //   EnablePort: '<S148>/Enable'

    if (proc_control_node_B.rtb_sincos_o2_idx_2 > 0.0) {
      if (!proc_control_node_DW.MPCmanager_MODE) {
        // InitializeConditions for MATLABSystem: '<S148>/MPC manager'
        //         %% Fonction Reset
        //  Initialize discrete state
        proc_control_node_DW.obj_f.init = 0.0;
        std::memset(&proc_control_node_DW.obj_f.currentFaultCount[0], 0, sizeof
                    (real_T) << 3U);
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
             proc_control_node_B.Ns_j++) {
          proc_control_node_DW.obj_f.isThrusterFault[proc_control_node_B.Ns_j] =
            false;
        }

        // initialiser les gains debug
        std::memcpy(&proc_control_node_DW.obj_f.rosOV[0], &tmp_0[0], 13U *
                    sizeof(real_T));
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
             proc_control_node_B.Ns_j++) {
          proc_control_node_DW.obj_f.rosMV[proc_control_node_B.Ns_j] = 0.2;
          proc_control_node_DW.obj_f.rosMVR[proc_control_node_B.Ns_j] =
            tmp_1[proc_control_node_B.Ns_j];
        }

        // End of InitializeConditions for MATLABSystem: '<S148>/MPC manager'
        proc_control_node_DW.MPCmanager_MODE = true;
      }

      // Outputs for Atomic SubSystem: '<S148>/Subscribe1'
      // MATLABSystem: '<S292>/SourceBlock' incorporates:
      //   Inport: '<S294>/In1'

      rtb_Compare_h = Sub_proc_control_node_182_1643.getLatestMessage
        (&proc_control_node_B.b_varargout_2_m);

      // Outputs for Enabled SubSystem: '<S292>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S294>/Enable'

      if (rtb_Compare_h) {
        proc_control_node_B.In1_o = proc_control_node_B.b_varargout_2_m;
      }

      // End of Outputs for SubSystem: '<S292>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S148>/Subscribe1'

      // Outputs for Atomic SubSystem: '<S148>/Subscribe'
      // MATLABSystem: '<S291>/SourceBlock' incorporates:
      //   Inport: '<S293>/In1'

      b_varargout_1 = Sub_proc_control_node_182_1620.getLatestMessage
        (&proc_control_node_B.b_varargout_2_c);

      // Outputs for Enabled SubSystem: '<S291>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S293>/Enable'

      if (b_varargout_1) {
        proc_control_node_B.In1_f = proc_control_node_B.b_varargout_2_c;
      }

      // End of Outputs for SubSystem: '<S291>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S148>/Subscribe'

      // MATLABSystem: '<S148>/MPC manager' incorporates:
      //   Delay: '<S7>/Delay'
      //   MATLABSystem: '<S291>/SourceBlock'
      //   MATLABSystem: '<S292>/SourceBlock'
      //   Math: '<S148>/Transpose'

      //         %% Fonction D'initialisation
      //  Conditions initial
      if (proc_control_node_DW.obj_f.init == 0.0) {
        proc_control_node_DW.obj_f.init = 1.0;
      }

      // Outputs for Atomic SubSystem: '<S148>/Subscribe1'
      //  Init function
      //       %% Fonction qui traite les gains recu via ros.
      if (rtb_Compare_h) {
        if (proc_control_node_B.In1_o.OV_SL_Info.CurrentLength == 13U) {
          //  regarder la vaiditée des ov
          std::memcpy(&proc_control_node_DW.obj_f.rosOV[0],
                      &proc_control_node_B.In1_o.OV[0], 13U * sizeof(real_T));
        }

        if (proc_control_node_B.In1_o.MV_SL_Info.CurrentLength == 8U) {
          //  regarder la vaiditée des mv
          std::memcpy(&proc_control_node_DW.obj_f.rosMV[0],
                      &proc_control_node_B.In1_o.MV[0], sizeof(real_T) << 3U);
        }

        if (proc_control_node_B.In1_o.MVR_SL_Info.CurrentLength == 8U) {
          //  regarder la vaiditée des mvr
          std::memcpy(&proc_control_node_DW.obj_f.rosMVR[0],
                      &proc_control_node_B.In1_o.MVR[0], sizeof(real_T) << 3U);
        }
      }

      // End of Outputs for SubSystem: '<S148>/Subscribe1'
      //  traiter les gains recu via ros.
      //         %% Fonction qui détermine les gain
      //  Vérifier si le mode existe
      corr[0] = (10.0 == proc_control_node_B.DataTypeConversion_j);
      corr[1] = (11.0 == proc_control_node_B.DataTypeConversion_j);
      corr[2] = (19.0 == proc_control_node_B.DataTypeConversion_j);
      if (proc_control_node_B.DataTypeConversion_j == 31) {
        //  Mode ros debug
        std::memcpy(&proc_control_node_B.TmpSignalConversionAtTransp[0],
                    &proc_control_node_DW.obj_f.rosOV[0], 13U * sizeof(real_T));
        std::memcpy(&proc_control_node_B.ZeroOrderHold_e[0],
                    &proc_control_node_DW.obj_f.rosMV[0], sizeof(real_T) << 3U);
        std::memcpy(&proc_control_node_B.U_h[0],
                    &proc_control_node_DW.obj_f.rosMVR[0], sizeof(real_T) << 3U);
      } else if ((corr[0] + corr[1]) + corr[2] == 1) {
        //  mode existe et unique
        proc_control_node_B.idx_m = 0;
        proc_control_node_B.ibmat = 1;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.ibmat - 1 < 3)) {
          if (corr[proc_control_node_B.ibmat - 1]) {
            proc_control_node_B.idx_m++;
            proc_control_node_B.ii_data_j[proc_control_node_B.idx_m - 1] =
              proc_control_node_B.ibmat;
            if (proc_control_node_B.idx_m >= 3) {
              exitg1 = true;
            } else {
              proc_control_node_B.ibmat++;
            }
          } else {
            proc_control_node_B.ibmat++;
          }
        }

        if (1 > proc_control_node_B.idx_m) {
          proc_control_node_B.idx_m = 0;
        }

        if (0 <= proc_control_node_B.idx_m - 1) {
          std::memcpy(&proc_control_node_B.i_data[0],
                      &proc_control_node_B.ii_data_j[0],
                      proc_control_node_B.idx_m * sizeof(int32_T));
        }

        if (proc_control_node_B.idx_m == 0) {
          proc_control_node_B.MATLABSystem_o6 = 0.0;
        } else {
          proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.i_data[0];
          for (proc_control_node_B.Ns = 2; proc_control_node_B.Ns <=
               proc_control_node_B.idx_m; proc_control_node_B.Ns++) {
            proc_control_node_B.MATLABSystem_o6 += static_cast<real_T>
              (proc_control_node_B.i_data[proc_control_node_B.Ns - 1]);
          }
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.Ns_j]
            = tmp_3[(((proc_control_node_B.Ns_j + 2) - 1) * 3 +
                     static_cast<int32_T>(proc_control_node_B.MATLABSystem_o6))
            - 1];
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.Ns_j] = tmp_3
            [(((proc_control_node_B.Ns_j + 15) - 1) * 3 + static_cast<int32_T>
              (proc_control_node_B.MATLABSystem_o6)) - 1];
          proc_control_node_B.U_h[proc_control_node_B.Ns_j] = tmp_3
            [(((proc_control_node_B.Ns_j + 23) - 1) * 3 + static_cast<int32_T>
              (proc_control_node_B.MATLABSystem_o6)) - 1];
        }
      } else {
        //  mode non trouver. retourne defaut
        std::memcpy(&proc_control_node_B.TmpSignalConversionAtTransp[0], &tmp_0
                    [0], 13U * sizeof(real_T));
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.Ns_j] = 0.2;
          proc_control_node_B.U_h[proc_control_node_B.Ns_j] =
            tmp_1[proc_control_node_B.Ns_j];
        }
      }

      // Outputs for Atomic SubSystem: '<S148>/Subscribe'
      //  Avoir les gains selon le mode
      //         %% Fonction qui vérifie l'états des moteurs.
      if (b_varargout_1) {
        //  regarder si le courant est en dessou du seuil
        //  Rénitialiser le compteur si thruster est bon
        //  Aditionner les échantillion défectueux
        //  Condition qui vérifie si les thruster sont defectueux
        //  rajouter des moteur défecteux
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
             proc_control_node_B.Ns_j++) {
          rtb_Compare_h =
            (proc_control_node_B.In1_f.Data[proc_control_node_B.Ns_j] <
             static_cast<uint16_T>(static_cast<int32_T>(std::round(static_cast<
                real_T>
                (proc_control_node_DW.Delay_DSTATE_g[proc_control_node_B.Ns_j]) *
                0.1))));
          proc_control_node_DW.obj_f.currentFaultCount[proc_control_node_B.Ns_j]
            *= static_cast<real_T>(rtb_Compare_h);
          proc_control_node_DW.obj_f.currentFaultCount[proc_control_node_B.Ns_j]
            += static_cast<real_T>(rtb_Compare_h);
          proc_control_node_DW.obj_f.isThrusterFault[proc_control_node_B.Ns_j] =
            ((proc_control_node_DW.obj_f.currentFaultCount[proc_control_node_B.Ns_j]
              >= 20.0) +
             proc_control_node_DW.obj_f.isThrusterFault[proc_control_node_B.Ns_j]
             != 0);
        }
      }

      // End of Outputs for SubSystem: '<S148>/Subscribe'
      //  Vérifier l'etats des thrusters
      //         %% Fonction qui applique la saturation des moteurs
      //  Enlever les thrusters defectueux
      //       %% Fonction qui prend la decision de kill le sub
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        // MATLABSystem: '<S148>/MPC manager'
        proc_control_node_B.mvmin[proc_control_node_B.Ns_j] = -30.0 *
          static_cast<real_T>
          (!proc_control_node_DW.obj_f.isThrusterFault[proc_control_node_B.Ns_j]);

        // MATLABSystem: '<S148>/MPC manager'
        proc_control_node_B.mvmax[proc_control_node_B.Ns_j] = 40.0 *
          static_cast<real_T>
          (!proc_control_node_DW.obj_f.isThrusterFault[proc_control_node_B.Ns_j]);
      }

      // MATLABSystem: '<S148>/MPC manager'
      std::memcpy(&proc_control_node_B.ywt[0],
                  &proc_control_node_B.TmpSignalConversionAtTransp[0], 13U *
                  sizeof(real_T));
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        // MATLABSystem: '<S148>/MPC manager'
        proc_control_node_B.mvwt[proc_control_node_B.Ns_j] =
          proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.Ns_j];

        // MATLABSystem: '<S148>/MPC manager'
        proc_control_node_B.dmwwt[proc_control_node_B.Ns_j] =
          proc_control_node_B.U_h[proc_control_node_B.Ns_j];

        // MATLABSystem: '<S148>/MPC manager'
        proc_control_node_B.thrustersStatus[proc_control_node_B.Ns_j] =
          !proc_control_node_DW.obj_f.isThrusterFault[proc_control_node_B.Ns_j];
      }
    } else {
      proc_control_node_DW.MPCmanager_MODE = false;
    }

    // End of Outputs for SubSystem: '<S7>/MPC manager'

    // SwitchCase: '<S147>/Switch Case' incorporates:
    //   Gain: '<S160>/u_scale'
    //   Gain: '<S202>/u_scale'
    //   MATLAB Function: '<S188>/FixedHorizonOptimizer'
    //   MATLAB Function: '<S230>/FixedHorizonOptimizer'
    //   MATLAB Function: '<S264>/FixedHorizonOptimizer'

    rtPrevAction = proc_control_node_DW.SwitchCase_ActiveSubsystem_l;
    switch (proc_control_node_B.DataTypeConversion_j) {
     case 10:
     case 11:
     case 19:
     case 31:
      rtAction = 0;
      break;

     case 20:
     case 21:
      rtAction = 1;
      break;

     case 30:
      rtAction = 2;
      break;

     case 40:
      rtAction = 3;
      break;

     case 41:
      rtAction = 4;
      break;

     default:
      rtAction = 5;
      break;
    }

    proc_control_node_DW.SwitchCase_ActiveSubsystem_l = rtAction;
    switch (rtAction) {
     case 0:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S147>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S151>/Action Port'

        for (proc_control_node_B.i = 0; proc_control_node_B.i < 32;
             proc_control_node_B.i++) {
          // InitializeConditions for SwitchCase: '<S147>/Switch Case' incorporates:
          //   Memory: '<S202>/Memory'

          proc_control_node_DW.Memory_PreviousInput_g[proc_control_node_B.i] =
            proc_control_node_P.Memory_InitialCondition[proc_control_node_B.i];
        }

        // InitializeConditions for SwitchCase: '<S147>/Switch Case' incorporates:
        //   Delay: '<S151>/Delay1'
        //   DiscretePulseGenerator: '<S151>/Pulse Generator'
        //   UnitDelay: '<S202>/last_mv'

        std::memcpy(&proc_control_node_DW.last_mv_DSTATE_f[0],
                    &proc_control_node_P.last_mv_InitialCondition[0], sizeof
                    (real_T) << 3U);
        std::memcpy(&proc_control_node_DW.Delay1_DSTATE_e[0],
                    &proc_control_node_P.Delay1_InitialCondition[0], sizeof
                    (real_T) << 3U);
        proc_control_node_DW.clockTickCounter_j = 0;

        // End of InitializeConditions for SubSystem: '<S147>/Adaptive MPC quaternion ' 
      }

      // Outputs for IfAction SubSystem: '<S147>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S151>/Action Port'

      // SignalConversion generated from: '<S201>/ SFunction ' incorporates:
      //   MATLAB Function: '<S151>/MATLAB Function2'

      proc_control_node_B.TmpSignalConversionAtSFun_b[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtSFun_b[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.TmpSignalConversionAtSFun_b[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.TmpSignalConversionAtSFun_b[3] =
        proc_control_node_B.qS2W[0];
      proc_control_node_B.TmpSignalConversionAtSFun_b[4] =
        proc_control_node_B.qS2W[1];
      proc_control_node_B.TmpSignalConversionAtSFun_b[5] =
        proc_control_node_B.qS2W[2];
      proc_control_node_B.TmpSignalConversionAtSFun_b[6] =
        proc_control_node_B.qS2W[3];
      proc_control_node_B.TmpSignalConversionAtSFun_b[7] =
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.TmpSignalConversionAtSFun_b[10] =
        proc_control_node_B.AngularRate[0];
      proc_control_node_B.TmpSignalConversionAtSFun_b[8] =
        proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.TmpSignalConversionAtSFun_b[11] =
        proc_control_node_B.AngularRate[1];
      proc_control_node_B.TmpSignalConversionAtSFun_b[9] =
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.TmpSignalConversionAtSFun_b[12] =
        proc_control_node_B.AngularRate[2];

      // MATLAB Function: '<S151>/MATLAB Function2' incorporates:
      //   Constant: '<S151>/Constant1'
      //   Constant: '<S151>/Constant3'
      //   Delay: '<S151>/Delay1'

      proc_control_node_B.MATLABSystem_o6 = proc_control_node_P.MPC.dts;
      proc_cont_AUVQuatJacobianMatrix
        (proc_control_node_B.TmpSignalConversionAtSFun_b, proc_control_node_B.Ac);
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 169;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.A[proc_control_node_B.Ns_j] =
          proc_control_node_B.Ac[proc_control_node_B.Ns_j] *
          proc_control_node_P.MPC.Ts;
      }

      proc_control_node_B.Divide1 = 0.0;
      proc_control_node_B.ibmat = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.ibmat < 13)) {
        proc_control_node_B.Divide2 = 0.0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
             proc_control_node_B.i++) {
          proc_control_node_B.Divide2 += std::abs(proc_control_node_B.A[13 *
            proc_control_node_B.ibmat + proc_control_node_B.i]);
        }

        if (std::isnan(proc_control_node_B.Divide2)) {
          proc_control_node_B.Divide1 = (rtNaN);
          exitg1 = true;
        } else {
          if (proc_control_node_B.Divide2 > proc_control_node_B.Divide1) {
            proc_control_node_B.Divide1 = proc_control_node_B.Divide2;
          }

          proc_control_node_B.ibmat++;
        }
      }

      if (proc_control_node_B.Divide1 <= 5.3719203511481517) {
        proc_control_node_B.i = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.i < 5)) {
          if (proc_control_node_B.Divide1 <= theta[proc_control_node_B.i]) {
            proc_co_PadeApproximantOfDegree(proc_control_node_B.A,
              f[proc_control_node_B.i], proc_control_node_B.A_i);
            exitg1 = true;
          } else {
            proc_control_node_B.i++;
          }
        }
      } else {
        proc_control_node_B.Divide1 /= 5.3719203511481517;
        if ((!std::isinf(proc_control_node_B.Divide1)) && (!std::isnan
             (proc_control_node_B.Divide1))) {
          proc_control_node_B.Divide1 = frexp(proc_control_node_B.Divide1,
            &proc_control_node_B.b_s_l);
        } else {
          proc_control_node_B.b_s_l = 0;
        }

        proc_control_node_B.Divide2 = proc_control_node_B.b_s_l;
        if (proc_control_node_B.Divide1 == 0.5) {
          proc_control_node_B.Divide2 = static_cast<real_T>
            (proc_control_node_B.b_s_l) - 1.0;
        }

        proc_control_node_B.Divide1 = rt_powd_snf(2.0,
          proc_control_node_B.Divide2);
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 169;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.A_e[proc_control_node_B.Ns_j] =
            proc_control_node_B.A[proc_control_node_B.Ns_j] /
            proc_control_node_B.Divide1;
        }

        proc_co_PadeApproximantOfDegree(proc_control_node_B.A_e, 13,
          proc_control_node_B.A_i);
        proc_control_node_B.Ns = 0;
        while (proc_control_node_B.Ns <= static_cast<int32_T>
               (proc_control_node_B.Divide2) - 1) {
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.i = 0;
            for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 13;
                 proc_control_node_B.Ns_m++) {
              proc_control_node_B.b_s_l = proc_control_node_B.i +
                proc_control_node_B.Ns_j;
              proc_control_node_B.A[proc_control_node_B.b_s_l] = 0.0;
              proc_control_node_B.idx_j = 0;
              for (proc_control_node_B.idx_i = 0; proc_control_node_B.idx_i < 13;
                   proc_control_node_B.idx_i++) {
                proc_control_node_B.A[proc_control_node_B.b_s_l] +=
                  proc_control_node_B.A_i[proc_control_node_B.idx_j +
                  proc_control_node_B.Ns_j] *
                  proc_control_node_B.A_i[proc_control_node_B.idx_i +
                  proc_control_node_B.i];
                proc_control_node_B.idx_j += 13;
              }

              proc_control_node_B.i += 13;
            }
          }

          std::memcpy(&proc_control_node_B.A_i[0], &proc_control_node_B.A[0],
                      169U * sizeof(real_T));
          proc_control_node_B.Ns++;
        }
      }

      std::memset(&proc_control_node_B.b_newCoefs_d[0], 0, 36U * sizeof(real_T));
      proc_control_node_B.Ns_m = 0;
      proc_control_node_B.i = 0;
      proc_control_node_B.b_s_l = 0;
      for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 6;
           proc_control_node_B.Ns++) {
        proc_control_node_B.b_newCoefs_d[proc_control_node_B.Ns_m] = 1.0;
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.dCoefs[proc_control_node_B.Ns_j +
            proc_control_node_B.i] = proc_control_node_B.Ac
            [(proc_control_node_B.Ns_j + proc_control_node_B.b_s_l) + 98];
        }

        proc_control_node_B.Ns_m += 7;
        proc_control_node_B.i += 6;
        proc_control_node_B.b_s_l += 13;
      }

      proc_control_node_B.Ns_j = 0;
      proc_control_node_B.i = 0;
      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 6;
           proc_control_node_B.Ns_m++) {
        for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 6;
             proc_control_node_B.idx_j++) {
          proc_control_node_B.c_ix = proc_control_node_B.idx_j +
            proc_control_node_B.Ns_j;
          proc_control_node_B.b_newCoefs_d[proc_control_node_B.c_ix] =
            proc_control_node_B.A_i[(proc_control_node_B.idx_j +
            proc_control_node_B.i) + 98] -
            proc_control_node_B.b_newCoefs_d[proc_control_node_B.c_ix];
        }

        proc_control_node_B.ipiv_f[proc_control_node_B.Ns_m] =
          static_cast<int8_T>(proc_control_node_B.Ns_m + 1);
        proc_control_node_B.Ns_j += 6;
        proc_control_node_B.i += 13;
      }

      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 5;
           proc_control_node_B.Ns_m++) {
        proc_control_node_B.Ns_j = proc_control_node_B.Ns_m * 7;
        proc_control_node_B.i = 0;
        proc_control_node_B.Ns = proc_control_node_B.Ns_j;
        proc_control_node_B.epsilon = std::abs
          (proc_control_node_B.dCoefs[proc_control_node_B.Ns_j]);
        proc_control_node_B.ibmat = 2;
        while (proc_control_node_B.ibmat <= 6 - proc_control_node_B.Ns_m) {
          proc_control_node_B.Ns++;
          proc_control_node_B.Divide1 = std::abs
            (proc_control_node_B.dCoefs[proc_control_node_B.Ns]);
          if (proc_control_node_B.Divide1 > proc_control_node_B.epsilon) {
            proc_control_node_B.i = proc_control_node_B.ibmat - 1;
            proc_control_node_B.epsilon = proc_control_node_B.Divide1;
          }

          proc_control_node_B.ibmat++;
        }

        if (proc_control_node_B.dCoefs[proc_control_node_B.Ns_j +
            proc_control_node_B.i] != 0.0) {
          if (proc_control_node_B.i != 0) {
            proc_control_node_B.i += proc_control_node_B.Ns_m;
            proc_control_node_B.ipiv_f[proc_control_node_B.Ns_m] =
              static_cast<int8_T>(proc_control_node_B.i + 1);
            for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
                 proc_control_node_B.ibmat++) {
              proc_control_node_B.epsilon =
                proc_control_node_B.dCoefs[proc_control_node_B.ibmat * 6 +
                proc_control_node_B.Ns_m];
              proc_control_node_B.idx_m = proc_control_node_B.ibmat * 6 +
                proc_control_node_B.i;
              proc_control_node_B.dCoefs[proc_control_node_B.Ns_m +
                proc_control_node_B.ibmat * 6] =
                proc_control_node_B.dCoefs[proc_control_node_B.idx_m];
              proc_control_node_B.dCoefs[proc_control_node_B.idx_m] =
                proc_control_node_B.epsilon;
            }
          }

          proc_control_node_B.i = (proc_control_node_B.Ns_j -
            proc_control_node_B.Ns_m) + 6;
          proc_control_node_B.idx_m = proc_control_node_B.Ns_j + 1;
          while (proc_control_node_B.idx_m + 1 <= proc_control_node_B.i) {
            proc_control_node_B.dCoefs[proc_control_node_B.idx_m] /=
              proc_control_node_B.dCoefs[proc_control_node_B.Ns_j];
            proc_control_node_B.idx_m++;
          }
        }

        proc_control_node_B.i = proc_control_node_B.Ns_j;
        proc_control_node_B.Ns = proc_control_node_B.Ns_j + 6;
        proc_control_node_B.b_s_l = 0;
        while (proc_control_node_B.b_s_l <= 4 - proc_control_node_B.Ns_m) {
          if (proc_control_node_B.dCoefs[proc_control_node_B.Ns] != 0.0) {
            proc_control_node_B.epsilon =
              -proc_control_node_B.dCoefs[proc_control_node_B.Ns];
            proc_control_node_B.c_ix = proc_control_node_B.Ns_j + 1;
            proc_control_node_B.idx_m = proc_control_node_B.i + 7;
            proc_control_node_B.ibmat = (proc_control_node_B.i -
              proc_control_node_B.Ns_m) + 12;
            while (proc_control_node_B.idx_m + 1 <= proc_control_node_B.ibmat) {
              proc_control_node_B.dCoefs[proc_control_node_B.idx_m] +=
                proc_control_node_B.dCoefs[proc_control_node_B.c_ix] *
                proc_control_node_B.epsilon;
              proc_control_node_B.c_ix++;
              proc_control_node_B.idx_m++;
            }
          }

          proc_control_node_B.Ns += 6;
          proc_control_node_B.i += 6;
          proc_control_node_B.b_s_l++;
        }
      }

      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 5;
           proc_control_node_B.idx_m++) {
        rtAction = proc_control_node_B.ipiv_f[proc_control_node_B.idx_m];
        if (proc_control_node_B.idx_m + 1 != rtAction) {
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.epsilon = proc_control_node_B.b_newCoefs_d[6 *
              proc_control_node_B.ibmat + proc_control_node_B.idx_m];
            proc_control_node_B.c_ix = (6 * proc_control_node_B.ibmat + rtAction)
              - 1;
            proc_control_node_B.b_newCoefs_d[proc_control_node_B.idx_m + 6 *
              proc_control_node_B.ibmat] =
              proc_control_node_B.b_newCoefs_d[proc_control_node_B.c_ix];
            proc_control_node_B.b_newCoefs_d[proc_control_node_B.c_ix] =
              proc_control_node_B.epsilon;
          }
        }
      }

      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 6;
           proc_control_node_B.Ns_m++) {
        proc_control_node_B.Ns_j = 6 * proc_control_node_B.Ns_m;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.i = 6 * proc_control_node_B.ibmat;
          if (proc_control_node_B.b_newCoefs_d[proc_control_node_B.ibmat +
              proc_control_node_B.Ns_j] != 0.0) {
            proc_control_node_B.idx_m = proc_control_node_B.ibmat + 2;
            while (proc_control_node_B.idx_m < 7) {
              proc_control_node_B.c_ix = (proc_control_node_B.idx_m +
                proc_control_node_B.Ns_j) - 1;
              proc_control_node_B.b_newCoefs_d[proc_control_node_B.c_ix] -=
                proc_control_node_B.dCoefs[(proc_control_node_B.idx_m +
                proc_control_node_B.i) - 1] *
                proc_control_node_B.b_newCoefs_d[proc_control_node_B.ibmat +
                proc_control_node_B.Ns_j];
              proc_control_node_B.idx_m++;
            }
          }
        }
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.i = 6 * proc_control_node_B.Ns_j;
        for (proc_control_node_B.Ns_m = 5; proc_control_node_B.Ns_m >= 0;
             proc_control_node_B.Ns_m--) {
          proc_control_node_B.Ns = 6 * proc_control_node_B.Ns_m;
          if (proc_control_node_B.b_newCoefs_d[proc_control_node_B.Ns_m +
              proc_control_node_B.i] != 0.0) {
            proc_control_node_B.c_ix = proc_control_node_B.Ns_m +
              proc_control_node_B.i;
            proc_control_node_B.b_newCoefs_d[proc_control_node_B.c_ix] /=
              proc_control_node_B.dCoefs[proc_control_node_B.Ns_m +
              proc_control_node_B.Ns];
            proc_control_node_B.idx_m = 0;
            while (proc_control_node_B.idx_m <= proc_control_node_B.Ns_m - 1) {
              proc_control_node_B.b_s_l = proc_control_node_B.idx_m +
                proc_control_node_B.i;
              proc_control_node_B.b_newCoefs_d[proc_control_node_B.b_s_l] -=
                proc_control_node_B.dCoefs[proc_control_node_B.idx_m +
                proc_control_node_B.Ns] *
                proc_control_node_B.b_newCoefs_d[proc_control_node_B.c_ix];
              proc_control_node_B.idx_m++;
            }
          }
        }
      }

      std::memcpy(&proc_control_node_B.z_f[0],
                  &proc_control_node_B.TmpSignalConversionAtSFun_b[0], 13U *
                  sizeof(real_T));
      proc_control_node_B.idx_m = 0;
      while (proc_control_node_B.idx_m <= static_cast<int32_T>
             (proc_control_node_B.MATLABSystem_o6) - 1) {
        proc_control_node_B.Divide1 = proc_control_node_P.MPC.Ts /
          proc_control_node_B.MATLABSystem_o6;
        proc_control_node_AUVQuatSimFcn(proc_control_node_B.z_f,
          proc_control_node_DW.Delay1_DSTATE_e, proc_control_node_B.Bu_nl);
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.z_f[proc_control_node_B.Ns_j] +=
            proc_control_node_B.Bu_nl[proc_control_node_B.Ns_j] *
            proc_control_node_B.Divide1;
        }

        proc_control_node_B.scale = 3.3121686421112381E-170;
        proc_control_node_B.absxk = std::abs(proc_control_node_B.z_f[3]);
        if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
          proc_control_node_B.d = 1.0;
          proc_control_node_B.scale = proc_control_node_B.absxk;
        } else {
          proc_control_node_B.Divide1 = proc_control_node_B.absxk /
            3.3121686421112381E-170;
          proc_control_node_B.d = proc_control_node_B.Divide1 *
            proc_control_node_B.Divide1;
        }

        proc_control_node_B.absxk = std::abs(proc_control_node_B.z_f[4]);
        if (proc_control_node_B.absxk > proc_control_node_B.scale) {
          proc_control_node_B.Divide1 = proc_control_node_B.scale /
            proc_control_node_B.absxk;
          proc_control_node_B.d = proc_control_node_B.d *
            proc_control_node_B.Divide1 * proc_control_node_B.Divide1 + 1.0;
          proc_control_node_B.scale = proc_control_node_B.absxk;
        } else {
          proc_control_node_B.Divide1 = proc_control_node_B.absxk /
            proc_control_node_B.scale;
          proc_control_node_B.d += proc_control_node_B.Divide1 *
            proc_control_node_B.Divide1;
        }

        proc_control_node_B.absxk = std::abs(proc_control_node_B.z_f[5]);
        if (proc_control_node_B.absxk > proc_control_node_B.scale) {
          proc_control_node_B.Divide1 = proc_control_node_B.scale /
            proc_control_node_B.absxk;
          proc_control_node_B.d = proc_control_node_B.d *
            proc_control_node_B.Divide1 * proc_control_node_B.Divide1 + 1.0;
          proc_control_node_B.scale = proc_control_node_B.absxk;
        } else {
          proc_control_node_B.Divide1 = proc_control_node_B.absxk /
            proc_control_node_B.scale;
          proc_control_node_B.d += proc_control_node_B.Divide1 *
            proc_control_node_B.Divide1;
        }

        proc_control_node_B.absxk = std::abs(proc_control_node_B.z_f[6]);
        if (proc_control_node_B.absxk > proc_control_node_B.scale) {
          proc_control_node_B.Divide1 = proc_control_node_B.scale /
            proc_control_node_B.absxk;
          proc_control_node_B.d = proc_control_node_B.d *
            proc_control_node_B.Divide1 * proc_control_node_B.Divide1 + 1.0;
          proc_control_node_B.scale = proc_control_node_B.absxk;
        } else {
          proc_control_node_B.Divide1 = proc_control_node_B.absxk /
            proc_control_node_B.scale;
          proc_control_node_B.d += proc_control_node_B.Divide1 *
            proc_control_node_B.Divide1;
        }

        proc_control_node_B.d = proc_control_node_B.scale * std::sqrt
          (proc_control_node_B.d);
        proc_control_node_B.z_f[3] /= proc_control_node_B.d;
        proc_control_node_B.z_f[4] /= proc_control_node_B.d;
        proc_control_node_B.z_f[5] /= proc_control_node_B.d;
        proc_control_node_B.z_f[6] /= proc_control_node_B.d;
        proc_control_node_B.idx_m++;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.z_f[proc_control_node_B.Ns_j] -=
          proc_control_node_B.TmpSignalConversionAtSFun_b[proc_control_node_B.Ns_j];
      }

      // MATLAB Function: '<S230>/FixedHorizonOptimizer' incorporates:
      //   MATLAB Function: '<S151>/MATLAB Function2'

      std::memset(&proc_control_node_B.Bu[0], 0, 1848U * sizeof(real_T));
      std::memset(&proc_control_node_B.Bv[0], 0, 231U * sizeof(real_T));
      std::memset(&proc_control_node_B.Dv[0], 0, 143U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.b_A_i[0], &f_0[0], 441U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.b_B[0], &g[0], 630U * sizeof(real_T));
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 273;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.b_C_m[proc_control_node_B.Ns_j] =
          h[proc_control_node_B.Ns_j];
      }

      proc_control_node_B.Ns_j = 0;
      proc_control_node_B.i = 0;
      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 13;
           proc_control_node_B.Ns_m++) {
        for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 13;
             proc_control_node_B.idx_j++) {
          proc_control_node_B.idx_m = proc_control_node_B.idx_j +
            proc_control_node_B.Ns_j;
          proc_control_node_B.b_C_m[proc_control_node_B.idx_m] =
            c[proc_control_node_B.idx_m];
          proc_control_node_B.b_A_i[proc_control_node_B.idx_j +
            proc_control_node_B.i] =
            proc_control_node_B.A_i[proc_control_node_B.idx_m];
        }

        proc_control_node_B.Ns_j += 13;
        proc_control_node_B.i += 21;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        // MATLAB Function: '<S151>/MATLAB Function2'
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
             proc_control_node_B.i++) {
          proc_control_node_B.b_newCoefs[proc_control_node_B.i + 6 *
            proc_control_node_B.Ns_j] = 0.0;
        }

        for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 6;
             proc_control_node_B.Ns_m++) {
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
               proc_control_node_B.i++) {
            proc_control_node_B.c_ix = 6 * proc_control_node_B.Ns_j +
              proc_control_node_B.i;
            proc_control_node_B.b_newCoefs[proc_control_node_B.c_ix] +=
              proc_control_node_B.b_newCoefs_d[6 * proc_control_node_B.Ns_m +
              proc_control_node_B.i] * c_b[6 * proc_control_node_B.Ns_j +
              proc_control_node_B.Ns_m];
          }
        }

        // MATLAB Function: '<S230>/FixedHorizonOptimizer' incorporates:
        //   MATLAB Function: '<S151>/MATLAB Function2'

        for (proc_control_node_B.i = 0; proc_control_node_B.i < 7;
             proc_control_node_B.i++) {
          // MATLAB Function: '<S151>/MATLAB Function2'
          proc_control_node_B.b_B[proc_control_node_B.i + 21 *
            proc_control_node_B.Ns_j] = 0.0;
        }

        for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
             proc_control_node_B.i++) {
          proc_control_node_B.b_B[(proc_control_node_B.i + 21 *
            proc_control_node_B.Ns_j) + 7] = proc_control_node_B.b_newCoefs[6 *
            proc_control_node_B.Ns_j + proc_control_node_B.i];
        }

        std::memcpy(&proc_control_node_B.Bu[proc_control_node_B.Ns_j * 21],
                    &proc_control_node_B.b_B[proc_control_node_B.Ns_j * 21], 21U
                    * sizeof(real_T));
      }

      // MATLAB Function: '<S230>/FixedHorizonOptimizer' incorporates:
      //   Delay: '<S151>/Delay1'
      //   DiscretePulseGenerator: '<S154>/Pulse Generator'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S149>/N to A'
      //   Lookup_n-D: '<S149>/N to PWM'
      //   MATLAB Function: '<S151>/MATLAB Function2'
      //   TransferFcn: '<S17>/Transfer Fcn'
      //   TransferFcn: '<S18>/Transfer Fcn'
      //   TransferFcn: '<S19>/Transfer Fcn'
      //   TransferFcn: '<S20>/Transfer Fcn'
      //   TransferFcn: '<S21>/Transfer Fcn'
      //   TransferFcn: '<S22>/Transfer Fcn'
      //   TransferFcn: '<S23>/Transfer Fcn'
      //   TransferFcn: '<S24>/Transfer Fcn'
      //   Trigonometry: '<S339>/sincos'
      //   Trigonometry: '<S36>/sincos'
      //   Trigonometry: '<S96>/sincos'

      std::memcpy(&proc_control_node_B.Bv[0], &proc_control_node_B.b_B[168], 21U
                  * sizeof(real_T));
      std::memset(&proc_control_node_B.Dv[0], 0, 13U * sizeof(real_T));
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 32;
           proc_control_node_B.i++) {
        proc_control_node_B.b_Mlim[proc_control_node_B.i] =
          e_0[proc_control_node_B.i];
      }

      std::memset(&proc_control_node_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.b_xoff[0], &f_1[0], 21U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.U_h[0],
                  &proc_control_node_DW.Delay1_DSTATE_e[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_node_B.TmpSignalConversionAtTransp[0],
                  &proc_control_node_B.TmpSignalConversionAtSFun_b[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_node_B.ZeroOrderHold_e[0],
                  &proc_control_node_DW.Delay1_DSTATE_e[0], sizeof(real_T) << 3U);
      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 32;
           proc_control_node_B.Ns_m++) {
        proc_control_node_B.Ns_j = b_Mrows[proc_control_node_B.Ns_m];
        if (proc_control_node_B.Ns_j <= 340) {
          proc_control_node_B.MATLABSystem_o6 = (0.0 - proc_control_node_B.U_h
            [(proc_control_node_B.Ns_j - (((proc_control_node_B.Ns_j - 261) >> 3)
            << 3)) - 261]) + proc_control_node_B.b_Mlim[proc_control_node_B.Ns_m];
        } else {
          proc_control_node_B.MATLABSystem_o6 =
            proc_control_node_B.b_Mlim[proc_control_node_B.Ns_m] - (0.0 -
            proc_control_node_B.U_h[(proc_control_node_B.Ns_j -
            (((proc_control_node_B.Ns_j - 341) >> 3) << 3)) - 341]);
        }

        proc_control_node_B.b_Mlim[proc_control_node_B.Ns_m] =
          proc_control_node_B.MATLABSystem_o6;
      }

      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 8;
           proc_control_node_B.Ns_m++) {
        proc_control_node_B.MATLABSystem_o6 =
          proc_control_node_B.U_h[proc_control_node_B.Ns_m];
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 10;
             proc_control_node_B.i++) {
          proc_control_node_B.idx_m = proc_control_node_B.Ns_j +
            proc_control_node_B.Ns_m;
          proc_control_node_B.b_utarget[proc_control_node_B.idx_m] -=
            proc_control_node_B.MATLABSystem_o6;
          proc_control_node_B.Ns_j += 8;
        }
      }

      std::memcpy(&proc_control_node_B.b_xoff[0],
                  &proc_control_node_B.TmpSignalConversionAtSFun_b[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_node_B.Bv[0], &proc_control_node_B.z_f[0], 13U *
                  sizeof(real_T));
      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 11;
           proc_control_node_B.idx_m++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S296>/Enable'

        // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
        //   EnablePort: '<S338>/Enable'

        proc_control_node_B.vseq[proc_control_node_B.idx_m] = 1.0;

        // End of Outputs for SubSystem: '<S335>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
      }

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S363>/Action Port'

      // SwitchCase: '<S9>/Switch Case' incorporates:
      //   MATLAB Function: '<S230>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S363>/MATLAB System1'

      proc_control_node_B.ibmat = 0;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'

      // MATLAB Function: '<S230>/FixedHorizonOptimizer' incorporates:
      //   MATLABSystem: '<S363>/MATLAB System1'
      //   Merge: '<S9>/Merge'
      //   SwitchCase: '<S9>/Switch Case'

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 10;
           proc_control_node_B.i++) {
        proc_control_node_B.Ns_m = 0;
        for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 13;
             proc_control_node_B.Ns++) {
          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S363>/Action Port'

          proc_control_node_B.rseq[proc_control_node_B.Ns +
            proc_control_node_B.ibmat] =
            proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.Ns_m
            + proc_control_node_B.i] -
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.Ns];

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          proc_control_node_B.Ns_m += 10;
        }

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S363>/Action Port'

        proc_control_node_B.ibmat += 13;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      }

      // SignalConversion generated from: '<S231>/ SFunction ' incorporates:
      //   Constant: '<S151>/Constant'
      //   MATLAB Function: '<S230>/FixedHorizonOptimizer'
      //   UnitDelay: '<S202>/last_mv'

      proc_control_node_B.dv16[0] = proc_control_node_B.WorldPosition[0] -
        proc_control_node_B.b_xoff[0];
      proc_control_node_B.dv16[1] = proc_control_node_B.WorldPosition[1] -
        proc_control_node_B.b_xoff[1];
      proc_control_node_B.dv16[2] = proc_control_node_B.WorldPosition[2] -
        proc_control_node_B.b_xoff[2];
      proc_control_node_B.dv16[3] = proc_control_node_B.qS2W[0] -
        proc_control_node_B.b_xoff[3];
      proc_control_node_B.dv16[4] = proc_control_node_B.qS2W[1] -
        proc_control_node_B.b_xoff[4];
      proc_control_node_B.dv16[5] = proc_control_node_B.qS2W[2] -
        proc_control_node_B.b_xoff[5];
      proc_control_node_B.dv16[6] = proc_control_node_B.qS2W[3] -
        proc_control_node_B.b_xoff[6];
      proc_control_node_B.dv16[7] = proc_control_node_B.BodyVelocity[0] -
        proc_control_node_B.b_xoff[7];
      proc_control_node_B.dv16[10] = proc_control_node_B.AngularRate[0] -
        proc_control_node_B.b_xoff[10];
      proc_control_node_B.dv16[8] = proc_control_node_B.BodyVelocity[1] -
        proc_control_node_B.b_xoff[8];
      proc_control_node_B.dv16[11] = proc_control_node_B.AngularRate[1] -
        proc_control_node_B.b_xoff[11];
      proc_control_node_B.dv16[9] = proc_control_node_B.BodyVelocity[2] -
        proc_control_node_B.b_xoff[9];
      proc_control_node_B.dv16[12] = proc_control_node_B.AngularRate[2] -
        proc_control_node_B.b_xoff[12];
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv16[proc_control_node_B.Ns_j + 13] =
          proc_control_node_P.Constant_Value_e3[proc_control_node_B.Ns_j] -
          proc_control_node_B.b_xoff[proc_control_node_B.Ns_j + 13];
        proc_control_node_B.dv23[proc_control_node_B.Ns_j] =
          proc_control_node_DW.last_mv_DSTATE_f[proc_control_node_B.Ns_j] -
          proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.Ns_j];
      }

      // End of SignalConversion generated from: '<S231>/ SFunction '

      // MATLAB Function: '<S230>/FixedHorizonOptimizer'
      std::memset(&proc_control_node_B.dv4[0], 0, 672U * sizeof(real_T));
      std::memset(&proc_control_node_B.dv6[0], 0, 352U * sizeof(real_T));
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv24[proc_control_node_B.Ns_j] = 1.0;
      }

      std::memcpy(&proc_control_node_B.g[0], &g_0[0], sizeof(real_T) << 8);
      std::memcpy(&proc_control_node_B.h[0], &h_0[0], 289U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.k[0], &k[0], 544U * sizeof(real_T));

      // Memory: '<S202>/Memory' incorporates:
      //   MATLAB Function: '<S230>/FixedHorizonOptimizer'

      for (proc_control_node_B.i_i = 0; proc_control_node_B.i_i < 32;
           proc_control_node_B.i_i++) {
        proc_control_node_B.bv2[proc_control_node_B.i_i] =
          proc_control_node_DW.Memory_PreviousInput_g[proc_control_node_B.i_i];
      }

      // End of Memory: '<S202>/Memory'

      // Merge: '<S147>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S151>/Pulse Generator'
      //   MATLAB Function: '<S230>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S148>/MPC manager'
      //   Math: '<S202>/Math Function'
      //   Math: '<S202>/Math Function1'
      //   Math: '<S202>/Math Function2'
      //   Memory: '<S202>/Memory'

      proc_control_mpcblock_optimizer(proc_control_node_B.rseq,
        proc_control_node_B.vseq, proc_control_node_B.mvmin,
        proc_control_node_B.mvmax, proc_control_node_B.dv16,
        proc_control_node_B.dv23, proc_control_node_B.bv2,
        proc_control_node_B.b_Mlim, proc_control_node_B.dv4,
        proc_control_node_B.g, proc_control_node_B.dv6,
        proc_control_node_B.b_utarget, proc_control_node_B.ZeroOrderHold_e,
        proc_control_node_B.h, proc_control_node_B.k, proc_control_node_B.ywt,
        proc_control_node_B.mvwt, proc_control_node_B.dmwwt, l_0, n,
        proc_control_node_B.b_A_i, proc_control_node_B.Bu,
        proc_control_node_B.Bv, proc_control_node_B.b_C_m,
        proc_control_node_B.Dv, b_Mrows, proc_control_node_B.dv24,
        proc_control_node_B.U_h, proc_control_node_B.useq_a,
        &proc_control_node_B.Merge[8],
        proc_control_node_DW.Memory_PreviousInput_g);
      proc_control_node_B.Merge[9] = (proc_control_node_DW.clockTickCounter_j <
        proc_control_node_P.PulseGenerator_Duty) &&
        (proc_control_node_DW.clockTickCounter_j >= 0) ?
        proc_control_node_P.PulseGenerator_Amp : 0.0;

      // DiscretePulseGenerator: '<S151>/Pulse Generator'
      if (proc_control_node_DW.clockTickCounter_j >=
          proc_control_node_P.PulseGenerator_Period - 1.0) {
        proc_control_node_DW.clockTickCounter_j = 0;
      } else {
        proc_control_node_DW.clockTickCounter_j++;
      }

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
           proc_control_node_B.i++) {
        proc_control_node_B.MATLABSystem_o6 =
          proc_control_node_B.U_h[proc_control_node_B.i];

        // Gain: '<S202>/u_scale'
        proc_control_node_B.epsilon =
          proc_control_node_P.u_scale_Gain[proc_control_node_B.i] *
          proc_control_node_B.MATLABSystem_o6;

        // Merge: '<S147>/Merge' incorporates:
        //   Gain: '<S202>/u_scale'
        //   SignalConversion generated from: '<S151>/out'

        proc_control_node_B.Merge[proc_control_node_B.i] =
          proc_control_node_B.epsilon;

        // Update for UnitDelay: '<S202>/last_mv' incorporates:
        //   Gain: '<S202>/u_scale'

        proc_control_node_DW.last_mv_DSTATE_f[proc_control_node_B.i] =
          proc_control_node_B.MATLABSystem_o6;

        // Update for Delay: '<S151>/Delay1' incorporates:
        //   Gain: '<S202>/u_scale'

        proc_control_node_DW.Delay1_DSTATE_e[proc_control_node_B.i] =
          proc_control_node_B.epsilon;
      }

      // End of Outputs for SubSystem: '<S147>/Adaptive MPC quaternion '
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S147>/JoyStick OpenLoop' incorporates:
      //   ActionPort: '<S153>/Action Port'

      // SampleTimeMath: '<S232>/TSamp' incorporates:
      //   Merge: '<S9>/Merge'
      //   Selector: '<S153>/Selector'
      //
      //  About '<S232>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )

      proc_control_node_B.Ns_j = 0;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
           proc_control_node_B.i++) {
        proc_control_node_B.Gain3[proc_control_node_B.i] =
          proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.Ns_j
          + 70] * proc_control_node_P.TSamp_WtEt;
        proc_control_node_B.Ns_j += 10;
      }

      // End of SampleTimeMath: '<S232>/TSamp'

      // MATLABSystem: '<S153>/MATLAB System' incorporates:
      //   Merge: '<S9>/Merge'
      //   Selector: '<S153>/Selector'

      if (proc_control_node_DW.obj_m.k != proc_control_node_P.MATLABSystem_k) {
        proc_control_node_DW.obj_m.k = proc_control_node_P.MATLABSystem_k;
      }

      rtb_Merge_h = false;
      rtb_NewDvlMsg = true;
      proc_control_node_B.ibmat = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.ibmat < 48)) {
        if (!(proc_control_node_DW.obj_m.binv[proc_control_node_B.ibmat] ==
              proc_control_node_P.binv[proc_control_node_B.ibmat])) {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_node_B.ibmat++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Merge_h = true;
      }

      if (!rtb_Merge_h) {
        std::memcpy(&proc_control_node_DW.obj_m.binv[0],
                    &proc_control_node_P.binv[0], 48U * sizeof(real_T));
      }

      if (proc_control_node_DW.obj_m.mass != proc_control_node_P.physics.mass) {
        proc_control_node_DW.obj_m.mass = proc_control_node_P.physics.mass;
      }

      if (proc_control_node_DW.obj_m.volume !=
          proc_control_node_P.physics.volume) {
        proc_control_node_DW.obj_m.volume = proc_control_node_P.physics.volume;
      }

      if (proc_control_node_DW.obj_m.height !=
          proc_control_node_P.physics.height) {
        proc_control_node_DW.obj_m.height = proc_control_node_P.physics.height;
      }

      rtb_Merge_h = false;
      rtb_NewDvlMsg = true;
      proc_control_node_B.ibmat = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.ibmat < 9)) {
        if (!(proc_control_node_DW.obj_m.I[proc_control_node_B.ibmat] ==
              proc_control_node_P.physics.I[proc_control_node_B.ibmat])) {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_node_B.ibmat++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Merge_h = true;
      }

      if (!rtb_Merge_h) {
        std::memcpy(&proc_control_node_DW.obj_m.I[0],
                    &proc_control_node_P.physics.I[0], 9U * sizeof(real_T));
      }

      if (!proc_control_node_isequal(proc_control_node_DW.obj_m.RG,
           proc_control_node_P.physics.RG)) {
        proc_control_node_DW.obj_m.RG[0] = proc_control_node_P.physics.RG[0];
        proc_control_node_DW.obj_m.RG[1] = proc_control_node_P.physics.RG[1];
        proc_control_node_DW.obj_m.RG[2] = proc_control_node_P.physics.RG[2];
      }

      if (!proc_control_node_isequal(proc_control_node_DW.obj_m.RB,
           proc_control_node_P.physics.RB)) {
        proc_control_node_DW.obj_m.RB[0] = proc_control_node_P.physics.RB[0];
        proc_control_node_DW.obj_m.RB[1] = proc_control_node_P.physics.RB[1];
        proc_control_node_DW.obj_m.RB[2] = proc_control_node_P.physics.RB[2];
      }

      if (!proc_control_node_isequal_b(proc_control_node_DW.obj_m.AddedMass,
           proc_control_node_P.physics.AddedMass)) {
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
             proc_control_node_B.Ns_j++) {
          proc_control_node_DW.obj_m.AddedMass[proc_control_node_B.Ns_j] =
            proc_control_node_P.physics.AddedMass[proc_control_node_B.Ns_j];
        }
      }

      if (!proc_control_node_isequal_b(proc_control_node_DW.obj_m.CDL,
           proc_control_node_P.physics.CDL)) {
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
             proc_control_node_B.Ns_j++) {
          proc_control_node_DW.obj_m.CDL[proc_control_node_B.Ns_j] =
            proc_control_node_P.physics.CDL[proc_control_node_B.Ns_j];
        }
      }

      if (!proc_control_node_isequal_b(proc_control_node_DW.obj_m.CDQ,
           proc_control_node_P.physics.CDQ)) {
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
             proc_control_node_B.Ns_j++) {
          proc_control_node_DW.obj_m.CDQ[proc_control_node_B.Ns_j] =
            proc_control_node_P.physics.CDQ[proc_control_node_B.Ns_j];
        }
      }

      if (!proc_control_node_isequal(proc_control_node_DW.obj_m.AF,
           proc_control_node_P.physics.AF)) {
        proc_control_node_DW.obj_m.AF[0] = proc_control_node_P.physics.AF[0];
        proc_control_node_DW.obj_m.AF[1] = proc_control_node_P.physics.AF[1];
        proc_control_node_DW.obj_m.AF[2] = proc_control_node_P.physics.AF[2];
      }

      if (proc_control_node_DW.obj_m.g != proc_control_node_P.physics.g) {
        proc_control_node_DW.obj_m.g = proc_control_node_P.physics.g;
      }

      if (proc_control_node_DW.obj_m.rho != proc_control_node_P.physics.rho) {
        proc_control_node_DW.obj_m.rho = proc_control_node_P.physics.rho;
      }

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      switch (proc_control_node_B.DataTypeConversion_j) {
       case 20U:
        //  Open loop avec modèle physique
        //  Construire le vecteur constantes
        proc_control_node_B.constValues[0] = proc_control_node_DW.obj_m.mass;
        proc_control_node_B.constValues[1] = proc_control_node_DW.obj_m.volume;
        proc_control_node_B.constValues[6] = proc_control_node_DW.obj_m.I[0];
        proc_control_node_B.constValues[9] = proc_control_node_DW.obj_m.I[1];
        proc_control_node_B.constValues[12] = proc_control_node_DW.obj_m.I[2];
        proc_control_node_B.constValues[15] = proc_control_node_DW.obj_m.RG[0];
        proc_control_node_B.constValues[18] = proc_control_node_DW.obj_m.RB[0];
        proc_control_node_B.constValues[7] = proc_control_node_DW.obj_m.I[3];
        proc_control_node_B.constValues[10] = proc_control_node_DW.obj_m.I[4];
        proc_control_node_B.constValues[13] = proc_control_node_DW.obj_m.I[5];
        proc_control_node_B.constValues[16] = proc_control_node_DW.obj_m.RG[1];
        proc_control_node_B.constValues[19] = proc_control_node_DW.obj_m.RB[1];
        proc_control_node_B.constValues[8] = proc_control_node_DW.obj_m.I[6];
        proc_control_node_B.constValues[11] = proc_control_node_DW.obj_m.I[7];
        proc_control_node_B.constValues[14] = proc_control_node_DW.obj_m.I[8];
        proc_control_node_B.constValues[17] = proc_control_node_DW.obj_m.RG[2];
        proc_control_node_B.constValues[20] = proc_control_node_DW.obj_m.RB[2];
        proc_control_node_B.constValues[39] = proc_control_node_DW.obj_m.rho;
        proc_control_node_B.constValues[40] = proc_control_node_DW.obj_m.g;

        // construire le vecteur state avec la imu et spaceNAV
        proc_control_node_B.TmpSignalConversionAtTransp[3] = 1.0;
        proc_control_node_B.TmpSignalConversionAtTransp[4] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTransp[5] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTransp[6] = 0.0;
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
             proc_control_node_B.i++) {
          proc_control_node_B.constValues[proc_control_node_B.i + 21] =
            proc_control_node_DW.obj_m.CDL[proc_control_node_B.i];
          proc_control_node_B.constValues[proc_control_node_B.i + 27] =
            proc_control_node_DW.obj_m.CDQ[proc_control_node_B.i];
          proc_control_node_B.constValues[proc_control_node_B.i + 33] =
            proc_control_node_DW.obj_m.AddedMass[proc_control_node_B.i];
          proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i
            + 7] =
            proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.Ns_j
            + 70];
          proc_control_node_B.Ns_j += 10;
        }

        // [0;0;0;mo(4:7);ref.'];;
        //  Déterminer les matrices du modèle physique
        // AUVMODELMATRICES
        //     [M,C,D,GQ] = AUVMODELMATRICES(IN1,IN2)
        //     This function was generated by the Symbolic Math Toolbox version 8.7. 
        //     19-Nov-2021 10:15:42
        proc_control_node_B.epsilon = proc_control_node_B.constValues[6] *
          proc_control_node_B.TmpSignalConversionAtTransp[10];
        proc_control_node_B.Divide1 = proc_control_node_B.constValues[9] *
          proc_control_node_B.TmpSignalConversionAtTransp[10];
        proc_control_node_B.Divide2 =
          proc_control_node_B.TmpSignalConversionAtTransp[10] *
          proc_control_node_B.constValues[12];
        proc_control_node_B.Divide3 = proc_control_node_B.constValues[7] *
          proc_control_node_B.TmpSignalConversionAtTransp[11];
        proc_control_node_B.ZeroOrderHold_b = proc_control_node_B.constValues[10]
          * proc_control_node_B.TmpSignalConversionAtTransp[11];
        proc_control_node_B.t7 =
          proc_control_node_B.TmpSignalConversionAtTransp[11] *
          proc_control_node_B.constValues[13];
        proc_control_node_B.t8 = proc_control_node_B.constValues[8] *
          proc_control_node_B.TmpSignalConversionAtTransp[12];
        proc_control_node_B.t9 = proc_control_node_B.constValues[11] *
          proc_control_node_B.TmpSignalConversionAtTransp[12];
        proc_control_node_B.t10 =
          proc_control_node_B.TmpSignalConversionAtTransp[12] *
          proc_control_node_B.constValues[14];
        proc_control_node_B.t11 =
          proc_control_node_B.TmpSignalConversionAtTransp[10] *
          proc_control_node_B.constValues[36];
        proc_control_node_B.rtb_sincos_o1_idx_1 =
          proc_control_node_B.TmpSignalConversionAtTransp[11] *
          proc_control_node_B.constValues[37];
        proc_control_node_B.t13 = proc_control_node_B.constValues[0] *
          proc_control_node_B.constValues[15];
        proc_control_node_B.t14 = proc_control_node_B.constValues[0] *
          proc_control_node_B.constValues[16];
        proc_control_node_B.t15 = proc_control_node_B.constValues[0] *
          proc_control_node_B.constValues[17];
        proc_control_node_B.t16 =
          proc_control_node_B.TmpSignalConversionAtTransp[12] *
          proc_control_node_B.constValues[38];
        proc_control_node_B.t17 =
          proc_control_node_B.TmpSignalConversionAtTransp[10] *
          proc_control_node_B.constValues[15];
        proc_control_node_B.Sum_ll =
          proc_control_node_B.TmpSignalConversionAtTransp[11] *
          proc_control_node_B.constValues[16];
        proc_control_node_B.TSamp =
          proc_control_node_B.TmpSignalConversionAtTransp[12] *
          proc_control_node_B.constValues[17];
        proc_control_node_B.t = proc_control_node_B.TmpSignalConversionAtTransp
          [7] * proc_control_node_B.constValues[33];
        proc_control_node_B.fcn2_e =
          proc_control_node_B.TmpSignalConversionAtTransp[8] *
          proc_control_node_B.constValues[34];
        proc_control_node_B.Product2_l =
          proc_control_node_B.TmpSignalConversionAtTransp[9] *
          proc_control_node_B.constValues[35];
        proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.constValues[1]
          * proc_control_node_B.constValues[39];
        proc_control_node_B.Product1_n =
          proc_control_node_B.TmpSignalConversionAtTransp[5] *
          proc_control_node_B.TmpSignalConversionAtTransp[6];
        proc_control_node_B.t53 =
          proc_control_node_B.TmpSignalConversionAtTransp[3] *
          proc_control_node_B.TmpSignalConversionAtTransp[4];
        proc_control_node_B.t65 = proc_control_node_B.Product1_n * 2.0 +
          proc_control_node_B.t53 * 2.0;
        proc_control_node_B.t56 =
          (proc_control_node_B.TmpSignalConversionAtTransp[11] *
           proc_control_node_B.constValues[17] +
           proc_control_node_B.TmpSignalConversionAtTransp[7]) *
          proc_control_node_B.constValues[0];
        proc_control_node_B.t57 =
          (proc_control_node_B.TmpSignalConversionAtTransp[10] *
           proc_control_node_B.constValues[16] +
           proc_control_node_B.TmpSignalConversionAtTransp[9]) *
          proc_control_node_B.constValues[0];
        proc_control_node_B.rtb_sincos_o1_idx_0 =
          (proc_control_node_B.TmpSignalConversionAtTransp[12] *
           proc_control_node_B.constValues[15] +
           proc_control_node_B.TmpSignalConversionAtTransp[8]) *
          proc_control_node_B.constValues[0];
        proc_control_node_B.rtb_sincos_o2_idx_0 = (proc_control_node_B.t17 +
          proc_control_node_B.Sum_ll) * proc_control_node_B.constValues[0];
        proc_control_node_B.t17 = (proc_control_node_B.t17 +
          proc_control_node_B.TSamp) * proc_control_node_B.constValues[0];
        proc_control_node_B.Sum_ll = (proc_control_node_B.Sum_ll +
          proc_control_node_B.TSamp) * proc_control_node_B.constValues[0];
        proc_control_node_B.t54 =
          proc_control_node_B.TmpSignalConversionAtTransp[4] *
          proc_control_node_B.TmpSignalConversionAtTransp[6];
        proc_control_node_B.t55 =
          proc_control_node_B.TmpSignalConversionAtTransp[3] *
          proc_control_node_B.TmpSignalConversionAtTransp[5];
        proc_control_node_B.TSamp = proc_control_node_B.t54 * 2.0 +
          -(proc_control_node_B.t55 * 2.0);
        proc_control_node_B.t70 =
          (proc_control_node_B.TmpSignalConversionAtTransp[4] *
           proc_control_node_B.TmpSignalConversionAtTransp[4] * 2.0 +
           proc_control_node_B.TmpSignalConversionAtTransp[5] *
           proc_control_node_B.TmpSignalConversionAtTransp[5] * 2.0) - 1.0;

        //  CAlculer la comande
        proc_control_node_B.b_newCoefs_d[0] = -proc_control_node_B.constValues
          [33] + proc_control_node_B.constValues[0];
        proc_control_node_B.b_newCoefs_d[1] = 0.0;
        proc_control_node_B.b_newCoefs_d[2] = 0.0;
        proc_control_node_B.b_newCoefs_d[3] = 0.0;
        proc_control_node_B.b_newCoefs_d[4] = proc_control_node_B.t15;
        proc_control_node_B.b_newCoefs_d[5] = -proc_control_node_B.t14;
        proc_control_node_B.b_newCoefs_d[6] = 0.0;
        proc_control_node_B.b_newCoefs_d[7] = -proc_control_node_B.constValues
          [34] + proc_control_node_B.constValues[0];
        proc_control_node_B.b_newCoefs_d[8] = 0.0;
        proc_control_node_B.b_newCoefs_d[9] = -proc_control_node_B.t15;
        proc_control_node_B.b_newCoefs_d[10] = 0.0;
        proc_control_node_B.b_newCoefs_d[11] = proc_control_node_B.t13;
        proc_control_node_B.b_newCoefs_d[12] = 0.0;
        proc_control_node_B.b_newCoefs_d[13] = 0.0;
        proc_control_node_B.b_newCoefs_d[14] = -proc_control_node_B.constValues
          [35] + proc_control_node_B.constValues[0];
        proc_control_node_B.b_newCoefs_d[15] = proc_control_node_B.t14;
        proc_control_node_B.b_newCoefs_d[16] = -proc_control_node_B.t13;
        proc_control_node_B.b_newCoefs_d[17] = 0.0;
        proc_control_node_B.b_newCoefs_d[18] = 0.0;
        proc_control_node_B.b_newCoefs_d[19] = -proc_control_node_B.t15;
        proc_control_node_B.b_newCoefs_d[20] = proc_control_node_B.t14;
        proc_control_node_B.b_newCoefs_d[21] = proc_control_node_B.constValues[6]
          - proc_control_node_B.constValues[36];
        proc_control_node_B.b_newCoefs_d[22] = proc_control_node_B.constValues[9];
        proc_control_node_B.b_newCoefs_d[23] = proc_control_node_B.constValues
          [12];
        proc_control_node_B.b_newCoefs_d[24] = proc_control_node_B.t15;
        proc_control_node_B.b_newCoefs_d[25] = 0.0;
        proc_control_node_B.b_newCoefs_d[26] = -proc_control_node_B.t13;
        proc_control_node_B.b_newCoefs_d[27] = proc_control_node_B.constValues[7];
        proc_control_node_B.b_newCoefs_d[28] = proc_control_node_B.constValues
          [10] - proc_control_node_B.constValues[37];
        proc_control_node_B.b_newCoefs_d[29] = proc_control_node_B.constValues
          [13];
        proc_control_node_B.b_newCoefs_d[30] = -proc_control_node_B.t14;
        proc_control_node_B.b_newCoefs_d[31] = proc_control_node_B.t13;
        proc_control_node_B.b_newCoefs_d[32] = 0.0;
        proc_control_node_B.b_newCoefs_d[33] = proc_control_node_B.constValues[8];
        proc_control_node_B.b_newCoefs_d[34] = proc_control_node_B.constValues
          [11];
        proc_control_node_B.b_newCoefs_d[35] = proc_control_node_B.constValues
          [14] - proc_control_node_B.constValues[38];

        // Sum: '<S232>/Diff' incorporates:
        //   Merge: '<S9>/Merge'
        //   SampleTimeMath: '<S232>/TSamp'
        //   Selector: '<S153>/Selector'
        //   UnitDelay: '<S232>/UD'
        //
        //  About '<S232>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )
        //
        //  Block description for '<S232>/Diff':
        //
        //   Add in CPU
        //
        //  Block description for '<S232>/UD':
        //
        //   Store in Global RAM

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.rtb_Gain3_i[proc_control_node_B.Ns_j] =
            proc_control_node_B.Gain3[proc_control_node_B.Ns_j] -
            proc_control_node_DW.UD_DSTATE_i[proc_control_node_B.Ns_j];
        }

        // End of Sum: '<S232>/Diff'
        proc_control_node_B.dCoefs[0] = 0.0;
        proc_control_node_B.dCoefs[1] = 0.0;
        proc_control_node_B.dCoefs[2] = 0.0;
        proc_control_node_B.dCoefs[3] = -proc_control_node_B.Sum_ll;
        proc_control_node_B.rtb_sincos_o2_idx_2 =
          proc_control_node_B.TmpSignalConversionAtTransp[11] *
          proc_control_node_B.constValues[15] -
          proc_control_node_B.TmpSignalConversionAtTransp[9];
        proc_control_node_B.dCoefs[4] = proc_control_node_B.rtb_sincos_o2_idx_2 *
          proc_control_node_B.constValues[0] + proc_control_node_B.Product2_l;
        proc_control_node_B.dCoefs[5] = -proc_control_node_B.fcn2_e +
          proc_control_node_B.rtb_sincos_o1_idx_0;
        proc_control_node_B.dCoefs[6] = 0.0;
        proc_control_node_B.dCoefs[7] = 0.0;
        proc_control_node_B.dCoefs[8] = 0.0;
        proc_control_node_B.dCoefs[9] = -proc_control_node_B.Product2_l +
          proc_control_node_B.t57;
        proc_control_node_B.dCoefs[10] = -proc_control_node_B.t17;
        proc_control_node_B.rtb_sincos_o2_idx_1 =
          proc_control_node_B.TmpSignalConversionAtTransp[12] *
          proc_control_node_B.constValues[16] -
          proc_control_node_B.TmpSignalConversionAtTransp[7];
        proc_control_node_B.dCoefs[11] = proc_control_node_B.rtb_sincos_o2_idx_1
          * proc_control_node_B.constValues[0] + proc_control_node_B.t;
        proc_control_node_B.dCoefs[12] = 0.0;
        proc_control_node_B.dCoefs[13] = 0.0;
        proc_control_node_B.dCoefs[14] = 0.0;
        proc_control_node_B.rtb_u2_g =
          proc_control_node_B.TmpSignalConversionAtTransp[10] *
          proc_control_node_B.constValues[17] -
          proc_control_node_B.TmpSignalConversionAtTransp[8];
        proc_control_node_B.dCoefs[15] = proc_control_node_B.rtb_u2_g *
          proc_control_node_B.constValues[0] + proc_control_node_B.fcn2_e;
        proc_control_node_B.dCoefs[16] = -proc_control_node_B.t +
          proc_control_node_B.t56;
        proc_control_node_B.dCoefs[17] =
          -proc_control_node_B.rtb_sincos_o2_idx_0;
        proc_control_node_B.dCoefs[18] = proc_control_node_B.Sum_ll;
        proc_control_node_B.dCoefs[19] = proc_control_node_B.Product2_l -
          proc_control_node_B.t57;
        proc_control_node_B.dCoefs[20] = proc_control_node_B.rtb_u2_g *
          -proc_control_node_B.constValues[0] + -proc_control_node_B.fcn2_e;
        proc_control_node_B.dCoefs[21] = 0.0;
        proc_control_node_B.dCoefs[22] = ((-proc_control_node_B.Divide2 -
          proc_control_node_B.t7) - proc_control_node_B.t10) +
          proc_control_node_B.t16;
        proc_control_node_B.dCoefs[23] = ((proc_control_node_B.Divide1 +
          proc_control_node_B.ZeroOrderHold_b) + proc_control_node_B.t9) -
          proc_control_node_B.rtb_sincos_o1_idx_1;
        proc_control_node_B.dCoefs[24] = proc_control_node_B.rtb_sincos_o2_idx_2
          * -proc_control_node_B.constValues[0] +
          -proc_control_node_B.Product2_l;
        proc_control_node_B.dCoefs[25] = proc_control_node_B.t17;
        proc_control_node_B.dCoefs[26] = proc_control_node_B.t -
          proc_control_node_B.t56;
        proc_control_node_B.dCoefs[27] = ((proc_control_node_B.Divide2 +
          proc_control_node_B.t7) + proc_control_node_B.t10) -
          proc_control_node_B.t16;
        proc_control_node_B.dCoefs[28] = 0.0;
        proc_control_node_B.dCoefs[29] = ((-proc_control_node_B.epsilon -
          proc_control_node_B.Divide3) - proc_control_node_B.t8) +
          proc_control_node_B.t11;
        proc_control_node_B.dCoefs[30] = proc_control_node_B.fcn2_e -
          proc_control_node_B.rtb_sincos_o1_idx_0;
        proc_control_node_B.dCoefs[31] = proc_control_node_B.rtb_sincos_o2_idx_1
          * -proc_control_node_B.constValues[0] + -proc_control_node_B.t;
        proc_control_node_B.dCoefs[32] = proc_control_node_B.rtb_sincos_o2_idx_0;
        proc_control_node_B.dCoefs[33] = ((-proc_control_node_B.Divide1 -
          proc_control_node_B.ZeroOrderHold_b) - proc_control_node_B.t9) +
          proc_control_node_B.rtb_sincos_o1_idx_1;
        proc_control_node_B.dCoefs[34] = ((proc_control_node_B.epsilon +
          proc_control_node_B.Divide3) + proc_control_node_B.t8) -
          proc_control_node_B.t11;
        proc_control_node_B.dCoefs[35] = 0.0;
        proc_control_node_B.constValues_l[0] = proc_control_node_B.constValues
          [27] * std::abs(proc_control_node_B.TmpSignalConversionAtTransp[7]) +
          proc_control_node_B.constValues[21];
        proc_control_node_B.constValues_l[1] = 0.0;
        proc_control_node_B.constValues_l[2] = 0.0;
        proc_control_node_B.constValues_l[3] = 0.0;
        proc_control_node_B.constValues_l[4] = 0.0;
        proc_control_node_B.constValues_l[5] = 0.0;
        proc_control_node_B.constValues_l[6] = 0.0;
        proc_control_node_B.constValues_l[7] = proc_control_node_B.constValues
          [28] * std::abs(proc_control_node_B.TmpSignalConversionAtTransp[8]) +
          proc_control_node_B.constValues[22];
        proc_control_node_B.constValues_l[8] = 0.0;
        proc_control_node_B.constValues_l[9] = 0.0;
        proc_control_node_B.constValues_l[10] = 0.0;
        proc_control_node_B.constValues_l[11] = 0.0;
        proc_control_node_B.constValues_l[12] = 0.0;
        proc_control_node_B.constValues_l[13] = 0.0;
        proc_control_node_B.constValues_l[14] = proc_control_node_B.constValues
          [29] * std::abs(proc_control_node_B.TmpSignalConversionAtTransp[9]) +
          proc_control_node_B.constValues[23];
        proc_control_node_B.constValues_l[15] = 0.0;
        proc_control_node_B.constValues_l[16] = 0.0;
        proc_control_node_B.constValues_l[17] = 0.0;
        proc_control_node_B.constValues_l[18] = 0.0;
        proc_control_node_B.constValues_l[19] = 0.0;
        proc_control_node_B.constValues_l[20] = 0.0;
        proc_control_node_B.constValues_l[21] = proc_control_node_B.constValues
          [30] * std::abs(proc_control_node_B.TmpSignalConversionAtTransp[10]) +
          proc_control_node_B.constValues[24];
        proc_control_node_B.constValues_l[22] = 0.0;
        proc_control_node_B.constValues_l[23] = 0.0;
        proc_control_node_B.constValues_l[24] = 0.0;
        proc_control_node_B.constValues_l[25] = 0.0;
        proc_control_node_B.constValues_l[26] = 0.0;
        proc_control_node_B.constValues_l[27] = 0.0;
        proc_control_node_B.constValues_l[28] = proc_control_node_B.constValues
          [31] * std::abs(proc_control_node_B.TmpSignalConversionAtTransp[11]) +
          proc_control_node_B.constValues[25];
        proc_control_node_B.constValues_l[29] = 0.0;
        proc_control_node_B.constValues_l[30] = 0.0;
        proc_control_node_B.constValues_l[31] = 0.0;
        proc_control_node_B.constValues_l[32] = 0.0;
        proc_control_node_B.constValues_l[33] = 0.0;
        proc_control_node_B.constValues_l[34] = 0.0;
        proc_control_node_B.constValues_l[35] = proc_control_node_B.constValues
          [32] * std::abs(proc_control_node_B.TmpSignalConversionAtTransp[12]) +
          proc_control_node_B.constValues[26];
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 36;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.rtb_A_g_g[proc_control_node_B.Ns_j] =
            proc_control_node_B.dCoefs[proc_control_node_B.Ns_j] +
            proc_control_node_B.constValues_l[proc_control_node_B.Ns_j];
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.constValues_f[proc_control_node_B.Ns_j] = 0.0;
        }

        proc_control_node_B.i = 0;
        for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 6;
             proc_control_node_B.Ns_m++) {
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.constValues_f[proc_control_node_B.Ns_j] +=
              proc_control_node_B.b_newCoefs_d[proc_control_node_B.Ns_j +
              proc_control_node_B.i] *
              proc_control_node_B.rtb_Gain3_i[proc_control_node_B.Ns_m];
          }

          proc_control_node_B.Gain_fn[proc_control_node_B.Ns_m] = 0.0;
          proc_control_node_B.i += 6;
        }

        proc_control_node_B.Ns_j = 0;
        proc_control_node_B.i = 0;
        for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 6;
             proc_control_node_B.Ns_m++) {
          for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 6;
               proc_control_node_B.idx_j++) {
            proc_control_node_B.Gain_fn[proc_control_node_B.idx_j] +=
              proc_control_node_B.rtb_A_g_g[proc_control_node_B.idx_j +
              proc_control_node_B.Ns_j] *
              proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.i
              + 70];
          }

          proc_control_node_B.Ns_j += 6;
          proc_control_node_B.i += 10;
        }

        proc_control_node_B.epsilon = (proc_control_node_B.constValues[0] +
          -proc_control_node_B.MATLABSystem_o6) *
          proc_control_node_B.constValues[40];
        proc_control_node_B.rtb_Gain3_i[0] = (proc_control_node_B.t54 -
          proc_control_node_B.t55) * proc_control_node_B.epsilon * -2.0;
        proc_control_node_B.rtb_Gain3_i[1] = (proc_control_node_B.Product1_n +
          proc_control_node_B.t53) * proc_control_node_B.epsilon * -2.0;
        proc_control_node_B.rtb_Gain3_i[2] = proc_control_node_B.epsilon *
          proc_control_node_B.t70;
        proc_control_node_B.epsilon = proc_control_node_B.constValues[20] *
          proc_control_node_B.constValues[40];
        proc_control_node_B.Divide2 = proc_control_node_B.constValues[40] *
          proc_control_node_B.t14;
        proc_control_node_B.Divide3 = proc_control_node_B.constValues[19] *
          proc_control_node_B.constValues[40] *
          -proc_control_node_B.MATLABSystem_o6;
        proc_control_node_B.rtb_Gain3_i[3] = ((proc_control_node_B.constValues
          [40] * proc_control_node_B.t15 * proc_control_node_B.t65 +
          proc_control_node_B.Divide2 * proc_control_node_B.t70) +
          proc_control_node_B.epsilon * -proc_control_node_B.MATLABSystem_o6 *
          proc_control_node_B.t65) + proc_control_node_B.Divide3 *
          proc_control_node_B.t70;
        proc_control_node_B.Divide1 = proc_control_node_B.constValues[40] *
          -proc_control_node_B.t13;
        proc_control_node_B.t16 = proc_control_node_B.constValues[18] *
          proc_control_node_B.constValues[40] *
          proc_control_node_B.MATLABSystem_o6;
        proc_control_node_B.rtb_Gain3_i[4] = ((proc_control_node_B.constValues
          [40] * -proc_control_node_B.t15 * proc_control_node_B.TSamp +
          proc_control_node_B.Divide1 * proc_control_node_B.t70) +
          proc_control_node_B.t16 * proc_control_node_B.t70) +
          proc_control_node_B.epsilon * proc_control_node_B.MATLABSystem_o6 *
          proc_control_node_B.TSamp;
        proc_control_node_B.rtb_Gain3_i[5] = ((proc_control_node_B.Divide2 *
          proc_control_node_B.TSamp + proc_control_node_B.Divide1 *
          proc_control_node_B.t65) + proc_control_node_B.t16 *
          proc_control_node_B.t65) + proc_control_node_B.Divide3 *
          proc_control_node_B.TSamp;
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.constValues_c[proc_control_node_B.Ns_j] =
            (proc_control_node_B.constValues_f[proc_control_node_B.Ns_j] +
             proc_control_node_B.Gain_fn[proc_control_node_B.Ns_j]) +
            proc_control_node_B.rtb_Gain3_i[proc_control_node_B.Ns_j];
        }

        std::memset(&proc_control_node_B.ZeroOrderHold_e[0], 0, sizeof(real_T) <<
                    3U);
        proc_control_node_B.i = 0;
        for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 6;
             proc_control_node_B.Ns_m++) {
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.Ns_j] +=
              proc_control_node_DW.obj_m.binv[proc_control_node_B.Ns_j +
              proc_control_node_B.i] *
              proc_control_node_B.constValues_c[proc_control_node_B.Ns_m];
          }

          proc_control_node_B.i += 8;
        }
        break;

       case 21U:
        //  Open loop matrice b invese directe
        std::memset(&proc_control_node_B.dv23[0], 0, sizeof(real_T) << 3U);
        proc_control_node_B.i = 0;
        proc_control_node_B.Ns_m = 0;
        for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 6;
             proc_control_node_B.idx_j++) {
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.dv23[proc_control_node_B.Ns_j] +=
              proc_control_node_DW.obj_m.binv[proc_control_node_B.Ns_j +
              proc_control_node_B.i] *
              proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.Ns_m
              + 70];
          }

          proc_control_node_B.i += 8;
          proc_control_node_B.Ns_m += 10;
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.Ns_j] =
            proc_control_node_B.dv23[proc_control_node_B.Ns_j] *
            proc_control_node_DW.obj_m.k;
        }
        break;

       default:
        std::memset(&proc_control_node_B.ZeroOrderHold_e[0], 0, sizeof(real_T) <<
                    3U);
        break;
      }

      // Merge: '<S147>/Merge' incorporates:
      //   Constant: '<S153>/Constant'
      //   Constant: '<S153>/Constant1'
      //   MATLABSystem: '<S153>/MATLAB System'
      //   SignalConversion generated from: '<S153>/out'

      std::memcpy(&proc_control_node_B.Merge[0],
                  &proc_control_node_B.ZeroOrderHold_e[0], sizeof(real_T) << 3U);
      proc_control_node_B.Merge[8] = proc_control_node_P.Constant_Value_d1;
      proc_control_node_B.Merge[9] = proc_control_node_P.Constant1_Value_p;

      // Update for UnitDelay: '<S232>/UD' incorporates:
      //   SampleTimeMath: '<S232>/TSamp'
      //
      //  About '<S232>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )
      //
      //  Block description for '<S232>/UD':
      //
      //   Store in Global RAM

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
           proc_control_node_B.i++) {
        proc_control_node_DW.UD_DSTATE_i[proc_control_node_B.i] =
          proc_control_node_B.Gain3[proc_control_node_B.i];
      }

      // End of Update for UnitDelay: '<S232>/UD'
      // End of Outputs for SubSystem: '<S147>/JoyStick OpenLoop'
      break;

     case 2:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S147>/LTV MPC quaternion ' incorporates:
        //   ActionPort: '<S154>/Action Port'

        // InitializeConditions for SwitchCase: '<S147>/Switch Case' incorporates:
        //   Delay: '<S154>/Delay1'
        //   DiscretePulseGenerator: '<S154>/Pulse Generator'
        //   UnitDelay: '<S236>/last_mv'

        std::memcpy(&proc_control_node_DW.last_mv_DSTATE_n[0],
                    &proc_control_node_P.last_mv_InitialCondition_o[0], sizeof
                    (real_T) << 3U);
        std::memcpy(&proc_control_node_DW.Delay1_DSTATE_g[0],
                    &proc_control_node_P.Delay1_InitialCondition_n[0], 88U *
                    sizeof(real_T));
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 32;
             proc_control_node_B.i++) {
          // InitializeConditions for Memory: '<S236>/Memory'
          proc_control_node_DW.Memory_PreviousInput_p[proc_control_node_B.i] =
            proc_control_node_P.Memory_InitialCondition_p[proc_control_node_B.i];
        }

        proc_control_node_DW.clockTickCounter_g = 0;

        // End of InitializeConditions for SubSystem: '<S147>/LTV MPC quaternion ' 
      }

      // Outputs for IfAction SubSystem: '<S147>/LTV MPC quaternion ' incorporates:
      //   ActionPort: '<S154>/Action Port'

      // MATLAB Function: '<S154>/MATLAB Function2' incorporates:
      //   Constant: '<S154>/Constant1'
      //   Constant: '<S154>/Constant3'
      //   Delay: '<S154>/Delay1'
      //   SignalConversion generated from: '<S235>/ SFunction '

      proc_control_node_B.epsilon = proc_control_node_P.MPC.Ts;
      proc_control_node_B.MATLABSystem_o6 = proc_control_node_P.MPC.dts;
      proc_control_node_B.TmpSignalConversionAtTransp[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtTransp[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.TmpSignalConversionAtTransp[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.TmpSignalConversionAtTransp[3] =
        proc_control_node_B.qS2W[0];
      proc_control_node_B.TmpSignalConversionAtTransp[4] =
        proc_control_node_B.qS2W[1];
      proc_control_node_B.TmpSignalConversionAtTransp[5] =
        proc_control_node_B.qS2W[2];
      proc_control_node_B.TmpSignalConversionAtTransp[6] =
        proc_control_node_B.qS2W[3];
      proc_control_node_B.TmpSignalConversionAtTransp[7] =
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.TmpSignalConversionAtTransp[10] =
        proc_control_node_B.AngularRate[0];
      proc_control_node_B.TmpSignalConversionAtTransp[8] =
        proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.TmpSignalConversionAtTransp[11] =
        proc_control_node_B.AngularRate[1];
      proc_control_node_B.TmpSignalConversionAtTransp[9] =
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.TmpSignalConversionAtTransp[12] =
        proc_control_node_B.AngularRate[2];
      std::memset(&proc_control_node_B.A_g[0], 0, 1859U * sizeof(real_T));
      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 11;
           proc_control_node_B.idx_m++) {
        proc_cont_AUVQuatJacobianMatrix
          (proc_control_node_B.TmpSignalConversionAtTransp,
           proc_control_node_B.Ac);
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
             proc_control_node_B.i++) {
          proc_control_node_B.TmpSignalConversionAtSFun_b[proc_control_node_B.i]
            =
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i];
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.Ns_m = 13 * proc_control_node_B.i +
              proc_control_node_B.Ns_j;
            proc_control_node_B.C_c[proc_control_node_B.Ns_m + 169 *
              proc_control_node_B.idx_m] = c[proc_control_node_B.Ns_m];
          }
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 169;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.A[proc_control_node_B.Ns_j] =
            proc_control_node_B.Ac[proc_control_node_B.Ns_j] *
            proc_control_node_B.epsilon;
        }

        proc_control_node_B.Divide1 = 0.0;
        proc_control_node_B.ibmat = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.ibmat < 13)) {
          proc_control_node_B.Divide2 = 0.0;
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
               proc_control_node_B.i++) {
            proc_control_node_B.Divide2 += std::abs(proc_control_node_B.A[13 *
              proc_control_node_B.ibmat + proc_control_node_B.i]);
          }

          if (std::isnan(proc_control_node_B.Divide2)) {
            proc_control_node_B.Divide1 = (rtNaN);
            exitg1 = true;
          } else {
            if (proc_control_node_B.Divide2 > proc_control_node_B.Divide1) {
              proc_control_node_B.Divide1 = proc_control_node_B.Divide2;
            }

            proc_control_node_B.ibmat++;
          }
        }

        if (proc_control_node_B.Divide1 <= 5.3719203511481517) {
          proc_control_node_B.i = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_node_B.i < 5)) {
            if (proc_control_node_B.Divide1 <= theta[proc_control_node_B.i]) {
              proc_co_PadeApproximantOfDegree(proc_control_node_B.A,
                f[proc_control_node_B.i], proc_control_node_B.A_i);
              exitg1 = true;
            } else {
              proc_control_node_B.i++;
            }
          }
        } else {
          proc_control_node_B.Divide1 /= 5.3719203511481517;
          if ((!std::isinf(proc_control_node_B.Divide1)) && (!std::isnan
               (proc_control_node_B.Divide1))) {
            proc_control_node_B.Divide1 = frexp(proc_control_node_B.Divide1,
              &proc_control_node_B.c_ix);
            proc_control_node_B.b_s_l = proc_control_node_B.c_ix;
          } else {
            proc_control_node_B.b_s_l = 0;
          }

          proc_control_node_B.Divide2 = proc_control_node_B.b_s_l;
          if (proc_control_node_B.Divide1 == 0.5) {
            proc_control_node_B.Divide2 = static_cast<real_T>
              (proc_control_node_B.b_s_l) - 1.0;
          }

          proc_control_node_B.Divide1 = rt_powd_snf(2.0,
            proc_control_node_B.Divide2);
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 169;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.A_e[proc_control_node_B.Ns_j] =
              proc_control_node_B.A[proc_control_node_B.Ns_j] /
              proc_control_node_B.Divide1;
          }

          proc_co_PadeApproximantOfDegree(proc_control_node_B.A_e, 13,
            proc_control_node_B.A_i);
          proc_control_node_B.ibmat = 0;
          while (proc_control_node_B.ibmat <= static_cast<int32_T>
                 (proc_control_node_B.Divide2) - 1) {
            for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
                 proc_control_node_B.Ns_j++) {
              proc_control_node_B.i = 0;
              for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 13;
                   proc_control_node_B.Ns_m++) {
                proc_control_node_B.b_s_l = proc_control_node_B.i +
                  proc_control_node_B.Ns_j;
                proc_control_node_B.A[proc_control_node_B.b_s_l] = 0.0;
                proc_control_node_B.idx_j = 0;
                for (proc_control_node_B.idx_i = 0; proc_control_node_B.idx_i <
                     13; proc_control_node_B.idx_i++) {
                  proc_control_node_B.A[proc_control_node_B.b_s_l] +=
                    proc_control_node_B.A_i[proc_control_node_B.idx_j +
                    proc_control_node_B.Ns_j] *
                    proc_control_node_B.A_i[proc_control_node_B.idx_i +
                    proc_control_node_B.i];
                  proc_control_node_B.idx_j += 13;
                }

                proc_control_node_B.i += 13;
              }
            }

            std::memcpy(&proc_control_node_B.A_i[0], &proc_control_node_B.A[0],
                        169U * sizeof(real_T));
            proc_control_node_B.ibmat++;
          }
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          std::memcpy(&proc_control_node_B.A_g[proc_control_node_B.idx_m * 169 +
                      proc_control_node_B.Ns_j * 13],
                      &proc_control_node_B.A_i[proc_control_node_B.Ns_j * 13],
                      13U * sizeof(real_T));
        }

        std::memset(&proc_control_node_B.b_newCoefs_d[0], 0, 36U * sizeof(real_T));
        proc_control_node_B.Ns_m = 0;
        proc_control_node_B.i = 0;
        proc_control_node_B.b_s_l = 0;
        for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 6;
             proc_control_node_B.Ns++) {
          proc_control_node_B.b_newCoefs_d[proc_control_node_B.Ns_m] = 1.0;
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.constValues_l[proc_control_node_B.Ns_j +
              proc_control_node_B.i] = proc_control_node_B.Ac
              [(proc_control_node_B.Ns_j + proc_control_node_B.b_s_l) + 98];
          }

          proc_control_node_B.Ns_m += 7;
          proc_control_node_B.i += 6;
          proc_control_node_B.b_s_l += 13;
        }

        proc_control_node_B.Ns_j = 0;
        proc_control_node_B.i = 0;
        for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 6;
             proc_control_node_B.Ns_m++) {
          for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 6;
               proc_control_node_B.idx_j++) {
            proc_control_node_B.b_s_l = proc_control_node_B.idx_j +
              proc_control_node_B.Ns_j;
            proc_control_node_B.rtb_A_g_g[proc_control_node_B.b_s_l] =
              proc_control_node_B.A_g[(proc_control_node_B.idx_j +
              proc_control_node_B.i) + 98] -
              proc_control_node_B.b_newCoefs_d[proc_control_node_B.b_s_l];
          }

          proc_control_node_B.Ns_j += 6;
          proc_control_node_B.i += 13;
        }

        proc_control_node_mldivide(proc_control_node_B.constValues_l,
          proc_control_node_B.rtb_A_g_g, proc_control_node_B.dCoefs);
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.i = 0;
          for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 8;
               proc_control_node_B.Ns_m++) {
            proc_control_node_B.idx_j = proc_control_node_B.i +
              proc_control_node_B.Ns_j;
            proc_control_node_B.b_newCoefs[proc_control_node_B.idx_j] = 0.0;
            proc_control_node_B.idx_i = 0;
            for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
                 proc_control_node_B.ibmat++) {
              proc_control_node_B.b_newCoefs[proc_control_node_B.idx_j] +=
                proc_control_node_B.dCoefs[proc_control_node_B.idx_i +
                proc_control_node_B.Ns_j] * c_b[proc_control_node_B.ibmat +
                proc_control_node_B.i];
              proc_control_node_B.idx_i += 6;
            }

            proc_control_node_B.i += 6;
          }
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
             proc_control_node_B.Ns_j++) {
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 7;
               proc_control_node_B.i++) {
            proc_control_node_B.B_n[(proc_control_node_B.i + 13 *
              proc_control_node_B.Ns_j) + 104 * proc_control_node_B.idx_m] = 0.0;
          }

          for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
               proc_control_node_B.i++) {
            proc_control_node_B.B_n[((proc_control_node_B.i + 13 *
              proc_control_node_B.Ns_j) + 104 * proc_control_node_B.idx_m) + 7] =
              proc_control_node_B.b_newCoefs[6 * proc_control_node_B.Ns_j +
              proc_control_node_B.i];
          }
        }

        if (0 <= static_cast<int32_T>(proc_control_node_B.MATLABSystem_o6) - 1)
        {
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.dv23[proc_control_node_B.Ns_j] =
              proc_control_node_DW.Delay1_DSTATE_g[11 * proc_control_node_B.Ns_j
              + proc_control_node_B.idx_m];
          }
        }

        proc_control_node_B.Ns = 0;
        while (proc_control_node_B.Ns <= static_cast<int32_T>
               (proc_control_node_B.MATLABSystem_o6) - 1) {
          proc_control_node_B.Divide1 = proc_control_node_B.epsilon /
            proc_control_node_B.MATLABSystem_o6;
          proc_control_node_AUVQuatSimFcn
            (proc_control_node_B.TmpSignalConversionAtTransp,
             proc_control_node_B.dv23, proc_control_node_B.Bu_nl);
          for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
               proc_control_node_B.Ns_j++) {
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.Ns_j]
              += proc_control_node_B.Bu_nl[proc_control_node_B.Ns_j] *
              proc_control_node_B.Divide1;
          }

          proc_control_node_B.scale = 3.3121686421112381E-170;
          proc_control_node_B.absxk = std::abs
            (proc_control_node_B.TmpSignalConversionAtTransp[3]);
          if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
            proc_control_node_B.d = 1.0;
            proc_control_node_B.scale = proc_control_node_B.absxk;
          } else {
            proc_control_node_B.Divide1 = proc_control_node_B.absxk /
              3.3121686421112381E-170;
            proc_control_node_B.d = proc_control_node_B.Divide1 *
              proc_control_node_B.Divide1;
          }

          proc_control_node_B.absxk = std::abs
            (proc_control_node_B.TmpSignalConversionAtTransp[4]);
          if (proc_control_node_B.absxk > proc_control_node_B.scale) {
            proc_control_node_B.Divide1 = proc_control_node_B.scale /
              proc_control_node_B.absxk;
            proc_control_node_B.d = proc_control_node_B.d *
              proc_control_node_B.Divide1 * proc_control_node_B.Divide1 + 1.0;
            proc_control_node_B.scale = proc_control_node_B.absxk;
          } else {
            proc_control_node_B.Divide1 = proc_control_node_B.absxk /
              proc_control_node_B.scale;
            proc_control_node_B.d += proc_control_node_B.Divide1 *
              proc_control_node_B.Divide1;
          }

          proc_control_node_B.absxk = std::abs
            (proc_control_node_B.TmpSignalConversionAtTransp[5]);
          if (proc_control_node_B.absxk > proc_control_node_B.scale) {
            proc_control_node_B.Divide1 = proc_control_node_B.scale /
              proc_control_node_B.absxk;
            proc_control_node_B.d = proc_control_node_B.d *
              proc_control_node_B.Divide1 * proc_control_node_B.Divide1 + 1.0;
            proc_control_node_B.scale = proc_control_node_B.absxk;
          } else {
            proc_control_node_B.Divide1 = proc_control_node_B.absxk /
              proc_control_node_B.scale;
            proc_control_node_B.d += proc_control_node_B.Divide1 *
              proc_control_node_B.Divide1;
          }

          proc_control_node_B.absxk = std::abs
            (proc_control_node_B.TmpSignalConversionAtTransp[6]);
          if (proc_control_node_B.absxk > proc_control_node_B.scale) {
            proc_control_node_B.Divide1 = proc_control_node_B.scale /
              proc_control_node_B.absxk;
            proc_control_node_B.d = proc_control_node_B.d *
              proc_control_node_B.Divide1 * proc_control_node_B.Divide1 + 1.0;
            proc_control_node_B.scale = proc_control_node_B.absxk;
          } else {
            proc_control_node_B.Divide1 = proc_control_node_B.absxk /
              proc_control_node_B.scale;
            proc_control_node_B.d += proc_control_node_B.Divide1 *
              proc_control_node_B.Divide1;
          }

          proc_control_node_B.d = proc_control_node_B.scale * std::sqrt
            (proc_control_node_B.d);
          proc_control_node_B.TmpSignalConversionAtTransp[3] /=
            proc_control_node_B.d;
          proc_control_node_B.TmpSignalConversionAtTransp[4] /=
            proc_control_node_B.d;
          proc_control_node_B.TmpSignalConversionAtTransp[5] /=
            proc_control_node_B.d;
          proc_control_node_B.TmpSignalConversionAtTransp[6] /=
            proc_control_node_B.d;
          proc_control_node_B.Ns++;
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.useq_a[proc_control_node_B.Ns_j +
            (proc_control_node_B.idx_m << 3)] =
            proc_control_node_DW.Delay1_DSTATE_g[11 * proc_control_node_B.Ns_j +
            proc_control_node_B.idx_m];
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.Divide2 =
            proc_control_node_B.TmpSignalConversionAtSFun_b[proc_control_node_B.Ns_j];
          proc_control_node_B.i = 13 * proc_control_node_B.idx_m +
            proc_control_node_B.Ns_j;
          proc_control_node_B.Y_e[proc_control_node_B.i] =
            proc_control_node_B.Divide2;
          proc_control_node_B.X_b[proc_control_node_B.i] =
            proc_control_node_B.Divide2;
          proc_control_node_B.DX_i[proc_control_node_B.i] =
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.Ns_j]
            - proc_control_node_B.Divide2;
        }
      }

      // End of MATLAB Function: '<S154>/MATLAB Function2'

      // MATLAB Function: '<S264>/FixedHorizonOptimizer'
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 3003;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.b_C[proc_control_node_B.Ns_j] =
          d[proc_control_node_B.Ns_j];
      }

      std::memcpy(&proc_control_node_B.b_A[0], &e[0], 4851U * sizeof(real_T));
      std::memset(&proc_control_node_B.Bu[0], 0, 1848U * sizeof(real_T));
      std::memset(&proc_control_node_B.Bv[0], 0, 231U * sizeof(real_T));
      std::memset(&proc_control_node_B.Dv[0], 0, 143U * sizeof(real_T));
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 21;
           proc_control_node_B.Ns_j++) {
        std::memcpy(&proc_control_node_B.b_A[proc_control_node_B.Ns_j * 21],
                    &f_0[proc_control_node_B.Ns_j * 21], 21U * sizeof(real_T));
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
             proc_control_node_B.i++) {
          proc_control_node_B.idx_m = 13 * proc_control_node_B.Ns_j +
            proc_control_node_B.i;
          proc_control_node_B.b_C[proc_control_node_B.idx_m] =
            h[proc_control_node_B.idx_m];
        }
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.iv1[proc_control_node_B.Ns_j] =
          proc_control_node_B.Ns_j + 1;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.iv[proc_control_node_B.Ns_j] =
          proc_control_node_B.Ns_j + 1;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv23[proc_control_node_B.Ns_j] = 1.0;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.Bu_nl[proc_control_node_B.Ns_j] = 1.0;
      }

      std::memcpy(&proc_control_node_B.rtb_B_n_g[0], &(*(real_T (*)[104])&
        proc_control_node_B.B_n[0])[0], 104U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.b_B[0], &g[0], 630U * sizeof(real_T));

      // MATLAB Function: '<S264>/FixedHorizonOptimizer' incorporates:
      //   DiscretePulseGenerator: '<S154>/Pulse Generator'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S149>/N to A'
      //   Lookup_n-D: '<S149>/N to PWM'
      //   MATLABSystem: '<S363>/MATLAB System1'
      //   SwitchCase: '<S9>/Switch Case'
      //   TransferFcn: '<S17>/Transfer Fcn'
      //   TransferFcn: '<S18>/Transfer Fcn'
      //   TransferFcn: '<S19>/Transfer Fcn'
      //   TransferFcn: '<S20>/Transfer Fcn'
      //   TransferFcn: '<S21>/Transfer Fcn'
      //   TransferFcn: '<S22>/Transfer Fcn'
      //   TransferFcn: '<S23>/Transfer Fcn'
      //   TransferFcn: '<S24>/Transfer Fcn'
      //   Trigonometry: '<S339>/sincos'
      //   Trigonometry: '<S36>/sincos'
      //   Trigonometry: '<S96>/sincos'

      proc_control_no_mpc_plantupdate(&proc_control_node_B.A_g[0],
        proc_control_node_B.rtb_B_n_g, &proc_control_node_B.C_c[0],
        &proc_control_node_B.b_A[0], proc_control_node_B.b_B,
        &proc_control_node_B.b_C[0], l, proc_control_node_B.iv1,
        proc_control_node_B.iv, proc_control_node_B.dv23,
        proc_control_node_B.Bu_nl, &proc_control_node_B.Bu[0],
        &proc_control_node_B.Bv[0], proc_control_node_B.b_C_m,
        &proc_control_node_B.Dv[0],
        proc_control_node_B.TmpSignalConversionAtTransp,
        proc_control_node_B.b_A_i, proc_control_node_B.A, proc_control_node_B.Nk);
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.iv1[proc_control_node_B.Ns_j] =
          proc_control_node_B.Ns_j + 1;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.iv[proc_control_node_B.Ns_j] =
          proc_control_node_B.Ns_j + 1;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv23[proc_control_node_B.Ns_j] = 1.0;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.Bu_nl[proc_control_node_B.Ns_j] = 1.0;
      }

      // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
      //   EnablePort: '<S4>/Enable'

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S296>/Enable'

      // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
      //   EnablePort: '<S338>/Enable'

      proc_control_node_B.ibmat = 0;
      proc_control_node_B.c_ix = 0;
      proc_control_node_B.b_s_l = 0;
      proc_control_node_B.Ns = 0;
      proc_control_node_B.idx_j = 0;
      proc_control_node_B.idx_i = 0;
      proc_control_node_B.idx_a = 0;
      proc_control_node_B.idx_h = 0;
      proc_control_node_B.idx_d = 0;

      // End of Outputs for SubSystem: '<S335>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      // End of Outputs for SubSystem: '<Root>/ROS Output'
      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 10;
           proc_control_node_B.idx_m++) {
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 30;
             proc_control_node_B.i++) {
          for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 13;
               proc_control_node_B.Ns_m++) {
            proc_control_node_B.b_D_tmp = proc_control_node_B.Ns_m +
              proc_control_node_B.Ns_j;

            // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
            //   EnablePort: '<S4>/Enable'

            // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
            //   EnablePort: '<S1>/Enable'

            // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
            //   EnablePort: '<S296>/Enable'

            // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
            //   EnablePort: '<S338>/Enable'

            proc_control_node_B.b_D[proc_control_node_B.b_D_tmp] = b_D
              [(proc_control_node_B.b_D_tmp + proc_control_node_B.idx_d) + 390];

            // End of Outputs for SubSystem: '<S335>/Subsystem2'
            // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
            // End of Outputs for SubSystem: '<Root>/Modèle Physique'
            // End of Outputs for SubSystem: '<Root>/ROS Output'
          }

          proc_control_node_B.Ns_j += 13;
        }

        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S296>/Enable'

        // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
        //   EnablePort: '<S338>/Enable'

        std::memcpy(&proc_control_node_B.rtb_B_n_g[0], &(*(real_T (*)[104])&
          proc_control_node_B.B_n[proc_control_node_B.c_ix + 104])[0], 104U *
                    sizeof(real_T));
        std::memcpy(&proc_control_node_B.b_B[0], &(*(real_T (*)[630])&
          b_B[proc_control_node_B.Ns + 630])[0], 630U * sizeof(real_T));
        proc_control_no_mpc_plantupdate
          (&proc_control_node_B.A_g[proc_control_node_B.ibmat + 169],
           proc_control_node_B.rtb_B_n_g,
           &proc_control_node_B.C_c[proc_control_node_B.ibmat + 169],
           &proc_control_node_B.b_A[proc_control_node_B.b_s_l + 441],
           proc_control_node_B.b_B,
           &proc_control_node_B.b_C[proc_control_node_B.idx_j + 273],
           proc_control_node_B.b_D, proc_control_node_B.iv1,
           proc_control_node_B.iv, proc_control_node_B.dv23,
           proc_control_node_B.Bu_nl,
           &proc_control_node_B.Bu[proc_control_node_B.idx_i + 168],
           &proc_control_node_B.Bv[proc_control_node_B.idx_a + 21],
           proc_control_node_B.b_C_m,
           &proc_control_node_B.Dv[proc_control_node_B.idx_h + 13],
           proc_control_node_B.TmpSignalConversionAtTransp,
           proc_control_node_B.b_A_i, proc_control_node_B.A,
           proc_control_node_B.Nk);
        proc_control_node_B.ibmat += 169;
        proc_control_node_B.c_ix += 104;
        proc_control_node_B.b_s_l += 441;
        proc_control_node_B.Ns += 630;
        proc_control_node_B.idx_j += 273;
        proc_control_node_B.idx_i += 168;
        proc_control_node_B.idx_a += 21;
        proc_control_node_B.idx_h += 13;
        proc_control_node_B.idx_d += 390;

        // End of Outputs for SubSystem: '<S335>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
      }

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 32;
           proc_control_node_B.i++) {
        proc_control_node_B.b_Mlim[proc_control_node_B.i] =
          e_0[proc_control_node_B.i];
      }

      std::memset(&proc_control_node_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.b_xoff[0], &f_1[0], 21U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.U_h[0], &proc_control_node_B.useq_a[0],
                  sizeof(real_T) << 3U);
      std::memcpy(&proc_control_node_B.TmpSignalConversionAtTransp[0],
                  &proc_control_node_B.Y_e[0], 13U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.ZeroOrderHold_e[0],
                  &proc_control_node_B.useq_a[0], sizeof(real_T) << 3U);
      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 32;
           proc_control_node_B.Ns_m++) {
        proc_control_node_B.Ns_j = b_Mrows[proc_control_node_B.Ns_m];
        if (proc_control_node_B.Ns_j <= 340) {
          proc_control_node_B.MATLABSystem_o6 = (0.0 - proc_control_node_B.U_h
            [(proc_control_node_B.Ns_j - (((proc_control_node_B.Ns_j - 261) >> 3)
            << 3)) - 261]) + proc_control_node_B.b_Mlim[proc_control_node_B.Ns_m];
        } else {
          proc_control_node_B.MATLABSystem_o6 =
            proc_control_node_B.b_Mlim[proc_control_node_B.Ns_m] - (0.0 -
            proc_control_node_B.U_h[(proc_control_node_B.Ns_j -
            (((proc_control_node_B.Ns_j - 341) >> 3) << 3)) - 341]);
        }

        proc_control_node_B.b_Mlim[proc_control_node_B.Ns_m] =
          proc_control_node_B.MATLABSystem_o6;
      }

      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 8;
           proc_control_node_B.Ns_m++) {
        proc_control_node_B.MATLABSystem_o6 =
          proc_control_node_B.U_h[proc_control_node_B.Ns_m];
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 10;
             proc_control_node_B.i++) {
          proc_control_node_B.idx_m = proc_control_node_B.Ns_j +
            proc_control_node_B.Ns_m;
          proc_control_node_B.b_utarget[proc_control_node_B.idx_m] -=
            proc_control_node_B.MATLABSystem_o6;
          proc_control_node_B.Ns_j += 8;
        }
      }

      std::memcpy(&proc_control_node_B.b_xoff[0], &proc_control_node_B.X_b[0],
                  13U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.Bv[0], &proc_control_node_B.DX_i[0], 13U *
                  sizeof(real_T));
      for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 10;
           proc_control_node_B.Ns++) {
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.TmpSignalConversionAtSFun_b[proc_control_node_B.Ns_j]
            = proc_control_node_B.b_xoff[proc_control_node_B.Ns_j] -
            proc_control_node_B.X_b[(proc_control_node_B.Ns + 1) * 13 +
            proc_control_node_B.Ns_j];
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.U_h[proc_control_node_B.Ns_j] =
            proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.Ns_j] -
            proc_control_node_B.useq_a[((proc_control_node_B.Ns + 1) << 3) +
            proc_control_node_B.Ns_j];
        }

        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.rtb_sincos_o2_idx_2 = 0.0;
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
               proc_control_node_B.i++) {
            proc_control_node_B.rtb_sincos_o2_idx_2 += proc_control_node_B.b_A
              [(21 * proc_control_node_B.i + proc_control_node_B.Ns_j) +
              (proc_control_node_B.Ns + 1) * 441] *
              proc_control_node_B.TmpSignalConversionAtSFun_b[proc_control_node_B.i];
          }

          proc_control_node_B.Bu_nl[proc_control_node_B.Ns_j] = 0.0;
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
               proc_control_node_B.i++) {
            proc_control_node_B.Bu_nl[proc_control_node_B.Ns_j] +=
              proc_control_node_B.Bu[(21 * proc_control_node_B.i +
              proc_control_node_B.Ns_j) + (proc_control_node_B.Ns + 1) * 168] *
              proc_control_node_B.U_h[proc_control_node_B.i];
          }

          proc_control_node_B.idx_m = (proc_control_node_B.Ns + 1) * 13 +
            proc_control_node_B.Ns_j;
          proc_control_node_B.Bv[proc_control_node_B.Ns_j + 21 *
            (proc_control_node_B.Ns + 1)] =
            (((proc_control_node_B.DX_i[proc_control_node_B.idx_m] +
               proc_control_node_B.X_b[proc_control_node_B.idx_m]) -
              proc_control_node_B.b_xoff[proc_control_node_B.Ns_j]) +
             proc_control_node_B.rtb_sincos_o2_idx_2) +
            proc_control_node_B.Bu_nl[proc_control_node_B.Ns_j];
          proc_control_node_B.rtb_sincos_o2_idx_2 = 0.0;
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
               proc_control_node_B.i++) {
            proc_control_node_B.rtb_sincos_o2_idx_2 += proc_control_node_B.b_C
              [(13 * proc_control_node_B.i + proc_control_node_B.Ns_j) +
              (proc_control_node_B.Ns + 1) * 273] *
              proc_control_node_B.TmpSignalConversionAtSFun_b[proc_control_node_B.i];
          }

          proc_control_node_B.Dv[proc_control_node_B.idx_m] =
            (proc_control_node_B.Y_e[proc_control_node_B.idx_m] -
             proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.Ns_j])
            + proc_control_node_B.rtb_sincos_o2_idx_2;
        }
      }

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 11;
           proc_control_node_B.i++) {
        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S363>/Action Port'

        proc_control_node_B.vseq[proc_control_node_B.i] = 1.0;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      }

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S363>/Action Port'

      // SwitchCase: '<S9>/Switch Case' incorporates:
      //   MATLAB Function: '<S264>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S363>/MATLAB System1'

      proc_control_node_B.ibmat = 0;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'

      // MATLAB Function: '<S264>/FixedHorizonOptimizer' incorporates:
      //   MATLABSystem: '<S363>/MATLAB System1'
      //   Merge: '<S9>/Merge'
      //   SwitchCase: '<S9>/Switch Case'

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 10;
           proc_control_node_B.i++) {
        proc_control_node_B.Ns_m = 0;
        for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 13;
             proc_control_node_B.Ns++) {
          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S363>/Action Port'

          proc_control_node_B.rseq[proc_control_node_B.Ns +
            proc_control_node_B.ibmat] =
            proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.Ns_m
            + proc_control_node_B.i] -
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.Ns];

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          proc_control_node_B.Ns_m += 10;
        }

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S363>/Action Port'

        proc_control_node_B.ibmat += 13;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      }

      // SignalConversion generated from: '<S265>/ SFunction ' incorporates:
      //   Constant: '<S154>/Constant'
      //   MATLAB Function: '<S264>/FixedHorizonOptimizer'
      //   UnitDelay: '<S236>/last_mv'

      proc_control_node_B.dv16[0] = proc_control_node_B.WorldPosition[0] -
        proc_control_node_B.b_xoff[0];
      proc_control_node_B.dv16[1] = proc_control_node_B.WorldPosition[1] -
        proc_control_node_B.b_xoff[1];
      proc_control_node_B.dv16[2] = proc_control_node_B.WorldPosition[2] -
        proc_control_node_B.b_xoff[2];
      proc_control_node_B.dv16[3] = proc_control_node_B.qS2W[0] -
        proc_control_node_B.b_xoff[3];
      proc_control_node_B.dv16[4] = proc_control_node_B.qS2W[1] -
        proc_control_node_B.b_xoff[4];
      proc_control_node_B.dv16[5] = proc_control_node_B.qS2W[2] -
        proc_control_node_B.b_xoff[5];
      proc_control_node_B.dv16[6] = proc_control_node_B.qS2W[3] -
        proc_control_node_B.b_xoff[6];
      proc_control_node_B.dv16[7] = proc_control_node_B.BodyVelocity[0] -
        proc_control_node_B.b_xoff[7];
      proc_control_node_B.dv16[10] = proc_control_node_B.AngularRate[0] -
        proc_control_node_B.b_xoff[10];
      proc_control_node_B.dv16[8] = proc_control_node_B.BodyVelocity[1] -
        proc_control_node_B.b_xoff[8];
      proc_control_node_B.dv16[11] = proc_control_node_B.AngularRate[1] -
        proc_control_node_B.b_xoff[11];
      proc_control_node_B.dv16[9] = proc_control_node_B.BodyVelocity[2] -
        proc_control_node_B.b_xoff[9];
      proc_control_node_B.dv16[12] = proc_control_node_B.AngularRate[2] -
        proc_control_node_B.b_xoff[12];
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv16[proc_control_node_B.Ns_j + 13] =
          proc_control_node_P.Constant_Value_ct[proc_control_node_B.Ns_j] -
          proc_control_node_B.b_xoff[proc_control_node_B.Ns_j + 13];
        proc_control_node_B.dv23[proc_control_node_B.Ns_j] =
          proc_control_node_DW.last_mv_DSTATE_n[proc_control_node_B.Ns_j] -
          proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.Ns_j];
      }

      // End of SignalConversion generated from: '<S265>/ SFunction '

      // MATLAB Function: '<S264>/FixedHorizonOptimizer'
      std::memset(&proc_control_node_B.dv4[0], 0, 672U * sizeof(real_T));
      std::memset(&proc_control_node_B.dv6[0], 0, 352U * sizeof(real_T));
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv24[proc_control_node_B.Ns_j] = 1.0;
      }

      std::memcpy(&proc_control_node_B.g[0], &g_0[0], sizeof(real_T) << 8);
      std::memcpy(&proc_control_node_B.h[0], &h_0[0], 289U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.k[0], &k[0], 544U * sizeof(real_T));

      // Memory: '<S236>/Memory' incorporates:
      //   MATLAB Function: '<S264>/FixedHorizonOptimizer'

      for (proc_control_node_B.i1 = 0; proc_control_node_B.i1 < 32;
           proc_control_node_B.i1++) {
        proc_control_node_B.bv2[proc_control_node_B.i1] =
          proc_control_node_DW.Memory_PreviousInput_p[proc_control_node_B.i1];
      }

      // End of Memory: '<S236>/Memory'

      // Merge: '<S147>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S154>/Pulse Generator'
      //   MATLAB Function: '<S264>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S148>/MPC manager'
      //   Math: '<S236>/Math Function'
      //   Math: '<S236>/Math Function1'
      //   Math: '<S236>/Math Function2'
      //   Memory: '<S236>/Memory'
      //   SignalConversion generated from: '<S154>/out'

      proc_contr_mpcblock_optimizer_d(proc_control_node_B.rseq,
        proc_control_node_B.vseq, proc_control_node_B.mvmin,
        proc_control_node_B.mvmax, proc_control_node_B.dv16,
        proc_control_node_B.dv23, proc_control_node_B.bv2,
        proc_control_node_B.b_Mlim, proc_control_node_B.dv4,
        proc_control_node_B.g, proc_control_node_B.dv6,
        proc_control_node_B.b_utarget, proc_control_node_B.ZeroOrderHold_e,
        proc_control_node_B.h, proc_control_node_B.k, proc_control_node_B.ywt,
        proc_control_node_B.mvwt, proc_control_node_B.dmwwt, l_0, n,
        proc_control_node_B.b_A, proc_control_node_B.Bu, proc_control_node_B.Bv,
        proc_control_node_B.b_C, proc_control_node_B.Dv, b_Mrows,
        proc_control_node_B.dv24, proc_control_node_B.U_h,
        proc_control_node_B.useq_a, &proc_control_node_B.Merge[8],
        proc_control_node_DW.Memory_PreviousInput_p);
      proc_control_node_B.Merge[9] = (proc_control_node_DW.clockTickCounter_g <
        proc_control_node_P.PulseGenerator_Duty_j) &&
        (proc_control_node_DW.clockTickCounter_g >= 0) ?
        proc_control_node_P.PulseGenerator_Amp_i : 0.0;

      // DiscretePulseGenerator: '<S154>/Pulse Generator'
      if (proc_control_node_DW.clockTickCounter_g >=
          proc_control_node_P.PulseGenerator_Period_e - 1.0) {
        proc_control_node_DW.clockTickCounter_g = 0;
      } else {
        proc_control_node_DW.clockTickCounter_g++;
      }

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
           proc_control_node_B.i++) {
        proc_control_node_B.MATLABSystem_o6 =
          proc_control_node_B.U_h[proc_control_node_B.i];

        // SignalConversion generated from: '<S154>/out' incorporates:
        //   Gain: '<S236>/u_scale'
        //   Merge: '<S147>/Merge'

        proc_control_node_B.Merge[proc_control_node_B.i] =
          proc_control_node_P.u_scale_Gain_i[proc_control_node_B.i] *
          proc_control_node_B.MATLABSystem_o6;

        // Update for UnitDelay: '<S236>/last_mv' incorporates:
        //   SignalConversion generated from: '<S154>/out'

        proc_control_node_DW.last_mv_DSTATE_n[proc_control_node_B.i] =
          proc_control_node_B.MATLABSystem_o6;
      }

      // Update for Delay: '<S154>/Delay1' incorporates:
      //   Gain: '<S236>/u_scale'
      //   Gain: '<S236>/useq_scale'
      //   SignalConversion generated from: '<S154>/out'

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 88;
           proc_control_node_B.i++) {
        proc_control_node_DW.Delay1_DSTATE_g[proc_control_node_B.i] =
          proc_control_node_P.useq_scale_Gain[proc_control_node_B.i] *
          proc_control_node_B.useq_a[proc_control_node_B.i];
      }

      // End of Update for Delay: '<S154>/Delay1'
      // End of Outputs for SubSystem: '<S147>/LTV MPC quaternion '
      break;

     case 3:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S147>/Quaternion Non linear MPC (Not for codegen)' incorporates:
        //   ActionPort: '<S155>/Action Port'

        // InitializeConditions for SwitchCase: '<S147>/Switch Case' incorporates:
        //   Delay: '<S155>/Delay'
        //   Delay: '<S269>/mv_Delay'
        //   Delay: '<S269>/slack_delay'
        //   Delay: '<S269>/x_Delay'
        //   DiscretePulseGenerator: '<S155>/Pulse Generator'

        std::memcpy(&proc_control_node_DW.Delay_DSTATE_a[0],
                    &proc_control_node_P.Delay_InitialCondition[0], sizeof
                    (real_T) << 3U);
        proc_control_node_DW.icLoad = true;
        proc_control_node_DW.icLoad_a = true;
        proc_control_node_DW.icLoad_j = true;
        proc_control_node_DW.clockTickCounter_p = 0;

        // End of InitializeConditions for SubSystem: '<S147>/Quaternion Non linear MPC (Not for codegen)' 
      }

      // Outputs for IfAction SubSystem: '<S147>/Quaternion Non linear MPC (Not for codegen)' incorporates:
      //   ActionPort: '<S155>/Action Port'

      // Reshape: '<S268>/Reshape'
      proc_control_node_B.CostFcn_workspace_runtimedata.x[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[3] =
        proc_control_node_B.qS2W[0];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[4] =
        proc_control_node_B.qS2W[1];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[5] =
        proc_control_node_B.qS2W[2];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[6] =
        proc_control_node_B.qS2W[3];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[7] =
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[10] =
        proc_control_node_B.AngularRate[0];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[8] =
        proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[11] =
        proc_control_node_B.AngularRate[1];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[9] =
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.CostFcn_workspace_runtimedata.x[12] =
        proc_control_node_B.AngularRate[2];

      // Delay: '<S269>/mv_Delay' incorporates:
      //   Constant: '<S269>/ones'
      //   Delay: '<S155>/Delay'
      //   Product: '<S269>/Product'

      if (proc_control_node_DW.icLoad) {
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
             proc_control_node_B.i++) {
          for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 11;
               proc_control_node_B.Ns_m++) {
            proc_control_node_DW.mv_Delay_DSTATE[proc_control_node_B.Ns_m +
              proc_control_node_B.Ns_j] =
              proc_control_node_P.ones_Value[proc_control_node_B.Ns_m] *
              proc_control_node_DW.Delay_DSTATE_a[proc_control_node_B.i];
          }

          proc_control_node_B.Ns_j += 11;
        }
      }

      // Selector: '<S269>/Selector1' incorporates:
      //   Constant: '<S269>/Constant1'
      //   Delay: '<S269>/mv_Delay'

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 9;
             proc_control_node_B.i++) {
          proc_control_node_B.Selector1_n[proc_control_node_B.i + 9 *
            proc_control_node_B.Ns_j] = proc_control_node_DW.mv_Delay_DSTATE[(11
            * proc_control_node_B.Ns_j + static_cast<int32_T>
            (proc_control_node_P.Constant1_Value_i[proc_control_node_B.i])) - 1];
        }
      }

      // End of Selector: '<S269>/Selector1'

      // Delay: '<S269>/x_Delay' incorporates:
      //   Constant: '<S269>/ones'
      //   Product: '<S269>/Product1'

      if (proc_control_node_DW.icLoad_a) {
        // Product: '<S269>/Product1' incorporates:
        //   Reshape: '<S269>/reshape_x'

        proc_control_node_B.Bu_nl[0] = proc_control_node_B.WorldPosition[0];
        proc_control_node_B.Bu_nl[1] = proc_control_node_B.WorldPosition[1];
        proc_control_node_B.Bu_nl[2] = proc_control_node_B.WorldPosition[2];
        proc_control_node_B.Bu_nl[3] = proc_control_node_B.qS2W[0];
        proc_control_node_B.Bu_nl[4] = proc_control_node_B.qS2W[1];
        proc_control_node_B.Bu_nl[5] = proc_control_node_B.qS2W[2];
        proc_control_node_B.Bu_nl[6] = proc_control_node_B.qS2W[3];
        proc_control_node_B.Bu_nl[7] = proc_control_node_B.BodyVelocity[0];
        proc_control_node_B.Bu_nl[10] = proc_control_node_B.AngularRate[0];
        proc_control_node_B.Bu_nl[8] = proc_control_node_B.BodyVelocity[1];
        proc_control_node_B.Bu_nl[11] = proc_control_node_B.AngularRate[1];
        proc_control_node_B.Bu_nl[9] = proc_control_node_B.BodyVelocity[2];
        proc_control_node_B.Bu_nl[12] = proc_control_node_B.AngularRate[2];
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
             proc_control_node_B.i++) {
          for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 11;
               proc_control_node_B.Ns_m++) {
            proc_control_node_DW.x_Delay_DSTATE[proc_control_node_B.Ns_m +
              proc_control_node_B.Ns_j] =
              proc_control_node_P.ones_Value[proc_control_node_B.Ns_m] *
              proc_control_node_B.Bu_nl[proc_control_node_B.i];
          }

          proc_control_node_B.Ns_j += 11;
        }
      }

      // Selector: '<S269>/Selector' incorporates:
      //   Constant: '<S269>/Constant'
      //   Delay: '<S269>/x_Delay'

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 13;
           proc_control_node_B.Ns_j++) {
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 9;
             proc_control_node_B.i++) {
          proc_control_node_B.Selector_f[proc_control_node_B.i + 9 *
            proc_control_node_B.Ns_j] = proc_control_node_DW.x_Delay_DSTATE[(11 *
            proc_control_node_B.Ns_j + static_cast<int32_T>
            (proc_control_node_P.Constant_Value_cr[proc_control_node_B.i])) - 1];
        }
      }

      // End of Selector: '<S269>/Selector'

      // Delay: '<S269>/slack_delay' incorporates:
      //   Constant: '<S267>/e.init_zero'

      if (proc_control_node_DW.icLoad_j) {
        proc_control_node_DW.slack_delay_DSTATE =
          proc_control_node_P.einit_zero_Value;
      }

      // MATLAB Function: '<S268>/NLMPC' incorporates:
      //   Delay: '<S155>/Delay'
      //   Delay: '<S269>/slack_delay'
      //   MATLABSystem: '<S148>/MPC manager'
      //   Merge: '<S9>/Merge'
      //   Reshape: '<S268>/Reshape'
      //   Selector: '<S269>/Selector'
      //   Selector: '<S269>/Selector1'

      proc_control_node_B.Ns_j = 0;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
           proc_control_node_B.i++) {
        proc_control_node_B.CostFcn_workspace_runtimedata.OutputWeights[proc_control_node_B.Ns_j]
          = proc_control_node_B.ywt[proc_control_node_B.i];
        proc_control_node_B.Ns_j += 10;
      }

      proc_control_node_B.Ns_j = 0;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
           proc_control_node_B.i++) {
        for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 9;
             proc_control_node_B.Ns_m++) {
          proc_control_node_B.CostFcn_workspace_runtimedata.OutputWeights
            [(proc_control_node_B.Ns_m + proc_control_node_B.Ns_j) + 1] =
            proc_control_node_B.ywt[proc_control_node_B.i];
        }

        proc_control_node_B.Ns_j += 10;
      }

      proc_control_node_B.Ns_j = 0;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
           proc_control_node_B.i++) {
        proc_control_node_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_node_B.Ns_j]
          = proc_control_node_B.mvwt[proc_control_node_B.i];
        proc_control_node_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_node_B.Ns_j]
          = proc_control_node_B.dmwwt[proc_control_node_B.i];
        proc_control_node_B.CostFcn_workspace_runtimedata.MVMin[proc_control_node_B.Ns_j]
          = proc_control_node_B.mvmin[proc_control_node_B.i];
        proc_control_node_B.CostFcn_workspace_runtimedata.MVMax[proc_control_node_B.Ns_j]
          = proc_control_node_B.mvmax[proc_control_node_B.i];
        proc_control_node_B.Ns_j += 10;
      }

      proc_control_node_B.Ns_j = 0;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
           proc_control_node_B.i++) {
        for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 9;
             proc_control_node_B.Ns_m++) {
          proc_control_node_B.idx_j = (proc_control_node_B.Ns_m +
            proc_control_node_B.Ns_j) + 1;
          proc_control_node_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_node_B.idx_j]
            = proc_control_node_B.mvwt[proc_control_node_B.i];
          proc_control_node_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_node_B.idx_j]
            = proc_control_node_B.dmwwt[proc_control_node_B.i];
          proc_control_node_B.CostFcn_workspace_runtimedata.MVMin[proc_control_node_B.idx_j]
            = proc_control_node_B.mvmin[proc_control_node_B.i];
          proc_control_node_B.CostFcn_workspace_runtimedata.MVMax[proc_control_node_B.idx_j]
            = proc_control_node_B.mvmax[proc_control_node_B.i];
        }

        proc_control_node_B.Ns_j += 10;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 80;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.b_utarget[proc_control_node_B.Ns_j] = (rtMinusInf);
        proc_control_node_B.dv10[proc_control_node_B.Ns_j] = (rtInf);
      }

      proc_control__znlmpc_getUBounds(proc_control_node_DW.Delay_DSTATE_a,
        proc_control_node_B.CostFcn_workspace_runtimedata.MVMin,
        proc_control_node_B.CostFcn_workspace_runtimedata.MVMax,
        proc_control_node_B.b_utarget, proc_control_node_B.dv10,
        proc_control_node_B.A_data, proc_control_node_B.A_size,
        proc_control_node_B.B_data_j, &proc_control_node_B.B_size);
      std::memcpy(&proc_control_node_B.CostFcn_workspace_runtimedata.lastMV[0],
                  &proc_control_node_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      proc_control_node_B.CostFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 130;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.CostFcn_workspace_runtimedata.OutputMin[proc_control_node_B.Ns_j]
          = (rtMinusInf);
        proc_control_node_B.CostFcn_workspace_runtimedata.OutputMax[proc_control_node_B.Ns_j]
          = (rtInf);
        proc_control_node_B.CostFcn_workspace_runtimedata.StateMin[proc_control_node_B.Ns_j]
          = (rtMinusInf);
        proc_control_node_B.CostFcn_workspace_runtimedata.StateMax[proc_control_node_B.Ns_j]
          = (rtInf);
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 80;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.CostFcn_workspace_runtimedata.MVRateMin[proc_control_node_B.Ns_j]
          = (rtMinusInf);
        proc_control_node_B.CostFcn_workspace_runtimedata.MVRateMax[proc_control_node_B.Ns_j]
          = (rtInf);
        proc_control_node_B.CostFcn_workspace_runtimedata.MVScaledTarget[proc_control_node_B.Ns_j]
          = 0.0;
      }

      std::memcpy(&proc_control_node_B.ConFcn_workspace_runtimedata.x[0],
                  &proc_control_node_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_node_B.ConFcn_workspace_runtimedata.lastMV[0],
                  &proc_control_node_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_node_B.ConFcn_workspace_runtimedata.ref[0],
                  &proc_control_node_B.CostFcn_workspace_runtimedata.ref[0],
                  130U * sizeof(real_T));
      std::memcpy
        (&proc_control_node_B.ConFcn_workspace_runtimedata.OutputWeights[0],
         &proc_control_node_B.CostFcn_workspace_runtimedata.OutputWeights[0],
         130U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.ConFcn_workspace_runtimedata.MVWeights[0],
                  &proc_control_node_B.CostFcn_workspace_runtimedata.MVWeights[0],
                  80U * sizeof(real_T));
      std::memcpy
        (&proc_control_node_B.ConFcn_workspace_runtimedata.MVRateWeights[0],
         &proc_control_node_B.CostFcn_workspace_runtimedata.MVRateWeights[0],
         80U * sizeof(real_T));
      proc_control_node_B.ConFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 130;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.ConFcn_workspace_runtimedata.OutputMin[proc_control_node_B.Ns_j]
          = (rtMinusInf);
        proc_control_node_B.ConFcn_workspace_runtimedata.OutputMax[proc_control_node_B.Ns_j]
          = (rtInf);
        proc_control_node_B.ConFcn_workspace_runtimedata.StateMin[proc_control_node_B.Ns_j]
          = (rtMinusInf);
        proc_control_node_B.ConFcn_workspace_runtimedata.StateMax[proc_control_node_B.Ns_j]
          = (rtInf);
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 80;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.ConFcn_workspace_runtimedata.MVMin[proc_control_node_B.Ns_j]
          =
          proc_control_node_B.CostFcn_workspace_runtimedata.MVMin[proc_control_node_B.Ns_j];
        proc_control_node_B.ConFcn_workspace_runtimedata.MVMax[proc_control_node_B.Ns_j]
          =
          proc_control_node_B.CostFcn_workspace_runtimedata.MVMax[proc_control_node_B.Ns_j];
        proc_control_node_B.ConFcn_workspace_runtimedata.MVRateMin[proc_control_node_B.Ns_j]
          = (rtMinusInf);
        proc_control_node_B.ConFcn_workspace_runtimedata.MVRateMax[proc_control_node_B.Ns_j]
          = (rtInf);
        proc_control_node_B.ConFcn_workspace_runtimedata.MVScaledTarget[proc_control_node_B.Ns_j]
          = 0.0;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.expl_temp.MVIndex[proc_control_node_B.Ns_j] =
          static_cast<real_T>(proc_control_node_B.Ns_j) + 1.0;
      }

      proc_control_node_B.expl_temp.NumOfInputs = 8.0;
      proc_control_node_B.expl_temp.NumOfOutputs = 13.0;
      proc_control_node_B.expl_temp.NumOfStates = 13.0;
      proc_control_node_B.expl_temp.PredictionHorizon = 10.0;
      std::memset(&proc_control_node_B.expl_temp.MVTarget[0], 0, 80U * sizeof
                  (real_T));
      std::memcpy(&proc_control_node_B.expl_temp.References[0],
                  &proc_control_node_B.CostFcn_workspace_runtimedata.ref[0],
                  130U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.expl_temp.LastMV[0],
                  &proc_control_node_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_node_B.expl_temp.CurrentStates[0],
                  &proc_control_node_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      proc_control_node_B.expl_temp.Ts = 0.1;
      proc_control_node_B.Ns_j = 0;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 9;
           proc_control_node_B.i++) {
        proc_control_node_B.Ns_m = 0;
        for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 13;
             proc_control_node_B.idx_j++) {
          proc_control_node_B.rseq[proc_control_node_B.idx_j +
            proc_control_node_B.Ns_j] =
            proc_control_node_B.Selector_f[proc_control_node_B.Ns_m +
            proc_control_node_B.i];
          proc_control_node_B.Ns_m += 9;
        }

        proc_control_node_B.Ns_j += 13;
      }

      proc_control_node_B.Ns_j = 0;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 13;
           proc_control_node_B.i++) {
        proc_control_node_B.rseq[proc_control_node_B.i + 117] =
          proc_control_node_B.Selector_f[proc_control_node_B.Ns_j + 8];
        proc_control_node_B.Ns_j += 9;
      }

      proc_control_node_B.Ns_j = 0;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
           proc_control_node_B.i++) {
        proc_control_node_B.Ns_m = 0;
        for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 9;
             proc_control_node_B.idx_j++) {
          proc_control_node_B.b_utarget[proc_control_node_B.Ns_m +
            proc_control_node_B.i] =
            proc_control_node_B.Selector1_n[proc_control_node_B.idx_j +
            proc_control_node_B.Ns_j];
          proc_control_node_B.Ns_m += 8;
        }

        proc_control_node_B.Ns_j += 9;
      }

      proc_control_node_B.Ns_j = 0;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
           proc_control_node_B.i++) {
        proc_control_node_B.b_utarget[proc_control_node_B.i + 72] =
          proc_control_node_B.Selector1_n[proc_control_node_B.Ns_j + 8];
        proc_control_node_B.Ns_j += 9;
      }

      std::memset(&proc_control_node_B.a_jk[0], 0, sizeof(real_T) << 4U);
      proc_control_node_B.i = 0;
      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 80;
           proc_control_node_B.Ns_m++) {
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 16;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.a_jk[proc_control_node_B.Ns_j] +=
            static_cast<real_T>(a[proc_control_node_B.Ns_j +
                                proc_control_node_B.i]) *
            proc_control_node_B.b_utarget[proc_control_node_B.Ns_m];
        }

        proc_control_node_B.i += 16;
      }

      std::memset(&proc_control_node_B.b_utarget[0], 0, 80U * sizeof(real_T));
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv23[proc_control_node_B.Ns_j] = static_cast<real_T>
          (proc_control_node_B.Ns_j) + 1.0;
      }

      std::memcpy(&proc_control_node_B.rtb_Selector_m[0],
                  &proc_control_node_B.rseq[0], 130U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.rtb_Selector_m[130],
                  &proc_control_node_B.a_jk[0], sizeof(real_T) << 4U);
      proc_control_node_B.rtb_Selector_m[146] =
        proc_control_node_DW.slack_delay_DSTATE;
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 130;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv7[proc_control_node_B.Ns_j] = (rtMinusInf);
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 16;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv7[proc_control_node_B.Ns_j + 130] = (rtMinusInf);
      }

      proc_control_node_B.dv7[146] = 0.0;
      proc_control_node_fmincon
        (&proc_control_node_B.CostFcn_workspace_runtimedata, 0.1,
         proc_control_node_B.CostFcn_workspace_runtimedata.x,
         proc_control_node_DW.Delay_DSTATE_a,
         proc_control_node_B.CostFcn_workspace_runtimedata.ref,
         proc_control_node_B.b_utarget, 10.0, 13.0, 13.0, 8.0,
         proc_control_node_B.dv23, proc_control_node_B.rtb_Selector_m,
         proc_control_node_B.A_data, proc_control_node_B.B_data_j,
         &proc_control_node_B.B_size, proc_control_node_B.dv7,
         &proc_control_node_B.ConFcn_workspace_runtimedata,
         &proc_control_node_B.expl_temp, proc_control_node_B.z,
         &proc_control_node_B.epsilon, &proc_control_node_B.MATLABSystem_o6,
         &proc_control_node_B.Divide1, &proc_control_node_B.Divide2, expl_temp,
         &proc_control_node_B.Divide3, &proc_control_node_B.ZeroOrderHold_b,
         &proc_control_node_B.t7, &proc_control_node_B.t8);
      if ((proc_control_node_B.MATLABSystem_o6 == 0.0) &&
          (proc_control_node_B.Divide3 > 0.02)) {
        proc_control_node_B.MATLABSystem_o6 = -2.0;
      }

      // Update for Delay: '<S269>/slack_delay' incorporates:
      //   MATLAB Function: '<S268>/NLMPC'
      //   Reshape: '<S268>/Reshape'

      proc_control_node_znlmpc_getXUe(proc_control_node_B.z,
        proc_control_node_B.CostFcn_workspace_runtimedata.x,
        proc_control_node_B.Dv, proc_control_node_B.useq_a,
        &proc_control_node_DW.slack_delay_DSTATE);

      // MATLAB Function: '<S268>/NLMPC' incorporates:
      //   Delay: '<S155>/Delay'

      if (proc_control_node_B.MATLABSystem_o6 > 0.0) {
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
             proc_control_node_B.i++) {
          proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.i] =
            proc_control_node_B.useq_a[proc_control_node_B.Ns_j];
          proc_control_node_B.Ns_j += 11;
        }
      } else {
        std::memcpy(&proc_control_node_B.ZeroOrderHold_e[0],
                    &proc_control_node_DW.Delay_DSTATE_a[0], sizeof(real_T) <<
                    3U);
      }

      // Merge: '<S147>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S155>/Pulse Generator'

      proc_control_node_B.Merge[9] = (proc_control_node_DW.clockTickCounter_p <
        proc_control_node_P.PulseGenerator_Duty_f) &&
        (proc_control_node_DW.clockTickCounter_p >= 0) ?
        proc_control_node_P.PulseGenerator_Amp_p : 0.0;

      // DiscretePulseGenerator: '<S155>/Pulse Generator'
      if (proc_control_node_DW.clockTickCounter_p >=
          proc_control_node_P.PulseGenerator_Period_e5 - 1.0) {
        proc_control_node_DW.clockTickCounter_p = 0;
      } else {
        proc_control_node_DW.clockTickCounter_p++;
      }

      // Merge: '<S147>/Merge' incorporates:
      //   MATLAB Function: '<S268>/NLMPC'
      //   SignalConversion generated from: '<S155>/out'

      proc_control_node_B.Merge[8] = proc_control_node_B.MATLABSystem_o6;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
           proc_control_node_B.i++) {
        proc_control_node_B.epsilon =
          proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.i];
        proc_control_node_B.Merge[proc_control_node_B.i] =
          proc_control_node_B.epsilon;

        // Update for Delay: '<S155>/Delay'
        proc_control_node_DW.Delay_DSTATE_a[proc_control_node_B.i] =
          proc_control_node_B.epsilon;
      }

      // Update for Delay: '<S269>/mv_Delay' incorporates:
      //   MATLAB Function: '<S268>/NLMPC'

      proc_control_node_DW.icLoad = false;
      std::memcpy(&proc_control_node_DW.mv_Delay_DSTATE[0],
                  &proc_control_node_B.useq_a[0], 88U * sizeof(real_T));

      // Update for Delay: '<S269>/x_Delay' incorporates:
      //   MATLAB Function: '<S268>/NLMPC'

      proc_control_node_DW.icLoad_a = false;
      std::memcpy(&proc_control_node_DW.x_Delay_DSTATE[0],
                  &proc_control_node_B.Dv[0], 143U * sizeof(real_T));

      // Update for Delay: '<S269>/slack_delay'
      proc_control_node_DW.icLoad_j = false;

      // End of Outputs for SubSystem: '<S147>/Quaternion Non linear MPC (Not for codegen)' 
      break;

     case 4:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S147>/Adaptive MPC Euler ' incorporates:
        //   ActionPort: '<S150>/Action Port'

        for (proc_control_node_B.i = 0; proc_control_node_B.i < 32;
             proc_control_node_B.i++) {
          // InitializeConditions for SwitchCase: '<S147>/Switch Case' incorporates:
          //   Memory: '<S160>/Memory'

          proc_control_node_DW.Memory_PreviousInput[proc_control_node_B.i] =
            proc_control_node_P.Memory_InitialCondition_c[proc_control_node_B.i];
        }

        // InitializeConditions for SwitchCase: '<S147>/Switch Case' incorporates:
        //   Delay: '<S150>/Delay1'
        //   DiscretePulseGenerator: '<S150>/Pulse Generator'
        //   UnitDelay: '<S160>/last_mv'

        std::memcpy(&proc_control_node_DW.last_mv_DSTATE[0],
                    &proc_control_node_P.last_mv_InitialCondition_j[0], sizeof
                    (real_T) << 3U);
        std::memcpy(&proc_control_node_DW.Delay1_DSTATE[0],
                    &proc_control_node_P.Delay1_InitialCondition_l[0], sizeof
                    (real_T) << 3U);
        proc_control_node_DW.clockTickCounter = 0;

        // End of InitializeConditions for SubSystem: '<S147>/Adaptive MPC Euler ' 
      }

      // Outputs for IfAction SubSystem: '<S147>/Adaptive MPC Euler ' incorporates:
      //   ActionPort: '<S150>/Action Port'

      // Sqrt: '<S197>/sqrt' incorporates:
      //   Product: '<S198>/Product'
      //   Product: '<S198>/Product1'
      //   Product: '<S198>/Product2'
      //   Product: '<S198>/Product3'
      //   Sum: '<S198>/Sum'

      proc_control_node_B.MATLABSystem_o6 = std::sqrt
        (((proc_control_node_B.qS2W[0] * proc_control_node_B.qS2W[0] +
           proc_control_node_B.qS2W[1] * proc_control_node_B.qS2W[1]) +
          proc_control_node_B.qS2W[2] * proc_control_node_B.qS2W[2]) +
         proc_control_node_B.qS2W[3] * proc_control_node_B.qS2W[3]);

      // Product: '<S192>/Product'
      proc_control_node_B.epsilon = proc_control_node_B.qS2W[0] /
        proc_control_node_B.MATLABSystem_o6;

      // Product: '<S192>/Product1'
      proc_control_node_B.Divide1 = proc_control_node_B.qS2W[1] /
        proc_control_node_B.MATLABSystem_o6;

      // Product: '<S192>/Product2'
      proc_control_node_B.Divide2 = proc_control_node_B.qS2W[2] /
        proc_control_node_B.MATLABSystem_o6;

      // Product: '<S192>/Product3'
      proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.qS2W[3] /
        proc_control_node_B.MATLABSystem_o6;

      // Fcn: '<S190>/fcn2' incorporates:
      //   Fcn: '<S190>/fcn5'

      proc_control_node_B.t16 = proc_control_node_B.Divide1 *
        proc_control_node_B.Divide1;
      proc_control_node_B.t15 = proc_control_node_B.Divide2 *
        proc_control_node_B.Divide2;

      // Trigonometry: '<S191>/Trigonometric Function1' incorporates:
      //   Fcn: '<S190>/fcn1'
      //   Fcn: '<S190>/fcn2'

      proc_control_node_B.c_h[0] = rt_atan2d_snf((proc_control_node_B.Divide1 *
        proc_control_node_B.Divide2 + proc_control_node_B.epsilon *
        proc_control_node_B.MATLABSystem_o6) * 2.0,
        ((proc_control_node_B.epsilon * proc_control_node_B.epsilon +
          proc_control_node_B.t16) - proc_control_node_B.t15) -
        proc_control_node_B.MATLABSystem_o6 *
        proc_control_node_B.MATLABSystem_o6);

      // Fcn: '<S190>/fcn3'
      proc_control_node_B.Divide3 = (proc_control_node_B.Divide1 *
        proc_control_node_B.MATLABSystem_o6 - proc_control_node_B.epsilon *
        proc_control_node_B.Divide2) * -2.0;

      // If: '<S193>/If' incorporates:
      //   Constant: '<S194>/Constant'
      //   Constant: '<S195>/Constant'

      if (proc_control_node_B.Divide3 > 1.0) {
        proc_control_node_B.Divide3 = proc_control_node_P.Constant_Value_lp;
      } else if (proc_control_node_B.Divide3 < -1.0) {
        proc_control_node_B.Divide3 = proc_control_node_P.Constant_Value_du;
      }

      // End of If: '<S193>/If'

      // Trigonometry: '<S191>/trigFcn'
      if (proc_control_node_B.Divide3 > 1.0) {
        proc_control_node_B.Divide3 = 1.0;
      } else if (proc_control_node_B.Divide3 < -1.0) {
        proc_control_node_B.Divide3 = -1.0;
      }

      proc_control_node_B.c_h[1] = std::asin(proc_control_node_B.Divide3);

      // End of Trigonometry: '<S191>/trigFcn'

      // Trigonometry: '<S191>/Trigonometric Function3' incorporates:
      //   Fcn: '<S190>/fcn4'
      //   Fcn: '<S190>/fcn5'

      proc_control_node_B.c_h[2] = rt_atan2d_snf((proc_control_node_B.Divide2 *
        proc_control_node_B.MATLABSystem_o6 + proc_control_node_B.epsilon *
        proc_control_node_B.Divide1) * 2.0, ((proc_control_node_B.epsilon *
        proc_control_node_B.epsilon - proc_control_node_B.t16) -
        proc_control_node_B.t15) + proc_control_node_B.MATLABSystem_o6 *
        proc_control_node_B.MATLABSystem_o6);

      // MATLAB Function: '<S150>/MATLAB Function' incorporates:
      //   Merge: '<S9>/Merge'

      std::memset(&proc_control_node_B.y_a_m[0], 0, 120U * sizeof(real_T));
      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 10;
           proc_control_node_B.idx_m++) {
        proc_control_node_B.y_a_m[proc_control_node_B.idx_m] =
          proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.idx_m];
        proc_control_node_B.y_a_m[proc_control_node_B.idx_m + 10] =
          proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.idx_m
          + 10];
        proc_control_node_B.y_a_m[proc_control_node_B.idx_m + 20] =
          proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.idx_m
          + 20];

        // Merge: '<S9>/Merge'
        proc_control_node_B.Divide1 =
          proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.idx_m
          + 30];
        proc_control_node_B.Divide3 =
          proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.idx_m
          + 40];
        proc_control_node_B.Divide2 =
          proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.idx_m
          + 50];
        proc_control_node_B.epsilon =
          proc_control_node_B.CostFcn_workspace_runtimedata.ref[proc_control_node_B.idx_m
          + 60];
        proc_control_node_B.MATLABSystem_o6 = 1.0 / std::sqrt
          (((proc_control_node_B.Divide1 * proc_control_node_B.Divide1 +
             proc_control_node_B.Divide3 * proc_control_node_B.Divide3) +
            proc_control_node_B.Divide2 * proc_control_node_B.Divide2) +
           proc_control_node_B.epsilon * proc_control_node_B.epsilon);
        proc_control_node_B.t16 = proc_control_node_B.Divide1 *
          proc_control_node_B.MATLABSystem_o6;
        proc_control_node_B.t15 = proc_control_node_B.Divide3 *
          proc_control_node_B.MATLABSystem_o6;
        proc_control_node_B.rtb_sincos_o2_idx_2 = proc_control_node_B.Divide2 *
          proc_control_node_B.MATLABSystem_o6;
        proc_control_node_B.MATLABSystem_o6 *= proc_control_node_B.epsilon;
        proc_control_node_B.epsilon = (proc_control_node_B.t15 *
          proc_control_node_B.MATLABSystem_o6 - proc_control_node_B.t16 *
          proc_control_node_B.rtb_sincos_o2_idx_2) * -2.0;
        rtb_Merge_h = (proc_control_node_B.epsilon >= 0.99999999999999778);
        rtb_NewDvlMsg = (proc_control_node_B.epsilon <= -0.99999999999999778);
        proc_control_node_B.scale = proc_control_node_B.epsilon;
        if (proc_control_node_B.epsilon >= 0.99999999999999778) {
          proc_control_node_B.scale = 1.0;
        }

        if (rtb_NewDvlMsg) {
          proc_control_node_B.scale = -1.0;
        }

        proc_control_node_B.epsilon = proc_control_node_B.t16 *
          proc_control_node_B.t16;
        proc_control_node_B.Divide2 = proc_control_node_B.t15 *
          proc_control_node_B.t15;
        proc_control_node_B.Divide3 = proc_control_node_B.rtb_sincos_o2_idx_2 *
          proc_control_node_B.rtb_sincos_o2_idx_2;
        proc_control_node_B.Divide1 = proc_control_node_B.MATLABSystem_o6 *
          proc_control_node_B.MATLABSystem_o6;
        proc_control_node_B.u2[0] = rt_atan2d_snf((proc_control_node_B.t15 *
          proc_control_node_B.rtb_sincos_o2_idx_2 + proc_control_node_B.t16 *
          proc_control_node_B.MATLABSystem_o6) * 2.0,
          ((proc_control_node_B.epsilon + proc_control_node_B.Divide2) -
           proc_control_node_B.Divide3) - proc_control_node_B.Divide1);
        proc_control_node_B.u2[2] = rt_atan2d_snf
          ((proc_control_node_B.rtb_sincos_o2_idx_2 *
            proc_control_node_B.MATLABSystem_o6 + proc_control_node_B.t16 *
            proc_control_node_B.t15) * 2.0, ((proc_control_node_B.epsilon -
             proc_control_node_B.Divide2) - proc_control_node_B.Divide3) +
           proc_control_node_B.Divide1);
        proc_control_node_B.Ns = 0;
        if (rtb_Merge_h || rtb_NewDvlMsg) {
          proc_control_node_B.Ns = 1;
        }

        proc_control_node_B.b_s_l = proc_control_node_B.Ns;
        if (0 <= proc_control_node_B.Ns - 1) {
          proc_control_node_B.t7 = proc_control_node_B.scale;
        }

        proc_control_node_B.Ns = 0;
        while (proc_control_node_B.Ns <= proc_control_node_B.b_s_l - 1) {
          if (proc_control_node_B.t7 < 0.0) {
            proc_control_node_B.t7 = -1.0;
          } else if (proc_control_node_B.t7 > 0.0) {
            proc_control_node_B.t7 = 1.0;
          } else if (proc_control_node_B.t7 == 0.0) {
            proc_control_node_B.t7 = 0.0;
          } else {
            proc_control_node_B.t7 = (rtNaN);
          }

          proc_control_node_B.Ns = 1;
        }

        proc_control_node_B.Ns = 0;
        if (rtb_Merge_h || rtb_NewDvlMsg) {
          proc_control_node_B.Ns = 1;
        }

        if (0 <= static_cast<int8_T>(proc_control_node_B.Ns) - 1) {
          proc_control_node_B.t17 = rt_atan2d_snf(proc_control_node_B.t15,
            proc_control_node_B.t16);
        }

        if (0 <= proc_control_node_B.b_s_l - 1) {
          proc_control_node_B.u2[0] = -proc_control_node_B.t7 * 2.0 *
            proc_control_node_B.t17;
        }

        proc_control_node_B.Ns_m = 0;
        if (rtb_Merge_h || rtb_NewDvlMsg) {
          proc_control_node_B.Ns_m = 1;
        }

        if (0 <= proc_control_node_B.Ns_m - 1) {
          proc_control_node_B.u2[2] = 0.0;
        }

        proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.u2[0];
        proc_control_node_B.u2[0] = proc_control_node_B.u2[2];
        proc_control_node_B.y_a_m[proc_control_node_B.idx_m + 30] =
          proc_control_node_B.u2[0];
        proc_control_node_B.y_a_m[proc_control_node_B.idx_m + 40] = std::asin
          (proc_control_node_B.scale);
        proc_control_node_B.y_a_m[proc_control_node_B.idx_m + 50] =
          proc_control_node_B.MATLABSystem_o6;
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.y_a_m[proc_control_node_B.idx_m + 10 *
            (proc_control_node_B.Ns_j + 6)] =
            proc_control_node_B.CostFcn_workspace_runtimedata.ref
            [(proc_control_node_B.Ns_j + 7) * 10 + proc_control_node_B.idx_m];
        }
      }

      // End of MATLAB Function: '<S150>/MATLAB Function'

      // SignalConversion generated from: '<S159>/ SFunction ' incorporates:
      //   MATLAB Function: '<S150>/MATLAB Function2'

      proc_control_node_B.TmpSignalConversionAtSFun_p[3] =
        proc_control_node_B.c_h[2];
      proc_control_node_B.TmpSignalConversionAtSFun_p[4] =
        proc_control_node_B.c_h[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[5] =
        proc_control_node_B.c_h[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[6] =
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[9] =
        proc_control_node_B.AngularRate[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[7] =
        proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[10] =
        proc_control_node_B.AngularRate[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.TmpSignalConversionAtSFun_p[8] =
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.TmpSignalConversionAtSFun_p[11] =
        proc_control_node_B.AngularRate[2];

      // MATLAB Function: '<S150>/MATLAB Function2' incorporates:
      //   Constant: '<S150>/Constant1'
      //   Constant: '<S150>/Constant3'
      //   Delay: '<S150>/Delay1'
      //   SignalConversion generated from: '<S159>/ SFunction '

      proc_control_node_B.MATLABSystem_o6 = proc_control_node_P.MPC.dts;
      proc_control_node_B.epsilon = std::abs(proc_control_node_B.AngularRate[0]);
      proc_control_node_B.Divide1 = std::abs(proc_control_node_B.AngularRate[1]);
      proc_control_node_B.Divide2 = std::abs(proc_control_node_B.AngularRate[2]);
      proc_control_node_B.Divide3 = std::cos(proc_control_node_B.c_h[2]);
      proc_control_node_B.ZeroOrderHold_b = std::cos(proc_control_node_B.c_h[0]);
      proc_control_node_B.t7 = std::abs(proc_control_node_B.BodyVelocity[0]);
      proc_control_node_B.t8 = std::abs(proc_control_node_B.BodyVelocity[1]);
      proc_control_node_B.t9 = std::cos(proc_control_node_B.c_h[1]);
      proc_control_node_B.t10 = std::abs(proc_control_node_B.BodyVelocity[2]);
      if (proc_control_node_B.AngularRate[0] < 0.0) {
        proc_control_node_B.t11 = -1.0;
      } else if (proc_control_node_B.AngularRate[0] > 0.0) {
        proc_control_node_B.t11 = 1.0;
      } else if (proc_control_node_B.AngularRate[0] == 0.0) {
        proc_control_node_B.t11 = 0.0;
      } else {
        proc_control_node_B.t11 = (rtNaN);
      }

      proc_control_node_B.rtb_sincos_o1_idx_1 = std::sin
        (proc_control_node_B.c_h[2]);
      proc_control_node_B.t13 = std::sin(proc_control_node_B.c_h[0]);
      if (proc_control_node_B.AngularRate[1] < 0.0) {
        proc_control_node_B.t14 = -1.0;
      } else if (proc_control_node_B.AngularRate[1] > 0.0) {
        proc_control_node_B.t14 = 1.0;
      } else if (proc_control_node_B.AngularRate[1] == 0.0) {
        proc_control_node_B.t14 = 0.0;
      } else {
        proc_control_node_B.t14 = (rtNaN);
      }

      if (proc_control_node_B.AngularRate[2] < 0.0) {
        proc_control_node_B.t15 = -1.0;
      } else if (proc_control_node_B.AngularRate[2] > 0.0) {
        proc_control_node_B.t15 = 1.0;
      } else if (proc_control_node_B.AngularRate[2] == 0.0) {
        proc_control_node_B.t15 = 0.0;
      } else {
        proc_control_node_B.t15 = (rtNaN);
      }

      proc_control_node_B.t16 = std::sin(proc_control_node_B.c_h[1]);
      if (proc_control_node_B.BodyVelocity[0] < 0.0) {
        proc_control_node_B.t17 = -1.0;
      } else if (proc_control_node_B.BodyVelocity[0] > 0.0) {
        proc_control_node_B.t17 = 1.0;
      } else if (proc_control_node_B.BodyVelocity[0] == 0.0) {
        proc_control_node_B.t17 = 0.0;
      } else {
        proc_control_node_B.t17 = (rtNaN);
      }

      if (proc_control_node_B.BodyVelocity[1] < 0.0) {
        proc_control_node_B.t65 = -1.0;
      } else if (proc_control_node_B.BodyVelocity[1] > 0.0) {
        proc_control_node_B.t65 = 1.0;
      } else if (proc_control_node_B.BodyVelocity[1] == 0.0) {
        proc_control_node_B.t65 = 0.0;
      } else {
        proc_control_node_B.t65 = (rtNaN);
      }

      if (proc_control_node_B.BodyVelocity[2] < 0.0) {
        proc_control_node_B.d = -1.0;
      } else if (proc_control_node_B.BodyVelocity[2] > 0.0) {
        proc_control_node_B.d = 1.0;
      } else if (proc_control_node_B.BodyVelocity[2] == 0.0) {
        proc_control_node_B.d = 0.0;
      } else {
        proc_control_node_B.d = (rtNaN);
      }

      proc_control_node_B.t56 = proc_control_node_B.AngularRate[2] *
        1.0571299073092789E-5;
      proc_control_node_B.t57 = proc_control_node_B.AngularRate[1] *
        9.7602896722846373E-5;
      proc_control_node_B.rtb_sincos_o1_idx_0 =
        proc_control_node_B.BodyVelocity[1] * 0.01129023503850542;
      proc_control_node_B.rtb_sincos_o2_idx_0 =
        proc_control_node_B.BodyVelocity[0] * 0.00477039452928936;
      proc_control_node_B.t70 = proc_control_node_B.AngularRate[0] *
        9.1703771260780813E-5;
      proc_control_node_B.Product1_n = proc_control_node_B.BodyVelocity[2] *
        0.143523560675718;
      proc_control_node_B.t53 = proc_control_node_B.BodyVelocity[0] *
        0.00568699616459184;
      proc_control_node_B.t54 = proc_control_node_B.BodyVelocity[2] *
        0.069014505171846527;
      proc_control_node_B.t55 = proc_control_node_B.BodyVelocity[1] *
        0.0071670223909459834;
      proc_control_node_B.scale = proc_control_node_B.t16 *
        proc_control_node_B.t16;
      proc_control_node_B.Sum_ll = proc_control_node_B.AngularRate[2] *
        proc_control_node_B.Divide3;
      proc_control_node_B.t22 = proc_control_node_B.AngularRate[1] *
        proc_control_node_B.rtb_sincos_o1_idx_1;
      proc_control_node_B.t23 = proc_control_node_B.Divide3 *
        proc_control_node_B.ZeroOrderHold_b;
      proc_control_node_B.absxk = proc_control_node_B.Divide3 *
        proc_control_node_B.t13;
      proc_control_node_B.TSamp = proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.rtb_sincos_o1_idx_1;
      proc_control_node_B.t = proc_control_node_B.rtb_sincos_o1_idx_1 *
        proc_control_node_B.t13;
      proc_control_node_B.fcn2_e = 1.0 / proc_control_node_B.t9;
      proc_control_node_B.t51 = -(proc_control_node_B.AngularRate[0] *
        9.1703771260780813E-5);
      proc_control_node_B.Product2_l = proc_control_node_B.fcn2_e *
        proc_control_node_B.fcn2_e;
      proc_control_node_B.t31 = proc_control_node_B.t16 *
        proc_control_node_B.absxk;
      proc_control_node_B.t32 = proc_control_node_B.t16 *
        proc_control_node_B.TSamp;
      proc_control_node_B.t37 = proc_control_node_B.t16 * proc_control_node_B.t
        + proc_control_node_B.t23;
      proc_control_node_B.t38 = proc_control_node_B.t16 *
        proc_control_node_B.t23 + proc_control_node_B.t;
      proc_control_node_B.t39 = proc_control_node_B.absxk +
        -proc_control_node_B.t32;
      proc_control_node_B.t40 = proc_control_node_B.TSamp +
        -proc_control_node_B.t31;
      std::memset(&proc_control_node_B.dv8[0], 0, 36U * sizeof(real_T));
      proc_control_node_B.rtb_sincos_o2_idx_2 = proc_control_node_B.t38 *
        proc_control_node_B.BodyVelocity[1] + proc_control_node_B.t39 *
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.dv8[36] = proc_control_node_B.rtb_sincos_o2_idx_2;
      proc_control_node_B.rtb_sincos_o2_idx_1 = -proc_control_node_B.t40 *
        proc_control_node_B.BodyVelocity[1] - proc_control_node_B.t37 *
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.dv8[37] = proc_control_node_B.rtb_sincos_o2_idx_1;
      proc_control_node_B.rtb_u2_g = proc_control_node_B.Divide3 *
        proc_control_node_B.t9;
      proc_control_node_B.d38 = proc_control_node_B.t9 *
        proc_control_node_B.rtb_sincos_o1_idx_1;
      proc_control_node_B.d4 = proc_control_node_B.rtb_u2_g *
        proc_control_node_B.BodyVelocity[1] - proc_control_node_B.d38 *
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.dv8[38] = proc_control_node_B.d4;
      proc_control_node_B.d_j = proc_control_node_B.AngularRate[1] *
        proc_control_node_B.Divide3;
      proc_control_node_B.d1 = proc_control_node_B.AngularRate[2] *
        proc_control_node_B.rtb_sincos_o1_idx_1;
      proc_control_node_B.d5 = proc_control_node_B.d_j * proc_control_node_B.t16
        * proc_control_node_B.fcn2_e - proc_control_node_B.d1 *
        proc_control_node_B.t16 * proc_control_node_B.fcn2_e;
      proc_control_node_B.dv8[39] = proc_control_node_B.d5;
      proc_control_node_B.d6 = -proc_control_node_B.Sum_ll -
        proc_control_node_B.t22;
      proc_control_node_B.dv8[40] = proc_control_node_B.d6;
      proc_control_node_B.d_j = proc_control_node_B.d_j *
        proc_control_node_B.fcn2_e - proc_control_node_B.d1 *
        proc_control_node_B.fcn2_e;
      proc_control_node_B.dv8[41] = proc_control_node_B.d_j;
      proc_control_node_B.d1 = (proc_control_node_B.rtb_sincos_o1_idx_1 * 0.062
        + proc_control_node_B.Divide3 * 0.746622) * proc_control_node_B.t9;
      proc_control_node_B.d7 = (proc_control_node_B.rtb_u2_g *
        0.0003038485611411295 - proc_control_node_B.d38 * 0.0030804819903427929)
        - proc_control_node_B.d1 * 0.0012787556591776421;
      proc_control_node_B.dv8[42] = proc_control_node_B.d7;
      proc_control_node_B.d8 = (proc_control_node_B.rtb_u2_g *
        -0.09962138533478937 - proc_control_node_B.d38 * 0.0001558786802929103)
        - proc_control_node_B.d1 * 0.2146651116826197;
      proc_control_node_B.dv8[43] = proc_control_node_B.d8;
      proc_control_node_B.d9 = (proc_control_node_B.rtb_u2_g *
        0.0001262558405802736 + proc_control_node_B.d38 * 0.091796606188097957)
        + proc_control_node_B.d1 * 0.022292555139725449;
      proc_control_node_B.dv8[44] = proc_control_node_B.d9;
      proc_control_node_B.d10 = (proc_control_node_B.rtb_u2_g *
        -0.095020813300146653 - proc_control_node_B.d38 * 0.01218289469126858) -
        proc_control_node_B.d1 * 16.7769453147126;
      proc_control_node_B.dv8[45] = proc_control_node_B.d10;
      proc_control_node_B.d11 = (proc_control_node_B.rtb_u2_g *
        0.000439745529355291 + proc_control_node_B.d38 * 0.17922689172220771) +
        proc_control_node_B.d1 * 0.078743486942211408;
      proc_control_node_B.dv8[46] = proc_control_node_B.d11;
      proc_control_node_B.d1 = (proc_control_node_B.rtb_u2_g *
        0.16306065763088379 + proc_control_node_B.d38 * 2.2159046954574339E-5) +
        proc_control_node_B.d1 * 0.03910191918844614;
      proc_control_node_B.dv8[47] = proc_control_node_B.d1;
      proc_control_node_B.t23 = (-proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.t16 * proc_control_node_B.BodyVelocity[0] +
        proc_control_node_B.t9 * proc_control_node_B.TSamp *
        proc_control_node_B.BodyVelocity[1]) + proc_control_node_B.t9 *
        proc_control_node_B.t23 * proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.dv8[48] = proc_control_node_B.t23;
      proc_control_node_B.t = (-proc_control_node_B.t13 *
        proc_control_node_B.t16 * proc_control_node_B.BodyVelocity[0] +
        proc_control_node_B.t9 * proc_control_node_B.t *
        proc_control_node_B.BodyVelocity[1]) + proc_control_node_B.t9 *
        proc_control_node_B.absxk * proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.dv8[49] = proc_control_node_B.t;
      proc_control_node_B.d2 = proc_control_node_B.Divide3 *
        proc_control_node_B.t16;
      proc_control_node_B.d3 = proc_control_node_B.rtb_sincos_o1_idx_1 *
        proc_control_node_B.t16;
      proc_control_node_B.d12 = (-proc_control_node_B.t9 *
        proc_control_node_B.BodyVelocity[0] - proc_control_node_B.d3 *
        proc_control_node_B.BodyVelocity[1]) - proc_control_node_B.d2 *
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.dv8[50] = proc_control_node_B.d12;
      proc_control_node_B.scale = (proc_control_node_B.scale *
        proc_control_node_B.Sum_ll * proc_control_node_B.Product2_l +
        (proc_control_node_B.Sum_ll + proc_control_node_B.t22)) +
        proc_control_node_B.scale * proc_control_node_B.t22 *
        proc_control_node_B.Product2_l;
      proc_control_node_B.dv8[51] = proc_control_node_B.scale;
      proc_control_node_B.dv8[52] = 0.0;
      proc_control_node_B.Product2_l = proc_control_node_B.t16 *
        proc_control_node_B.Sum_ll * proc_control_node_B.Product2_l +
        proc_control_node_B.t16 * proc_control_node_B.t22 *
        proc_control_node_B.Product2_l;
      proc_control_node_B.dv8[53] = proc_control_node_B.Product2_l;
      proc_control_node_B.Sum_ll = (proc_control_node_B.Divide3 * 0.062 +
        -(proc_control_node_B.rtb_sincos_o1_idx_1 * 0.746622)) *
        proc_control_node_B.t16;
      proc_control_node_B.t22 = ((proc_control_node_B.t9 * 0.20690082595613279 -
        proc_control_node_B.d2 * 0.0030804819903427929) - proc_control_node_B.d3
        * 0.0003038485611411295) + proc_control_node_B.Sum_ll *
        -0.0012787556591776421;
      proc_control_node_B.dv8[54] = proc_control_node_B.t22;
      proc_control_node_B.d13 = ((proc_control_node_B.t9 *
        0.00049601054978465754 - proc_control_node_B.d2 * 0.0001558786802929103)
        + proc_control_node_B.d3 * 0.09962138533478937) +
        proc_control_node_B.Sum_ll * -0.2146651116826197;
      proc_control_node_B.dv8[55] = proc_control_node_B.d13;
      proc_control_node_B.d14 = ((proc_control_node_B.d2 * 0.091796606188097957
        + proc_control_node_B.t9 * -0.0029379207602901669) -
        proc_control_node_B.d3 * 0.0001262558405802736) +
        proc_control_node_B.Sum_ll * 0.022292555139725449;
      proc_control_node_B.dv8[56] = proc_control_node_B.d14;
      proc_control_node_B.d15 = ((proc_control_node_B.t9 * 0.056926116941144737
        - proc_control_node_B.d2 * 0.01218289469126858) + proc_control_node_B.d3
        * 0.095020813300146653) + proc_control_node_B.Sum_ll * -16.7769453147126;
      proc_control_node_B.dv8[57] = proc_control_node_B.d15;
      proc_control_node_B.d16 = ((proc_control_node_B.d2 * 0.17922689172220771 +
        proc_control_node_B.t9 * -4.3185698628399987) - proc_control_node_B.d3 *
        0.000439745529355291) + proc_control_node_B.Sum_ll *
        0.078743486942211408;
      proc_control_node_B.dv8[58] = proc_control_node_B.d16;
      proc_control_node_B.Sum_ll = ((proc_control_node_B.d2 *
        2.2159046954574339E-5 + proc_control_node_B.t9 * 0.32680566187003413) -
        proc_control_node_B.d3 * 0.16306065763088379) +
        proc_control_node_B.Sum_ll * 0.03910191918844614;
      proc_control_node_B.dv8[59] = proc_control_node_B.Sum_ll;
      proc_control_node_B.t13 *= proc_control_node_B.t9;
      proc_control_node_B.t40 = (-proc_control_node_B.t37 *
        proc_control_node_B.BodyVelocity[1] + proc_control_node_B.t40 *
        proc_control_node_B.BodyVelocity[2]) - proc_control_node_B.t13 *
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.dv8[60] = proc_control_node_B.t40;
      proc_control_node_B.ZeroOrderHold_b *= proc_control_node_B.t9;
      proc_control_node_B.t9 = (-proc_control_node_B.t39 *
        proc_control_node_B.BodyVelocity[1] + proc_control_node_B.t38 *
        proc_control_node_B.BodyVelocity[2]) +
        proc_control_node_B.ZeroOrderHold_b * proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.dv8[61] = proc_control_node_B.t9;
      std::memset(&proc_control_node_B.dv8[62], 0, 10U * sizeof(real_T));
      proc_control_node_B.dv8[72] = proc_control_node_B.ZeroOrderHold_b;
      proc_control_node_B.dv8[73] = proc_control_node_B.t13;
      proc_control_node_B.dv8[74] = -proc_control_node_B.t16;
      proc_control_node_B.dv8[75] = 0.0;
      proc_control_node_B.dv8[76] = 0.0;
      proc_control_node_B.dv8[77] = 0.0;
      proc_control_node_B.t17 *= proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.t39 = (((((proc_control_node_B.t7 *
        -0.036243063166504788 + proc_control_node_B.t56) +
        proc_control_node_B.t57) - proc_control_node_B.rtb_sincos_o1_idx_0) -
        proc_control_node_B.Product1_n) - proc_control_node_B.t17 *
        0.036243063166504788) - 0.46465465598083061;
      proc_control_node_B.dv8[78] = proc_control_node_B.t39;
      proc_control_node_B.d17 = (((proc_control_node_B.BodyVelocity[1] *
        0.00477039452928936 - proc_control_node_B.BodyVelocity[2] *
        0.001468966557066211) - proc_control_node_B.t17 * 1.109195745194835E-6)
        - 1.422045827172866E-5) + ((proc_control_node_B.AngularRate[1] *
        0.00041592787873873338 - proc_control_node_B.AngularRate[2] *
        0.74121409319149256) - proc_control_node_B.t7 * 1.109195745194835E-6);
      proc_control_node_B.dv8[79] = proc_control_node_B.d17;
      proc_control_node_B.d18 = (((proc_control_node_B.BodyVelocity[1] *
        -5.890830655932608E-5 + proc_control_node_B.BodyVelocity[2] *
        0.00568699616459184) + proc_control_node_B.t17 * 7.9830677445685858E-6)
        + 0.0001023470223662639) + ((proc_control_node_B.AngularRate[1] *
        0.69409782663856512 - proc_control_node_B.AngularRate[2] *
        0.00032422410747795261) + proc_control_node_B.t7 * 7.9830677445685858E-6);
      proc_control_node_B.dv8[80] = proc_control_node_B.d18;
      proc_control_node_B.d19 = (((proc_control_node_B.AngularRate[1] *
        0.032506453976272241 + proc_control_node_B.AngularRate[2] *
        0.24400486517334929) - proc_control_node_B.t7 * 0.0001525121428377004) +
        ((proc_control_node_B.BodyVelocity[1] * 0.044446246736648841 -
          proc_control_node_B.BodyVelocity[2] * 0.1148218101592509) -
         proc_control_node_B.t17 * 0.0001525121428377004)) +
        -0.0019552838825346208;
      proc_control_node_B.dv8[81] = proc_control_node_B.d19;
      proc_control_node_B.d20 = (((proc_control_node_B.BodyVelocity[1] *
        1.7911420833141059E-5 + proc_control_node_B.BodyVelocity[2] *
        8.3502908029033716) + proc_control_node_B.t17 * 0.011738978516892359) +
        0.150499724575543) + ((proc_control_node_B.AngularRate[1] *
        -0.00568699616459184 - proc_control_node_B.AngularRate[2] *
        0.001145088836853196) + proc_control_node_B.t7 * 0.011738978516892359);
      proc_control_node_B.dv8[82] = proc_control_node_B.d20;
      proc_control_node_B.t17 = (((proc_control_node_B.AngularRate[1] *
        -7.5569972812640509E-5 - proc_control_node_B.AngularRate[2] *
        0.00477039452928936) - proc_control_node_B.t7 * 0.0011846302503005471) +
        ((proc_control_node_B.BodyVelocity[1] * -5.91169722427816 -
          proc_control_node_B.BodyVelocity[2] * 2.2977499514997389E-5) -
         proc_control_node_B.t17 * 0.0011846302503005471)) +
        -0.015187567311545479;
      proc_control_node_B.dv8[83] = proc_control_node_B.t17;
      proc_control_node_B.absxk = -proc_control_node_B.absxk +
        proc_control_node_B.t32;
      proc_control_node_B.dv8[84] = proc_control_node_B.absxk;
      proc_control_node_B.dv8[85] = proc_control_node_B.t37;
      proc_control_node_B.dv8[86] = proc_control_node_B.d38;
      proc_control_node_B.dv8[87] = 0.0;
      proc_control_node_B.dv8[88] = 0.0;
      proc_control_node_B.dv8[89] = 0.0;
      proc_control_node_B.t65 *= proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.t7 = (((proc_control_node_B.AngularRate[0] *
        -2.1519484922730651E-5 + proc_control_node_B.AngularRate[2] *
        1.3454180758607359) - proc_control_node_B.t8 * 7.7738505218783331E-7) -
        proc_control_node_B.BodyVelocity[0] * 0.01129023503850542) +
        ((proc_control_node_B.BodyVelocity[2] * -0.00041111798914172931 -
          proc_control_node_B.t65 * 7.7738505218783331E-7) -
         1.8960611028971542E-5);
      proc_control_node_B.dv8[90] = proc_control_node_B.t7;
      proc_control_node_B.t56 = (proc_control_node_B.t8 * -0.01903042325061665 +
        proc_control_node_B.t56) + proc_control_node_B.rtb_sincos_o2_idx_0;
      proc_control_node_B.t32 = proc_control_node_B.t65 * 0.01903042325061665;
      proc_control_node_B.dv8[91] = (((proc_control_node_B.t56 +
        -proc_control_node_B.t70) - proc_control_node_B.t54) -
        proc_control_node_B.t32) - 0.46415666464918648;
      proc_control_node_B.d21 = (((proc_control_node_B.BodyVelocity[0] *
        -5.890830655932608E-5 + proc_control_node_B.BodyVelocity[2] *
        0.0071670223909459834) + proc_control_node_B.t65 * 2.3842573459475649E-5)
        + 0.00058152618193843065) + ((proc_control_node_B.AngularRate[0] *
        -0.93255469429176219 - proc_control_node_B.AngularRate[2] *
        7.6083411800115719E-5) + proc_control_node_B.t8 * 2.3842573459475649E-5);
      proc_control_node_B.dv8[92] = proc_control_node_B.d21;
      proc_control_node_B.d22 = (((proc_control_node_B.AngularRate[0] *
        -0.0071670223909459834 + proc_control_node_B.AngularRate[2] *
        0.00145353196782447) - proc_control_node_B.t8 * 0.017943464992838758) +
        ((proc_control_node_B.BodyVelocity[0] * 0.044446246736648841 -
          proc_control_node_B.BodyVelocity[2] * 5.3937622658585171) -
         proc_control_node_B.t65 * 0.017943464992838758)) + -0.4376454876302136;
      proc_control_node_B.dv8[93] = proc_control_node_B.d22;
      proc_control_node_B.d23 = (((proc_control_node_B.AngularRate[0] *
        0.0012538688125934979 - proc_control_node_B.AngularRate[2] *
        0.1118794885864644) + proc_control_node_B.t8 * 8.4206769578830268E-5) +
        proc_control_node_B.BodyVelocity[0] * 1.7911420833141059E-5) +
        ((proc_control_node_B.t65 * 8.4206769578830268E-5 +
          proc_control_node_B.BodyVelocity[2] * 0.025315910649035739) +
         0.0020538236482641531);
      proc_control_node_B.dv8[94] = proc_control_node_B.d23;
      proc_control_node_B.t65 = (((proc_control_node_B.AngularRate[0] *
        1.6661666253314429E-5 + proc_control_node_B.AngularRate[2] *
        0.01129023503850542) + proc_control_node_B.t8 * 0.00035080205133418912)
        + ((proc_control_node_B.BodyVelocity[0] * -5.91169722427816 +
            proc_control_node_B.BodyVelocity[2] * 0.01257120723021817) +
           proc_control_node_B.t65 * 0.00035080205133418912)) +
        0.0085561475935168052;
      proc_control_node_B.dv8[95] = proc_control_node_B.t65;
      proc_control_node_B.dv8[96] = proc_control_node_B.t38;
      proc_control_node_B.TSamp = -proc_control_node_B.TSamp +
        proc_control_node_B.t31;
      proc_control_node_B.dv8[97] = proc_control_node_B.TSamp;
      proc_control_node_B.dv8[98] = proc_control_node_B.rtb_u2_g;
      proc_control_node_B.dv8[99] = 0.0;
      proc_control_node_B.dv8[100] = 0.0;
      proc_control_node_B.dv8[101] = 0.0;
      proc_control_node_B.d *= proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.t8 = (((proc_control_node_B.AngularRate[0] *
        2.989993556213668E-6 - proc_control_node_B.AngularRate[1] *
        1.4431163638272659) + proc_control_node_B.t10 * 5.1582899272597018E-6) -
        proc_control_node_B.BodyVelocity[0] * 0.143523560675718) +
        ((proc_control_node_B.d * 5.1582899272597018E-6 +
          proc_control_node_B.BodyVelocity[1] * -0.00041111798914172931) +
         0.0001592064792364106);
      proc_control_node_B.dv8[102] = proc_control_node_B.t8;
      proc_control_node_B.t31 = (((proc_control_node_B.AngularRate[0] *
        1.0731951852318531 - proc_control_node_B.AngularRate[1] *
        1.356129262930646E-5) + proc_control_node_B.t10 * 2.1981689677272681E-5)
        + ((proc_control_node_B.BodyVelocity[0] * -0.001468966557066211 -
            proc_control_node_B.BodyVelocity[1] * 0.069014505171846527) +
           proc_control_node_B.d * 2.1981689677272681E-5)) +
        0.00067844721226150231;
      proc_control_node_B.dv8[103] = proc_control_node_B.t31;
      proc_control_node_B.t57 += proc_control_node_B.t10 * -0.01616685726098728;
      proc_control_node_B.d24 = proc_control_node_B.d * 0.01616685726098728;
      proc_control_node_B.dv8[104] = ((((proc_control_node_B.t57 +
        -proc_control_node_B.t70) + proc_control_node_B.t53) +
        proc_control_node_B.t55) - proc_control_node_B.d24) -
        0.49897707595639768;
      proc_control_node_B.t70 = (((proc_control_node_B.AngularRate[0] *
        0.069014505171846527 - proc_control_node_B.AngularRate[1] *
        0.0018646499569661989) + proc_control_node_B.t10 * 0.00171795837774031)
        + ((proc_control_node_B.BodyVelocity[0] * -0.1148218101592509 -
            proc_control_node_B.BodyVelocity[1] * 5.3937622658585171) +
           proc_control_node_B.d * 0.00171795837774031)) + 0.053023406720379938;
      proc_control_node_B.dv8[105] = proc_control_node_B.t70;
      proc_control_node_B.d25 = (((proc_control_node_B.AngularRate[0] *
        -0.00032387772021301561 + proc_control_node_B.AngularRate[1] *
        0.143523560675718) - proc_control_node_B.t10 * 0.00030055639757781919) +
        ((proc_control_node_B.BodyVelocity[0] * 8.3502908029033716 +
          proc_control_node_B.BodyVelocity[1] * 0.025315910649035739) -
         proc_control_node_B.d * 0.00030055639757781919)) +
        -0.0092764320240067664;
      proc_control_node_B.dv8[106] = proc_control_node_B.d25;
      proc_control_node_B.d = (((proc_control_node_B.AngularRate[0] *
        -0.0013492616947596331 - proc_control_node_B.AngularRate[1] *
        0.01448357294143097) - proc_control_node_B.t10 * 3.993855127780116E-6) -
        proc_control_node_B.BodyVelocity[0] * 2.2977499514997389E-5) +
        ((proc_control_node_B.BodyVelocity[1] * 0.01257120723021817 -
          proc_control_node_B.d * 3.993855127780116E-6) - 0.00012326713357346041);
      proc_control_node_B.dv8[107] = proc_control_node_B.d;
      proc_control_node_B.dv8[108] = 0.0;
      proc_control_node_B.dv8[109] = 0.0;
      proc_control_node_B.dv8[110] = 0.0;
      proc_control_node_B.dv8[111] = 1.0;
      proc_control_node_B.dv8[112] = 0.0;
      proc_control_node_B.dv8[113] = 0.0;
      proc_control_node_B.t10 = proc_control_node_B.AngularRate[0] *
        proc_control_node_B.t11;
      proc_control_node_B.t11 = (((proc_control_node_B.AngularRate[0] *
        -0.00010396365424827521 - proc_control_node_B.AngularRate[1] *
        0.0030560301354578762) - proc_control_node_B.AngularRate[2] *
        0.030270009262121408) - proc_control_node_B.epsilon *
        2.1768827225552109E-5) + (((proc_control_node_B.BodyVelocity[1] *
        -2.1519484922730651E-5 + proc_control_node_B.BodyVelocity[2] *
        2.989993556213668E-6) - proc_control_node_B.t10 * 2.1768827225552109E-5)
        - 0.00043450752945213789);
      proc_control_node_B.dv8[114] = proc_control_node_B.t11;
      proc_control_node_B.d26 = ((((proc_control_node_B.AngularRate[0] *
        0.0028513455484883 - proc_control_node_B.AngularRate[1] *
        0.00032316342950661811) + proc_control_node_B.AngularRate[2] *
        4.2079285691049859E-5) - proc_control_node_B.epsilon *
        0.0036543398217122828) + ((proc_control_node_B.BodyVelocity[1] *
        -9.1703771260780813E-5 + proc_control_node_B.BodyVelocity[2] *
        1.0731951852318531) - proc_control_node_B.t10 * 0.0036543398217122828))
        + -0.072940914605035587;
      proc_control_node_B.dv8[115] = proc_control_node_B.d26;
      proc_control_node_B.d27 = (((proc_control_node_B.AngularRate[0] *
        0.023864851221217471 + proc_control_node_B.AngularRate[1] *
        4.0426879502317728E-6) - proc_control_node_B.AngularRate[2] *
        0.00016269010774240791) + ((proc_control_node_B.epsilon *
        0.0003794960966701478 - proc_control_node_B.BodyVelocity[1] *
        0.93255469429176219) - proc_control_node_B.BodyVelocity[2] *
        9.1703771260780813E-5)) + (proc_control_node_B.t10 *
        0.0003794960966701478 + 0.007574772388625705);
      proc_control_node_B.dv8[116] = proc_control_node_B.d27;
      proc_control_node_B.d28 = ((((proc_control_node_B.epsilon *
        -0.28560141361437341 + proc_control_node_B.t54) -
        proc_control_node_B.t55) - proc_control_node_B.t10 * 0.28560141361437341)
        - 5.7006270182509668) + ((proc_control_node_B.AngularRate[0] *
        0.00017692814721597281 - proc_control_node_B.AngularRate[1] *
        0.00301187450220627) + proc_control_node_B.AngularRate[2] *
        0.0032852614324183722);
      proc_control_node_B.dv8[117] = proc_control_node_B.d28;
      proc_control_node_B.d29 = (((proc_control_node_B.AngularRate[0] *
        0.005100926963153893 + proc_control_node_B.AngularRate[1] *
        7.54282242443926E-5) + proc_control_node_B.AngularRate[2] *
        0.76112100692746432) + ((proc_control_node_B.epsilon *
        0.0013404854555911631 + proc_control_node_B.BodyVelocity[1] *
        0.0012538688125934979) - proc_control_node_B.BodyVelocity[2] *
        0.00032387772021301561)) + (proc_control_node_B.t10 *
        0.0013404854555911631 + 0.026756196718386482);
      proc_control_node_B.dv8[118] = proc_control_node_B.d29;
      proc_control_node_B.t10 = (((proc_control_node_B.AngularRate[0] *
        -0.0085297096290247246 - proc_control_node_B.AngularRate[1] *
        0.59953739020136265) - proc_control_node_B.AngularRate[2] *
        6.8948828938803766E-5) + ((proc_control_node_B.epsilon *
        0.00066564938883491385 + proc_control_node_B.BodyVelocity[1] *
        1.6661666253314429E-5) - proc_control_node_B.BodyVelocity[2] *
        0.0013492616947596331)) + (proc_control_node_B.t10 *
        0.00066564938883491385 + 0.013286414946804669);
      proc_control_node_B.dv8[119] = proc_control_node_B.t10;
      proc_control_node_B.dv8[120] = 0.0;
      proc_control_node_B.dv8[121] = 0.0;
      proc_control_node_B.dv8[122] = 0.0;
      proc_control_node_B.d3 *= proc_control_node_B.fcn2_e;
      proc_control_node_B.dv8[123] = proc_control_node_B.d3;
      proc_control_node_B.dv8[124] = proc_control_node_B.Divide3;
      proc_control_node_B.epsilon = proc_control_node_B.rtb_sincos_o1_idx_1 *
        proc_control_node_B.fcn2_e;
      proc_control_node_B.dv8[125] = proc_control_node_B.epsilon;
      proc_control_node_B.t14 *= proc_control_node_B.AngularRate[1];
      proc_control_node_B.d30 = ((((proc_control_node_B.AngularRate[0] *
        -0.0030560301354578762 + proc_control_node_B.AngularRate[1] *
        0.001929418735906703) + proc_control_node_B.AngularRate[2] *
        6.2884941489263073E-5) + proc_control_node_B.Divide1 *
        0.001003331497170287) + ((proc_control_node_B.BodyVelocity[0] *
        9.7602896722846373E-5 - proc_control_node_B.BodyVelocity[2] *
        1.4431163638272659) + proc_control_node_B.t14 * 0.001003331497170287)) +
        0.0234110682673067;
      proc_control_node_B.dv8[126] = proc_control_node_B.d30;
      proc_control_node_B.d31 = (((proc_control_node_B.AngularRate[0] *
        -0.00032316342950661811 + proc_control_node_B.AngularRate[1] *
        4.5292476302332957E-6) - proc_control_node_B.AngularRate[2] *
        0.016528998001422841) + proc_control_node_B.Divide1 *
        1.026911824132076E-5) + (((proc_control_node_B.BodyVelocity[0] *
        0.00041592787873873338 - proc_control_node_B.BodyVelocity[2] *
        1.356129262930646E-5) + proc_control_node_B.t14 * 1.026911824132076E-5)
        + 0.00023961275896415121);
      proc_control_node_B.dv8[127] = proc_control_node_B.d31;
      proc_control_node_B.d32 = (((proc_control_node_B.AngularRate[0] *
        4.0426879502317728E-6 + proc_control_node_B.AngularRate[1] *
        0.023860477346842442) - proc_control_node_B.AngularRate[2] *
        0.000941018323416786) + ((proc_control_node_B.Divide1 *
        -3.9756137245743291E-5 + proc_control_node_B.BodyVelocity[0] *
        0.69409782663856512) + proc_control_node_B.BodyVelocity[2] *
        9.7602896722846373E-5)) + (proc_control_node_B.t14 *
        -3.9756137245743291E-5 - 0.00092764320240067675);
      proc_control_node_B.dv8[128] = proc_control_node_B.d32;
      proc_control_node_B.d33 = (((proc_control_node_B.AngularRate[0] *
        -0.00301187450220627 + proc_control_node_B.AngularRate[1] *
        0.00082864946354184129) - proc_control_node_B.AngularRate[2] *
        0.291807921220024) + ((proc_control_node_B.Divide1 *
        0.00080268590155159437 + proc_control_node_B.BodyVelocity[0] *
        0.032506453976272241) - proc_control_node_B.BodyVelocity[2] *
        0.0018646499569661989)) + (proc_control_node_B.t14 *
        0.00080268590155159437 + 0.018729337702870542);
      proc_control_node_B.dv8[129] = proc_control_node_B.d33;
      proc_control_node_B.Product1_n = ((((proc_control_node_B.Divide1 *
        -0.058374455968341669 + proc_control_node_B.Product1_n) -
        proc_control_node_B.t53) - proc_control_node_B.t14 *
        0.058374455968341669) - 1.362070639261306) +
        ((proc_control_node_B.AngularRate[0] * 7.54282242443926E-5 -
          proc_control_node_B.AngularRate[1] * 0.00019446645525741661) -
         proc_control_node_B.AngularRate[2] * 0.003324115892995542);
      proc_control_node_B.dv8[130] = proc_control_node_B.Product1_n;
      proc_control_node_B.t14 = ((((proc_control_node_B.Divide1 *
        1.6062902063655571E-7 - proc_control_node_B.BodyVelocity[0] *
        7.5569972812640509E-5) - proc_control_node_B.BodyVelocity[2] *
        0.01448357294143097) + proc_control_node_B.t14 * 1.6062902063655571E-7)
        + ((proc_control_node_B.AngularRate[0] * -0.59953739020136265 +
            proc_control_node_B.AngularRate[1] * 0.0085432434746820687) +
           proc_control_node_B.AngularRate[2] * 0.0030111351640179931)) +
        3.7480104815196341E-6;
      proc_control_node_B.dv8[131] = proc_control_node_B.t14;
      proc_control_node_B.dv8[132] = 0.0;
      proc_control_node_B.dv8[133] = 0.0;
      proc_control_node_B.dv8[134] = 0.0;
      proc_control_node_B.d2 *= proc_control_node_B.fcn2_e;
      proc_control_node_B.dv8[135] = proc_control_node_B.d2;
      proc_control_node_B.dv8[136] = -proc_control_node_B.rtb_sincos_o1_idx_1;
      proc_control_node_B.Divide1 = proc_control_node_B.Divide3 *
        proc_control_node_B.fcn2_e;
      proc_control_node_B.dv8[137] = proc_control_node_B.Divide1;
      proc_control_node_B.t15 *= proc_control_node_B.AngularRate[2];
      proc_control_node_B.fcn2_e = (((proc_control_node_B.AngularRate[0] *
        -0.030270009262121408 + proc_control_node_B.AngularRate[1] *
        6.2884941489263073E-5) + proc_control_node_B.AngularRate[2] *
        0.0020006959490984312) - proc_control_node_B.Divide2 *
        0.0001032754577185093) + (((proc_control_node_B.BodyVelocity[0] *
        1.0571299073092789E-5 + proc_control_node_B.BodyVelocity[1] *
        1.3454180758607359) - proc_control_node_B.t15 * 0.0001032754577185093) -
        0.0050625224371818262);
      proc_control_node_B.dv8[138] = proc_control_node_B.fcn2_e;
      proc_control_node_B.d34 = (((proc_control_node_B.AngularRate[0] *
        4.2079285691049859E-5 - proc_control_node_B.AngularRate[1] *
        0.016528998001422841) + proc_control_node_B.AngularRate[2] *
        0.00283488707941543) + proc_control_node_B.Divide2 *
        4.3636352726935713E-5) + (((proc_control_node_B.BodyVelocity[0] *
        -0.74121409319149256 + proc_control_node_B.BodyVelocity[1] *
        1.0571299073092789E-5) + proc_control_node_B.t15 * 4.3636352726935713E-5)
        + 0.0021390368983792022);
      proc_control_node_B.dv8[139] = proc_control_node_B.d34;
      proc_control_node_B.d35 = ((((proc_control_node_B.Divide2 *
        -5.3885346962112674E-7 - proc_control_node_B.BodyVelocity[0] *
        0.00032422410747795261) - proc_control_node_B.BodyVelocity[1] *
        7.6083411800115719E-5) - proc_control_node_B.t15 * 5.3885346962112674E-7)
        + ((proc_control_node_B.AngularRate[0] * -0.00016269010774240791 -
            proc_control_node_B.AngularRate[1] * 0.000941018323416786) -
           proc_control_node_B.AngularRate[2] * 2.6641242336162E-6)) +
        -2.6414385765741509E-5;
      proc_control_node_B.dv8[140] = proc_control_node_B.d35;
      proc_control_node_B.d36 = (((proc_control_node_B.AngularRate[0] *
        0.0032852614324183722 - proc_control_node_B.AngularRate[1] *
        0.291807921220024) - proc_control_node_B.AngularRate[2] *
        0.00063467747547131872) + ((proc_control_node_B.Divide2 *
        0.00040656429737222281 + proc_control_node_B.BodyVelocity[0] *
        0.24400486517334929) + proc_control_node_B.BodyVelocity[1] *
        0.00145353196782447)) + (proc_control_node_B.t15 *
        0.00040656429737222281 + 0.019929622420207);
      proc_control_node_B.dv8[141] = proc_control_node_B.d36;
      proc_control_node_B.d37 = ((((proc_control_node_B.Divide2 *
        1.6384160104928689E-7 - proc_control_node_B.BodyVelocity[0] *
        0.001145088836853196) - proc_control_node_B.BodyVelocity[1] *
        0.1118794885864644) + proc_control_node_B.t15 * 1.6384160104928689E-7) +
        ((proc_control_node_B.AngularRate[0] * 0.76112100692746432 -
          proc_control_node_B.AngularRate[1] * 0.003324115892995542) -
         proc_control_node_B.AngularRate[2] * 0.005288701994301117)) +
        8.0314510318277867E-6;
      proc_control_node_B.dv8[142] = proc_control_node_B.d37;
      proc_control_node_B.t15 = ((((proc_control_node_B.Divide2 *
        -0.054076220260104418 + proc_control_node_B.rtb_sincos_o1_idx_0) -
        proc_control_node_B.rtb_sincos_o2_idx_0) - proc_control_node_B.t15 *
        0.054076220260104418) - 2.6507951107894319) +
        ((proc_control_node_B.AngularRate[0] * -6.8948828938803766E-5 +
          proc_control_node_B.AngularRate[1] * 0.0030111351640179931) +
         proc_control_node_B.AngularRate[2] * 1.7711862430984169E-5);
      proc_control_node_B.dv8[143] = proc_control_node_B.t15;
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 144;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.C_p[proc_control_node_B.Ns_j] =
          tmp_4[proc_control_node_B.Ns_j];
        proc_control_node_B.dv9[proc_control_node_B.Ns_j] =
          proc_control_node_B.dv8[proc_control_node_B.Ns_j] *
          proc_control_node_P.MPC.Ts;
      }

      proc_control_node_expm(proc_control_node_B.dv9, proc_control_node_B.A_o);
      std::memset(&proc_control_node_B.b_newCoefs_d[0], 0, 36U * sizeof(real_T));
      std::memset(&proc_control_node_B.dv8[0], 0, 36U * sizeof(real_T));
      proc_control_node_B.dv8[36] = proc_control_node_B.rtb_sincos_o2_idx_2;
      proc_control_node_B.dv8[37] = proc_control_node_B.rtb_sincos_o2_idx_1;
      proc_control_node_B.dv8[38] = proc_control_node_B.d4;
      proc_control_node_B.dv8[39] = proc_control_node_B.d5;
      proc_control_node_B.dv8[40] = proc_control_node_B.d6;
      proc_control_node_B.dv8[41] = proc_control_node_B.d_j;
      proc_control_node_B.dv8[42] = proc_control_node_B.d7;
      proc_control_node_B.dv8[43] = proc_control_node_B.d8;
      proc_control_node_B.dv8[44] = proc_control_node_B.d9;
      proc_control_node_B.dv8[45] = proc_control_node_B.d10;
      proc_control_node_B.dv8[46] = proc_control_node_B.d11;
      proc_control_node_B.dv8[47] = proc_control_node_B.d1;
      proc_control_node_B.dv8[48] = proc_control_node_B.t23;
      proc_control_node_B.dv8[49] = proc_control_node_B.t;
      proc_control_node_B.dv8[50] = proc_control_node_B.d12;
      proc_control_node_B.dv8[51] = proc_control_node_B.scale;
      proc_control_node_B.dv8[52] = 0.0;
      proc_control_node_B.dv8[53] = proc_control_node_B.Product2_l;
      proc_control_node_B.dv8[54] = proc_control_node_B.t22;
      proc_control_node_B.dv8[55] = proc_control_node_B.d13;
      proc_control_node_B.dv8[56] = proc_control_node_B.d14;
      proc_control_node_B.dv8[57] = proc_control_node_B.d15;
      proc_control_node_B.dv8[58] = proc_control_node_B.d16;
      proc_control_node_B.dv8[59] = proc_control_node_B.Sum_ll;
      proc_control_node_B.dv8[60] = proc_control_node_B.t40;
      proc_control_node_B.dv8[61] = proc_control_node_B.t9;
      std::memset(&proc_control_node_B.dv8[62], 0, 10U * sizeof(real_T));
      proc_control_node_B.dv8[72] = proc_control_node_B.ZeroOrderHold_b;
      proc_control_node_B.dv8[73] = proc_control_node_B.t13;
      proc_control_node_B.dv8[74] = -proc_control_node_B.t16;
      proc_control_node_B.dv8[75] = 0.0;
      proc_control_node_B.dv8[76] = 0.0;
      proc_control_node_B.dv8[77] = 0.0;
      proc_control_node_B.dv8[78] = proc_control_node_B.t39;
      proc_control_node_B.dv8[79] = proc_control_node_B.d17;
      proc_control_node_B.dv8[80] = proc_control_node_B.d18;
      proc_control_node_B.dv8[81] = proc_control_node_B.d19;
      proc_control_node_B.dv8[82] = proc_control_node_B.d20;
      proc_control_node_B.dv8[83] = proc_control_node_B.t17;
      proc_control_node_B.dv8[84] = proc_control_node_B.absxk;
      proc_control_node_B.dv8[85] = proc_control_node_B.t37;
      proc_control_node_B.dv8[86] = proc_control_node_B.d38;
      proc_control_node_B.dv8[87] = 0.0;
      proc_control_node_B.dv8[88] = 0.0;
      proc_control_node_B.dv8[89] = 0.0;
      proc_control_node_B.dv8[90] = proc_control_node_B.t7;
      proc_control_node_B.dv8[91] = (((proc_control_node_B.t56 +
        proc_control_node_B.t51) - proc_control_node_B.t54) -
        proc_control_node_B.t32) - 0.46415666464918648;
      proc_control_node_B.dv8[92] = proc_control_node_B.d21;
      proc_control_node_B.dv8[93] = proc_control_node_B.d22;
      proc_control_node_B.dv8[94] = proc_control_node_B.d23;
      proc_control_node_B.dv8[95] = proc_control_node_B.t65;
      proc_control_node_B.dv8[96] = proc_control_node_B.t38;
      proc_control_node_B.dv8[97] = proc_control_node_B.TSamp;
      proc_control_node_B.dv8[98] = proc_control_node_B.rtb_u2_g;
      proc_control_node_B.dv8[99] = 0.0;
      proc_control_node_B.dv8[100] = 0.0;
      proc_control_node_B.dv8[101] = 0.0;
      proc_control_node_B.dv8[102] = proc_control_node_B.t8;
      proc_control_node_B.dv8[103] = proc_control_node_B.t31;
      proc_control_node_B.dv8[104] = ((((proc_control_node_B.t57 +
        proc_control_node_B.t51) + proc_control_node_B.t53) +
        proc_control_node_B.t55) - proc_control_node_B.d24) -
        0.49897707595639768;
      proc_control_node_B.dv8[105] = proc_control_node_B.t70;
      proc_control_node_B.dv8[106] = proc_control_node_B.d25;
      proc_control_node_B.dv8[107] = proc_control_node_B.d;
      proc_control_node_B.dv8[108] = 0.0;
      proc_control_node_B.dv8[109] = 0.0;
      proc_control_node_B.dv8[110] = 0.0;
      proc_control_node_B.dv8[111] = 1.0;
      proc_control_node_B.dv8[112] = 0.0;
      proc_control_node_B.dv8[113] = 0.0;
      proc_control_node_B.dv8[114] = proc_control_node_B.t11;
      proc_control_node_B.dv8[115] = proc_control_node_B.d26;
      proc_control_node_B.dv8[116] = proc_control_node_B.d27;
      proc_control_node_B.dv8[117] = proc_control_node_B.d28;
      proc_control_node_B.dv8[118] = proc_control_node_B.d29;
      proc_control_node_B.dv8[119] = proc_control_node_B.t10;
      proc_control_node_B.dv8[120] = 0.0;
      proc_control_node_B.dv8[121] = 0.0;
      proc_control_node_B.dv8[122] = 0.0;
      proc_control_node_B.dv8[123] = proc_control_node_B.d3;
      proc_control_node_B.dv8[124] = proc_control_node_B.Divide3;
      proc_control_node_B.dv8[125] = proc_control_node_B.epsilon;
      proc_control_node_B.dv8[126] = proc_control_node_B.d30;
      proc_control_node_B.dv8[127] = proc_control_node_B.d31;
      proc_control_node_B.dv8[128] = proc_control_node_B.d32;
      proc_control_node_B.dv8[129] = proc_control_node_B.d33;
      proc_control_node_B.dv8[130] = proc_control_node_B.Product1_n;
      proc_control_node_B.dv8[131] = proc_control_node_B.t14;
      proc_control_node_B.dv8[132] = 0.0;
      proc_control_node_B.dv8[133] = 0.0;
      proc_control_node_B.dv8[134] = 0.0;
      proc_control_node_B.dv8[135] = proc_control_node_B.d2;
      proc_control_node_B.dv8[136] = -proc_control_node_B.rtb_sincos_o1_idx_1;
      proc_control_node_B.dv8[137] = proc_control_node_B.Divide1;
      proc_control_node_B.dv8[138] = proc_control_node_B.fcn2_e;
      proc_control_node_B.dv8[139] = proc_control_node_B.d34;
      proc_control_node_B.dv8[140] = proc_control_node_B.d35;
      proc_control_node_B.dv8[141] = proc_control_node_B.d36;
      proc_control_node_B.dv8[142] = proc_control_node_B.d37;
      proc_control_node_B.dv8[143] = proc_control_node_B.t15;
      proc_control_node_B.Ns_m = 0;
      proc_control_node_B.i = 0;
      proc_control_node_B.b_s_l = 0;
      for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 6;
           proc_control_node_B.Ns++) {
        proc_control_node_B.b_newCoefs_d[proc_control_node_B.Ns_m] = 1.0;
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 6;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.dCoefs[proc_control_node_B.Ns_j +
            proc_control_node_B.i] = proc_control_node_B.dv8
            [(proc_control_node_B.Ns_j + proc_control_node_B.b_s_l) + 78];
        }

        proc_control_node_B.Ns_m += 7;
        proc_control_node_B.i += 6;
        proc_control_node_B.b_s_l += 12;
      }

      proc_control_node_B.Ns_j = 0;
      proc_control_node_B.i = 0;
      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 6;
           proc_control_node_B.Ns_m++) {
        for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 6;
             proc_control_node_B.idx_j++) {
          proc_control_node_B.idx_m = proc_control_node_B.idx_j +
            proc_control_node_B.Ns_j;
          proc_control_node_B.constValues_l[proc_control_node_B.idx_m] =
            proc_control_node_B.A_o[(proc_control_node_B.idx_j +
            proc_control_node_B.i) + 78] -
            proc_control_node_B.b_newCoefs_d[proc_control_node_B.idx_m];
        }

        proc_control_node_B.Ns_j += 6;
        proc_control_node_B.i += 12;
      }

      proc_control_node_mldivide(proc_control_node_B.dCoefs,
        proc_control_node_B.constValues_l, proc_control_node_B.b_newCoefs_d);
      std::memcpy(&proc_control_node_B.coeffMat[0],
                  &proc_control_node_B.TmpSignalConversionAtSFun_p[0], 12U *
                  sizeof(real_T));
      proc_control_node_B.idx_m = 0;
      while (proc_control_node_B.idx_m <= static_cast<int32_T>
             (proc_control_node_B.MATLABSystem_o6) - 1) {
        proc_control_node_B.Divide1 = proc_control_node_P.MPC.Ts /
          proc_control_node_B.MATLABSystem_o6;
        proc_control_nod_AUVEulerSimFcn(proc_control_node_B.coeffMat,
          proc_control_node_DW.Delay1_DSTATE, proc_control_node_B.dv22);
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 12;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.coeffMat[proc_control_node_B.Ns_j] +=
            proc_control_node_B.dv22[proc_control_node_B.Ns_j] *
            proc_control_node_B.Divide1;
        }

        proc_control_node_B.idx_m++;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 12;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.coeffMat[proc_control_node_B.Ns_j] -=
          proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.Ns_j];
      }

      // MATLAB Function: '<S188>/FixedHorizonOptimizer'
      std::memset(&proc_control_node_B.Bu_n[0], 0, 1760U * sizeof(real_T));
      std::memset(&proc_control_node_B.Bv_p[0], 0, 220U * sizeof(real_T));
      std::memset(&proc_control_node_B.Dv_m[0], 0, 132U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.b_A_n[0], &b_0[0], 400U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.b_B_n[0], &c_0[0], 580U * sizeof(real_T));
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 240;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.b_C_h[proc_control_node_B.Ns_j] =
          d_0[proc_control_node_B.Ns_j];
      }

      proc_control_node_B.Ns_j = 0;
      proc_control_node_B.i = 0;
      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 12;
           proc_control_node_B.Ns_m++) {
        for (proc_control_node_B.idx_j = 0; proc_control_node_B.idx_j < 12;
             proc_control_node_B.idx_j++) {
          proc_control_node_B.idx_m = proc_control_node_B.idx_j +
            proc_control_node_B.Ns_j;
          proc_control_node_B.b_C_h[proc_control_node_B.idx_m] =
            proc_control_node_B.C_p[proc_control_node_B.idx_m];
          proc_control_node_B.b_A_n[proc_control_node_B.idx_j +
            proc_control_node_B.i] =
            proc_control_node_B.A_o[proc_control_node_B.idx_m];
        }

        proc_control_node_B.Ns_j += 12;
        proc_control_node_B.i += 20;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        // MATLAB Function: '<S150>/MATLAB Function2'
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
             proc_control_node_B.i++) {
          proc_control_node_B.b_newCoefs[proc_control_node_B.i + 6 *
            proc_control_node_B.Ns_j] = 0.0;
        }

        for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 6;
             proc_control_node_B.Ns_m++) {
          for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
               proc_control_node_B.i++) {
            proc_control_node_B.c_ix = 6 * proc_control_node_B.Ns_j +
              proc_control_node_B.i;
            proc_control_node_B.b_newCoefs[proc_control_node_B.c_ix] +=
              proc_control_node_B.b_newCoefs_d[6 * proc_control_node_B.Ns_m +
              proc_control_node_B.i] * b_b[6 * proc_control_node_B.Ns_j +
              proc_control_node_B.Ns_m];
          }
        }

        // MATLAB Function: '<S188>/FixedHorizonOptimizer' incorporates:
        //   MATLAB Function: '<S150>/MATLAB Function2'

        for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
             proc_control_node_B.i++) {
          proc_control_node_B.idx_m = 20 * proc_control_node_B.Ns_j +
            proc_control_node_B.i;

          // MATLAB Function: '<S150>/MATLAB Function2'
          proc_control_node_B.b_B_n[proc_control_node_B.idx_m] = 0.0;
          proc_control_node_B.b_B_n[proc_control_node_B.idx_m + 6] =
            proc_control_node_B.b_newCoefs[6 * proc_control_node_B.Ns_j +
            proc_control_node_B.i];
        }

        std::memcpy(&proc_control_node_B.Bu_n[proc_control_node_B.Ns_j * 20],
                    &proc_control_node_B.b_B_n[proc_control_node_B.Ns_j * 20],
                    20U * sizeof(real_T));
      }

      // MATLAB Function: '<S188>/FixedHorizonOptimizer' incorporates:
      //   Delay: '<S150>/Delay1'

      std::memcpy(&proc_control_node_B.Bv_p[0], &proc_control_node_B.b_B_n[160],
                  20U * sizeof(real_T));
      std::memset(&proc_control_node_B.Dv_m[0], 0, 12U * sizeof(real_T));
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 32;
           proc_control_node_B.i++) {
        proc_control_node_B.b_Mlim[proc_control_node_B.i] =
          e_0[proc_control_node_B.i];
      }

      std::memset(&proc_control_node_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.b_xoff_n[0], &f_2[0], 20U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.U_h[0],
                  &proc_control_node_DW.Delay1_DSTATE[0], sizeof(real_T) << 3U);

      // MATLAB Function: '<S150>/MATLAB Function2' incorporates:
      //   Delay: '<S150>/Delay1'

      std::memset(&proc_control_node_B.rtb_C_o[0], 0, 12U * sizeof(real_T));
      proc_control_node_B.i = 0;
      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 12;
           proc_control_node_B.Ns_m++) {
        for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 12;
             proc_control_node_B.Ns_j++) {
          proc_control_node_B.rtb_C_o[proc_control_node_B.Ns_j] +=
            static_cast<real_T>(proc_control_node_B.C_p[proc_control_node_B.Ns_j
                                + proc_control_node_B.i]) *
            proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.Ns_m];
        }

        proc_control_node_B.dv22[proc_control_node_B.Ns_m] = 0.0;
        proc_control_node_B.i += 12;
      }

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 12;
             proc_control_node_B.i++) {
          proc_control_node_B.dv22[proc_control_node_B.i] += 0.0 *
            proc_control_node_DW.Delay1_DSTATE[proc_control_node_B.Ns_j];
        }
      }

      // MATLAB Function: '<S188>/FixedHorizonOptimizer' incorporates:
      //   Delay: '<S150>/Delay1'
      //   DiscretePulseGenerator: '<S154>/Pulse Generator'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S149>/N to A'
      //   Lookup_n-D: '<S149>/N to PWM'
      //   MATLAB Function: '<S150>/MATLAB Function2'
      //   TransferFcn: '<S17>/Transfer Fcn'
      //   TransferFcn: '<S18>/Transfer Fcn'
      //   TransferFcn: '<S19>/Transfer Fcn'
      //   TransferFcn: '<S20>/Transfer Fcn'
      //   TransferFcn: '<S21>/Transfer Fcn'
      //   TransferFcn: '<S22>/Transfer Fcn'
      //   TransferFcn: '<S23>/Transfer Fcn'
      //   TransferFcn: '<S24>/Transfer Fcn'
      //   Trigonometry: '<S339>/sincos'
      //   Trigonometry: '<S36>/sincos'
      //   Trigonometry: '<S96>/sincos'

      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 12;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.Y[proc_control_node_B.Ns_j] =
          proc_control_node_B.rtb_C_o[proc_control_node_B.Ns_j] +
          proc_control_node_B.dv22[proc_control_node_B.Ns_j];
      }

      std::memcpy(&proc_control_node_B.ZeroOrderHold_e[0],
                  &proc_control_node_DW.Delay1_DSTATE[0], sizeof(real_T) << 3U);
      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 32;
           proc_control_node_B.Ns_m++) {
        proc_control_node_B.Ns_j = b_Mrows_0[proc_control_node_B.Ns_m];
        if (proc_control_node_B.Ns_j <= 320) {
          proc_control_node_B.MATLABSystem_o6 = (0.0 - proc_control_node_B.U_h
            [(proc_control_node_B.Ns_j - (((proc_control_node_B.Ns_j - 241) >> 3)
            << 3)) - 241]) + proc_control_node_B.b_Mlim[proc_control_node_B.Ns_m];
        } else {
          proc_control_node_B.MATLABSystem_o6 =
            proc_control_node_B.b_Mlim[proc_control_node_B.Ns_m] - (0.0 -
            proc_control_node_B.U_h[(proc_control_node_B.Ns_j -
            (((proc_control_node_B.Ns_j - 321) >> 3) << 3)) - 321]);
        }

        proc_control_node_B.b_Mlim[proc_control_node_B.Ns_m] =
          proc_control_node_B.MATLABSystem_o6;
      }

      for (proc_control_node_B.Ns_m = 0; proc_control_node_B.Ns_m < 8;
           proc_control_node_B.Ns_m++) {
        proc_control_node_B.MATLABSystem_o6 =
          proc_control_node_B.U_h[proc_control_node_B.Ns_m];
        proc_control_node_B.Ns_j = 0;
        for (proc_control_node_B.i = 0; proc_control_node_B.i < 10;
             proc_control_node_B.i++) {
          proc_control_node_B.idx_m = proc_control_node_B.Ns_j +
            proc_control_node_B.Ns_m;
          proc_control_node_B.b_utarget[proc_control_node_B.idx_m] -=
            proc_control_node_B.MATLABSystem_o6;
          proc_control_node_B.Ns_j += 8;
        }
      }

      std::memcpy(&proc_control_node_B.b_xoff_n[0],
                  &proc_control_node_B.TmpSignalConversionAtSFun_p[0], 12U *
                  sizeof(real_T));
      std::memcpy(&proc_control_node_B.Bv_p[0], &proc_control_node_B.coeffMat[0],
                  12U * sizeof(real_T));
      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 11;
           proc_control_node_B.idx_m++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S296>/Enable'

        // Outputs for Enabled SubSystem: '<S335>/Subsystem2' incorporates:
        //   EnablePort: '<S338>/Enable'

        proc_control_node_B.vseq[proc_control_node_B.idx_m] = 1.0;

        // End of Outputs for SubSystem: '<S335>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
      }

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S363>/Action Port'

      // SwitchCase: '<S9>/Switch Case' incorporates:
      //   MATLAB Function: '<S188>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S363>/MATLAB System1'

      proc_control_node_B.ibmat = 0;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'

      // MATLAB Function: '<S188>/FixedHorizonOptimizer' incorporates:
      //   MATLABSystem: '<S363>/MATLAB System1'
      //   SwitchCase: '<S9>/Switch Case'

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 10;
           proc_control_node_B.i++) {
        proc_control_node_B.Ns_m = 0;
        for (proc_control_node_B.Ns = 0; proc_control_node_B.Ns < 12;
             proc_control_node_B.Ns++) {
          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S363>/Action Port'

          proc_control_node_B.rseq_m[proc_control_node_B.Ns +
            proc_control_node_B.ibmat] =
            proc_control_node_B.y_a_m[proc_control_node_B.Ns_m +
            proc_control_node_B.i] -
            proc_control_node_B.Y[proc_control_node_B.Ns];

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          proc_control_node_B.Ns_m += 10;
        }

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S363>/Action Port'

        proc_control_node_B.ibmat += 12;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      }

      // SignalConversion generated from: '<S189>/ SFunction ' incorporates:
      //   Constant: '<S150>/Constant'
      //   MATLAB Function: '<S188>/FixedHorizonOptimizer'
      //   UnitDelay: '<S160>/last_mv'

      proc_control_node_B.dv17[3] = proc_control_node_B.c_h[2] -
        proc_control_node_B.b_xoff_n[3];
      proc_control_node_B.dv17[4] = proc_control_node_B.c_h[1] -
        proc_control_node_B.b_xoff_n[4];
      proc_control_node_B.dv17[5] = proc_control_node_B.c_h[0] -
        proc_control_node_B.b_xoff_n[5];
      proc_control_node_B.dv17[0] = proc_control_node_B.WorldPosition[0] -
        proc_control_node_B.b_xoff_n[0];
      proc_control_node_B.dv17[6] = proc_control_node_B.BodyVelocity[0] -
        proc_control_node_B.b_xoff_n[6];
      proc_control_node_B.dv17[9] = proc_control_node_B.AngularRate[0] -
        proc_control_node_B.b_xoff_n[9];
      proc_control_node_B.dv17[1] = proc_control_node_B.WorldPosition[1] -
        proc_control_node_B.b_xoff_n[1];
      proc_control_node_B.dv17[7] = proc_control_node_B.BodyVelocity[1] -
        proc_control_node_B.b_xoff_n[7];
      proc_control_node_B.dv17[10] = proc_control_node_B.AngularRate[1] -
        proc_control_node_B.b_xoff_n[10];
      proc_control_node_B.dv17[2] = proc_control_node_B.WorldPosition[2] -
        proc_control_node_B.b_xoff_n[2];
      proc_control_node_B.dv17[8] = proc_control_node_B.BodyVelocity[2] -
        proc_control_node_B.b_xoff_n[8];
      proc_control_node_B.dv17[11] = proc_control_node_B.AngularRate[2] -
        proc_control_node_B.b_xoff_n[11];
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv17[proc_control_node_B.Ns_j + 12] =
          proc_control_node_P.Constant_Value_oq[proc_control_node_B.Ns_j] -
          proc_control_node_B.b_xoff_n[proc_control_node_B.Ns_j + 12];
        proc_control_node_B.dv23[proc_control_node_B.Ns_j] =
          proc_control_node_DW.last_mv_DSTATE[proc_control_node_B.Ns_j] -
          proc_control_node_B.ZeroOrderHold_e[proc_control_node_B.Ns_j];
      }

      // End of SignalConversion generated from: '<S189>/ SFunction '

      // MATLAB Function: '<S188>/FixedHorizonOptimizer'
      std::memset(&proc_control_node_B.dv5[0], 0, 640U * sizeof(real_T));
      std::memset(&proc_control_node_B.dv6[0], 0, 352U * sizeof(real_T));
      for (proc_control_node_B.Ns_j = 0; proc_control_node_B.Ns_j < 8;
           proc_control_node_B.Ns_j++) {
        proc_control_node_B.dv24[proc_control_node_B.Ns_j] =
          0.040000000000000008;
      }

      std::memcpy(&proc_control_node_B.g[0], &g_0[0], sizeof(real_T) << 8);
      std::memcpy(&proc_control_node_B.h[0], &h_1[0], 289U * sizeof(real_T));
      std::memcpy(&proc_control_node_B.k[0], &k[0], 544U * sizeof(real_T));

      // Memory: '<S160>/Memory' incorporates:
      //   MATLAB Function: '<S188>/FixedHorizonOptimizer'

      for (proc_control_node_B.i2 = 0; proc_control_node_B.i2 < 32;
           proc_control_node_B.i2++) {
        proc_control_node_B.bv2[proc_control_node_B.i2] =
          proc_control_node_DW.Memory_PreviousInput[proc_control_node_B.i2];
      }

      // End of Memory: '<S160>/Memory'

      // Merge: '<S147>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S150>/Pulse Generator'
      //   MATLAB Function: '<S188>/FixedHorizonOptimizer'
      //   Memory: '<S160>/Memory'

      proc_contr_mpcblock_optimizer_l(proc_control_node_B.rseq_m,
        proc_control_node_B.vseq, proc_control_node_B.dv17,
        proc_control_node_B.dv23, proc_control_node_B.bv2,
        proc_control_node_B.b_Mlim, proc_control_node_B.dv5,
        proc_control_node_B.g, proc_control_node_B.dv6,
        proc_control_node_B.b_utarget, proc_control_node_B.ZeroOrderHold_e,
        proc_control_node_B.h, proc_control_node_B.k, l_1, n_0, l_0,
        proc_control_node_B.dv24, n, proc_control_node_B.b_A_n,
        proc_control_node_B.Bu_n, proc_control_node_B.Bv_p,
        proc_control_node_B.b_C_h, proc_control_node_B.Dv_m, b_Mrows_0,
        proc_control_node_B.U_h, proc_control_node_B.useq_a,
        &proc_control_node_B.Merge[8], proc_control_node_DW.Memory_PreviousInput);
      proc_control_node_B.Merge[9] = (proc_control_node_DW.clockTickCounter <
        proc_control_node_P.PulseGenerator_Duty_c) &&
        (proc_control_node_DW.clockTickCounter >= 0) ?
        proc_control_node_P.PulseGenerator_Amp_a : 0.0;

      // DiscretePulseGenerator: '<S150>/Pulse Generator'
      if (proc_control_node_DW.clockTickCounter >=
          proc_control_node_P.PulseGenerator_Period_g - 1.0) {
        proc_control_node_DW.clockTickCounter = 0;
      } else {
        proc_control_node_DW.clockTickCounter++;
      }

      for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
           proc_control_node_B.i++) {
        proc_control_node_B.MATLABSystem_o6 =
          proc_control_node_B.U_h[proc_control_node_B.i];

        // Gain: '<S160>/u_scale'
        proc_control_node_B.epsilon =
          proc_control_node_P.u_scale_Gain_k[proc_control_node_B.i] *
          proc_control_node_B.MATLABSystem_o6;

        // Merge: '<S147>/Merge' incorporates:
        //   Gain: '<S160>/u_scale'
        //   SignalConversion generated from: '<S150>/out'

        proc_control_node_B.Merge[proc_control_node_B.i] =
          proc_control_node_B.epsilon;

        // Update for UnitDelay: '<S160>/last_mv' incorporates:
        //   Gain: '<S160>/u_scale'

        proc_control_node_DW.last_mv_DSTATE[proc_control_node_B.i] =
          proc_control_node_B.MATLABSystem_o6;

        // Update for Delay: '<S150>/Delay1' incorporates:
        //   Gain: '<S160>/u_scale'

        proc_control_node_DW.Delay1_DSTATE[proc_control_node_B.i] =
          proc_control_node_B.epsilon;
      }

      // End of Outputs for SubSystem: '<S147>/Adaptive MPC Euler '
      break;

     default:
      // Outputs for IfAction SubSystem: '<S147>/IDLE' incorporates:
      //   ActionPort: '<S152>/Action Port'

      // Merge: '<S147>/Merge' incorporates:
      //   Constant: '<S152>/Constant'
      //   Constant: '<S152>/Constant1'
      //   Constant: '<S152>/Constant2'
      //   SignalConversion generated from: '<S152>/out'

      std::memcpy(&proc_control_node_B.Merge[0],
                  &proc_control_node_P.Constant1_Value_n[0], sizeof(real_T) <<
                  3U);
      proc_control_node_B.Merge[8] = proc_control_node_P.Constant_Value_mg;
      proc_control_node_B.Merge[9] = proc_control_node_P.Constant2_Value_p;

      // End of Outputs for SubSystem: '<S147>/IDLE'
      break;
    }

    // End of SwitchCase: '<S147>/Switch Case'

    // DataTypeConversion: '<S149>/Data Type Conversion3' incorporates:
    //   Delay: '<S149>/Delay'
    //   Sum: '<S149>/Sum'

    proc_control_node_B.isMpcAlive = (proc_control_node_DW.Delay_DSTATE_k -
      proc_control_node_B.Merge[9] != 0.0);

    // Saturate: '<S149>/PSU safe'
    for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
         proc_control_node_B.i++) {
      proc_control_node_B.Divide2 =
        proc_control_node_B.Merge[proc_control_node_B.i];
      if (proc_control_node_B.Divide2 > proc_control_node_P.MPC.tmax) {
        proc_control_node_B.U_h[proc_control_node_B.i] =
          proc_control_node_P.MPC.tmax;
      } else if (proc_control_node_B.Divide2 < proc_control_node_P.MPC.tmin) {
        proc_control_node_B.U_h[proc_control_node_B.i] =
          proc_control_node_P.MPC.tmin;
      } else {
        proc_control_node_B.U_h[proc_control_node_B.i] =
          proc_control_node_B.Divide2;
      }
    }

    // End of Saturate: '<S149>/PSU safe'

    // Lookup_n-D: '<S149>/N to A' incorporates:
    //   Saturate: '<S149>/PSU safe'

    for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 8;
         proc_control_node_B.idx_m++) {
      proc_control_node_B.bpIdx = plook_u32d_binckpang
        (proc_control_node_B.U_h[proc_control_node_B.idx_m],
         proc_control_node_P.N, 200U,
         &proc_control_node_DW.m_bpIndex[proc_control_node_B.idx_m]);
      proc_control_node_B.current[proc_control_node_B.idx_m] =
        proc_control_node_P.A[proc_control_node_B.bpIdx];
    }

    // Lookup_n-D: '<S149>/N to PWM' incorporates:
    //   Saturate: '<S149>/PSU safe'

    for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 8;
         proc_control_node_B.idx_m++) {
      proc_control_node_B.bpIdx = plook_u32d_binckpang
        (proc_control_node_B.U_h[proc_control_node_B.idx_m],
         proc_control_node_P.N, 200U,
         &proc_control_node_DW.m_bpIndex_c[proc_control_node_B.idx_m]);
      proc_control_node_B.pwm[proc_control_node_B.idx_m] =
        proc_control_node_P.PWM[proc_control_node_B.bpIdx];
    }

    // Update for Delay: '<S7>/Delay' incorporates:
    //   Lookup_n-D: '<S149>/N to A'

    for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
         proc_control_node_B.i++) {
      proc_control_node_DW.Delay_DSTATE_g[proc_control_node_B.i] =
        proc_control_node_B.current[proc_control_node_B.i];
    }

    // End of Update for Delay: '<S7>/Delay'

    // Update for Delay: '<S149>/Delay'
    proc_control_node_DW.Delay_DSTATE_k = proc_control_node_B.Merge[9];

    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'

    // Outputs for Enabled SubSystem: '<Root>/Send Data to ROS' incorporates:
    //   EnablePort: '<S5>/Enable'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_DW.SendDatatoROS_MODE =
        (proc_control_node_B.MATLABSystem_o7 > 0.0);
    }

    // End of Outputs for SubSystem: '<Root>/Send Data to ROS'
  }

  // Outputs for Enabled SubSystem: '<Root>/Send Data to ROS' incorporates:
  //   EnablePort: '<S5>/Enable'

  if (proc_control_node_DW.SendDatatoROS_MODE) {
    // ZeroOrderHold: '<S5>/Zero-Order Hold2'
    if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
         (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
        (rtmIsMajorTimeStep((&proc_control_node_M)) &&
         (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0)) {
      // ZeroOrderHold: '<S5>/Zero-Order Hold2'
      proc_control_node_B.ZeroOrderHold2 = proc_control_node_B.isReached;
    }

    // End of ZeroOrderHold: '<S5>/Zero-Order Hold2'
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // BusAssignment: '<S5>/Bus Assignment2'
      rtb_BusAssignment2.Data = proc_control_node_B.ZeroOrderHold2;

      // Outputs for Atomic SubSystem: '<S5>/Publish1'
      // MATLABSystem: '<S119>/SinkBlock'
      Pub_proc_control_node_122.publish(&rtb_BusAssignment2);

      // End of Outputs for SubSystem: '<S5>/Publish1'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
      // MATLAB Function: '<S5>/MATLAB Function3' incorporates:
      //   Constant: '<S113>/Constant'

      proc_control_node_B.msg_k = proc_control_node_P.Constant_Value_c;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
           proc_control_node_B.i++) {
        proc_control_node_B.msg_k.Data[proc_control_node_B.i] =
          proc_control_node_B.pwm[proc_control_node_B.i];
      }

      proc_control_node_B.msg_k.Data_SL_Info.CurrentLength = 8U;

      // End of MATLAB Function: '<S5>/MATLAB Function3'

      // Outputs for Atomic SubSystem: '<S5>/Publish2'
      // MATLABSystem: '<S120>/SinkBlock'
      Pub_proc_control_node_104.publish(&proc_control_node_B.msg_k);

      // End of Outputs for SubSystem: '<S5>/Publish2'

      // ZeroOrderHold: '<S5>/Zero-Order Hold'
      if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
          (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
        // ZeroOrderHold: '<S5>/Zero-Order Hold'
        proc_control_node_B.ZeroOrderHold = proc_control_node_B.Merge[8];
      }

      // End of ZeroOrderHold: '<S5>/Zero-Order Hold'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // DataTypeConversion: '<S5>/Data Type Conversion2'
      proc_control_node_B.MATLABSystem_o6 = std::abs
        (proc_control_node_B.ZeroOrderHold);
      if (proc_control_node_B.MATLABSystem_o6 < 4.503599627370496E+15) {
        if (proc_control_node_B.MATLABSystem_o6 >= 0.5) {
          // BusAssignment: '<S5>/Bus Assignment'
          rtb_BusAssignment.Data = static_cast<int8_T>(std::floor
            (proc_control_node_B.ZeroOrderHold + 0.5));
        } else {
          // BusAssignment: '<S5>/Bus Assignment'
          rtb_BusAssignment.Data = static_cast<int8_T>
            (proc_control_node_B.ZeroOrderHold * 0.0);
        }
      } else {
        // BusAssignment: '<S5>/Bus Assignment'
        rtb_BusAssignment.Data = static_cast<int8_T>
          (proc_control_node_B.ZeroOrderHold);
      }

      // End of DataTypeConversion: '<S5>/Data Type Conversion2'

      // Outputs for Atomic SubSystem: '<S5>/Publish3'
      // MATLABSystem: '<S121>/SinkBlock'
      Pub_proc_control_node_105.publish(&rtb_BusAssignment);

      // End of Outputs for SubSystem: '<S5>/Publish3'
    }

    // ZeroOrderHold: '<S5>/Zero-Order Hold1'
    if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
         (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
        (rtmIsMajorTimeStep((&proc_control_node_M)) &&
         (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0)) {
      // ZeroOrderHold: '<S5>/Zero-Order Hold1'
      proc_control_node_B.ZeroOrderHold1 = proc_control_node_B.isMpcAlive;
    }

    // End of ZeroOrderHold: '<S5>/Zero-Order Hold1'
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // BusAssignment: '<S5>/Bus Assignment1'
      rtb_BusAssignment1.Data = proc_control_node_B.ZeroOrderHold1;

      // Outputs for Atomic SubSystem: '<S5>/Publish4'
      // MATLABSystem: '<S122>/SinkBlock'
      Pub_proc_control_node_106.publish(&rtb_BusAssignment1);

      // End of Outputs for SubSystem: '<S5>/Publish4'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
      // MATLAB Function: '<S5>/MATLAB Function2' incorporates:
      //   SignalConversion generated from: '<S361>/MATLAB System'

      proc_control_node_B.msg_f.Position.X =
        proc_control_node_B.TmpMLSysMemLayoutBufferAtMATLAB[0];
      proc_control_node_B.msg_f.Position.Y =
        proc_control_node_B.TmpMLSysMemLayoutBufferAtMATLAB[1];
      proc_control_node_B.msg_f.Position.Z =
        proc_control_node_B.TmpMLSysMemLayoutBufferAtMATLAB[2];
      proc_control_node_B.msg_f.Orientation.W =
        proc_control_node_B.TmpMLSysMemLayoutBufferAtMATLAB[3];
      proc_control_node_B.msg_f.Orientation.X =
        proc_control_node_B.TmpMLSysMemLayoutBufferAtMATLAB[4];
      proc_control_node_B.msg_f.Orientation.Y =
        proc_control_node_B.TmpMLSysMemLayoutBufferAtMATLAB[5];
      proc_control_node_B.msg_f.Orientation.Z =
        proc_control_node_B.TmpMLSysMemLayoutBufferAtMATLAB[6];

      // Outputs for Atomic SubSystem: '<S5>/Publish5'
      // MATLABSystem: '<S123>/SinkBlock'
      Pub_proc_control_node_322.publish(&proc_control_node_B.msg_f);

      // End of Outputs for SubSystem: '<S5>/Publish5'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // Outputs for Atomic SubSystem: '<S5>/Subsystem'
      // MATLAB Function: '<S124>/MATLAB Function' incorporates:
      //   Constant: '<S124>/Constant'
      //   Constant: '<S124>/Constant1'
      //   Constant: '<S125>/Constant'
      //   MATLABSystem: '<S148>/MPC manager'

      proc_control_node_B.msg = proc_control_node_P.Constant_Value_o;
      proc_control_node_B.msg.TargetReached = proc_control_node_B.isReached;
      proc_control_node_B.msg.IsTrajectoryDone =
        proc_control_node_B.TmpMLSysMemLayoutBufferAtMATL_m;
      proc_control_node_B.msg.MpcMode = proc_control_node_B.DataTypeConversion_j;
      proc_control_node_B.msg.IsMpcAlive = proc_control_node_B.isMpcAlive;
      if (1.0 > proc_control_node_P.MPC.nu) {
        proc_control_node_B.Ns_j = -1;
      } else {
        proc_control_node_B.Ns_j = static_cast<int32_T>
          (proc_control_node_P.MPC.nu) - 1;
      }

      proc_control_node_B.idx_m = proc_control_node_B.Ns_j + 1;
      if (0 <= proc_control_node_B.idx_m - 1) {
        std::memcpy(&proc_control_node_B.msg.ThrustersStatus[0],
                    &proc_control_node_B.thrustersStatus[0],
                    proc_control_node_B.idx_m * sizeof(boolean_T));
      }

      proc_control_node_B.rtb_sincos_o2_idx_2 = std::round
        (proc_control_node_P.MPC.nu);
      if (proc_control_node_B.rtb_sincos_o2_idx_2 < 4.294967296E+9) {
        if (proc_control_node_B.rtb_sincos_o2_idx_2 >= 0.0) {
          proc_control_node_B.msg.ThrustersStatus_SL_Info.CurrentLength =
            static_cast<uint32_T>(proc_control_node_B.rtb_sincos_o2_idx_2);
        } else {
          proc_control_node_B.msg.ThrustersStatus_SL_Info.CurrentLength = 0U;
        }
      } else {
        proc_control_node_B.msg.ThrustersStatus_SL_Info.CurrentLength =
          MAX_uint32_T;
      }

      proc_control_node_B.rtb_sincos_o2_idx_1 = std::round
        (proc_control_node_B.Merge[8]);
      if (proc_control_node_B.rtb_sincos_o2_idx_1 < 128.0) {
        if (proc_control_node_B.rtb_sincos_o2_idx_1 >= -128.0) {
          proc_control_node_B.msg.MpcStatus = static_cast<int8_T>
            (proc_control_node_B.rtb_sincos_o2_idx_1);
        } else {
          proc_control_node_B.msg.MpcStatus = MIN_int8_T;
        }
      } else {
        proc_control_node_B.msg.MpcStatus = MAX_int8_T;
      }

      if (1.0 > proc_control_node_P.MPC.nx) {
        proc_control_node_B.Ns_j = -1;
      } else {
        proc_control_node_B.Ns_j = static_cast<int32_T>
          (proc_control_node_P.MPC.nx) - 1;
      }

      proc_control_node_B.idx_m = proc_control_node_B.Ns_j + 1;
      if (0 <= proc_control_node_B.idx_m - 1) {
        std::memcpy(&proc_control_node_B.msg.CurrentGains.OV[0],
                    &proc_control_node_B.ywt[0], proc_control_node_B.idx_m *
                    sizeof(real_T));
      }

      proc_control_node_B.rtb_sincos_o2_idx_1 = std::round
        (proc_control_node_P.MPC.nx);
      if (proc_control_node_B.rtb_sincos_o2_idx_1 < 4.294967296E+9) {
        if (proc_control_node_B.rtb_sincos_o2_idx_1 >= 0.0) {
          proc_control_node_B.msg.CurrentGains.OV_SL_Info.CurrentLength =
            static_cast<uint32_T>(proc_control_node_B.rtb_sincos_o2_idx_1);
        } else {
          proc_control_node_B.msg.CurrentGains.OV_SL_Info.CurrentLength = 0U;
        }
      } else {
        proc_control_node_B.msg.CurrentGains.OV_SL_Info.CurrentLength =
          MAX_uint32_T;
      }

      if (1.0 > proc_control_node_P.MPC.nu) {
        proc_control_node_B.Ns_j = -1;
      } else {
        proc_control_node_B.Ns_j = static_cast<int32_T>
          (proc_control_node_P.MPC.nu) - 1;
      }

      proc_control_node_B.idx_m = proc_control_node_B.Ns_j + 1;
      if (0 <= proc_control_node_B.idx_m - 1) {
        std::memcpy(&proc_control_node_B.msg.CurrentGains.MV[0],
                    &proc_control_node_B.mvwt[0], proc_control_node_B.idx_m *
                    sizeof(real_T));
      }

      if (proc_control_node_B.rtb_sincos_o2_idx_2 < 4.294967296E+9) {
        if (proc_control_node_B.rtb_sincos_o2_idx_2 >= 0.0) {
          proc_control_node_B.msg.CurrentGains.MV_SL_Info.CurrentLength =
            static_cast<uint32_T>(proc_control_node_B.rtb_sincos_o2_idx_2);
        } else {
          proc_control_node_B.msg.CurrentGains.MV_SL_Info.CurrentLength = 0U;
        }
      } else {
        proc_control_node_B.msg.CurrentGains.MV_SL_Info.CurrentLength =
          MAX_uint32_T;
      }

      if (1.0 > proc_control_node_P.MPC.nu) {
        proc_control_node_B.Ns_j = -1;
      } else {
        proc_control_node_B.Ns_j = static_cast<int32_T>
          (proc_control_node_P.MPC.nu) - 1;
      }

      proc_control_node_B.idx_m = proc_control_node_B.Ns_j + 1;
      if (0 <= proc_control_node_B.idx_m - 1) {
        std::memcpy(&proc_control_node_B.msg.CurrentGains.MVR[0],
                    &proc_control_node_B.dmwwt[0], proc_control_node_B.idx_m *
                    sizeof(real_T));
      }

      if (proc_control_node_B.rtb_sincos_o2_idx_2 < 4.294967296E+9) {
        if (proc_control_node_B.rtb_sincos_o2_idx_2 >= 0.0) {
          proc_control_node_B.msg.CurrentGains.MVR_SL_Info.CurrentLength =
            static_cast<uint32_T>(proc_control_node_B.rtb_sincos_o2_idx_2);
        } else {
          proc_control_node_B.msg.CurrentGains.MVR_SL_Info.CurrentLength = 0U;
        }
      } else {
        proc_control_node_B.msg.CurrentGains.MVR_SL_Info.CurrentLength =
          MAX_uint32_T;
      }

      // End of MATLAB Function: '<S124>/MATLAB Function'

      // Outputs for Atomic SubSystem: '<S124>/Publish5'
      // MATLABSystem: '<S127>/SinkBlock'
      Pub_proc_control_node_287.publish(&proc_control_node_B.msg);

      // End of Outputs for SubSystem: '<S124>/Publish5'
      // End of Outputs for SubSystem: '<S5>/Subsystem'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
      // SignalConversion generated from: '<S5>/thrust' incorporates:
      //   Saturate: '<S149>/PSU safe'
      //   SignalConversion generated from: '<S5>/mv'

      std::memcpy(&proc_control_node_B.BufferToMakeInportVirtual_Inser[0],
                  &proc_control_node_B.U_h[0], sizeof(real_T) << 3U);
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 8;
           proc_control_node_B.i++) {
        // SignalConversion generated from: '<S5>/mv' incorporates:
        //   Lookup_n-D: '<S149>/N to PWM'

        proc_control_node_B.BufferToMakeInportVirtual_Ins_e[proc_control_node_B.i]
          = proc_control_node_B.pwm[proc_control_node_B.i];
      }
    }
  }

  // End of Outputs for SubSystem: '<Root>/Send Data to ROS'

  // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
       (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
      rtmIsMajorTimeStep((&proc_control_node_M))) {
    proc_control_node_DW.ModlePhysique_MODE =
      (proc_control_node_B.MATLABSystem_o3 > 0.0);
  }

  if (proc_control_node_DW.ModlePhysique_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[7] == 0) {
      // UniformRandomNumber: '<S14>/X Drift'
      proc_control_node_B.XDrift = proc_control_node_DW.XDrift_NextOutput;

      // UniformRandomNumber: '<S14>/Y Drift'
      proc_control_node_B.YDrift = proc_control_node_DW.YDrift_NextOutput;
    }

    // Integrator: '<S1>/Integrator' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator_IWORK != 0)) {
        proc_control_node_X.Integrator_CSTATE[0] =
          proc_control_node_B.MATLABSystem_o2[0];
        proc_control_node_X.Integrator_CSTATE[1] =
          proc_control_node_B.MATLABSystem_o2[1];
        proc_control_node_X.Integrator_CSTATE[2] =
          proc_control_node_B.MATLABSystem_o2[2];
      }
    }

    // Integrator: '<S1>/Integrator'
    proc_control_node_B.WorldPosition_d[0] =
      proc_control_node_X.Integrator_CSTATE[0];
    proc_control_node_B.WorldPosition_d[1] =
      proc_control_node_X.Integrator_CSTATE[1];
    proc_control_node_B.WorldPosition_d[2] =
      proc_control_node_X.Integrator_CSTATE[2];

    // Switch: '<S14>/Switch' incorporates:
    //   Constant: '<Root>/Constant'
    //   Constant: '<S14>/Constant2'
    //   Constant: '<S14>/Z Drift'
    //   Product: '<S14>/Product1'
    //   Product: '<S14>/Product2'
    //   Sin: '<S14>/Pitch Wave'
    //   Sin: '<S14>/Roll Wave'
    //   Sin: '<S14>/X Wave'
    //   Sin: '<S14>/Y Wave'
    //   Sin: '<S14>/Yaw Wave'
    //   Sin: '<S14>/Z Wave'
    //   Sum: '<S14>/Sum2'

    if (proc_control_node_P.Constant_Value_de >=
        proc_control_node_P.Switch_Threshold) {
      // Sum: '<S14>/Add' incorporates:
      //   Constant: '<S14>/Constant'
      //   Constant: '<S14>/Constant1'
      //   Product: '<S14>/Product'

      proc_control_node_B.MATLABSystem_o7 = proc_control_node_B.WorldPosition_d
        [2] * proc_control_node_P.dampA + proc_control_node_P.dampB;

      // Saturate: '<S14>/Saturation'
      if (proc_control_node_B.MATLABSystem_o7 > proc_control_node_P.ratioMax) {
        proc_control_node_B.MATLABSystem_o7 = proc_control_node_P.ratioMax;
      } else if (proc_control_node_B.MATLABSystem_o7 <
                 proc_control_node_P.ratioMin) {
        proc_control_node_B.MATLABSystem_o7 = proc_control_node_P.ratioMin;
      }

      // End of Saturate: '<S14>/Saturation'

      // Sin: '<S14>/X Wave' incorporates:
      //   Sin: '<S14>/Pitch Wave'
      //   Sin: '<S14>/Roll Wave'
      //   Sin: '<S14>/Y Wave'
      //   Sin: '<S14>/Yaw Wave'
      //   Sin: '<S14>/Z Wave'

      proc_control_node_B.MATLABSystem_o6 = (&proc_control_node_M)->Timing.t[0];
      proc_control_node_B.Gain3[0] = (std::sin(proc_control_node_P.wfX *
        proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpX) *
        proc_control_node_P.waX + proc_control_node_P.XWave_Bias) *
        proc_control_node_B.MATLABSystem_o7 + proc_control_node_B.XDrift;
      proc_control_node_B.Gain3[1] = (std::sin(proc_control_node_P.wfY *
        proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpY) *
        proc_control_node_P.waY + proc_control_node_P.YWave_Bias) *
        proc_control_node_B.MATLABSystem_o7 + proc_control_node_B.YDrift;
      proc_control_node_B.Gain3[2] = (std::sin(proc_control_node_P.wfZ *
        proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpZ) *
        proc_control_node_P.waZ + proc_control_node_P.ZWave_Bias) *
        proc_control_node_B.MATLABSystem_o7 + proc_control_node_P.ZDrift_Value;
      proc_control_node_B.Gain3[3] = (std::sin(proc_control_node_P.wfPhi *
        proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpPhi) *
        proc_control_node_P.waPhi + proc_control_node_P.RollWave_Bias) *
        proc_control_node_B.MATLABSystem_o7;
      proc_control_node_B.Gain3[4] = (std::sin(proc_control_node_P.wfTheta *
        proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpTheta) *
        proc_control_node_P.waTheta + proc_control_node_P.PitchWave_Bias) *
        proc_control_node_B.MATLABSystem_o7;
      proc_control_node_B.Gain3[5] = (std::sin(proc_control_node_P.wfPsi *
        proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpPsi) *
        proc_control_node_P.waPsi + proc_control_node_P.YawWave_Bias) *
        proc_control_node_B.MATLABSystem_o7;
    } else {
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 6;
           proc_control_node_B.i++) {
        proc_control_node_B.Gain3[proc_control_node_B.i] =
          proc_control_node_P.Constant2_Value[proc_control_node_B.i];
      }
    }

    // End of Switch: '<S14>/Switch'

    // Integrator: '<S1>/Integrator1' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator1_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator1_IWORK != 0)) {
        proc_control_node_X.Integrator1_CSTATE[0] =
          proc_control_node_B.MATLABSystem_o1[0];
        proc_control_node_X.Integrator1_CSTATE[1] =
          proc_control_node_B.MATLABSystem_o1[1];
        proc_control_node_X.Integrator1_CSTATE[2] =
          proc_control_node_B.MATLABSystem_o1[2];
        proc_control_node_X.Integrator1_CSTATE[3] =
          proc_control_node_B.MATLABSystem_o1[3];
      }
    }

    // MATLAB Function: '<S1>/Quaternion Normalise' incorporates:
    //   Integrator: '<S1>/Integrator1'

    proc_control_node_B.scale = 3.3121686421112381E-170;
    proc_control_node_B.absxk = std::abs(proc_control_node_X.Integrator1_CSTATE
      [0]);
    if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
      proc_control_node_B.d = 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        3.3121686421112381E-170;
      proc_control_node_B.d = proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = std::abs(proc_control_node_X.Integrator1_CSTATE
      [1]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = std::abs(proc_control_node_X.Integrator1_CSTATE
      [2]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = std::abs(proc_control_node_X.Integrator1_CSTATE
      [3]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.d = proc_control_node_B.scale * std::sqrt
      (proc_control_node_B.d);
    proc_control_node_B.y_h[0] = proc_control_node_X.Integrator1_CSTATE[0] /
      proc_control_node_B.d;
    proc_control_node_B.y_h[1] = proc_control_node_X.Integrator1_CSTATE[1] /
      proc_control_node_B.d;
    proc_control_node_B.y_h[2] = proc_control_node_X.Integrator1_CSTATE[2] /
      proc_control_node_B.d;
    proc_control_node_B.y_h[3] = proc_control_node_X.Integrator1_CSTATE[3] /
      proc_control_node_B.d;

    // End of MATLAB Function: '<S1>/Quaternion Normalise'
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Constant: '<S1>/Initial Body velocity '
      proc_control_node_B.InitialBodyvelocity[0] =
        proc_control_node_P.InitialBodyvelocity_Value[0];
      proc_control_node_B.InitialBodyvelocity[1] =
        proc_control_node_P.InitialBodyvelocity_Value[1];
      proc_control_node_B.InitialBodyvelocity[2] =
        proc_control_node_P.InitialBodyvelocity_Value[2];
    }

    // Integrator: '<S1>/Integrator2'
    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator2_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator2_IWORK != 0)) {
        proc_control_node_X.Integrator2_CSTATE[0] =
          proc_control_node_B.InitialBodyvelocity[0];
        proc_control_node_X.Integrator2_CSTATE[1] =
          proc_control_node_B.InitialBodyvelocity[1];
        proc_control_node_X.Integrator2_CSTATE[2] =
          proc_control_node_B.InitialBodyvelocity[2];
      }
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Constant: '<S1>/Initial Angular Rates'
      proc_control_node_B.InitialAngularRates[0] =
        proc_control_node_P.InitialAngularRates_Value[0];
      proc_control_node_B.InitialAngularRates[1] =
        proc_control_node_P.InitialAngularRates_Value[1];
      proc_control_node_B.InitialAngularRates[2] =
        proc_control_node_P.InitialAngularRates_Value[2];
    }

    // Integrator: '<S1>/Integrator3'
    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator3_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator3_IWORK != 0)) {
        proc_control_node_X.Integrator3_CSTATE[0] =
          proc_control_node_B.InitialAngularRates[0];
        proc_control_node_X.Integrator3_CSTATE[1] =
          proc_control_node_B.InitialAngularRates[1];
        proc_control_node_X.Integrator3_CSTATE[2] =
          proc_control_node_B.InitialAngularRates[2];
      }
    }

    // SignalConversion generated from: '<S11>/ SFunction ' incorporates:
    //   Integrator: '<S1>/Integrator2'
    //   Integrator: '<S1>/Integrator3'
    //   MATLAB Function: '<S1>/AUV State Equation'

    proc_control_node_B.Bu_nl[0] = proc_control_node_B.WorldPosition_d[0];
    proc_control_node_B.Bu_nl[1] = proc_control_node_B.WorldPosition_d[1];
    proc_control_node_B.Bu_nl[2] = proc_control_node_B.WorldPosition_d[2];
    proc_control_node_B.Bu_nl[3] = proc_control_node_B.y_h[0];
    proc_control_node_B.Bu_nl[4] = proc_control_node_B.y_h[1];
    proc_control_node_B.Bu_nl[5] = proc_control_node_B.y_h[2];
    proc_control_node_B.Bu_nl[6] = proc_control_node_B.y_h[3];
    proc_control_node_B.Bu_nl[7] = proc_control_node_X.Integrator2_CSTATE[0];
    proc_control_node_B.Bu_nl[10] = proc_control_node_X.Integrator3_CSTATE[0];
    proc_control_node_B.Bu_nl[8] = proc_control_node_X.Integrator2_CSTATE[1];
    proc_control_node_B.Bu_nl[11] = proc_control_node_X.Integrator3_CSTATE[1];
    proc_control_node_B.Bu_nl[9] = proc_control_node_X.Integrator2_CSTATE[2];
    proc_control_node_B.Bu_nl[12] = proc_control_node_X.Integrator3_CSTATE[2];

    // SignalConversion generated from: '<S11>/ SFunction ' incorporates:
    //   MATLAB Function: '<S1>/AUV State Equation'
    //   TransferFcn: '<S17>/Transfer Fcn'
    //   TransferFcn: '<S18>/Transfer Fcn'
    //   TransferFcn: '<S19>/Transfer Fcn'
    //   TransferFcn: '<S20>/Transfer Fcn'
    //   TransferFcn: '<S21>/Transfer Fcn'
    //   TransferFcn: '<S22>/Transfer Fcn'
    //   TransferFcn: '<S23>/Transfer Fcn'
    //   TransferFcn: '<S24>/Transfer Fcn'

    proc_control_node_B.ZeroOrderHold_e[0] = proc_control_node_P.TransferFcn_C *
      proc_control_node_X.TransferFcn_CSTATE;
    proc_control_node_B.ZeroOrderHold_e[1] = proc_control_node_P.TransferFcn_C_m
      * proc_control_node_X.TransferFcn_CSTATE_o;
    proc_control_node_B.ZeroOrderHold_e[2] = proc_control_node_P.TransferFcn_C_l
      * proc_control_node_X.TransferFcn_CSTATE_p;
    proc_control_node_B.ZeroOrderHold_e[3] = proc_control_node_P.TransferFcn_C_f
      * proc_control_node_X.TransferFcn_CSTATE_a;
    proc_control_node_B.ZeroOrderHold_e[4] = proc_control_node_P.TransferFcn_C_n
      * proc_control_node_X.TransferFcn_CSTATE_f;
    proc_control_node_B.ZeroOrderHold_e[5] =
      proc_control_node_P.TransferFcn_C_nr *
      proc_control_node_X.TransferFcn_CSTATE_e;
    proc_control_node_B.ZeroOrderHold_e[6] = proc_control_node_P.TransferFcn_C_h
      * proc_control_node_X.TransferFcn_CSTATE_ft;
    proc_control_node_B.ZeroOrderHold_e[7] =
      proc_control_node_P.TransferFcn_C_fa *
      proc_control_node_X.TransferFcn_CSTATE_fu;

    // MATLAB Function: '<S1>/AUV State Equation'
    proc_con_AUVQuatPerturbedSimFcn(proc_control_node_B.Bu_nl,
      proc_control_node_B.Gain3, proc_control_node_B.ZeroOrderHold_e,
      proc_control_node_B.TmpSignalConversionAtTransp);
    proc_control_node_B.Position_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTransp[0];
    proc_control_node_B.Position_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTransp[1];
    proc_control_node_B.Position_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTransp[2];
    proc_control_node_B.Quaternion_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTransp[3];
    proc_control_node_B.Quaternion_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTransp[4];
    proc_control_node_B.Quaternion_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTransp[5];
    proc_control_node_B.Quaternion_dot[3] =
      proc_control_node_B.TmpSignalConversionAtTransp[6];
    proc_control_node_B.BodyVelocity_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTransp[7];
    proc_control_node_B.AngularRates_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTransp[10];
    proc_control_node_B.BodyVelocity_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTransp[8];
    proc_control_node_B.AngularRates_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTransp[11];
    proc_control_node_B.BodyVelocity_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTransp[9];
    proc_control_node_B.AngularRates_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTransp[12];
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
      // MATLAB Function: '<S1>/MATLAB Function'
      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 8;
           proc_control_node_B.idx_m++) {
        uint16_T rtb_current;
        rtb_current =
          proc_control_node_B.BufferToMakeInportVirtual_Ins_e[proc_control_node_B.idx_m];
        if (rtb_current < 1100) {
          rtb_current = 1500U;
        } else if (rtb_current > 1900) {
          rtb_current = 1500U;
        }

        proc_control_node_B.current[proc_control_node_B.idx_m] = rtb_current;
      }

      // End of MATLAB Function: '<S1>/MATLAB Function'

      // Lookup_n-D: '<S13>/ PWM to N'
      for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 8;
           proc_control_node_B.idx_m++) {
        proc_control_node_B.bpIdx = plook_u32u16_binckpan
          (proc_control_node_B.current[proc_control_node_B.idx_m],
           proc_control_node_P.PWM, 200U,
           &proc_control_node_DW.m_bpIndex_m[proc_control_node_B.idx_m]);
        proc_control_node_B.PWMtoN[proc_control_node_B.idx_m] =
          proc_control_node_P.N[proc_control_node_B.bpIdx];
      }
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Gain: '<S25>/Output' incorporates:
      //   RandomNumber: '<S25>/White Noise'

      proc_control_node_B.Output = std::sqrt
        (proc_control_node_P.BandLimitedWhiteNoise_Cov) / 0.1414213562373095 *
        proc_control_node_DW.NextOutput;

      // Gain: '<S26>/Output' incorporates:
      //   RandomNumber: '<S26>/White Noise'

      proc_control_node_B.Output_i = std::sqrt
        (proc_control_node_P.BandLimitedWhiteNoise1_Cov) / 0.1414213562373095 *
        proc_control_node_DW.NextOutput_b;

      // Gain: '<S27>/Output' incorporates:
      //   RandomNumber: '<S27>/White Noise'

      proc_control_node_B.Output_l = std::sqrt
        (proc_control_node_P.BandLimitedWhiteNoise2_Cov) / 0.1414213562373095 *
        proc_control_node_DW.NextOutput_g;

      // Gain: '<S28>/Output' incorporates:
      //   RandomNumber: '<S28>/White Noise'

      proc_control_node_B.Output_o = std::sqrt
        (proc_control_node_P.BandLimitedWhiteNoise3_Cov) / 0.1414213562373095 *
        proc_control_node_DW.NextOutput_l;

      // Gain: '<S29>/Output' incorporates:
      //   RandomNumber: '<S29>/White Noise'

      proc_control_node_B.Output_j = std::sqrt
        (proc_control_node_P.BandLimitedWhiteNoise4_Cov) / 0.1414213562373095 *
        proc_control_node_DW.NextOutput_e;

      // Gain: '<S36>/1//2' incorporates:
      //   Constant: '<S16>/ y devant Z haut'

      proc_control_node_B.rtb_u2_g = proc_control_node_P.u2_Gain *
        proc_control_node_P.ydevantZhaut_Value[0];

      // Trigonometry: '<S36>/sincos'
      proc_control_node_B.rtb_sincos_o1_idx_0 = std::sin
        (proc_control_node_B.rtb_u2_g);
      proc_control_node_B.rtb_sincos_o2_idx_0 = std::cos
        (proc_control_node_B.rtb_u2_g);

      // Gain: '<S36>/1//2' incorporates:
      //   Constant: '<S16>/ y devant Z haut'

      proc_control_node_B.rtb_u2_g = proc_control_node_P.u2_Gain *
        proc_control_node_P.ydevantZhaut_Value[1];

      // Trigonometry: '<S36>/sincos'
      proc_control_node_B.rtb_sincos_o1_idx_1 = std::sin
        (proc_control_node_B.rtb_u2_g);
      proc_control_node_B.rtb_sincos_o2_idx_1 = std::cos
        (proc_control_node_B.rtb_u2_g);

      // Gain: '<S36>/1//2' incorporates:
      //   Constant: '<S16>/ y devant Z haut'

      proc_control_node_B.rtb_u2_g = proc_control_node_P.u2_Gain *
        proc_control_node_P.ydevantZhaut_Value[2];

      // Trigonometry: '<S36>/sincos'
      proc_control_node_B.fcn2_e = std::sin(proc_control_node_B.rtb_u2_g);
      proc_control_node_B.rtb_sincos_o2_idx_2 = std::cos
        (proc_control_node_B.rtb_u2_g);

      // Fcn: '<S36>/q2' incorporates:
      //   Fcn: '<S36>/q1'

      proc_control_node_B.t16 = proc_control_node_B.rtb_sincos_o2_idx_0 *
        proc_control_node_B.rtb_sincos_o1_idx_1;
      proc_control_node_B.t15 = proc_control_node_B.rtb_sincos_o1_idx_0 *
        proc_control_node_B.rtb_sincos_o2_idx_1;
      proc_control_node_B.ZeroOrderHold_b = proc_control_node_B.t16 *
        proc_control_node_B.rtb_sincos_o2_idx_2 - proc_control_node_B.t15 *
        proc_control_node_B.fcn2_e;

      // Fcn: '<S36>/q0' incorporates:
      //   Fcn: '<S36>/q3'

      proc_control_node_B.t14 = proc_control_node_B.rtb_sincos_o2_idx_0 *
        proc_control_node_B.rtb_sincos_o2_idx_1;
      proc_control_node_B.rtb_sincos_o1_idx_1 *=
        proc_control_node_B.rtb_sincos_o1_idx_0;
      proc_control_node_B.absxk = proc_control_node_B.t14 *
        proc_control_node_B.rtb_sincos_o2_idx_2 -
        proc_control_node_B.rtb_sincos_o1_idx_1 * proc_control_node_B.fcn2_e;

      // Fcn: '<S36>/q1'
      proc_control_node_B.scale = proc_control_node_B.t16 *
        proc_control_node_B.fcn2_e + proc_control_node_B.t15 *
        proc_control_node_B.rtb_sincos_o2_idx_2;

      // Fcn: '<S36>/q3'
      proc_control_node_B.d = proc_control_node_B.t14 *
        proc_control_node_B.fcn2_e + proc_control_node_B.rtb_sincos_o1_idx_1 *
        proc_control_node_B.rtb_sincos_o2_idx_2;

      // Sqrt: '<S49>/sqrt' incorporates:
      //   Product: '<S50>/Product'
      //   Product: '<S50>/Product1'
      //   Product: '<S50>/Product2'
      //   Product: '<S50>/Product3'
      //   Sum: '<S50>/Sum'

      proc_control_node_B.t = std::sqrt(((proc_control_node_B.absxk *
        proc_control_node_B.absxk + proc_control_node_B.scale *
        proc_control_node_B.scale) + proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.ZeroOrderHold_b) + proc_control_node_B.d *
        proc_control_node_B.d);

      // Product: '<S45>/Product2'
      proc_control_node_B.ZeroOrderHold_b /= proc_control_node_B.t;

      // Product: '<S45>/Product3'
      proc_control_node_B.d /= proc_control_node_B.t;

      // Product: '<S46>/Product6' incorporates:
      //   Product: '<S48>/Product7'

      proc_control_node_B.t16 = proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.ZeroOrderHold_b;

      // Gain: '<S46>/Gain2' incorporates:
      //   Constant: '<S46>/Constant'
      //   Product: '<S46>/Product6'
      //   Product: '<S46>/Product7'
      //   Sum: '<S46>/Sum3'

      proc_control_node_B.Gain2_k0 = ((proc_control_node_P.Constant_Value_k2 -
        proc_control_node_B.t16) - proc_control_node_B.d * proc_control_node_B.d)
        * proc_control_node_P.Gain2_Gain_d;

      // Product: '<S45>/Product1'
      proc_control_node_B.scale /= proc_control_node_B.t;

      // Product: '<S45>/Product'
      proc_control_node_B.absxk /= proc_control_node_B.t;

      // Product: '<S46>/Product' incorporates:
      //   Product: '<S47>/Product'

      proc_control_node_B.epsilon = proc_control_node_B.scale *
        proc_control_node_B.ZeroOrderHold_b;

      // Gain: '<S46>/Gain' incorporates:
      //   Product: '<S46>/Product'
      //   Product: '<S46>/Product1'
      //   Sum: '<S46>/Sum1'

      proc_control_node_B.Gain_c = (proc_control_node_B.absxk *
        proc_control_node_B.d + proc_control_node_B.epsilon) *
        proc_control_node_P.Gain_Gain_j;

      // Product: '<S46>/Product2' incorporates:
      //   Product: '<S48>/Product1'

      proc_control_node_B.MATLABSystem_o7 = proc_control_node_B.absxk *
        proc_control_node_B.ZeroOrderHold_b;

      // Gain: '<S46>/Gain1' incorporates:
      //   Product: '<S46>/Product2'
      //   Product: '<S46>/Product3'
      //   Sum: '<S46>/Sum2'

      proc_control_node_B.Gain1_cn = (proc_control_node_B.scale *
        proc_control_node_B.d - proc_control_node_B.MATLABSystem_o7) *
        proc_control_node_P.Gain1_Gain_e;

      // Gain: '<S47>/Gain' incorporates:
      //   Product: '<S47>/Product1'
      //   Sum: '<S47>/Sum1'

      proc_control_node_B.Gain_cr = (proc_control_node_B.epsilon -
        proc_control_node_B.absxk * proc_control_node_B.d) *
        proc_control_node_P.Gain_Gain_e;

      // Gain: '<S47>/Gain2' incorporates:
      //   Constant: '<S47>/Constant'
      //   Product: '<S47>/Product6'
      //   Product: '<S47>/Product7'
      //   Sum: '<S47>/Sum3'

      proc_control_node_B.Gain2_n = ((proc_control_node_P.Constant_Value_gp -
        proc_control_node_B.scale * proc_control_node_B.scale) -
        proc_control_node_B.d * proc_control_node_B.d) *
        proc_control_node_P.Gain2_Gain_l;

      // Product: '<S47>/Product3' incorporates:
      //   Product: '<S48>/Product3'

      proc_control_node_B.epsilon = proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.d;

      // Product: '<S47>/Product2' incorporates:
      //   Product: '<S48>/Product2'

      proc_control_node_B.Divide1 = proc_control_node_B.absxk *
        proc_control_node_B.scale;

      // Gain: '<S47>/Gain1' incorporates:
      //   Product: '<S47>/Product2'
      //   Product: '<S47>/Product3'
      //   Sum: '<S47>/Sum2'

      proc_control_node_B.Gain1_d2 = (proc_control_node_B.Divide1 +
        proc_control_node_B.epsilon) * proc_control_node_P.Gain1_Gain_eg;

      // Gain: '<S48>/Gain' incorporates:
      //   Product: '<S48>/Product'
      //   Sum: '<S48>/Sum1'

      proc_control_node_B.Gain_l = (proc_control_node_B.scale *
        proc_control_node_B.d + proc_control_node_B.MATLABSystem_o7) *
        proc_control_node_P.Gain_Gain_m;

      // Gain: '<S48>/Gain1' incorporates:
      //   Sum: '<S48>/Sum2'

      proc_control_node_B.Gain1_o = (proc_control_node_B.epsilon -
        proc_control_node_B.Divide1) * proc_control_node_P.Gain1_Gain_g;

      // Gain: '<S48>/Gain2' incorporates:
      //   Constant: '<S48>/Constant'
      //   Product: '<S48>/Product6'
      //   Sum: '<S48>/Sum3'

      proc_control_node_B.Gain2_i = ((proc_control_node_P.Constant_Value_iw -
        proc_control_node_B.scale * proc_control_node_B.scale) -
        proc_control_node_B.t16) * proc_control_node_P.Gain2_Gain_b;
    }

    // Product: '<S44>/Product' incorporates:
    //   Product: '<S38>/Product'

    proc_control_node_B.epsilon = proc_control_node_B.y_h[0] *
      proc_control_node_B.y_h[0];

    // Sqrt: '<S43>/sqrt' incorporates:
    //   MATLAB Function: '<S16>/MATLAB Function'
    //   Product: '<S44>/Product'
    //   Product: '<S44>/Product1'
    //   Product: '<S44>/Product2'
    //   Product: '<S44>/Product3'
    //   Sum: '<S44>/Sum'

    proc_control_node_B.MATLABSystem_o6 = std::sqrt(((proc_control_node_B.y_h[1]
      * proc_control_node_B.y_h[1] + proc_control_node_B.epsilon) +
      proc_control_node_B.y_h[2] * proc_control_node_B.y_h[2]) +
      proc_control_node_B.y_h[3] * proc_control_node_B.y_h[3]);

    // Product: '<S39>/Product1' incorporates:
    //   Product: '<S51>/Product1'
    //   Sqrt: '<S43>/sqrt'

    proc_control_node_B.MATLABSystem_o7 = proc_control_node_B.y_h[1] /
      proc_control_node_B.MATLABSystem_o6;

    // Product: '<S39>/Product3' incorporates:
    //   Product: '<S51>/Product3'
    //   Sqrt: '<S43>/sqrt'

    proc_control_node_B.Divide3 = proc_control_node_B.y_h[3] /
      proc_control_node_B.MATLABSystem_o6;

    // Product: '<S39>/Product' incorporates:
    //   Product: '<S51>/Product'
    //   Sqrt: '<S43>/sqrt'

    proc_control_node_B.Divide2 = proc_control_node_B.y_h[0] /
      proc_control_node_B.MATLABSystem_o6;

    // Product: '<S39>/Product2' incorporates:
    //   Product: '<S51>/Product2'
    //   Sqrt: '<S43>/sqrt'

    proc_control_node_B.Divide1 = proc_control_node_B.y_h[2] /
      proc_control_node_B.MATLABSystem_o6;

    // Product: '<S42>/Product6' incorporates:
    //   Product: '<S39>/Product1'
    //   Product: '<S53>/Product6'

    proc_control_node_B.scale = proc_control_node_B.MATLABSystem_o7 *
      proc_control_node_B.MATLABSystem_o7;

    // Gain: '<S16>/Gain' incorporates:
    //   Constant: '<S16>/Constant'
    //   Constant: '<S42>/Constant'
    //   Gain: '<S42>/Gain'
    //   Gain: '<S42>/Gain1'
    //   Gain: '<S42>/Gain2'
    //   MATLABSystem: '<S16>/Divide by Constant and Round'
    //   Product: '<S39>/Product'
    //   Product: '<S39>/Product1'
    //   Product: '<S39>/Product2'
    //   Product: '<S39>/Product3'
    //   Product: '<S42>/Product'
    //   Product: '<S42>/Product1'
    //   Product: '<S42>/Product2'
    //   Product: '<S42>/Product3'
    //   Product: '<S42>/Product4'
    //   Product: '<S42>/Product5'
    //   Product: '<S42>/Product6'
    //   Product: '<S42>/Product7'
    //   Product: '<S42>/Product8'
    //   Sum: '<S16>/Sum'
    //   Sum: '<S16>/Sum4'
    //   Sum: '<S42>/Sum'
    //   Sum: '<S42>/Sum1'
    //   Sum: '<S42>/Sum2'
    //   Sum: '<S42>/Sum3'

    proc_control_node_B.PressureDepth = std::floor
      ((((((proc_control_node_B.MATLABSystem_o7 * proc_control_node_B.Divide3 +
            proc_control_node_B.Divide2 * proc_control_node_B.Divide1) *
           proc_control_node_P.Gain_Gain *
           proc_control_node_P.physics.DepthPose[0] +
           (proc_control_node_B.Divide1 * proc_control_node_B.Divide3 -
            proc_control_node_B.Divide2 * proc_control_node_B.MATLABSystem_o7) *
           proc_control_node_P.Gain1_Gain *
           proc_control_node_P.physics.DepthPose[1]) +
          ((proc_control_node_P.Constant_Value_mj - proc_control_node_B.scale) -
           proc_control_node_B.Divide1 * proc_control_node_B.Divide1) *
          proc_control_node_P.Gain2_Gain *
          proc_control_node_P.physics.DepthPose[2]) +
         proc_control_node_B.WorldPosition_d[2]) + proc_control_node_B.Output_o)
       * 1000.0 + 0.5) * proc_control_node_P.simulation.sensors.depth.resolution;

    // Sum: '<S38>/Sum' incorporates:
    //   Product: '<S38>/Product1'
    //   Product: '<S38>/Product2'
    //   Product: '<S38>/Product3'
    //   UnaryMinus: '<S32>/Unary Minus'
    //   UnaryMinus: '<S32>/Unary Minus1'
    //   UnaryMinus: '<S32>/Unary Minus2'

    proc_control_node_B.fcn2_e = ((-proc_control_node_B.y_h[1] *
      -proc_control_node_B.y_h[1] + proc_control_node_B.epsilon) +
      -proc_control_node_B.y_h[2] * -proc_control_node_B.y_h[2]) +
      -proc_control_node_B.y_h[3] * -proc_control_node_B.y_h[3];

    // Product: '<S30>/Divide'
    proc_control_node_B.t14 = proc_control_node_B.y_h[0] /
      proc_control_node_B.fcn2_e;

    // Product: '<S30>/Divide1' incorporates:
    //   UnaryMinus: '<S32>/Unary Minus'

    proc_control_node_B.rtb_sincos_o1_idx_1 = proc_control_node_B.y_h[1] /
      proc_control_node_B.fcn2_e;

    // Product: '<S30>/Divide2' incorporates:
    //   UnaryMinus: '<S32>/Unary Minus1'

    proc_control_node_B.rtb_sincos_o1_idx_0 = proc_control_node_B.y_h[2] /
      proc_control_node_B.fcn2_e;

    // Product: '<S30>/Divide3' incorporates:
    //   UnaryMinus: '<S32>/Unary Minus2'

    proc_control_node_B.fcn2_e = proc_control_node_B.y_h[3] /
      proc_control_node_B.fcn2_e;

    // MATLAB Function: '<S16>/MATLAB Function' incorporates:
    //   Gain: '<S16>/Gain1'
    //   Integrator: '<S1>/Integrator2'
    //   MATLABSystem: '<S16>/Divide by Constant and Round1'
    //   Product: '<S46>/Product4'
    //   Product: '<S46>/Product5'
    //   Product: '<S46>/Product8'
    //   Product: '<S47>/Product4'
    //   Product: '<S47>/Product5'
    //   Product: '<S47>/Product8'
    //   Product: '<S48>/Product4'
    //   Product: '<S48>/Product5'
    //   Product: '<S48>/Product8'
    //   Sum: '<S16>/Sum2'
    //   Sum: '<S46>/Sum'
    //   Sum: '<S47>/Sum'
    //   Sum: '<S48>/Sum'

    proc_control_node_B.y_p[0] = std::floor
      ((((proc_control_node_X.Integrator2_CSTATE[0] *
          proc_control_node_B.Gain2_k0 + proc_control_node_B.Gain_c *
          proc_control_node_X.Integrator2_CSTATE[1]) +
         proc_control_node_B.Gain1_cn * proc_control_node_X.Integrator2_CSTATE[2])
        + proc_control_node_B.Output_l) * 1000.0 + 0.5) *
      proc_control_node_P.simulation.sensors.dvl.resolution;
    proc_control_node_B.y_p[1] = std::floor
      ((((proc_control_node_X.Integrator2_CSTATE[0] *
          proc_control_node_B.Gain_cr + proc_control_node_B.Gain2_n *
          proc_control_node_X.Integrator2_CSTATE[1]) +
         proc_control_node_B.Gain1_d2 * proc_control_node_X.Integrator2_CSTATE[2])
        + proc_control_node_B.Output_l) * 1000.0 + 0.5) *
      proc_control_node_P.simulation.sensors.dvl.resolution;
    proc_control_node_B.y_p[2] = std::floor
      ((((proc_control_node_X.Integrator2_CSTATE[0] * proc_control_node_B.Gain_l
          + proc_control_node_B.Gain1_o *
          proc_control_node_X.Integrator2_CSTATE[1]) +
         proc_control_node_B.Gain2_i * proc_control_node_X.Integrator2_CSTATE[2])
        + proc_control_node_B.Output_l) * 1000.0 + 0.5) *
      proc_control_node_P.simulation.sensors.dvl.resolution;
    proc_control_node_B.MATLABSystem_o6 = 1.0 /
      proc_control_node_B.MATLABSystem_o6;
    proc_control_node_B.t16 = proc_control_node_B.y_h[0] *
      proc_control_node_B.MATLABSystem_o6;
    proc_control_node_B.t15 = proc_control_node_B.y_h[1] *
      proc_control_node_B.MATLABSystem_o6;
    proc_control_node_B.rtb_sincos_o2_idx_2 = proc_control_node_B.y_h[2] *
      proc_control_node_B.MATLABSystem_o6;
    proc_control_node_B.MATLABSystem_o6 *= proc_control_node_B.y_h[3];
    proc_control_node_B.epsilon = (proc_control_node_B.t15 *
      proc_control_node_B.MATLABSystem_o6 - proc_control_node_B.t16 *
      proc_control_node_B.rtb_sincos_o2_idx_2) * -2.0;
    rtb_NewDvlMsg = (proc_control_node_B.epsilon <= -0.99999999999999778);
    proc_control_node_B.rtb_sincos_o2_idx_0 = proc_control_node_B.epsilon;
    if (proc_control_node_B.epsilon >= 0.99999999999999778) {
      proc_control_node_B.rtb_sincos_o2_idx_0 = 1.0;
    }

    if (rtb_NewDvlMsg) {
      proc_control_node_B.rtb_sincos_o2_idx_0 = -1.0;
    }

    proc_control_node_B.u2[2] = rt_atan2d_snf
      ((proc_control_node_B.rtb_sincos_o2_idx_2 *
        proc_control_node_B.MATLABSystem_o6 + proc_control_node_B.t16 *
        proc_control_node_B.t15) * 2.0, ((proc_control_node_B.t16 *
         proc_control_node_B.t16 - proc_control_node_B.t15 *
         proc_control_node_B.t15) - proc_control_node_B.rtb_sincos_o2_idx_2 *
        proc_control_node_B.rtb_sincos_o2_idx_2) +
       proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.MATLABSystem_o6);
    proc_control_node_B.Ns_m = 0;
    if ((proc_control_node_B.epsilon >= 0.99999999999999778) || rtb_NewDvlMsg) {
      proc_control_node_B.Ns_m = 1;
    }

    if (0 <= proc_control_node_B.Ns_m - 1) {
      proc_control_node_B.u2[2] = 0.0;
    }

    if (std::abs(std::asin(proc_control_node_B.rtb_sincos_o2_idx_0)) > 0.349066)
    {
      proc_control_node_B.y_p[0] = 32.7675;
      proc_control_node_B.y_p[1] = 32.7675;
      proc_control_node_B.y_p[2] = 32.7675;
    } else if (std::abs(proc_control_node_B.u2[2]) > 0.349066) {
      proc_control_node_B.y_p[0] = 32.7675;
      proc_control_node_B.y_p[1] = 32.7675;
      proc_control_node_B.y_p[2] = 32.7675;
    }

    // Sum: '<S16>/Sum1'
    proc_control_node_B.Quaternion[0] = proc_control_node_B.Output +
      proc_control_node_B.t14;
    proc_control_node_B.Quaternion[1] = proc_control_node_B.Output +
      proc_control_node_B.rtb_sincos_o1_idx_1;
    proc_control_node_B.Quaternion[2] = proc_control_node_B.Output +
      proc_control_node_B.rtb_sincos_o1_idx_0;
    proc_control_node_B.Quaternion[3] = proc_control_node_B.Output +
      proc_control_node_B.fcn2_e;

    // Sum: '<S16>/Sum3' incorporates:
    //   Integrator: '<S1>/Integrator3'

    proc_control_node_B.AngularRate_d[0] = proc_control_node_B.Output_i +
      proc_control_node_X.Integrator3_CSTATE[0];
    proc_control_node_B.AngularRate_d[1] = proc_control_node_B.Output_i +
      proc_control_node_X.Integrator3_CSTATE[1];
    proc_control_node_B.AngularRate_d[2] = proc_control_node_B.Output_i +
      proc_control_node_X.Integrator3_CSTATE[2];

    // Product: '<S52>/Product7' incorporates:
    //   Product: '<S53>/Product7'

    proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.Divide3 *
      proc_control_node_B.Divide3;

    // Product: '<S52>/Product' incorporates:
    //   Product: '<S53>/Product'

    proc_control_node_B.epsilon = proc_control_node_B.MATLABSystem_o7 *
      proc_control_node_B.Divide1;

    // Product: '<S52>/Product1' incorporates:
    //   Product: '<S53>/Product1'

    proc_control_node_B.t16 = proc_control_node_B.Divide2 *
      proc_control_node_B.Divide3;

    // Product: '<S52>/Product3' incorporates:
    //   Product: '<S54>/Product'

    proc_control_node_B.t15 = proc_control_node_B.MATLABSystem_o7 *
      proc_control_node_B.Divide3;

    // Product: '<S52>/Product2' incorporates:
    //   Product: '<S54>/Product1'

    proc_control_node_B.rtb_sincos_o2_idx_2 = proc_control_node_B.Divide2 *
      proc_control_node_B.Divide1;

    // Product: '<S52>/Product6' incorporates:
    //   Product: '<S54>/Product7'

    proc_control_node_B.fcn2_e = proc_control_node_B.Divide1 *
      proc_control_node_B.Divide1;

    // Sum: '<S16>/Sum5' incorporates:
    //   Constant: '<S16>/Constant1'
    //   Constant: '<S52>/Constant'
    //   Gain: '<S52>/Gain'
    //   Gain: '<S52>/Gain1'
    //   Gain: '<S52>/Gain2'
    //   Product: '<S52>/Product'
    //   Product: '<S52>/Product1'
    //   Product: '<S52>/Product2'
    //   Product: '<S52>/Product3'
    //   Product: '<S52>/Product4'
    //   Product: '<S52>/Product5'
    //   Product: '<S52>/Product6'
    //   Product: '<S52>/Product7'
    //   Product: '<S52>/Product8'
    //   Sum: '<S16>/Sum6'
    //   Sum: '<S52>/Sum'
    //   Sum: '<S52>/Sum1'
    //   Sum: '<S52>/Sum2'
    //   Sum: '<S52>/Sum3'

    proc_control_node_B.LinearAcceleration[0] =
      (((((proc_control_node_P.Constant_Value_ah - proc_control_node_B.fcn2_e) -
          proc_control_node_B.MATLABSystem_o6) *
         proc_control_node_P.Gain2_Gain_p *
         proc_control_node_P.simulation.sensors.imu.acc.bias[0] +
         (proc_control_node_B.epsilon + proc_control_node_B.t16) *
         proc_control_node_P.Gain_Gain_a *
         proc_control_node_P.simulation.sensors.imu.acc.bias[1]) +
        (proc_control_node_B.t15 - proc_control_node_B.rtb_sincos_o2_idx_2) *
        proc_control_node_P.Gain1_Gain_b *
        proc_control_node_P.simulation.sensors.imu.acc.bias[2]) +
       proc_control_node_B.BodyVelocity_dot[0]) + proc_control_node_B.Output_j;

    // Product: '<S53>/Product3' incorporates:
    //   Product: '<S54>/Product3'

    proc_control_node_B.Divide3 *= proc_control_node_B.Divide1;

    // Product: '<S53>/Product2' incorporates:
    //   Product: '<S54>/Product2'

    proc_control_node_B.Divide2 *= proc_control_node_B.MATLABSystem_o7;

    // Sum: '<S16>/Sum5' incorporates:
    //   Constant: '<S16>/Constant1'
    //   Constant: '<S53>/Constant'
    //   Constant: '<S54>/Constant'
    //   Gain: '<S53>/Gain'
    //   Gain: '<S53>/Gain1'
    //   Gain: '<S53>/Gain2'
    //   Gain: '<S54>/Gain'
    //   Gain: '<S54>/Gain1'
    //   Gain: '<S54>/Gain2'
    //   Product: '<S53>/Product2'
    //   Product: '<S53>/Product3'
    //   Product: '<S53>/Product4'
    //   Product: '<S53>/Product5'
    //   Product: '<S53>/Product8'
    //   Product: '<S54>/Product4'
    //   Product: '<S54>/Product5'
    //   Product: '<S54>/Product8'
    //   Sum: '<S16>/Sum6'
    //   Sum: '<S53>/Sum'
    //   Sum: '<S53>/Sum1'
    //   Sum: '<S53>/Sum2'
    //   Sum: '<S53>/Sum3'
    //   Sum: '<S54>/Sum'
    //   Sum: '<S54>/Sum1'
    //   Sum: '<S54>/Sum2'
    //   Sum: '<S54>/Sum3'

    proc_control_node_B.LinearAcceleration[1] =
      (((((proc_control_node_P.Constant_Value_ar - proc_control_node_B.scale) -
          proc_control_node_B.MATLABSystem_o6) *
         proc_control_node_P.Gain2_Gain_a *
         proc_control_node_P.simulation.sensors.imu.acc.bias[1] +
         (proc_control_node_B.epsilon - proc_control_node_B.t16) *
         proc_control_node_P.Gain_Gain_c *
         proc_control_node_P.simulation.sensors.imu.acc.bias[0]) +
        (proc_control_node_B.Divide2 + proc_control_node_B.Divide3) *
        proc_control_node_P.Gain1_Gain_a *
        proc_control_node_P.simulation.sensors.imu.acc.bias[2]) +
       proc_control_node_B.BodyVelocity_dot[1]) + proc_control_node_B.Output_j;
    proc_control_node_B.LinearAcceleration[2] = ((((proc_control_node_B.t15 +
      proc_control_node_B.rtb_sincos_o2_idx_2) * proc_control_node_P.Gain_Gain_b
      * proc_control_node_P.simulation.sensors.imu.acc.bias[0] +
      (proc_control_node_B.Divide3 - proc_control_node_B.Divide2) *
      proc_control_node_P.Gain1_Gain_f *
      proc_control_node_P.simulation.sensors.imu.acc.bias[1]) +
      ((proc_control_node_P.Constant_Value_i2 - proc_control_node_B.scale) -
       proc_control_node_B.fcn2_e) * proc_control_node_P.Gain2_Gain_m *
      proc_control_node_P.simulation.sensors.imu.acc.bias[2]) +
      proc_control_node_B.BodyVelocity_dot[2]) + proc_control_node_B.Output_j;
  }

  // End of Outputs for SubSystem: '<Root>/Modèle Physique'

  // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
  //   EnablePort: '<S4>/Enable'

  if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
       (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
      rtmIsMajorTimeStep((&proc_control_node_M))) {
    proc_control_node_DW.ROSOutput_MODE = (proc_control_node_B.MATLABSystem_o3 >
      0.0);
  }

  if (proc_control_node_DW.ROSOutput_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Gain: '<S96>/1//2' incorporates:
      //   Constant: '<S80>/ENU 2 NED'

      proc_control_node_B.rtb_u2_g = proc_control_node_P.u2_Gain_g *
        proc_control_node_P.ENU2NED_Value[0];

      // Trigonometry: '<S96>/sincos'
      proc_control_node_B.rtb_sincos_o1_idx_0 = std::sin
        (proc_control_node_B.rtb_u2_g);
      proc_control_node_B.rtb_sincos_o2_idx_0 = std::cos
        (proc_control_node_B.rtb_u2_g);

      // Gain: '<S96>/1//2' incorporates:
      //   Constant: '<S80>/ENU 2 NED'

      proc_control_node_B.rtb_u2_g = proc_control_node_P.u2_Gain_g *
        proc_control_node_P.ENU2NED_Value[1];

      // Trigonometry: '<S96>/sincos'
      proc_control_node_B.rtb_sincos_o1_idx_1 = std::sin
        (proc_control_node_B.rtb_u2_g);
      proc_control_node_B.rtb_sincos_o2_idx_1 = std::cos
        (proc_control_node_B.rtb_u2_g);

      // Gain: '<S96>/1//2' incorporates:
      //   Constant: '<S80>/ENU 2 NED'

      proc_control_node_B.rtb_u2_g = proc_control_node_P.u2_Gain_g *
        proc_control_node_P.ENU2NED_Value[2];

      // Trigonometry: '<S96>/sincos'
      proc_control_node_B.fcn2_e = std::sin(proc_control_node_B.rtb_u2_g);
      proc_control_node_B.rtb_sincos_o2_idx_2 = std::cos
        (proc_control_node_B.rtb_u2_g);

      // Fcn: '<S96>/q2' incorporates:
      //   Fcn: '<S96>/q1'

      proc_control_node_B.MATLABSystem_o6 =
        proc_control_node_B.rtb_sincos_o2_idx_0 *
        proc_control_node_B.rtb_sincos_o1_idx_1;
      proc_control_node_B.MATLABSystem_o7 =
        proc_control_node_B.rtb_sincos_o1_idx_0 *
        proc_control_node_B.rtb_sincos_o2_idx_1;

      // Fcn: '<S96>/q2'
      proc_control_node_B.q2_l = proc_control_node_B.MATLABSystem_o6 *
        proc_control_node_B.rtb_sincos_o2_idx_2 -
        proc_control_node_B.MATLABSystem_o7 * proc_control_node_B.fcn2_e;

      // Fcn: '<S96>/q0' incorporates:
      //   Fcn: '<S96>/q3'

      proc_control_node_B.epsilon = proc_control_node_B.rtb_sincos_o2_idx_0 *
        proc_control_node_B.rtb_sincos_o2_idx_1;
      proc_control_node_B.Divide2 = proc_control_node_B.rtb_sincos_o1_idx_0 *
        proc_control_node_B.rtb_sincos_o1_idx_1;

      // Fcn: '<S96>/q0'
      proc_control_node_B.q0_j = proc_control_node_B.epsilon *
        proc_control_node_B.rtb_sincos_o2_idx_2 - proc_control_node_B.Divide2 *
        proc_control_node_B.fcn2_e;

      // Fcn: '<S96>/q1'
      proc_control_node_B.q1_g = proc_control_node_B.MATLABSystem_o6 *
        proc_control_node_B.fcn2_e + proc_control_node_B.MATLABSystem_o7 *
        proc_control_node_B.rtb_sincos_o2_idx_2;

      // Fcn: '<S96>/q3'
      proc_control_node_B.q3_h = proc_control_node_B.epsilon *
        proc_control_node_B.fcn2_e + proc_control_node_B.Divide2 *
        proc_control_node_B.rtb_sincos_o2_idx_2;

      // Sqrt: '<S107>/sqrt' incorporates:
      //   Product: '<S108>/Product'
      //   Product: '<S108>/Product1'
      //   Product: '<S108>/Product2'
      //   Product: '<S108>/Product3'
      //   Sum: '<S108>/Sum'

      proc_control_node_B.ZeroOrderHold_b = std::sqrt(((proc_control_node_B.q0_j
        * proc_control_node_B.q0_j + proc_control_node_B.q1_g *
        proc_control_node_B.q1_g) + proc_control_node_B.q2_l *
        proc_control_node_B.q2_l) + proc_control_node_B.q3_h *
        proc_control_node_B.q3_h);

      // Product: '<S103>/Product2'
      proc_control_node_B.absxk = proc_control_node_B.q2_l /
        proc_control_node_B.ZeroOrderHold_b;

      // Product: '<S103>/Product3'
      proc_control_node_B.scale = proc_control_node_B.q3_h /
        proc_control_node_B.ZeroOrderHold_b;

      // Gain: '<S104>/Gain2' incorporates:
      //   Constant: '<S104>/Constant'
      //   Product: '<S104>/Product6'
      //   Product: '<S104>/Product7'
      //   Sum: '<S104>/Sum3'

      proc_control_node_B.Gain2 = ((proc_control_node_P.Constant_Value_pm -
        proc_control_node_B.absxk * proc_control_node_B.absxk) -
        proc_control_node_B.scale * proc_control_node_B.scale) *
        proc_control_node_P.Gain2_Gain_ao;

      // Product: '<S103>/Product1'
      proc_control_node_B.d = proc_control_node_B.q1_g /
        proc_control_node_B.ZeroOrderHold_b;

      // Product: '<S103>/Product'
      proc_control_node_B.ZeroOrderHold_b = proc_control_node_B.q0_j /
        proc_control_node_B.ZeroOrderHold_b;

      // Gain: '<S104>/Gain' incorporates:
      //   Product: '<S104>/Product'
      //   Product: '<S104>/Product1'
      //   Sum: '<S104>/Sum1'

      proc_control_node_B.Gain = (proc_control_node_B.d *
        proc_control_node_B.absxk + proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.scale) * proc_control_node_P.Gain_Gain_l;

      // Gain: '<S104>/Gain1' incorporates:
      //   Product: '<S104>/Product2'
      //   Product: '<S104>/Product3'
      //   Sum: '<S104>/Sum2'

      proc_control_node_B.Gain1 = (proc_control_node_B.d *
        proc_control_node_B.scale - proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.absxk) * proc_control_node_P.Gain1_Gain_c;

      // Gain: '<S105>/Gain' incorporates:
      //   Product: '<S105>/Product'
      //   Product: '<S105>/Product1'
      //   Sum: '<S105>/Sum1'

      proc_control_node_B.Gain_j = (proc_control_node_B.d *
        proc_control_node_B.absxk - proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.scale) * proc_control_node_P.Gain_Gain_d;

      // Gain: '<S105>/Gain2' incorporates:
      //   Constant: '<S105>/Constant'
      //   Product: '<S105>/Product6'
      //   Product: '<S105>/Product7'
      //   Sum: '<S105>/Sum3'

      proc_control_node_B.Gain2_d = ((proc_control_node_P.Constant_Value_fk -
        proc_control_node_B.d * proc_control_node_B.d) -
        proc_control_node_B.scale * proc_control_node_B.scale) *
        proc_control_node_P.Gain2_Gain_i;

      // Gain: '<S105>/Gain1' incorporates:
      //   Product: '<S105>/Product2'
      //   Product: '<S105>/Product3'
      //   Sum: '<S105>/Sum2'

      proc_control_node_B.Gain1_d = (proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.d + proc_control_node_B.absxk *
        proc_control_node_B.scale) * proc_control_node_P.Gain1_Gain_h;

      // Gain: '<S106>/Gain' incorporates:
      //   Product: '<S106>/Product'
      //   Product: '<S106>/Product1'
      //   Sum: '<S106>/Sum1'

      proc_control_node_B.Gain_f = (proc_control_node_B.d *
        proc_control_node_B.scale + proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.absxk) * proc_control_node_P.Gain_Gain_f;

      // Gain: '<S106>/Gain1' incorporates:
      //   Product: '<S106>/Product2'
      //   Product: '<S106>/Product3'
      //   Sum: '<S106>/Sum2'

      proc_control_node_B.Gain1_c = (proc_control_node_B.absxk *
        proc_control_node_B.scale - proc_control_node_B.ZeroOrderHold_b *
        proc_control_node_B.d) * proc_control_node_P.Gain1_Gain_m;

      // Gain: '<S106>/Gain2' incorporates:
      //   Constant: '<S106>/Constant'
      //   Product: '<S106>/Product6'
      //   Product: '<S106>/Product7'
      //   Sum: '<S106>/Sum3'

      proc_control_node_B.Gain2_k = ((proc_control_node_P.Constant_Value_ek -
        proc_control_node_B.d * proc_control_node_B.d) -
        proc_control_node_B.absxk * proc_control_node_B.absxk) *
        proc_control_node_P.Gain2_Gain_db;
    }

    // Sum: '<S98>/Sum' incorporates:
    //   Product: '<S98>/Product'
    //   Product: '<S98>/Product1'
    //   Product: '<S98>/Product2'
    //   Product: '<S98>/Product3'

    proc_control_node_B.rtb_sincos_o1_idx_0 = ((proc_control_node_B.y_h[0] *
      proc_control_node_B.y_h[0] + proc_control_node_B.y_h[1] *
      proc_control_node_B.y_h[1]) + proc_control_node_B.y_h[2] *
      proc_control_node_B.y_h[2]) + proc_control_node_B.y_h[3] *
      proc_control_node_B.y_h[3];

    // Product: '<S93>/Divide'
    proc_control_node_B.rtb_sincos_o1_idx_1 = proc_control_node_B.y_h[0] /
      proc_control_node_B.rtb_sincos_o1_idx_0;

    // Product: '<S93>/Divide1' incorporates:
    //   UnaryMinus: '<S97>/Unary Minus'

    proc_control_node_B.MATLABSystem_o6 = -proc_control_node_B.y_h[1] /
      proc_control_node_B.rtb_sincos_o1_idx_0;

    // Product: '<S93>/Divide2' incorporates:
    //   UnaryMinus: '<S97>/Unary Minus1'

    proc_control_node_B.t14 = -proc_control_node_B.y_h[2] /
      proc_control_node_B.rtb_sincos_o1_idx_0;

    // Product: '<S93>/Divide3' incorporates:
    //   UnaryMinus: '<S97>/Unary Minus2'

    proc_control_node_B.fcn2_e = -proc_control_node_B.y_h[3] /
      proc_control_node_B.rtb_sincos_o1_idx_0;
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // MATLAB Function: '<S80>/MATLAB Function' incorporates:
      //   Constant: '<S80>/ '
      //   Constant: '<S80>/  '
      //   Constant: '<S80>/Constant'
      //   Constant: '<S90>/Constant'
      //   Product: '<S100>/Product'
      //   Product: '<S100>/Product1'
      //   Product: '<S100>/Product2'
      //   Product: '<S100>/Product3'
      //   Product: '<S101>/Product'
      //   Product: '<S101>/Product1'
      //   Product: '<S101>/Product2'
      //   Product: '<S101>/Product3'
      //   Product: '<S102>/Product'
      //   Product: '<S102>/Product1'
      //   Product: '<S102>/Product2'
      //   Product: '<S102>/Product3'
      //   Product: '<S104>/Product4'
      //   Product: '<S104>/Product5'
      //   Product: '<S104>/Product8'
      //   Product: '<S105>/Product4'
      //   Product: '<S105>/Product5'
      //   Product: '<S105>/Product8'
      //   Product: '<S106>/Product4'
      //   Product: '<S106>/Product5'
      //   Product: '<S106>/Product8'
      //   Product: '<S99>/Product'
      //   Product: '<S99>/Product1'
      //   Product: '<S99>/Product2'
      //   Product: '<S99>/Product3'
      //   Sum: '<S100>/Sum'
      //   Sum: '<S101>/Sum'
      //   Sum: '<S102>/Sum'
      //   Sum: '<S104>/Sum'
      //   Sum: '<S105>/Sum'
      //   Sum: '<S106>/Sum'
      //   Sum: '<S80>/Sum'
      //   Sum: '<S99>/Sum'

      proc_control_node_B.msg_g = proc_control_node_P.Constant_Value_om;
      proc_control_node_B.msg_g.ModelName[0] =
        proc_control_node_P.simulation.gazebo.model_name[0];
      proc_control_node_B.msg_g.ModelName[1] =
        proc_control_node_P.simulation.gazebo.model_name[1];
      proc_control_node_B.msg_g.ModelName[2] =
        proc_control_node_P.simulation.gazebo.model_name[2];
      proc_control_node_B.msg_g.ModelName[3] =
        proc_control_node_P.simulation.gazebo.model_name[3];
      proc_control_node_B.msg_g.Pose.Position.X =
        (proc_control_node_B.WorldPosition_d[0] * proc_control_node_B.Gain2 +
         proc_control_node_B.Gain * proc_control_node_B.WorldPosition_d[1]) +
        proc_control_node_B.Gain1 * proc_control_node_B.WorldPosition_d[2];
      proc_control_node_B.msg_g.Pose.Position.Y =
        (proc_control_node_B.WorldPosition_d[0] * proc_control_node_B.Gain_j +
         proc_control_node_B.Gain2_d * proc_control_node_B.WorldPosition_d[1]) +
        proc_control_node_B.Gain1_d * proc_control_node_B.WorldPosition_d[2];
      proc_control_node_B.msg_g.Pose.Position.Z =
        ((proc_control_node_B.WorldPosition_d[0] * proc_control_node_B.Gain_f +
          proc_control_node_B.Gain1_c * proc_control_node_B.WorldPosition_d[1])
         + proc_control_node_B.Gain2_k * proc_control_node_B.WorldPosition_d[2])
        + proc_control_node_P.physics.dvlCenterDist;
      proc_control_node_B.msg_g.Pose.Orientation.W =
        ((proc_control_node_B.rtb_sincos_o1_idx_1 * proc_control_node_B.q0_j -
          proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.q1_g) -
         proc_control_node_B.t14 * proc_control_node_B.q2_l) -
        proc_control_node_B.fcn2_e * proc_control_node_B.q3_h;
      proc_control_node_B.msg_g.Pose.Orientation.X =
        ((proc_control_node_B.rtb_sincos_o1_idx_1 * proc_control_node_B.q1_g +
          proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.q0_j) +
         proc_control_node_B.t14 * proc_control_node_B.q3_h) -
        proc_control_node_B.fcn2_e * proc_control_node_B.q2_l;
      proc_control_node_B.msg_g.Pose.Orientation.Y =
        ((proc_control_node_B.rtb_sincos_o1_idx_1 * proc_control_node_B.q2_l -
          proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.q3_h) +
         proc_control_node_B.t14 * proc_control_node_B.q0_j) +
        proc_control_node_B.fcn2_e * proc_control_node_B.q1_g;
      proc_control_node_B.msg_g.Pose.Orientation.Z =
        ((proc_control_node_B.rtb_sincos_o1_idx_1 * proc_control_node_B.q3_h +
          proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.q2_l) -
         proc_control_node_B.t14 * proc_control_node_B.q1_g) +
        proc_control_node_B.fcn2_e * proc_control_node_B.q0_j;
      proc_control_node_B.msg_g.ModelName_SL_Info.CurrentLength = 4U;
      for (proc_control_node_B.i = 0; proc_control_node_B.i < 5;
           proc_control_node_B.i++) {
        proc_control_node_B.msg_g.ReferenceFrame[proc_control_node_B.i] =
          proc_control_node_P.simulation.gazebo.reference_frame[proc_control_node_B.i];
      }

      proc_control_node_B.msg_g.ReferenceFrame_SL_Info.CurrentLength = 5U;

      // End of MATLAB Function: '<S80>/MATLAB Function'

      // Outputs for Atomic SubSystem: '<S80>/Publish'
      // MATLABSystem: '<S92>/SinkBlock'
      Pub_proc_control_node_63.publish(&proc_control_node_B.msg_g);

      // End of Outputs for SubSystem: '<S80>/Publish'

      // MATLAB Function: '<S81>/MATLAB Function' incorporates:
      //   Sum: '<S81>/Sum'

      proc_control_node_B.msg_l.Position.X =
        proc_control_node_B.WorldPosition_d[0];
      proc_control_node_B.msg_l.Position.Y =
        proc_control_node_B.WorldPosition_d[1];
      proc_control_node_B.msg_l.Position.Z =
        proc_control_node_B.WorldPosition_d[2];
      proc_control_node_B.msg_l.Orientation.X = proc_control_node_B.y_h[1];
      proc_control_node_B.msg_l.Orientation.Y = proc_control_node_B.y_h[2];
      proc_control_node_B.msg_l.Orientation.Z = proc_control_node_B.y_h[3];
      proc_control_node_B.msg_l.Orientation.W = proc_control_node_B.y_h[0];

      // Outputs for Atomic SubSystem: '<S81>/Publish'
      // MATLABSystem: '<S111>/SinkBlock'
      Pub_proc_control_node_75.publish(&proc_control_node_B.msg_l);

      // End of Outputs for SubSystem: '<S81>/Publish'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0) {
      // MATLAB Function: '<S77>/MATLAB Function' incorporates:
      //   Constant: '<S82>/Constant'

      proc_control_node_B.msg_iq = proc_control_node_P.Constant_Value_h;
      proc_control_node_B.msg_iq.XVelBtm = proc_control_node_B.y_p[0];
      proc_control_node_B.msg_iq.YVelBtm = proc_control_node_B.y_p[1];
      proc_control_node_B.msg_iq.ZVelBtm = proc_control_node_B.y_p[2];

      // Outputs for Atomic SubSystem: '<S77>/Publish'
      // MATLABSystem: '<S84>/SinkBlock'
      Pub_proc_control_node_41.publish(&proc_control_node_B.msg_iq);

      // End of Outputs for SubSystem: '<S77>/Publish'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // BusAssignment: '<S78>/Bus Assignment' incorporates:
      //   DataTypeConversion: '<S78>/Cast To Double'
      //   ZeroOrderHold: '<S78>/Zero-Order Hold'

      proc_control_node_B.BusAssignment_h.Data = static_cast<real32_T>
        (proc_control_node_B.PressureDepth);

      // Outputs for Atomic SubSystem: '<S78>/Publish Depth'
      // MATLABSystem: '<S86>/SinkBlock'
      Pub_proc_control_node_243.publish(&proc_control_node_B.BusAssignment_h);

      // End of Outputs for SubSystem: '<S78>/Publish Depth'

      // MATLAB Function: '<S79>/MATLAB Function' incorporates:
      //   Constant: '<S87>/Constant'

      proc_control_node_B.msg_i = proc_control_node_P.Constant_Value_g;
      proc_control_node_B.msg_i.AngularVelocity.X =
        proc_control_node_B.AngularRate_d[0];
      proc_control_node_B.msg_i.AngularVelocity.Y =
        proc_control_node_B.AngularRate_d[1];
      proc_control_node_B.msg_i.AngularVelocity.Z =
        proc_control_node_B.AngularRate_d[2];
      proc_control_node_B.msg_i.Orientation.X = proc_control_node_B.Quaternion[1];
      proc_control_node_B.msg_i.Orientation.Y = proc_control_node_B.Quaternion[2];
      proc_control_node_B.msg_i.Orientation.Z = proc_control_node_B.Quaternion[3];
      proc_control_node_B.msg_i.Orientation.W = proc_control_node_B.Quaternion[0];
      proc_control_node_B.msg_i.LinearAcceleration.X =
        proc_control_node_B.LinearAcceleration[0];
      proc_control_node_B.msg_i.LinearAcceleration.Y =
        proc_control_node_B.LinearAcceleration[1];
      proc_control_node_B.msg_i.LinearAcceleration.Z =
        proc_control_node_B.LinearAcceleration[2];

      // Outputs for Atomic SubSystem: '<S79>/Publish imu_info'
      // MATLABSystem: '<S89>/SinkBlock'
      Pub_proc_control_node_47.publish(&proc_control_node_B.msg_i);

      // End of Outputs for SubSystem: '<S79>/Publish imu_info'
    }
  }

  // End of Outputs for SubSystem: '<Root>/ROS Output'
  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    // Update for Atomic SubSystem: '<Root>/Subsystem1'
    // Update for Delay: '<S10>/Delay'
    proc_control_node_DW.Delay_DSTATE_e = proc_control_node_B.y;

    // End of Update for SubSystem: '<Root>/Subsystem1'

    // Update for Delay: '<S300>/ ' incorporates:
    //   SignalConversion generated from: '<S5>/thrust'

    std::memcpy(&proc_control_node_DW._DSTATE[0],
                &proc_control_node_B.BufferToMakeInportVirtual_Inser[0], sizeof
                (real_T) << 3U);
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
    // Update for Delay: '<S3>/Delay'
    proc_control_node_DW.Delay_DSTATE = proc_control_node_B.y;
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
    // Update for DiscreteIntegrator: '<S370>/Integrator' incorporates:
    //   Constant: '<S366>/Constant'

    if (proc_control_node_P.Constant_Value_as > 0.0) {
      proc_control_node_DW.Integrator_PrevResetState = 1;
    } else if (proc_control_node_P.Constant_Value_as < 0.0) {
      proc_control_node_DW.Integrator_PrevResetState = -1;
    } else if (proc_control_node_P.Constant_Value_as == 0.0) {
      proc_control_node_DW.Integrator_PrevResetState = 0;
    } else {
      proc_control_node_DW.Integrator_PrevResetState = 2;
    }

    for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 6;
         proc_control_node_B.idx_m++) {
      proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] +=
        proc_control_node_P.Integrator_gainval_o *
        proc_control_node_B.Saturation[proc_control_node_B.idx_m];
      if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] >=
          proc_control_node_P.Integrator_UpperSat_a) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] =
          proc_control_node_P.Integrator_UpperSat_a;
      } else if
          (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] <=
           proc_control_node_P.Integrator_LowerSat_g) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.idx_m] =
          proc_control_node_P.Integrator_LowerSat_g;
      }

      // Update for DiscreteIntegrator: '<S371>/Integrator' incorporates:
      //   DiscreteIntegrator: '<S370>/Integrator'

      proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] +=
        proc_control_node_P.Integrator_gainval_e *
        proc_control_node_B.Sum_h[proc_control_node_B.idx_m];
      if (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] >=
          proc_control_node_P.Integrator_UpperSat_f) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] =
          proc_control_node_P.Integrator_UpperSat_f;
      } else if
          (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] <=
           proc_control_node_P.Integrator_LowerSat_p) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.idx_m] =
          proc_control_node_P.Integrator_LowerSat_p;
      }
    }

    // End of Update for DiscreteIntegrator: '<S370>/Integrator'

    // Update for DiscreteIntegrator: '<S371>/Integrator' incorporates:
    //   Constant: '<S366>/Constant1'

    if (proc_control_node_P.Constant1_Value_d > 0.0) {
      proc_control_node_DW.Integrator_PrevResetState_h = 1;
    } else if (proc_control_node_P.Constant1_Value_d < 0.0) {
      proc_control_node_DW.Integrator_PrevResetState_h = -1;
    } else if (proc_control_node_P.Constant1_Value_d == 0.0) {
      proc_control_node_DW.Integrator_PrevResetState_h = 0;
    } else {
      proc_control_node_DW.Integrator_PrevResetState_h = 2;
    }
  }

  // Update for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  if (proc_control_node_DW.ModlePhysique_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[7] == 0) {
      // Update for UniformRandomNumber: '<S14>/X Drift'
      proc_control_node_DW.XDrift_NextOutput = (proc_control_node_P.dMaxX -
        proc_control_node_P.dMinX) * rt_urand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed) + proc_control_node_P.dMinX;

      // Update for UniformRandomNumber: '<S14>/Y Drift'
      proc_control_node_DW.YDrift_NextOutput = (proc_control_node_P.dMaxY -
        proc_control_node_P.dMinY) * rt_urand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_a) + proc_control_node_P.dMinY;
    }

    // Update for Integrator: '<S1>/Integrator'
    proc_control_node_DW.Integrator_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator1'
    proc_control_node_DW.Integrator1_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator2'
    proc_control_node_DW.Integrator2_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator3'
    proc_control_node_DW.Integrator3_IWORK = 0;
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Update for RandomNumber: '<S25>/White Noise'
      proc_control_node_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_j) *
        proc_control_node_P.WhiteNoise_StdDev +
        proc_control_node_P.WhiteNoise_Mean;

      // Update for RandomNumber: '<S26>/White Noise'
      proc_control_node_DW.NextOutput_b = rt_nrand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_d) *
        proc_control_node_P.WhiteNoise_StdDev_d +
        proc_control_node_P.WhiteNoise_Mean_e;

      // Update for RandomNumber: '<S27>/White Noise'
      proc_control_node_DW.NextOutput_g = rt_nrand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_e) *
        proc_control_node_P.WhiteNoise_StdDev_e +
        proc_control_node_P.WhiteNoise_Mean_c;

      // Update for RandomNumber: '<S28>/White Noise'
      proc_control_node_DW.NextOutput_l = rt_nrand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_n) *
        proc_control_node_P.WhiteNoise_StdDev_j +
        proc_control_node_P.WhiteNoise_Mean_p;

      // Update for RandomNumber: '<S29>/White Noise'
      proc_control_node_DW.NextOutput_e = rt_nrand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_b) *
        proc_control_node_P.WhiteNoise_StdDev_p +
        proc_control_node_P.WhiteNoise_Mean_l;
    }
  }

  // End of Update for SubSystem: '<Root>/Modèle Physique'
  if (rtmIsMajorTimeStep((&proc_control_node_M))) {
    rt_ertODEUpdateContinuousStates(&(&proc_control_node_M)->solverInfo);

    // Update absolute time for base rate
    // The "clockTick0" counts the number of times the code of this task has
    //  been executed. The absolute time is the multiplication of "clockTick0"
    //  and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
    //  overflow during the application lifespan selected.
    //  Timer of this task consists of two 32 bit unsigned integers.
    //  The two integers represent the low bits Timing.clockTick0 and the high bits
    //  Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.

    if (!(++(&proc_control_node_M)->Timing.clockTick0)) {
      ++(&proc_control_node_M)->Timing.clockTickH0;
    }

    (&proc_control_node_M)->Timing.t[0] = rtsiGetSolverStopTime
      (&(&proc_control_node_M)->solverInfo);

    {
      // Update absolute timer for sample time: [0.02s, 0.0s]
      // The "clockTick1" counts the number of times the code of this task has
      //  been executed. The resolution of this integer timer is 0.02, which is the step size
      //  of the task. Size of "clockTick1" ensures timer will not overflow during the
      //  application lifespan selected.
      //  Timer of this task consists of two 32 bit unsigned integers.
      //  The two integers represent the low bits Timing.clockTick1 and the high bits
      //  Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.

      (&proc_control_node_M)->Timing.clockTick1++;
      if (!(&proc_control_node_M)->Timing.clockTick1) {
        (&proc_control_node_M)->Timing.clockTickH1++;
      }
    }

    rate_scheduler((&proc_control_node_M));
  }                                    // end MajorTimeStep
}

// Derivatives for root system: '<Root>'
void proc_control_nodeModelClass::proc_control_node_derivatives()
{
  proc_control_nodeModelClass::XDot_proc_control_node_T *_rtXdot;
  _rtXdot = ((XDot_proc_control_node_T *) (&proc_control_node_M)->derivs);

  // Derivatives for Enabled SubSystem: '<Root>/Modèle Physique'
  if (proc_control_node_DW.ModlePhysique_MODE) {
    // Derivatives for TransferFcn: '<S17>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE = 0.0;
    _rtXdot->TransferFcn_CSTATE += proc_control_node_P.TransferFcn_A *
      proc_control_node_X.TransferFcn_CSTATE;
    _rtXdot->TransferFcn_CSTATE += proc_control_node_B.PWMtoN[0];

    // Derivatives for TransferFcn: '<S18>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_o = 0.0;
    _rtXdot->TransferFcn_CSTATE_o += proc_control_node_P.TransferFcn_A_j *
      proc_control_node_X.TransferFcn_CSTATE_o;
    _rtXdot->TransferFcn_CSTATE_o += proc_control_node_B.PWMtoN[1];

    // Derivatives for TransferFcn: '<S19>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_p = 0.0;
    _rtXdot->TransferFcn_CSTATE_p += proc_control_node_P.TransferFcn_A_h *
      proc_control_node_X.TransferFcn_CSTATE_p;
    _rtXdot->TransferFcn_CSTATE_p += proc_control_node_B.PWMtoN[2];

    // Derivatives for TransferFcn: '<S20>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_a = 0.0;
    _rtXdot->TransferFcn_CSTATE_a += proc_control_node_P.TransferFcn_A_i *
      proc_control_node_X.TransferFcn_CSTATE_a;
    _rtXdot->TransferFcn_CSTATE_a += proc_control_node_B.PWMtoN[3];

    // Derivatives for TransferFcn: '<S21>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_f = 0.0;
    _rtXdot->TransferFcn_CSTATE_f += proc_control_node_P.TransferFcn_A_jp *
      proc_control_node_X.TransferFcn_CSTATE_f;
    _rtXdot->TransferFcn_CSTATE_f += proc_control_node_B.PWMtoN[4];

    // Derivatives for TransferFcn: '<S22>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_e = 0.0;
    _rtXdot->TransferFcn_CSTATE_e += proc_control_node_P.TransferFcn_A_l *
      proc_control_node_X.TransferFcn_CSTATE_e;
    _rtXdot->TransferFcn_CSTATE_e += proc_control_node_B.PWMtoN[5];

    // Derivatives for TransferFcn: '<S23>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_ft = 0.0;
    _rtXdot->TransferFcn_CSTATE_ft += proc_control_node_P.TransferFcn_A_p *
      proc_control_node_X.TransferFcn_CSTATE_ft;
    _rtXdot->TransferFcn_CSTATE_ft += proc_control_node_B.PWMtoN[6];

    // Derivatives for TransferFcn: '<S24>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_fu = 0.0;
    _rtXdot->TransferFcn_CSTATE_fu += proc_control_node_P.TransferFcn_A_n *
      proc_control_node_X.TransferFcn_CSTATE_fu;
    _rtXdot->TransferFcn_CSTATE_fu += proc_control_node_B.PWMtoN[7];

    // Derivatives for Integrator: '<S1>/Integrator'
    _rtXdot->Integrator_CSTATE[0] = proc_control_node_B.Position_dot[0];
    _rtXdot->Integrator_CSTATE[1] = proc_control_node_B.Position_dot[1];
    _rtXdot->Integrator_CSTATE[2] = proc_control_node_B.Position_dot[2];

    // Derivatives for Integrator: '<S1>/Integrator1'
    _rtXdot->Integrator1_CSTATE[0] = proc_control_node_B.Quaternion_dot[0];
    _rtXdot->Integrator1_CSTATE[1] = proc_control_node_B.Quaternion_dot[1];
    _rtXdot->Integrator1_CSTATE[2] = proc_control_node_B.Quaternion_dot[2];
    _rtXdot->Integrator1_CSTATE[3] = proc_control_node_B.Quaternion_dot[3];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[0] = proc_control_node_B.BodyVelocity_dot[0];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[0] = proc_control_node_B.AngularRates_dot[0];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[1] = proc_control_node_B.BodyVelocity_dot[1];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[1] = proc_control_node_B.AngularRates_dot[1];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[2] = proc_control_node_B.BodyVelocity_dot[2];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[2] = proc_control_node_B.AngularRates_dot[2];
  } else {
    {
      real_T *dx;
      int_T i;
      dx = &(((XDot_proc_control_node_T *) (&proc_control_node_M)->derivs)
             ->TransferFcn_CSTATE);
      for (i=0; i < 21; i++) {
        dx[i] = 0.0;
      }
    }
  }

  // End of Derivatives for SubSystem: '<Root>/Modèle Physique'
}

// Model initialize function
void proc_control_nodeModelClass::initialize()
{
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));

  // non-finite (run-time) assignments
  proc_control_node_P.Integrator_UpperSat = rtInf;
  proc_control_node_P.Integrator_LowerSat = rtMinusInf;
  proc_control_node_P.Saturation_UpperSat = rtInf;
  proc_control_node_P.Saturation_LowerSat = rtMinusInf;
  proc_control_node_P.Integrator_UpperSat_a = rtInf;
  proc_control_node_P.Integrator_LowerSat_g = rtMinusInf;
  proc_control_node_P.Saturation_UpperSat_f = rtInf;
  proc_control_node_P.Saturation_LowerSat_f = rtMinusInf;
  proc_control_node_P.Integrator_UpperSat_f = rtInf;
  proc_control_node_P.Integrator_LowerSat_p = rtMinusInf;
  proc_control_node_P.Saturation_UpperSat_m = rtInf;
  proc_control_node_P.Saturation_LowerSat_c = rtMinusInf;

  {
    // Setup solver object
    rtsiSetSimTimeStepPtr(&(&proc_control_node_M)->solverInfo,
                          &(&proc_control_node_M)->Timing.simTimeStep);
    rtsiSetTPtr(&(&proc_control_node_M)->solverInfo, &rtmGetTPtr
                ((&proc_control_node_M)));
    rtsiSetStepSizePtr(&(&proc_control_node_M)->solverInfo,
                       &(&proc_control_node_M)->Timing.stepSize0);
    rtsiSetdXPtr(&(&proc_control_node_M)->solverInfo, &(&proc_control_node_M)
                 ->derivs);
    rtsiSetContStatesPtr(&(&proc_control_node_M)->solverInfo, (real_T **)
                         &(&proc_control_node_M)->contStates);
    rtsiSetNumContStatesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->Sizes.numContStates);
    rtsiSetNumPeriodicContStatesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->Sizes.numPeriodicContStates);
    rtsiSetPeriodicContStateIndicesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->periodicContStateIndices);
    rtsiSetPeriodicContStateRangesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->periodicContStateRanges);
    rtsiSetErrorStatusPtr(&(&proc_control_node_M)->solverInfo,
                          (&rtmGetErrorStatus((&proc_control_node_M))));
    rtsiSetRTModelPtr(&(&proc_control_node_M)->solverInfo, (&proc_control_node_M));
  }

  rtsiSetSimTimeStep(&(&proc_control_node_M)->solverInfo, MAJOR_TIME_STEP);
  (&proc_control_node_M)->intgData.y = (&proc_control_node_M)->odeY;
  (&proc_control_node_M)->intgData.f[0] = (&proc_control_node_M)->odeF[0];
  (&proc_control_node_M)->intgData.f[1] = (&proc_control_node_M)->odeF[1];
  (&proc_control_node_M)->intgData.f[2] = (&proc_control_node_M)->odeF[2];
  (&proc_control_node_M)->contStates = ((X_proc_control_node_T *)
    &proc_control_node_X);
  rtsiSetSolverData(&(&proc_control_node_M)->solverInfo, static_cast<void *>
                    (&(&proc_control_node_M)->intgData));
  rtsiSetSolverName(&(&proc_control_node_M)->solverInfo,"ode3");
  rtmSetTPtr((&proc_control_node_M), &(&proc_control_node_M)->Timing.tArray[0]);
  (&proc_control_node_M)->Timing.stepSize0 = 0.02;
  rtmSetFirstInitCond((&proc_control_node_M), 1);

  {
    static const real_T tmp_g[33]{ 0.0, 1.0, 0.0, 0.1, 1.0, 0.0, 0.2, 1.0, 0.0,
      0.30000000000000004, 1.0, 0.0, 0.4, 1.0, 0.0, 0.5, 1.0, 0.0, 0.6, 1.0, 0.0,
      0.7, 1.0, 0.0, 0.8, 1.0, 0.0, 0.9, 1.0, 0.0, 1.0, 1.0, 0.0 };

    static const real_T tmp_k[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0, 45.0, 0.0,
      0.0, 0.0, 0.0, 0.0, 0.0 };

    static const real_T tmp_l[8]{ 0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5 };

    static const char_T tmp_1[38]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'k', 'i', 'l', 'l', '_', 'm', 'i', 's', 's', 'i', 'o', 'n', '/', 'k',
      'i', 'l', 'l', '_', 's', 'w', 'i', 't', 'c', 'h', '_', 'm', 's', 'g' };

    static const char_T tmp_e[34]{ '/', 'p', 'r', 'o', 'c', '_', 'p', 'l', 'a',
      'n', 'n', 'e', 'r', '/', 's', 'e', 'n', 'd', '_', 't', 'r', 'a', 'j', 'e',
      'c', 't', 'o', 'r', 'y', '_', 'l', 'i', 's', 't' };

    static const char_T tmp_2[33]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 's', 't', 'a', 'r', 't', '_', 's',
      'i', 'm', 'u', 'l', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_n[31]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '/', 't', 'h', 'r', 'u', 's',
      't', 'e', 'r', '_', 'p', 'w', 'm' };

    static const char_T tmp_4[30]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'r', 'e', 's', 'e', 't', '_', 't', 'r', 'a', 'j',
      'e', 'c', 't', 'o', 'r', 'y' };

    static const char_T tmp_6[29]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l',
      'o', 'c', 'i', 't', 'y' };

    static const char_T tmp_i[28]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'd', 'e', 'b', 'u', 'g', '_', 'm', 'p', 'c', '_', 'g',
      'a', 'i', 'n', 's' };

    static const char_T tmp_r[28]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'c', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', '_',
      'i', 'n', 'f', 'o' };

    static const char_T tmp_m[27]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 't', 'a', 'r', 'g', 'e', 't', '_', 'r', 'e', 'a', 'c',
      'h', 'e', 'd' };

    static const char_T tmp_9[26]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'd', 'v', 'l', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l', 'o', 'c', 'i',
      't', 'y' };

    static const char_T tmp_p[26]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'i', 's', '_', 'm', 'p', 'c', '_', 'a', 'c', 't', 'i',
      'v', 'e' };

    static const char_T tmp_q[26]{ '/', 'p', 'r', 'o', 'c', '_', 'p', 'l', 'a',
      'n', 'n', 'e', 'r', '/', 'i', 'n', 'i', 't', 'i', 'a', 'l', '_', 'p', 'o',
      's', 'e' };

    static const char_T tmp_5[25]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f',
      'o' };

    static const char_T tmp_o[23]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'm', 'p', 'c', '_', 's', 't', 'a', 't', 'u', 's' };

    static const char_T tmp_s[23]{ '/', 'g', 'a', 'z', 'e', 'b', 'o', '/', 's',
      'e', 't', '_', 'm', 'o', 'd', 'e', 'l', '_', 's', 't', 'a', 't', 'e' };

    static const char_T tmp[22]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'o', 'd', 'e' };

    static const char_T tmp_7[22]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_8[22]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'i', 'm', 'u', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f', 'o' };

    static const char_T tmp_b[22]{ '/', 't', 'e', 'l', 'e', 'm', 'e', 't', 'r',
      'y', '/', 'a', 'u', 'v', '_', 's', 't', 'a', 't', 'e', 's', '/' };

    static const char_T tmp_c[22]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 's', 'e', 'n', 's', 'o', 'r', '_', 'o', 'n' };

    static const char_T tmp_a[21]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'd', 'e', 'p', 't', 'h', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_f[21]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'a', 'd', 'd', '_', 'p', 'o', 's', 'e' };

    static const char_T tmp_j[20]{ 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r', '_',
      'p', 'o', 'w', 'e', 'r', '/', 'p', 'o', 'w', 'e', 'r' };

    static const char_T tmp_0[19]{ '/', 'p', 'r', 'o', 'c', '_', 'n', 'a', 'v',
      '/', 'r', 'e', 's', 'e', 't', '_', 'p', 'o', 's' };

    static const char_T tmp_3[18]{ '/', 't', 'e', 'l', 'e', 'm', 'e', 't', 'r',
      'y', '/', 'd', 'r', 'y', '_', 'r', 'u', 'n' };

    static const char_T tmp_d[15]{ '/', 's', 'p', 'a', 'c', 'e', 'n', 'a', 'v',
      '/', 't', 'w', 'i', 's', 't' };

    static const char_T tmp_t[8]{ '/', 'p', 'o', 's', '_', 'r', 'o', 't' };

    static const int8_T tmp_h[7]{ 0, 0, 0, 1, 0, 0, 0 };

    real_T Constant2;
    real_T Constant3;
    int32_T i;
    int32_T t;
    uint32_T tseed;
    char_T b_zeroDelimTopic[9];

    // Start for SwitchCase: '<S3>/Switch Case'
    proc_control_node_DW.SwitchCase_ActiveSubsystem = -1;

    // Start for Constant: '<S366>/Constant3'
    Constant3 = proc_control_node_P.Constant3_Value;

    // Start for Constant: '<S366>/Constant2'
    Constant2 = proc_control_node_P.Constant2_Value_m;

    // Start for SwitchCase: '<S9>/Switch Case'
    proc_control_node_DW.SwitchCase_ActiveSubsystem_m = -1;
    proc_control_node_PrevZCX.Integrator_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator1_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator2_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator3_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE = POS_ZCSIG;

    // InitializeConditions for Delay: '<S300>/ '
    std::memcpy(&proc_control_node_DW._DSTATE[0],
                &proc_control_node_P._InitialCondition[0], sizeof(real_T) << 3U);

    // InitializeConditions for Delay: '<S3>/Delay'
    proc_control_node_DW.Delay_DSTATE =
      proc_control_node_P.Delay_InitialCondition_j;
    for (i = 0; i < 6; i++) {
      // InitializeConditions for DiscreteIntegrator: '<S370>/Integrator'
      proc_control_node_DW.Integrator_DSTATE[i] = Constant3;
      if (proc_control_node_DW.Integrator_DSTATE[i] >=
          proc_control_node_P.Integrator_UpperSat_a) {
        proc_control_node_DW.Integrator_DSTATE[i] =
          proc_control_node_P.Integrator_UpperSat_a;
      } else if (proc_control_node_DW.Integrator_DSTATE[i] <=
                 proc_control_node_P.Integrator_LowerSat_g) {
        proc_control_node_DW.Integrator_DSTATE[i] =
          proc_control_node_P.Integrator_LowerSat_g;
      }

      // End of InitializeConditions for DiscreteIntegrator: '<S370>/Integrator' 

      // InitializeConditions for DiscreteIntegrator: '<S371>/Integrator'
      proc_control_node_DW.Integrator_DSTATE_l[i] = Constant2;
      if (proc_control_node_DW.Integrator_DSTATE_l[i] >=
          proc_control_node_P.Integrator_UpperSat_f) {
        proc_control_node_DW.Integrator_DSTATE_l[i] =
          proc_control_node_P.Integrator_UpperSat_f;
      } else if (proc_control_node_DW.Integrator_DSTATE_l[i] <=
                 proc_control_node_P.Integrator_LowerSat_p) {
        proc_control_node_DW.Integrator_DSTATE_l[i] =
          proc_control_node_P.Integrator_LowerSat_p;
      }

      // End of InitializeConditions for DiscreteIntegrator: '<S371>/Integrator' 
    }

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem1'
    // InitializeConditions for Delay: '<S10>/Delay'
    proc_control_node_DW.Delay_DSTATE_e =
      proc_control_node_P.Delay_InitialCondition_c;

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S401>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S407>/Out1' incorporates:
    //   Inport: '<S407>/In1'

    proc_control_node_B.In1_i2 = proc_control_node_P.Out1_Y0_k;

    // End of SystemInitialize for SubSystem: '<S401>/Enabled Subsystem'

    // Start for MATLABSystem: '<S401>/SourceBlock'
    proc_control_node_DW.obj_mt.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_mt.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_lf[i] = tmp[i];
    }

    proc_control_node_B.b_zeroDelimTopic_lf[22] = '\x00';
    Sub_proc_control_node_185_13.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_lf[0], 1);
    proc_control_node_DW.obj_mt.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S401>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe3'
    // Start for MATLABSystem: '<S402>/SourceBlock'
    proc_control_node_DW.obj_oz.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_oz.isInitialized = 1;
    for (i = 0; i < 19; i++) {
      proc_control_node_B.b_zeroDelimTopic_d[i] = tmp_0[i];
    }

    proc_control_node_B.b_zeroDelimTopic_d[19] = '\x00';
    Sub_proc_control_node_185_14.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_d[0], 1);
    proc_control_node_DW.obj_oz.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S402>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe3'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S400>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S406>/Out1' incorporates:
    //   Inport: '<S406>/In1'

    proc_control_node_B.In1_cx = proc_control_node_P.Out1_Y0_h;

    // End of SystemInitialize for SubSystem: '<S400>/Enabled Subsystem'

    // Start for MATLABSystem: '<S400>/SourceBlock'
    proc_control_node_DW.obj_hb.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_hb.isInitialized = 1;
    for (i = 0; i < 38; i++) {
      proc_control_node_B.b_zeroDelimTopic[i] = tmp_1[i];
    }

    proc_control_node_B.b_zeroDelimTopic[38] = '\x00';
    Sub_proc_control_node_185_12.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic[0], 1);
    proc_control_node_DW.obj_hb.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S400>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S10>/startSim'
    // SystemInitialize for Enabled SubSystem: '<S405>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S411>/Out1' incorporates:
    //   Inport: '<S411>/In1'

    proc_control_node_B.In1_n = proc_control_node_P.Out1_Y0_g;

    // End of SystemInitialize for SubSystem: '<S405>/Enabled Subsystem'

    // Start for MATLABSystem: '<S405>/SourceBlock'
    proc_control_node_DW.obj_b.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_b.isInitialized = 1;
    for (i = 0; i < 33; i++) {
      proc_control_node_B.b_zeroDelimTopic_h[i] = tmp_2[i];
    }

    proc_control_node_B.b_zeroDelimTopic_h[33] = '\x00';
    Sub_proc_control_node_185_11.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_h[0], 1);
    proc_control_node_DW.obj_b.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S405>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/startSim'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe5'
    // SystemInitialize for Enabled SubSystem: '<S404>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S410>/Out1' incorporates:
    //   Inport: '<S410>/In1'

    proc_control_node_B.In1_f1 = proc_control_node_P.Out1_Y0_a;

    // End of SystemInitialize for SubSystem: '<S404>/Enabled Subsystem'

    // Start for MATLABSystem: '<S404>/SourceBlock'
    proc_control_node_DW.obj_fx.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_fx.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      proc_control_node_B.b_zeroDelimTopic_mq[i] = tmp_3[i];
    }

    proc_control_node_B.b_zeroDelimTopic_mq[18] = '\x00';
    Sub_proc_control_node_185_270.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_mq[0], 1);
    proc_control_node_DW.obj_fx.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S404>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe5'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe4'
    // Start for MATLABSystem: '<S403>/SourceBlock'
    proc_control_node_DW.obj_h.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_h.isInitialized = 1;
    for (i = 0; i < 30; i++) {
      proc_control_node_B.b_zeroDelimTopic_nq[i] = tmp_4[i];
    }

    proc_control_node_B.b_zeroDelimTopic_nq[30] = '\x00';
    Sub_proc_control_node_185_268.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_nq[0], 1);
    proc_control_node_DW.obj_h.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S403>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe4'

    // Start for MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_DW.obj_mv.initial_mode = proc_control_node_P.mode.init;
    proc_control_node_DW.obj_mv.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S10>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 7; i++) {
      proc_control_node_DW.obj_mv.m_initCond[i] = 0.0;
    }

    proc_control_node_DW.obj_mv.m_mode =
      proc_control_node_DW.obj_mv.initial_mode;
    proc_control_node_DW.obj_mv.m_killStatus = 0.0;
    proc_control_node_DW.obj_mv.m_simulation = 0.0;
    proc_control_node_DW.obj_mv.m_reset = 0.0;
    proc_control_node_DW.obj_mv.m_trajClear = 0.0;
    proc_control_node_DW.obj_mv.m_notDryRun = 1.0;

    // End of InitializeConditions for MATLABSystem: '<S10>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<Root>/Subsystem1'

    // SystemInitialize for IfAction SubSystem: '<S3>/Simulation'
    // SystemInitialize for Atomic SubSystem: '<S58>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S66>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S69>/Out1' incorporates:
    //   Inport: '<S69>/In1'

    proc_control_node_B.In1_pd = proc_control_node_P.Out1_Y0_f;

    // End of SystemInitialize for SubSystem: '<S66>/Enabled Subsystem'

    // Start for MATLABSystem: '<S66>/SourceBlock' incorporates:
    //   MATLABSystem: '<S89>/SinkBlock'

    proc_control_node_DW.obj_i.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_i.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S79>/Publish imu_info'
    for (i = 0; i < 25; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp_k[i] = tmp_5[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp_k[25] = '\x00';

    // End of SystemInitialize for SubSystem: '<S79>/Publish imu_info'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_l[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp_k[i];
    }

    Sub_proc_control_node_31_1241.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_l[0], 1);
    proc_control_node_DW.obj_i.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S66>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S58>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S58>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S68>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S71>/Out1' incorporates:
    //   Inport: '<S71>/In1'

    proc_control_node_B.In1_c = proc_control_node_P.Out1_Y0_ma;

    // End of SystemInitialize for SubSystem: '<S68>/Enabled Subsystem'

    // Start for MATLABSystem: '<S68>/SourceBlock' incorporates:
    //   MATLABSystem: '<S84>/SinkBlock'

    proc_control_node_DW.obj_bg.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_bg.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S77>/Publish'
    for (i = 0; i < 29; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp[i] = tmp_6[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp[29] = '\x00';

    // End of SystemInitialize for SubSystem: '<S77>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 30; i++) {
      proc_control_node_B.b_zeroDelimTopic_m[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp[i];
    }

    Sub_proc_control_node_31_1242.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_m[0], 1);
    proc_control_node_DW.obj_bg.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S68>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S58>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S58>/Subscribe depth'
    // SystemInitialize for Enabled SubSystem: '<S67>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S70>/Out1' incorporates:
    //   Inport: '<S70>/In1'

    proc_control_node_B.In1_om = proc_control_node_P.Out1_Y0_n;

    // End of SystemInitialize for SubSystem: '<S67>/Enabled Subsystem'

    // Start for MATLABSystem: '<S67>/SourceBlock' incorporates:
    //   MATLABSystem: '<S86>/SinkBlock'

    proc_control_node_DW.obj_df.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_df.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S78>/Publish Depth'
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp_m[i] = tmp_7[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp_m[22] = '\x00';

    // End of SystemInitialize for SubSystem: '<S78>/Publish Depth'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_lf[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp_m[i];
    }

    Sub_proc_control_node_31_1305.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_lf[0], 1);
    proc_control_node_DW.obj_df.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S67>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S58>/Subscribe depth'
    // End of SystemInitialize for SubSystem: '<S3>/Simulation'

    // SystemInitialize for IfAction SubSystem: '<S3>/Real System'
    // SystemInitialize for Atomic SubSystem: '<S57>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S60>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S63>/Out1' incorporates:
    //   Inport: '<S63>/In1'

    proc_control_node_B.In1_p = proc_control_node_P.Out1_Y0_l;

    // End of SystemInitialize for SubSystem: '<S60>/Enabled Subsystem'

    // Start for MATLABSystem: '<S60>/SourceBlock'
    proc_control_node_DW.obj_l.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_l.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_lf[i] = tmp_8[i];
    }

    proc_control_node_B.b_zeroDelimTopic_lf[22] = '\x00';
    Sub_proc_control_node_31_5.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_lf[0], 1);
    proc_control_node_DW.obj_l.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S60>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S57>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S57>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S61>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S64>/Out1' incorporates:
    //   Inport: '<S64>/In1'

    proc_control_node_B.In1_i = proc_control_node_P.Out1_Y0_p;

    // End of SystemInitialize for SubSystem: '<S61>/Enabled Subsystem'

    // Start for MATLABSystem: '<S61>/SourceBlock'
    proc_control_node_DW.obj_dh.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_dh.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_hc[i] = tmp_9[i];
    }

    proc_control_node_B.b_zeroDelimTopic_hc[26] = '\x00';
    Sub_proc_control_node_31_1235.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_hc[0], 1);
    proc_control_node_DW.obj_dh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S61>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S57>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S57>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S62>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S65>/Out1' incorporates:
    //   Inport: '<S65>/In1'

    proc_control_node_B.In1_e = proc_control_node_P.Out1_Y0_nb;

    // End of SystemInitialize for SubSystem: '<S62>/Enabled Subsystem'

    // Start for MATLABSystem: '<S62>/SourceBlock'
    proc_control_node_DW.obj_ow.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ow.isInitialized = 1;
    for (i = 0; i < 21; i++) {
      proc_control_node_B.b_zeroDelimTopic_nt[i] = tmp_a[i];
    }

    proc_control_node_B.b_zeroDelimTopic_nt[21] = '\x00';
    Sub_proc_control_node_31_1302.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_nt[0], 1);
    proc_control_node_DW.obj_ow.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S62>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S57>/Subscribe2'
    // End of SystemInitialize for SubSystem: '<S3>/Real System'

    // SystemInitialize for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
    // Start for Probe: '<S309>/Probe'
    proc_control_node_B.Probe[0] = 0.02;
    proc_control_node_B.Probe[1] = 0.0;

    // InitializeConditions for DiscreteIntegrator: '<S314>/Integrator'
    proc_control_node_DW.Integrator_IC_LOADING = 1U;

    // InitializeConditions for UnitDelay: '<S302>/UD'
    //
    //  Block description for '<S302>/UD':
    //
    //   Store in Global RAM

    proc_control_node_DW.UD_DSTATE =
      proc_control_node_P.DiscreteDerivative_ICPrevScal_m;

    // End of SystemInitialize for SubSystem: '<S8>/AHRS//Detph Mesurments'

    // SystemInitialize for Enabled SubSystem: '<S8>/DVL Mesurments'
    // InitializeConditions for Delay: '<S335>/Delay'
    proc_control_node_DW.Delay_DSTATE_i =
      proc_control_node_P.Delay_InitialCondition_l;

    // SystemInitialize for Enabled SubSystem: '<S335>/Subsystem2'
    // SystemInitialize for Fcn: '<S339>/q0' incorporates:
    //   Outport: '<S338>/Quat'

    proc_control_node_B.q0 = proc_control_node_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S339>/q1' incorporates:
    //   Outport: '<S338>/Quat'

    proc_control_node_B.q1 = proc_control_node_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S339>/q2' incorporates:
    //   Outport: '<S338>/Quat'

    proc_control_node_B.q2 = proc_control_node_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S339>/q3' incorporates:
    //   Outport: '<S338>/Quat'

    proc_control_node_B.q3 = proc_control_node_P.Quat_Y0;

    // End of SystemInitialize for SubSystem: '<S335>/Subsystem2'

    // SystemInitialize for Outport: '<S296>/enable'
    proc_control_node_B.enable = proc_control_node_P.enable_Y0;

    // SystemInitialize for Sum: '<S341>/Sum' incorporates:
    //   Outport: '<S296>/Body Velocity'

    proc_control_node_B.Sum = proc_control_node_P.BodyVelocity_Y0;

    // SystemInitialize for Sum: '<S342>/Sum' incorporates:
    //   Outport: '<S296>/Body Velocity'

    proc_control_node_B.Sum_o = proc_control_node_P.BodyVelocity_Y0;

    // SystemInitialize for Sum: '<S343>/Sum' incorporates:
    //   Outport: '<S296>/Body Velocity'

    proc_control_node_B.Sum_c = proc_control_node_P.BodyVelocity_Y0;

    // End of SystemInitialize for SubSystem: '<S8>/DVL Mesurments'

    // SystemInitialize for Enabled SubSystem: '<S3>/Subsystem'
    // InitializeConditions for Memory: '<S75>/Memory'
    proc_control_node_DW.Memory_PreviousInput_i =
      proc_control_node_P.MinMaxRunningResettable_vinit;

    // InitializeConditions for Memory: '<S76>/Memory'
    proc_control_node_DW.Memory_PreviousInput_f =
      proc_control_node_P.MinMaxRunningResettable1_vinit;

    // SystemInitialize for Outport: '<S59>/y'
    proc_control_node_B.y = proc_control_node_P.y_Y0;

    // End of SystemInitialize for SubSystem: '<S3>/Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S8>/Subsystem'
    // Start for DataStoreMemory: '<S349>/DataStoreMemory - P'
    std::memcpy(&proc_control_node_DW.P[0],
                &proc_control_node_P.DataStoreMemoryP_InitialValue[0], 169U *
                sizeof(real_T));
    for (i = 0; i < 13; i++) {
      // Start for DataStoreMemory: '<S349>/DataStoreMemory - x'
      proc_control_node_DW.x[i] =
        proc_control_node_P.DataStoreMemoryx_InitialValue[i];

      // SystemInitialize for DataStoreRead: '<S352>/Data Store Read' incorporates:
      //   DataStoreMemory: '<S349>/DataStoreMemory - x'
      //   Outport: '<S299>/xhat'

      proc_control_node_B.DataStoreRead[i] = proc_control_node_P.xhat_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S8>/Subsystem'

    // SystemInitialize for Enabled SubSystem: '<Root>/Sensor Manager'
    // SystemInitialize for Atomic SubSystem: '<S129>/Publish'
    // Start for MATLABSystem: '<S135>/SinkBlock'
    proc_control_node_DW.obj_ag.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ag.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_lf[i] = tmp_b[i];
    }

    proc_control_node_B.b_zeroDelimTopic_lf[22] = '\x00';
    Pub_proc_control_node_163.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_lf[0], 1);
    proc_control_node_DW.obj_ag.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S135>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S129>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S128>/Publish'
    // Start for MATLABSystem: '<S131>/SinkBlock'
    proc_control_node_DW.obj_e.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_e.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_lf[i] = tmp_c[i];
    }

    proc_control_node_B.b_zeroDelimTopic_lf[22] = '\x00';
    Pub_proc_control_node_116.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_lf[0], 1);
    proc_control_node_DW.obj_e.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S131>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S128>/Publish'

    // SystemInitialize for SignalConversion generated from: '<S6>/Output' incorporates:
    //   Outport: '<S6>/Output'

    proc_control_node_B.qS2W[0] = proc_control_node_P.Output_Y0.qS2W[0];
    proc_control_node_B.qS2W[1] = proc_control_node_P.Output_Y0.qS2W[1];
    proc_control_node_B.qS2W[2] = proc_control_node_P.Output_Y0.qS2W[2];
    proc_control_node_B.qS2W[3] = proc_control_node_P.Output_Y0.qS2W[3];

    // End of SystemInitialize for SubSystem: '<Root>/Sensor Manager'

    // SystemInitialize for Atomic SubSystem: '<S360>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S367>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S372>/Out1' incorporates:
    //   Inport: '<S372>/In1'

    proc_control_node_B.In1_od = proc_control_node_P.Out1_Y0_pb;

    // End of SystemInitialize for SubSystem: '<S367>/Enabled Subsystem'

    // Start for MATLABSystem: '<S367>/SourceBlock'
    proc_control_node_DW.obj_c.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_c.isInitialized = 1;
    for (i = 0; i < 15; i++) {
      proc_control_node_B.b_zeroDelimTopic_f[i] = tmp_d[i];
    }

    proc_control_node_B.b_zeroDelimTopic_f[15] = '\x00';
    Sub_proc_control_node_184_1122.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_f[0], 2);
    proc_control_node_DW.obj_c.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S367>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S360>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S9>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S359>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S365>/Out1' incorporates:
    //   Inport: '<S365>/In1'

    proc_control_node_B.In1 = proc_control_node_P.Out1_Y0;

    // End of SystemInitialize for SubSystem: '<S359>/Enabled Subsystem'

    // Start for MATLABSystem: '<S359>/SourceBlock'
    proc_control_node_DW.obj_d.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_d.isInitialized = 1;
    for (i = 0; i < 34; i++) {
      proc_control_node_B.b_zeroDelimTopic_n[i] = tmp_e[i];
    }

    proc_control_node_B.b_zeroDelimTopic_n[34] = '\x00';
    Sub_proc_control_node_184_1581.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_n[0], 1);
    proc_control_node_DW.obj_d.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S359>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S9>/Subscribe'

    // SystemInitialize for IfAction SubSystem: '<S9>/SubsystemAuto'
    // InitializeConditions for UnitDelay: '<S373>/Delay Input1'
    //
    //  Block description for '<S373>/Delay Input1':
    //
    //   Store in Global RAM

    proc_control_node_DW.DelayInput1_DSTATE =
      proc_control_node_P.DetectRisePositive_vinit;

    // Start for MATLABSystem: '<S361>/MATLAB System'
    proc_control_node_DW.obj_o.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S361>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    proc_control_node_DW.obj_o.dummy = 999.0;

    //  Chiffre NULL
    for (i = 0; i < 13; i++) {
      proc_control_node_DW.obj_o.emptyArray[i] =
        proc_control_node_DW.obj_o.dummy;
    }

    //  Vecteur pose NULL
    proc_control_node_DW.obj_o.targetReachedCount = 0.0;
    for (i = 0; i < 7; i++) {
      proc_control_node_DW.obj_o.initialPose[i] = 0.0;
    }

    //  Buffer trajectoire
    for (i = 0; i < 78000; i++) {
      proc_control_node_DW.obj_o.poseBuffer[i] =
        proc_control_node_DW.obj_o.dummy;
    }

    proc_control_node_DW.obj_o.bufferCount = 0.0;
    proc_control_node_DW.obj_o.done = false;
    proc_control_node_DW.obj_o.init = false;

    // End of InitializeConditions for MATLABSystem: '<S361>/MATLAB System'

    // SystemInitialize for SignalConversion generated from: '<S361>/MATLAB System' incorporates:
    //   Outport: '<S361>/isTrajDone'

    proc_control_node_B.TmpMLSysMemLayoutBufferAtMATL_m =
      proc_control_node_P.isTrajDone_Y0;
    for (i = 0; i < 7; i++) {
      // SystemInitialize for SignalConversion generated from: '<S361>/MATLAB System' incorporates:
      //   Outport: '<S361>/initWpt'

      proc_control_node_B.TmpMLSysMemLayoutBufferAtMATLAB[i] =
        proc_control_node_P.initWpt_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S9>/SubsystemAuto'

    // SystemInitialize for IfAction SubSystem: '<S9>/singleWpts Trajectory'
    // InitializeConditions for Delay: '<S363>/Delay1'
    proc_control_node_DW.Delay1_DSTATE_c =
      proc_control_node_P.Delay1_InitialCondition_k;

    // SystemInitialize for Atomic SubSystem: '<S363>/Subscribe'
    // Start for MATLABSystem: '<S379>/SourceBlock'
    proc_control_node_DW.obj_hd.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_hd.isInitialized = 1;
    for (i = 0; i < 21; i++) {
      proc_control_node_B.b_zeroDelimTopic_nt[i] = tmp_f[i];
    }

    proc_control_node_B.b_zeroDelimTopic_nt[21] = '\x00';
    Sub_proc_control_node_184_1168.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_nt[0], 1);
    proc_control_node_DW.obj_hd.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S379>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S363>/Subscribe'

    // SystemInitialize for Enabled SubSystem: '<S363>/Subsystem1'
    // SystemInitialize for DataTypeConversion: '<S380>/Data Type Conversion1' incorporates:
    //   Outport: '<S380>/Out1'

    proc_control_node_B.DataTypeConversion1[0] = proc_control_node_P.Out1_Y0_i;
    proc_control_node_B.DataTypeConversion1[1] = proc_control_node_P.Out1_Y0_i;

    // SystemInitialize for DataTypeConversion: '<S380>/Data Type Conversion2' incorporates:
    //   Outport: '<S380>/Out1'

    proc_control_node_B.DataTypeConversion2 = proc_control_node_P.Out1_Y0_i;

    // SystemInitialize for Enabled SubSystem: '<S363>/Pre-traitement'
    for (i = 0; i < 6; i++) {
      // SystemInitialize for DataTypeConversion: '<S380>/Data Type Conversion' incorporates:
      //   Outport: '<S380>/Out1'

      proc_control_node_B.DataTypeConversion[i] = proc_control_node_P.Out1_Y0_i;

      // SystemInitialize for Selector: '<S376>/Selector' incorporates:
      //   DataTypeConversion: '<S380>/Data Type Conversion'
      //   Outport: '<S376>/linWpts'
      //   Outport: '<S380>/Out1'

      proc_control_node_B.Selector[i] = proc_control_node_P.linWpts_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S363>/Subsystem1'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for Selector: '<S376>/Selector1' incorporates:
      //   Outport: '<S376>/RotWpts'

      proc_control_node_B.Selector1[i] = proc_control_node_P.RotWpts_Y0;
    }

    // SystemInitialize for Concatenate: '<S376>/Matrix Concatenate' incorporates:
    //   Outport: '<S376>/time'

    proc_control_node_B.MatrixConcatenate[0] = proc_control_node_P.time_Y0;
    proc_control_node_B.MatrixConcatenate[1] = proc_control_node_P.time_Y0;
    for (i = 0; i < 7; i++) {
      // SystemInitialize for Selector: '<S376>/Selector4' incorporates:
      //   Outport: '<S376>/target'

      proc_control_node_B.Selector4[i] = proc_control_node_P.target_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S363>/Pre-traitement'

    // SystemInitialize for Resettable SubSystem: '<S363>/Trajectory generator'
    // InitializeConditions for DiscreteIntegrator: '<S381>/Discrete-Time Integrator' 
    proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
      proc_control_node_P.DiscreteTimeIntegrator_IC;

    // Start for MATLABSystem: '<S381>/Rotation Trajectory'
    std::memcpy(&proc_control_node_DW.obj_j.TimeScaling[0], &tmp_g[0], 33U *
                sizeof(real_T));
    proc_control_node_DW.obj_j.isInitialized = 1;
    proc_control_node_DW.obj_j.TunablePropsChanged = false;

    // Start for MATLABSystem: '<S399>/Polynomial Trajectory1'
    std::memset(&proc_control_node_DW.obj_jo.AccelerationBoundaryCondition[0], 0,
                10U * sizeof(real_T));
    proc_control_node_DW.obj_jo.isInitialized = 0;
    for (i = 0; i < 6; i++) {
      proc_control_node_DW.obj_jo.VelocityBoundaryCondition[i] =
        proc_control_node_P.PolynomialTrajectory1_VelocityB[i];
    }

    proc_control_node_DW.obj_jo.isInitialized = 1;
    proc_control_node_DW.obj_jo.TunablePropsChanged = false;

    // End of Start for MATLABSystem: '<S399>/Polynomial Trajectory1'
    // End of SystemInitialize for SubSystem: '<S363>/Trajectory generator'

    // InitializeConditions for MATLABSystem: '<S363>/MATLAB System1'
    // ========================================================================== 
    //  Fonctions Principales
    // ========================================================================== 
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    //  Fonction Reset
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 18; i++) {
      proc_control_node_DW.obj_a.poseList[i] = 999.0;
    }

    proc_control_node_DW.obj_a.poseList[0] = 0.0;
    proc_control_node_DW.obj_a.poseList[2] = 0.0;
    proc_control_node_DW.obj_a.poseList[4] = 0.0;
    proc_control_node_DW.obj_a.poseList[6] = 1.0;
    proc_control_node_DW.obj_a.poseList[8] = 0.0;
    proc_control_node_DW.obj_a.poseList[10] = 0.0;
    proc_control_node_DW.obj_a.poseList[12] = 0.0;
    proc_control_node_DW.obj_a.poseList[14] = 0.0;
    proc_control_node_DW.obj_a.poseList[16] = 0.0;

    // initCond(1,1:7);
    for (i = 0; i < 7; i++) {
      proc_control_node_DW.obj_a.initcond[i] = tmp_h[i];
    }

    proc_control_node_DW.obj_a.i = 2.0;

    // End of InitializeConditions for MATLABSystem: '<S363>/MATLAB System1'

    // Start for MATLABSystem: '<S363>/MATLAB System'
    proc_control_node_DW.obj.linearConvergence =
      proc_control_node_P.MATLABSystem_linearConvergence;
    proc_control_node_DW.obj.quaternionConvergence =
      proc_control_node_P.MATLABSystem_quaternionConverge;
    proc_control_node_DW.obj.TargetThreshold =
      proc_control_node_P.MATLABSystem_TargetThreshold;
    proc_control_node_DW.obj.isInitialized = 1;

    //  Perform one-time calculations, such as computing constants
    proc_control_node_DW.obj.generationNumber = 0.0;
    proc_control_node_DW.obj.dummy = 999.0;

    //  Chiffre NULL
    for (i = 0; i < 13; i++) {
      proc_control_node_DW.obj.emptyArray[i] = proc_control_node_DW.obj.dummy;
    }

    //  Vecteur pose NULL
    proc_control_node_DW.obj.targetReachedCount = 0.0;

    //  Buffer trajectoire
    for (i = 0; i < 78013; i++) {
      proc_control_node_DW.obj.poseBuffer[i] = proc_control_node_DW.obj.dummy;
    }

    proc_control_node_DW.obj.bufferCount = 0.0;
    proc_control_node_DW.obj.done = false;
    proc_control_node_DW.obj.init = 0.0;

    // End of Start for MATLABSystem: '<S363>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S9>/singleWpts Trajectory'

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Start for SwitchCase: '<S147>/Switch Case'
    //  Fonction reset
    //  Initialize / reset discrete-state properties
    proc_control_node_DW.SwitchCase_ActiveSubsystem_l = -1;

    // InitializeConditions for Delay: '<S7>/Delay'
    for (i = 0; i < 8; i++) {
      proc_control_node_DW.Delay_DSTATE_g[i] =
        proc_control_node_P.Delay_InitialCondition_jd[i];
    }

    // End of InitializeConditions for Delay: '<S7>/Delay'

    // InitializeConditions for Delay: '<S149>/Delay'
    proc_control_node_DW.Delay_DSTATE_k =
      proc_control_node_P.Delay_InitialCondition_i;

    // SystemInitialize for Enabled SubSystem: '<S7>/MPC manager'
    // SystemInitialize for Atomic SubSystem: '<S148>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S292>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S294>/Out1' incorporates:
    //   Inport: '<S294>/In1'

    proc_control_node_B.In1_o = proc_control_node_P.Out1_Y0_c;

    // End of SystemInitialize for SubSystem: '<S292>/Enabled Subsystem'

    // Start for MATLABSystem: '<S292>/SourceBlock'
    proc_control_node_DW.obj_hh.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_hh.isInitialized = 1;
    for (i = 0; i < 28; i++) {
      proc_control_node_B.b_zeroDelimTopic_ku[i] = tmp_i[i];
    }

    proc_control_node_B.b_zeroDelimTopic_ku[28] = '\x00';
    Sub_proc_control_node_182_1643.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_ku[0], 1);
    proc_control_node_DW.obj_hh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S292>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S148>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S148>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S291>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S293>/Out1' incorporates:
    //   Inport: '<S293>/In1'

    proc_control_node_B.In1_f = proc_control_node_P.Out1_Y0_m;

    // End of SystemInitialize for SubSystem: '<S291>/Enabled Subsystem'

    // Start for MATLABSystem: '<S291>/SourceBlock'
    proc_control_node_DW.obj_k.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_k.isInitialized = 1;
    for (i = 0; i < 20; i++) {
      proc_control_node_B.b_zeroDelimTopic_g[i] = tmp_j[i];
    }

    proc_control_node_B.b_zeroDelimTopic_g[20] = '\x00';
    Sub_proc_control_node_182_1620.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_g[0], 1);
    proc_control_node_DW.obj_k.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S291>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S148>/Subscribe'

    // Start for MATLABSystem: '<S148>/MPC manager'
    proc_control_node_DW.obj_f.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S148>/MPC manager'
    //         %% Fonction execute a chaque iteration
    //  Perform one-time calculations, such as computing constants
    //         %% Fonction Reset
    //  Initialize discrete state
    proc_control_node_DW.obj_f.init = 0.0;
    std::memset(&proc_control_node_DW.obj_f.currentFaultCount[0], 0, sizeof
                (real_T) << 3U);
    for (i = 0; i < 8; i++) {
      proc_control_node_DW.obj_f.isThrusterFault[i] = false;
    }

    // initialiser les gains debug
    std::memcpy(&proc_control_node_DW.obj_f.rosOV[0], &tmp_k[0], 13U * sizeof
                (real_T));
    for (i = 0; i < 8; i++) {
      proc_control_node_DW.obj_f.rosMV[i] = 0.2;
      proc_control_node_DW.obj_f.rosMVR[i] = tmp_l[i];

      // SystemInitialize for MATLABSystem: '<S148>/MPC manager' incorporates:
      //   Outport: '<S148>/MPC param'

      proc_control_node_B.mvmin[i] = proc_control_node_P.MPCparam_Y0.mvmin[i];

      // SystemInitialize for MATLABSystem: '<S148>/MPC manager' incorporates:
      //   Outport: '<S148>/MPC param'

      proc_control_node_B.mvmax[i] = proc_control_node_P.MPCparam_Y0.mvmax[i];
    }

    // End of InitializeConditions for MATLABSystem: '<S148>/MPC manager'

    // SystemInitialize for MATLABSystem: '<S148>/MPC manager' incorporates:
    //   Outport: '<S148>/MPC param'

    std::memcpy(&proc_control_node_B.ywt[0],
                &proc_control_node_P.MPCparam_Y0.ywt[0], 13U * sizeof(real_T));

    // SystemInitialize for MATLABSystem: '<S148>/MPC manager' incorporates:
    //   Outport: '<S148>/MPC param'

    std::memcpy(&proc_control_node_B.mvwt[0],
                &proc_control_node_P.MPCparam_Y0.mvwt[0], sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S148>/MPC manager' incorporates:
    //   Outport: '<S148>/MPC param'

    std::memcpy(&proc_control_node_B.dmwwt[0],
                &proc_control_node_P.MPCparam_Y0.dmwwt[0], sizeof(real_T) << 3U);
    for (i = 0; i < 8; i++) {
      // SystemInitialize for MATLABSystem: '<S148>/MPC manager' incorporates:
      //   Outport: '<S148>/MPC param'

      proc_control_node_B.thrustersStatus[i] =
        proc_control_node_P.MPCparam_Y0.thrustersStatus[i];
    }

    // End of SystemInitialize for SubSystem: '<S7>/MPC manager'

    // SystemInitialize for IfAction SubSystem: '<S147>/Adaptive MPC quaternion ' 
    // InitializeConditions for Memory: '<S202>/Memory'
    for (i = 0; i < 32; i++) {
      proc_control_node_DW.Memory_PreviousInput_g[i] =
        proc_control_node_P.Memory_InitialCondition[i];
    }

    // End of InitializeConditions for Memory: '<S202>/Memory'

    // InitializeConditions for UnitDelay: '<S202>/last_mv'
    std::memcpy(&proc_control_node_DW.last_mv_DSTATE_f[0],
                &proc_control_node_P.last_mv_InitialCondition[0], sizeof(real_T)
                << 3U);

    // InitializeConditions for Delay: '<S151>/Delay1' incorporates:
    //   UnitDelay: '<S202>/last_mv'

    std::memcpy(&proc_control_node_DW.Delay1_DSTATE_e[0],
                &proc_control_node_P.Delay1_InitialCondition[0], sizeof(real_T) <<
                3U);

    // End of SystemInitialize for SubSystem: '<S147>/Adaptive MPC quaternion '

    // SystemInitialize for IfAction SubSystem: '<S147>/JoyStick OpenLoop'
    // InitializeConditions for UnitDelay: '<S232>/UD'
    //
    //  Block description for '<S232>/UD':
    //
    //   Store in Global RAM

    for (i = 0; i < 6; i++) {
      proc_control_node_DW.UD_DSTATE_i[i] =
        proc_control_node_P.DiscreteDerivative_ICPrevScaled;
    }

    // End of InitializeConditions for UnitDelay: '<S232>/UD'

    // Start for MATLABSystem: '<S153>/MATLAB System'
    proc_control_node_DW.obj_m.k = proc_control_node_P.MATLABSystem_k;
    std::memcpy(&proc_control_node_DW.obj_m.binv[0], &proc_control_node_P.binv[0],
                48U * sizeof(real_T));
    proc_control_node_DW.obj_m.mass = proc_control_node_P.physics.mass;
    proc_control_node_DW.obj_m.volume = proc_control_node_P.physics.volume;
    proc_control_node_DW.obj_m.height = proc_control_node_P.physics.height;
    std::memcpy(&proc_control_node_DW.obj_m.I[0],
                &proc_control_node_P.physics.I[0], 9U * sizeof(real_T));
    proc_control_node_DW.obj_m.RG[0] = proc_control_node_P.physics.RG[0];
    proc_control_node_DW.obj_m.RB[0] = proc_control_node_P.physics.RB[0];
    proc_control_node_DW.obj_m.RG[1] = proc_control_node_P.physics.RG[1];
    proc_control_node_DW.obj_m.RB[1] = proc_control_node_P.physics.RB[1];
    proc_control_node_DW.obj_m.RG[2] = proc_control_node_P.physics.RG[2];
    proc_control_node_DW.obj_m.RB[2] = proc_control_node_P.physics.RB[2];
    for (i = 0; i < 6; i++) {
      proc_control_node_DW.obj_m.AddedMass[i] =
        proc_control_node_P.physics.AddedMass[i];
      proc_control_node_DW.obj_m.CDL[i] = proc_control_node_P.physics.CDL[i];
      proc_control_node_DW.obj_m.CDQ[i] = proc_control_node_P.physics.CDQ[i];
    }

    proc_control_node_DW.obj_m.AF[0] = proc_control_node_P.physics.AF[0];
    proc_control_node_DW.obj_m.AF[1] = proc_control_node_P.physics.AF[1];
    proc_control_node_DW.obj_m.AF[2] = proc_control_node_P.physics.AF[2];
    proc_control_node_DW.obj_m.g = proc_control_node_P.physics.g;
    proc_control_node_DW.obj_m.rho = proc_control_node_P.physics.rho;
    proc_control_node_DW.obj_m.isInitialized = 1;

    // End of Start for MATLABSystem: '<S153>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S147>/JoyStick OpenLoop'

    // SystemInitialize for IfAction SubSystem: '<S147>/LTV MPC quaternion '
    // InitializeConditions for UnitDelay: '<S236>/last_mv'
    //  Perform one-time calculations, such as computing constants
    // [M,C,D,Gq] = AUVModelMatrices(in1,in2)
    //  Initialize / reset discrete-state properties
    std::memcpy(&proc_control_node_DW.last_mv_DSTATE_n[0],
                &proc_control_node_P.last_mv_InitialCondition_o[0], sizeof
                (real_T) << 3U);

    // InitializeConditions for Delay: '<S154>/Delay1'
    std::memcpy(&proc_control_node_DW.Delay1_DSTATE_g[0],
                &proc_control_node_P.Delay1_InitialCondition_n[0], 88U * sizeof
                (real_T));

    // InitializeConditions for Memory: '<S236>/Memory'
    for (i = 0; i < 32; i++) {
      proc_control_node_DW.Memory_PreviousInput_p[i] =
        proc_control_node_P.Memory_InitialCondition_p[i];
    }

    // End of InitializeConditions for Memory: '<S236>/Memory'
    // End of SystemInitialize for SubSystem: '<S147>/LTV MPC quaternion '

    // SystemInitialize for IfAction SubSystem: '<S147>/Quaternion Non linear MPC (Not for codegen)' 
    // InitializeConditions for Delay: '<S155>/Delay'
    std::memcpy(&proc_control_node_DW.Delay_DSTATE_a[0],
                &proc_control_node_P.Delay_InitialCondition[0], sizeof(real_T) <<
                3U);

    // InitializeConditions for Delay: '<S269>/mv_Delay'
    proc_control_node_DW.icLoad = true;

    // InitializeConditions for Delay: '<S269>/x_Delay'
    proc_control_node_DW.icLoad_a = true;

    // InitializeConditions for Delay: '<S269>/slack_delay'
    proc_control_node_DW.icLoad_j = true;

    // End of SystemInitialize for SubSystem: '<S147>/Quaternion Non linear MPC (Not for codegen)' 

    // SystemInitialize for IfAction SubSystem: '<S147>/Adaptive MPC Euler '
    // InitializeConditions for Memory: '<S160>/Memory'
    for (i = 0; i < 32; i++) {
      proc_control_node_DW.Memory_PreviousInput[i] =
        proc_control_node_P.Memory_InitialCondition_c[i];
    }

    // End of InitializeConditions for Memory: '<S160>/Memory'

    // InitializeConditions for UnitDelay: '<S160>/last_mv'
    std::memcpy(&proc_control_node_DW.last_mv_DSTATE[0],
                &proc_control_node_P.last_mv_InitialCondition_j[0], sizeof
                (real_T) << 3U);

    // InitializeConditions for Delay: '<S150>/Delay1' incorporates:
    //   UnitDelay: '<S160>/last_mv'

    std::memcpy(&proc_control_node_DW.Delay1_DSTATE[0],
                &proc_control_node_P.Delay1_InitialCondition_l[0], sizeof(real_T)
                << 3U);

    // End of SystemInitialize for SubSystem: '<S147>/Adaptive MPC Euler '
    for (i = 0; i < 10; i++) {
      // SystemInitialize for Merge: '<S147>/Merge'
      proc_control_node_B.Merge[i] = proc_control_node_P.Merge_InitialOutput;
    }

    // End of SystemInitialize for SubSystem: '<Root>/Subsystem Controller'

    // SystemInitialize for Merge: '<S9>/Merge1'
    proc_control_node_B.isReached = proc_control_node_P.Merge1_InitialOutput;

    // SystemInitialize for Enabled SubSystem: '<Root>/Send Data to ROS'
    // SystemInitialize for Atomic SubSystem: '<S5>/Publish1'
    // Start for MATLABSystem: '<S119>/SinkBlock'
    proc_control_node_DW.obj_lfs.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_lfs.isInitialized = 1;
    for (i = 0; i < 27; i++) {
      proc_control_node_B.b_zeroDelimTopic_j[i] = tmp_m[i];
    }

    proc_control_node_B.b_zeroDelimTopic_j[27] = '\x00';
    Pub_proc_control_node_122.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_j[0], 1);
    proc_control_node_DW.obj_lfs.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S119>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish1'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish2'
    // Start for MATLABSystem: '<S120>/SinkBlock'
    proc_control_node_DW.obj_p.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_p.isInitialized = 1;
    for (i = 0; i < 31; i++) {
      proc_control_node_B.b_zeroDelimTopic_k[i] = tmp_n[i];
    }

    proc_control_node_B.b_zeroDelimTopic_k[31] = '\x00';
    Pub_proc_control_node_104.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_k[0], 1);
    proc_control_node_DW.obj_p.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S120>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish2'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish3'
    // Start for MATLABSystem: '<S121>/SinkBlock'
    proc_control_node_DW.obj_mj.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_mj.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_i[i] = tmp_o[i];
    }

    proc_control_node_B.b_zeroDelimTopic_i[23] = '\x00';
    Pub_proc_control_node_105.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_i[0], 1);
    proc_control_node_DW.obj_mj.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S121>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish3'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish4'
    // Start for MATLABSystem: '<S122>/SinkBlock'
    proc_control_node_DW.obj_lf.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_lf.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_hc[i] = tmp_p[i];
    }

    proc_control_node_B.b_zeroDelimTopic_hc[26] = '\x00';
    Pub_proc_control_node_106.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_hc[0], 1);
    proc_control_node_DW.obj_lf.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S122>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish4'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish5'
    // Start for MATLABSystem: '<S123>/SinkBlock'
    proc_control_node_DW.obj_cd.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_cd.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_hc[i] = tmp_q[i];
    }

    proc_control_node_B.b_zeroDelimTopic_hc[26] = '\x00';
    Pub_proc_control_node_322.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_hc[0], 1);
    proc_control_node_DW.obj_cd.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S123>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish5'

    // SystemInitialize for Atomic SubSystem: '<S5>/Subsystem'
    // SystemInitialize for Atomic SubSystem: '<S124>/Publish5'
    // Start for MATLABSystem: '<S127>/SinkBlock'
    proc_control_node_DW.obj_i1.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_i1.isInitialized = 1;
    for (i = 0; i < 28; i++) {
      proc_control_node_B.b_zeroDelimTopic_ku[i] = tmp_r[i];
    }

    proc_control_node_B.b_zeroDelimTopic_ku[28] = '\x00';
    Pub_proc_control_node_287.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_ku[0], 1);
    proc_control_node_DW.obj_i1.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S127>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S124>/Publish5'
    // End of SystemInitialize for SubSystem: '<S5>/Subsystem'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for SignalConversion generated from: '<S5>/mv' incorporates:
      //   Outport: '<S5>/mv'

      proc_control_node_B.BufferToMakeInportVirtual_Ins_e[i] =
        proc_control_node_P.mv_Y0;

      // SystemInitialize for SignalConversion generated from: '<S5>/thrust' incorporates:
      //   Outport: '<S5>/mv'
      //   Outport: '<S5>/thrust'
      //   SignalConversion generated from: '<S5>/mv'

      proc_control_node_B.BufferToMakeInportVirtual_Inser[i] =
        proc_control_node_P.thrust_Y0;
    }

    // End of SystemInitialize for SubSystem: '<Root>/Send Data to ROS'

    // SystemInitialize for Enabled SubSystem: '<Root>/Modèle Physique'
    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[0] =
      proc_control_node_P.InitialBodyvelocity_Value[0];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[0] =
      proc_control_node_P.InitialAngularRates_Value[0];

    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[1] =
      proc_control_node_P.InitialBodyvelocity_Value[1];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[1] =
      proc_control_node_P.InitialAngularRates_Value[1];

    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[2] =
      proc_control_node_P.InitialBodyvelocity_Value[2];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[2] =
      proc_control_node_P.InitialAngularRates_Value[2];

    // InitializeConditions for TransferFcn: '<S17>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE = 0.0;

    // InitializeConditions for TransferFcn: '<S18>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_o = 0.0;

    // InitializeConditions for TransferFcn: '<S19>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_p = 0.0;

    // InitializeConditions for TransferFcn: '<S20>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_a = 0.0;

    // InitializeConditions for TransferFcn: '<S21>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_f = 0.0;

    // InitializeConditions for TransferFcn: '<S22>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_e = 0.0;

    // InitializeConditions for TransferFcn: '<S23>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_ft = 0.0;

    // InitializeConditions for TransferFcn: '<S24>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_fu = 0.0;

    // InitializeConditions for UniformRandomNumber: '<S14>/X Drift'
    i = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedX) >>
      16U);
    t = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedX) &
      32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_node_P.dSeedX) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed = tseed;
    proc_control_node_DW.XDrift_NextOutput = (proc_control_node_P.dMaxX -
      proc_control_node_P.dMinX) * rt_urand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed) + proc_control_node_P.dMinX;

    // End of InitializeConditions for UniformRandomNumber: '<S14>/X Drift'

    // InitializeConditions for UniformRandomNumber: '<S14>/Y Drift'
    i = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedY) >>
      16U);
    t = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedY) &
      32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_node_P.dSeedY) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_a = tseed;
    proc_control_node_DW.YDrift_NextOutput = (proc_control_node_P.dMaxY -
      proc_control_node_P.dMinY) * rt_urand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_a) + proc_control_node_P.dMinY;

    // End of InitializeConditions for UniformRandomNumber: '<S14>/Y Drift'

    // InitializeConditions for Integrator: '<S1>/Integrator' incorporates:
    //   Integrator: '<S1>/Integrator1'

    if (rtmIsFirstInitCond((&proc_control_node_M))) {
      proc_control_node_X.Integrator_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[3] = 0.0;
    }

    proc_control_node_DW.Integrator_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator'

    // InitializeConditions for Integrator: '<S1>/Integrator1'
    proc_control_node_DW.Integrator1_IWORK = 1;

    // InitializeConditions for Integrator: '<S1>/Integrator2' incorporates:
    //   Integrator: '<S1>/Integrator3'

    if (rtmIsFirstInitCond((&proc_control_node_M))) {
      proc_control_node_X.Integrator2_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator2_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator2_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[2] = 0.0;
    }

    proc_control_node_DW.Integrator2_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator2'

    // InitializeConditions for Integrator: '<S1>/Integrator3'
    proc_control_node_DW.Integrator3_IWORK = 1;

    // InitializeConditions for RandomNumber: '<S25>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>
                (proc_control_node_P.BandLimitedWhiteNoise_seed) -
                (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_j = tseed;
    proc_control_node_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_j) * proc_control_node_P.WhiteNoise_StdDev
      + proc_control_node_P.WhiteNoise_Mean;

    // End of InitializeConditions for RandomNumber: '<S25>/White Noise'

    // InitializeConditions for RandomNumber: '<S26>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise1_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise1_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>
                (proc_control_node_P.BandLimitedWhiteNoise1_seed) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_d = tseed;
    proc_control_node_DW.NextOutput_b = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_d) *
      proc_control_node_P.WhiteNoise_StdDev_d +
      proc_control_node_P.WhiteNoise_Mean_e;

    // End of InitializeConditions for RandomNumber: '<S26>/White Noise'

    // InitializeConditions for RandomNumber: '<S27>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise2_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise2_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>
                (proc_control_node_P.BandLimitedWhiteNoise2_seed) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_e = tseed;
    proc_control_node_DW.NextOutput_g = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_e) *
      proc_control_node_P.WhiteNoise_StdDev_e +
      proc_control_node_P.WhiteNoise_Mean_c;

    // End of InitializeConditions for RandomNumber: '<S27>/White Noise'

    // InitializeConditions for RandomNumber: '<S28>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise3_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise3_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>
                (proc_control_node_P.BandLimitedWhiteNoise3_seed) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_n = tseed;
    proc_control_node_DW.NextOutput_l = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_n) *
      proc_control_node_P.WhiteNoise_StdDev_j +
      proc_control_node_P.WhiteNoise_Mean_p;

    // End of InitializeConditions for RandomNumber: '<S28>/White Noise'

    // InitializeConditions for RandomNumber: '<S29>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise4_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise4_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>
                (proc_control_node_P.BandLimitedWhiteNoise4_seed) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_b = tseed;
    proc_control_node_DW.NextOutput_e = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_b) *
      proc_control_node_P.WhiteNoise_StdDev_p +
      proc_control_node_P.WhiteNoise_Mean_l;

    // End of InitializeConditions for RandomNumber: '<S29>/White Noise'

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_node_B.y_h[0] =
      proc_control_node_P.CleanOutput_Y0.signal1.Quaternion[0];
    proc_control_node_B.y_h[1] =
      proc_control_node_P.CleanOutput_Y0.signal1.Quaternion[1];
    proc_control_node_B.y_h[2] =
      proc_control_node_P.CleanOutput_Y0.signal1.Quaternion[2];
    proc_control_node_B.y_h[3] =
      proc_control_node_P.CleanOutput_Y0.signal1.Quaternion[3];

    // SystemInitialize for Sum: '<S16>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_node_B.Quaternion[0] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[0];
    proc_control_node_B.Quaternion[1] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[1];
    proc_control_node_B.Quaternion[2] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[2];
    proc_control_node_B.Quaternion[3] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[3];

    // End of SystemInitialize for SubSystem: '<Root>/Modèle Physique'

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S80>/Publish'
    // Start for MATLABSystem: '<S92>/SinkBlock'
    proc_control_node_DW.obj_fh.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_fh.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_i[i] = tmp_s[i];
    }

    proc_control_node_B.b_zeroDelimTopic_i[23] = '\x00';
    Pub_proc_control_node_63.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_i[0], 1);
    proc_control_node_DW.obj_fh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S92>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S80>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S81>/Publish'
    // Start for MATLABSystem: '<S111>/SinkBlock'
    proc_control_node_DW.obj_ap.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ap.isInitialized = 1;
    for (i = 0; i < 8; i++) {
      b_zeroDelimTopic[i] = tmp_t[i];
    }

    b_zeroDelimTopic[8] = '\x00';
    Pub_proc_control_node_75.createPublisher(&b_zeroDelimTopic[0], 1);
    proc_control_node_DW.obj_ap.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S111>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S81>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S77>/Publish'
    // Start for MATLABSystem: '<S84>/SinkBlock'
    proc_control_node_DW.obj_kw.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_kw.isInitialized = 1;
    Pub_proc_control_node_41.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp[0], 1);
    proc_control_node_DW.obj_kw.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S77>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S78>/Publish Depth'
    // Start for MATLABSystem: '<S86>/SinkBlock'
    proc_control_node_DW.obj_kd.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_kd.isInitialized = 1;
    Pub_proc_control_node_243.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp_m[0], 1);
    proc_control_node_DW.obj_kd.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S78>/Publish Depth'

    // SystemInitialize for Atomic SubSystem: '<S79>/Publish imu_info'
    // Start for MATLABSystem: '<S89>/SinkBlock'
    proc_control_node_DW.obj_ab.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ab.isInitialized = 1;
    Pub_proc_control_node_47.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp_k[0], 1);
    proc_control_node_DW.obj_ab.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S79>/Publish imu_info'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
  }

  // set "at time zero" to false
  if (rtmIsFirstInitCond((&proc_control_node_M))) {
    rtmSetFirstInitCond((&proc_control_node_M), 0);
  }
}

// Model terminate function
void proc_control_nodeModelClass::terminate()
{
  // Terminate for Atomic SubSystem: '<Root>/Subsystem1'
  // Terminate for Atomic SubSystem: '<S10>/Subscribe2'
  // Terminate for MATLABSystem: '<S401>/SourceBlock'
  if (!proc_control_node_DW.obj_mt.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_mt.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S401>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe3'
  // Terminate for MATLABSystem: '<S402>/SourceBlock'
  if (!proc_control_node_DW.obj_oz.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_oz.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S402>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe3'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe1'
  // Terminate for MATLABSystem: '<S400>/SourceBlock'
  if (!proc_control_node_DW.obj_hb.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_hb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S400>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S10>/startSim'
  // Terminate for MATLABSystem: '<S405>/SourceBlock'
  if (!proc_control_node_DW.obj_b.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_b.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S405>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/startSim'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe5'
  // Terminate for MATLABSystem: '<S404>/SourceBlock'
  if (!proc_control_node_DW.obj_fx.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_fx.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S404>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe5'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe4'
  // Terminate for MATLABSystem: '<S403>/SourceBlock'
  if (!proc_control_node_DW.obj_h.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_h.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S403>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe4'
  // End of Terminate for SubSystem: '<Root>/Subsystem1'

  // Terminate for IfAction SubSystem: '<S3>/Simulation'
  // Terminate for Atomic SubSystem: '<S58>/Subscribe'
  // Terminate for MATLABSystem: '<S66>/SourceBlock'
  if (!proc_control_node_DW.obj_i.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_i.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S66>/SourceBlock'
  // End of Terminate for SubSystem: '<S58>/Subscribe'

  // Terminate for Atomic SubSystem: '<S58>/Subscribe1'
  // Terminate for MATLABSystem: '<S68>/SourceBlock'
  if (!proc_control_node_DW.obj_bg.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_bg.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S68>/SourceBlock'
  // End of Terminate for SubSystem: '<S58>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S58>/Subscribe depth'
  // Terminate for MATLABSystem: '<S67>/SourceBlock'
  if (!proc_control_node_DW.obj_df.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_df.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S67>/SourceBlock'
  // End of Terminate for SubSystem: '<S58>/Subscribe depth'
  // End of Terminate for SubSystem: '<S3>/Simulation'

  // Terminate for IfAction SubSystem: '<S3>/Real System'
  // Terminate for Atomic SubSystem: '<S57>/Subscribe'
  // Terminate for MATLABSystem: '<S60>/SourceBlock'
  if (!proc_control_node_DW.obj_l.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_l.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S60>/SourceBlock'
  // End of Terminate for SubSystem: '<S57>/Subscribe'

  // Terminate for Atomic SubSystem: '<S57>/Subscribe1'
  // Terminate for MATLABSystem: '<S61>/SourceBlock'
  if (!proc_control_node_DW.obj_dh.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_dh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S61>/SourceBlock'
  // End of Terminate for SubSystem: '<S57>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S57>/Subscribe2'
  // Terminate for MATLABSystem: '<S62>/SourceBlock'
  if (!proc_control_node_DW.obj_ow.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ow.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S62>/SourceBlock'
  // End of Terminate for SubSystem: '<S57>/Subscribe2'
  // End of Terminate for SubSystem: '<S3>/Real System'

  // Terminate for Enabled SubSystem: '<Root>/Sensor Manager'
  // Terminate for Atomic SubSystem: '<S129>/Publish'
  // Terminate for MATLABSystem: '<S135>/SinkBlock'
  if (!proc_control_node_DW.obj_ag.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ag.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S135>/SinkBlock'
  // End of Terminate for SubSystem: '<S129>/Publish'

  // Terminate for Atomic SubSystem: '<S128>/Publish'
  // Terminate for MATLABSystem: '<S131>/SinkBlock'
  if (!proc_control_node_DW.obj_e.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_e.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S131>/SinkBlock'
  // End of Terminate for SubSystem: '<S128>/Publish'
  // End of Terminate for SubSystem: '<Root>/Sensor Manager'

  // Terminate for Atomic SubSystem: '<S360>/Subscribe2'
  // Terminate for MATLABSystem: '<S367>/SourceBlock'
  if (!proc_control_node_DW.obj_c.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_c.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S367>/SourceBlock'
  // End of Terminate for SubSystem: '<S360>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S9>/Subscribe'
  // Terminate for MATLABSystem: '<S359>/SourceBlock'
  if (!proc_control_node_DW.obj_d.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_d.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S359>/SourceBlock'
  // End of Terminate for SubSystem: '<S9>/Subscribe'

  // Terminate for IfAction SubSystem: '<S9>/singleWpts Trajectory'
  // Terminate for Atomic SubSystem: '<S363>/Subscribe'
  // Terminate for MATLABSystem: '<S379>/SourceBlock'
  if (!proc_control_node_DW.obj_hd.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_hd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S379>/SourceBlock'
  // End of Terminate for SubSystem: '<S363>/Subscribe'
  // End of Terminate for SubSystem: '<S9>/singleWpts Trajectory'

  // Terminate for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Terminate for Enabled SubSystem: '<S7>/MPC manager'
  // Terminate for Atomic SubSystem: '<S148>/Subscribe1'
  // Terminate for MATLABSystem: '<S292>/SourceBlock'
  if (!proc_control_node_DW.obj_hh.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_hh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S292>/SourceBlock'
  // End of Terminate for SubSystem: '<S148>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S148>/Subscribe'
  // Terminate for MATLABSystem: '<S291>/SourceBlock'
  if (!proc_control_node_DW.obj_k.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_k.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S291>/SourceBlock'
  // End of Terminate for SubSystem: '<S148>/Subscribe'
  // End of Terminate for SubSystem: '<S7>/MPC manager'
  // End of Terminate for SubSystem: '<Root>/Subsystem Controller'

  // Terminate for Enabled SubSystem: '<Root>/Send Data to ROS'
  // Terminate for Atomic SubSystem: '<S5>/Publish1'
  // Terminate for MATLABSystem: '<S119>/SinkBlock'
  if (!proc_control_node_DW.obj_lfs.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_lfs.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S119>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish1'

  // Terminate for Atomic SubSystem: '<S5>/Publish2'
  // Terminate for MATLABSystem: '<S120>/SinkBlock'
  if (!proc_control_node_DW.obj_p.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_p.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S120>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish2'

  // Terminate for Atomic SubSystem: '<S5>/Publish3'
  // Terminate for MATLABSystem: '<S121>/SinkBlock'
  if (!proc_control_node_DW.obj_mj.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_mj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S121>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish3'

  // Terminate for Atomic SubSystem: '<S5>/Publish4'
  // Terminate for MATLABSystem: '<S122>/SinkBlock'
  if (!proc_control_node_DW.obj_lf.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_lf.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S122>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish4'

  // Terminate for Atomic SubSystem: '<S5>/Publish5'
  // Terminate for MATLABSystem: '<S123>/SinkBlock'
  if (!proc_control_node_DW.obj_cd.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_cd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S123>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish5'

  // Terminate for Atomic SubSystem: '<S5>/Subsystem'
  // Terminate for Atomic SubSystem: '<S124>/Publish5'
  // Terminate for MATLABSystem: '<S127>/SinkBlock'
  if (!proc_control_node_DW.obj_i1.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_i1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S127>/SinkBlock'
  // End of Terminate for SubSystem: '<S124>/Publish5'
  // End of Terminate for SubSystem: '<S5>/Subsystem'
  // End of Terminate for SubSystem: '<Root>/Send Data to ROS'

  // Terminate for Enabled SubSystem: '<Root>/ROS Output'
  // Terminate for Atomic SubSystem: '<S80>/Publish'
  // Terminate for MATLABSystem: '<S92>/SinkBlock'
  if (!proc_control_node_DW.obj_fh.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_fh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S92>/SinkBlock'
  // End of Terminate for SubSystem: '<S80>/Publish'

  // Terminate for Atomic SubSystem: '<S81>/Publish'
  // Terminate for MATLABSystem: '<S111>/SinkBlock'
  if (!proc_control_node_DW.obj_ap.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ap.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S111>/SinkBlock'
  // End of Terminate for SubSystem: '<S81>/Publish'

  // Terminate for Atomic SubSystem: '<S77>/Publish'
  // Terminate for MATLABSystem: '<S84>/SinkBlock'
  if (!proc_control_node_DW.obj_kw.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_kw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S84>/SinkBlock'
  // End of Terminate for SubSystem: '<S77>/Publish'

  // Terminate for Atomic SubSystem: '<S78>/Publish Depth'
  // Terminate for MATLABSystem: '<S86>/SinkBlock'
  if (!proc_control_node_DW.obj_kd.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_kd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S86>/SinkBlock'
  // End of Terminate for SubSystem: '<S78>/Publish Depth'

  // Terminate for Atomic SubSystem: '<S79>/Publish imu_info'
  // Terminate for MATLABSystem: '<S89>/SinkBlock'
  if (!proc_control_node_DW.obj_ab.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ab.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S89>/SinkBlock'
  // End of Terminate for SubSystem: '<S79>/Publish imu_info'
  // End of Terminate for SubSystem: '<Root>/ROS Output'
}

// Constructor
proc_control_nodeModelClass::proc_control_nodeModelClass() :
  proc_control_node_B(),
  proc_control_node_DW(),
  proc_control_node_X(),
  proc_control_node_PrevZCX(),
  proc_control_node_M()
{
  // Currently there is no constructor body generated.
}

// Destructor
proc_control_nodeModelClass::~proc_control_nodeModelClass()
{
  // Currently there is no destructor body generated.
}

// Real-Time Model get method
proc_control_nodeModelClass::RT_MODEL_proc_control_node_T
  * proc_control_nodeModelClass::getRTM()
{
  return (&proc_control_node_M);
}

//
// File trailer for generated code.
//
// [EOF]
//
